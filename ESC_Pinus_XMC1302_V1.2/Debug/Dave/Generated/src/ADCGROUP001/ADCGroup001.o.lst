   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADCGroup001.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADCGROUP001_Init,"ax",%progbits
  18              		.align	2
  19              		.global	ADCGROUP001_Init
  20              		.code	16
  21              		.thumb_func
  23              	ADCGROUP001_Init:
  24              	.LFB38:
  25              		.file 1 "../Dave/Generated/src/ADCGROUP001/ADCGroup001.c"
   1:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
   2:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  DAVE App Name : ADCGROUP001       App Version: 1.0.28               
   3:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
   6:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
   7:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
   8:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*CODE_BLOCK_BEGIN[ADCGROUP001.c]*/
   9:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  10:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  11:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  12:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  All rights reserved.                                                         **
  13:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  14:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  Redistribution and use in source and binary forms, with or without           **
  15:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  modification,are permitted provided that the following conditions are met:   **
  16:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  17:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  18:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  this list of conditions and the following disclaimer.                        **
  19:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  20:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  this list of conditions and the following disclaimer in the documentation    **
  21:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  and/or other materials provided with the distribution.                       **
  22:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  23:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  may be used to endorse or promote products derived from this software without**
  24:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  specific prior written permission.                                           **
  25:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  26:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  27:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  28:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  29:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  30:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  31:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  32:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  33:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  34:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  35:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  36:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  37:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  38:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  To improve the quality of the software, users are encouraged to share        **
  39:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  40:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  dave@infineon.com).                                                          **
  41:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  42:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ********************************************************************************
  43:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  44:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  45:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  46:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  47:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** COMPILER : Compiler Independent                                            **
  48:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  49:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** AUTHOR   : DAVE App Developer                                              **
  50:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  51:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  52:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  53:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** MODIFICATION DATE : Jun 09, 2014                                           **
  54:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  55:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
  56:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  57:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  58:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Author(s) Identity                                    **
  59:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ********************************************************************************
  60:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  61:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** Initials     Name                                                          **
  62:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** CM           DAVE App Developer                                            **
  63:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** SSAM         Sridhar Sampath                                               **
  64:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** ---------------------------------------------------------------------------**
  65:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  66:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
  67:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
  68:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @file ADCGROUP001.c
  69:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  70:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @brief This file contains ADCGROUP001 App API definitions
  71:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  72:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * Change History:
  73:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * Date       version       Details
  74:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 01-Jan-2013   1.0.6    Initial code added for XMC1000
  75:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 29-Jan-2013   1.0.8    Merging with XMC1000 done
  76:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 09-Apr-2013   1.0.12   Channel selection style is removed and made EMXCSS=1
  77:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        always
  78:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 24-Apr-2013   1.0.14   Ported to XMC4500 step AB
  79:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 11-Jun-2013   1.0.16   1.Variable name in manifest is corrected.
  80:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        2.In the Header comment section device name changed to
  81:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                         XMC1000.
  82:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        3.copy right year changed to 2013
  83:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 11-Sep-2013   1.0.20   1. Analog converter control(ANONC) Code sequence
  84:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                           corrected.
  85:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        2. Added support for the following devices under
  86:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        XMC1200 and XMC1300 Series - XMC1201, XMC1202, XMC1301
  87:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 29-Jan-2014   1.0.24   Error codes are added in various functions, that can 
  88:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        be logged with DBG002 App.
  89:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * 09-Jun-2014   1.0.28   ADC conversion time calculations are updated for XMC1X 
  90:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        devices.Order of post calibration function call is updated 
  91:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *                        for XMC1X device
  92:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
  93:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  94:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  95:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ** INCLUDE FILES                                                             **
  96:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ******************************************************************************/
  97:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #include <DAVE3.h>
  98:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  99:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 100:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*****************************************************************************
 101:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 102:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *****************************************************************************/
 103:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*These definitions are included here to avoid compilation errors,
 104:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 105:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  as empty*/
 106:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #ifndef _DBG002_H_
 107:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 108:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_RegisterCallBack(A,B,C)
 109:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_I(e)
 110:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IG(e,g)
 111:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IH(e,h)
 112:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IP(e,p)
 113:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IGH(e,g,h)
 114:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IGP(e,g,p)
 115:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IHP(e,h,p)
 116:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IGHP(e,g,h,p)
 117:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_N(e)
 118:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NG(e,g)
 119:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NH(e,h)
 120:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NP(e,p)
 121:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NGH(e,g,h)
 122:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NGP(e,g,p)
 123:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NHP(e,h,p)
 124:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_NGHP(e,g,h,p)
 125:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_ID(e)
 126:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_IS(e)
 127:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_ISG(e,g)
 128:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 129:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 130:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 131:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 132:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 133:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 134:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status)
 135:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_FUNCTION_EXIT(GID, Status)
 136:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 137:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define DBG002_MESSAGEID_LITERAL
 138:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 139:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #endif/* End of defintions of dummy Debug Log macros*/
 140:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 141:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
 142:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @cond INTERNAL_DOCS
 143:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
 144:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 145:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 146:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Type Definitions                              **
 147:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 148:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #define APP_GID DBG002_GID_ADCGROUP001
 149:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 150:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 151:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                 Private Function Declarations:
 152:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 153:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
 154:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @brief This function initializes the app.
 155:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
 156:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @param [in] HandlePtr pointer to the Instance variable<BR>
 157:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
 158:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @return  NOne <BR>
 159:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
 160:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * <b>Reentrancy:  Yes</b><BR>
 161:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * <b>Sync/Async:  Synchronous</b><BR>
 162:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
 163:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 164:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_lInit(const ADCGROUP001_HandleType *HandlePtr );
 165:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 166:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 167:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Global Constant Definitions                           **
 168:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 169:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 170:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 171:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Global Variable Definitions                           **
 172:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 173:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 174:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 175:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Constant Definitions                          **
 176:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 177:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 178:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 179:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                 Function like macro definitions                            **
 180:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 181:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 182:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 183:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Function Definitions                          **
 184:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 185:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 186:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 187:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Public Function Definitions                           **
 188:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 189:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 190:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 191:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 192:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /** This function initializes the app */
 193:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_Init(void)
 194:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
  26              		.loc 1 194 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
 195:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*Initialize the global app */
 196:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   ADCGLOB001_Init();
  36              		.loc 1 196 0
  37 0004 FFF7FEFF 		bl	ADCGLOB001_Init
 197:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 198:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   ADCGLOB001_StartUpCalibrationInit();
  38              		.loc 1 198 0
  39 0008 FFF7FEFF 		bl	ADCGLOB001_StartUpCalibrationInit
 199:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 200:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 		
 201:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   ADCGROUP001_lInit(&ADCGROUP001_Handle0);   //master
  40              		.loc 1 201 0
  41 000c 024B     		ldr	r3, .L2
  42 000e 181C     		mov	r0, r3
  43 0010 FFF7FEFF 		bl	ADCGROUP001_lInit
 202:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 203:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
  44              		.loc 1 203 0
  45 0014 BD46     		mov	sp, r7
  46              		@ sp needed for prologue
  47 0016 80BD     		pop	{r7, pc}
  48              	.L3:
  49              		.align	2
  50              	.L2:
  51 0018 00000000 		.word	ADCGROUP001_Handle0
  52              		.cfi_endproc
  53              	.LFE38:
  55              		.section	.text.ADCGROUP001_lInit,"ax",%progbits
  56              		.align	2
  57              		.global	ADCGROUP001_lInit
  58              		.code	16
  59              		.thumb_func
  61              	ADCGROUP001_lInit:
  62              	.LFB39:
 204:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 205:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*
 206:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * This Function initializes the adcgroup App. Local function is used to
 207:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * initialize all the instances of the app.
 208:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
 209:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_lInit(const ADCGROUP001_HandleType *HandlePtr )
 210:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
  63              		.loc 1 210 0
  64              		.cfi_startproc
  65 0000 80B5     		push	{r7, lr}
  66              	.LCFI2:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 86B0     		sub	sp, sp, #24
  71              	.LCFI3:
  72              		.cfi_def_cfa_offset 32
  73 0004 00AF     		add	r7, sp, #0
  74              	.LCFI4:
  75              		.cfi_def_cfa_register 7
  76 0006 7860     		str	r0, [r7, #4]
 211:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
  77              		.loc 1 211 0
  78 0008 0123     		mov	r3, #1
  79 000a 7B61     		str	r3, [r7, #20]
 212:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 213:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 214:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /* Pointer to the VADC Kernel Structure */
 215:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 216:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 217:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
  80              		.loc 1 217 0
  81 000c 7B68     		ldr	r3, [r7, #4]
  82 000e 1B69     		ldr	r3, [r3, #16]
  83 0010 3B61     		str	r3, [r7, #16]
 218:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
  84              		.loc 1 218 0
  85 0012 7B68     		ldr	r3, [r7, #4]
  86 0014 5B69     		ldr	r3, [r3, #20]
  87 0016 FB60     		str	r3, [r7, #12]
 219:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 220:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_UNINITIALIZED))
  88              		.loc 1 220 0
  89 0018 7B68     		ldr	r3, [r7, #4]
  90 001a DB68     		ldr	r3, [r3, #12]
  91 001c 1B78     		ldrb	r3, [r3]
  92 001e 002B     		cmp	r3, #0
  93 0020 00D0     		beq	.LCB58
  94 0022 B8E0     		b	.L4	@long jump
  95              	.LCB58:
 221:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 222:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 223:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Post calibration enable\disable */
 224:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGlobalPtr->GLOBCFG, VADC_GLOBCFG_DPCAL0_Msk,
  96              		.loc 1 224 0
  97 0024 7B68     		ldr	r3, [r7, #4]
  98 0026 5B78     		ldrb	r3, [r3, #1]
  99 0028 1A1C     		mov	r2, r3
 100 002a 7B68     		ldr	r3, [r7, #4]
 101 002c 1B78     		ldrb	r3, [r3]
 102 002e 1033     		add	r3, r3, #16
 103 0030 9A40     		lsl	r2, r2, r3
 104 0032 8023     		mov	r3, #128
 105 0034 5B02     		lsl	r3, r3, #9
 106 0036 1A40     		and	r2, r3
 107 0038 3969     		ldr	r1, [r7, #16]
 108 003a 8023     		mov	r3, #128
 109 003c C958     		ldr	r1, [r1, r3]
 110 003e 574B     		ldr	r3, .L6
 111 0040 0B40     		and	r3, r1
 112 0042 111C     		mov	r1, r2
 113 0044 1943     		orr	r1, r3
 114 0046 3A69     		ldr	r2, [r7, #16]
 115 0048 8023     		mov	r3, #128
 116 004a D150     		str	r1, [r2, r3]
 225:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + HandlePtr->kGroupNo), HandlePtr->kPostCalibration);
 226:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       
 227:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* (a) If ADC SYNC functionality is enabled, the groups which are configured as master and slav
 228:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      *     are not enabled for conversion here. 
 229:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * (b) If any non sync groups configured along with sync groups. All  non sync groups get 
 230:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      *     initialised here itself.
 231:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * (c) If no sync group exits in the configuration, the ADCSYNC preprocessor macro wont be gene
 232:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      *     in the sync configuration file. Hence all the configured groups for normal conversion
 233:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      *     is enabled for conversion.    */ 
 234:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #ifdef ADCSYNC
 235:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if ( !( (ADCSYNC>>HandlePtr->kGroupNo) % 2 ) )
 236:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #endif
 237:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 	{
 238:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /*  Converter is permanently on */
 239:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ARBCFG, VADC_G_ARBCFG_ANONC_Msk,
 117              		.loc 1 239 0
 118 004c 7B68     		ldr	r3, [r7, #4]
 119 004e DB7A     		ldrb	r3, [r3, #11]
 120 0050 1A1C     		mov	r2, r3
 121 0052 0323     		mov	r3, #3
 122 0054 1A40     		and	r2, r3
 123 0056 F968     		ldr	r1, [r7, #12]
 124 0058 8023     		mov	r3, #128
 125 005a CB58     		ldr	r3, [r1, r3]
 126 005c 0321     		mov	r1, #3
 127 005e 8B43     		bic	r3, r1
 128 0060 111C     		mov	r1, r2
 129 0062 1943     		orr	r1, r3
 130 0064 FA68     		ldr	r2, [r7, #12]
 131 0066 8023     		mov	r3, #128
 132 0068 D150     		str	r1, [r2, r3]
 240:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****            VADC_G_ARBCFG_ANONC_Pos, (uint32_t)HandlePtr->kAnalogConverterCtrl);
 241:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   	}
 242:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 243:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Arbitration mode */
 244:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->ARBCFG, VADC_G_ARBCFG_ARBM_Msk, VADC_G_ARBCFG_ARBM_Pos,
 133              		.loc 1 244 0
 134 006a 7B68     		ldr	r3, [r7, #4]
 135 006c 9B78     		ldrb	r3, [r3, #2]
 136 006e DA01     		lsl	r2, r3, #7
 137 0070 FF23     		mov	r3, #255
 138 0072 1A40     		and	r2, r3
 139 0074 F968     		ldr	r1, [r7, #12]
 140 0076 8023     		mov	r3, #128
 141 0078 CB58     		ldr	r3, [r1, r3]
 142 007a 8021     		mov	r1, #128
 143 007c 8B43     		bic	r3, r1
 144 007e 111C     		mov	r1, r2
 145 0080 1943     		orr	r1, r3
 146 0082 FA68     		ldr	r2, [r7, #12]
 147 0084 8023     		mov	r3, #128
 148 0086 D150     		str	r1, [r2, r3]
 245:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                          (uint32_t)HandlePtr->kArbitrationMode);
 246:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 247:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Group specific boundary 0 */
 248:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY0_Msk,
 149              		.loc 1 248 0
 150 0088 7B68     		ldr	r3, [r7, #4]
 151 008a 9B88     		ldrh	r3, [r3, #4]
 152 008c 1B05     		lsl	r3, r3, #20
 153 008e 1A0D     		lsr	r2, r3, #20
 154 0090 F968     		ldr	r1, [r7, #12]
 155 0092 B823     		mov	r3, #184
 156 0094 CB58     		ldr	r3, [r1, r3]
 157 0096 1B0B     		lsr	r3, r3, #12
 158 0098 1B03     		lsl	r3, r3, #12
 159 009a 111C     		mov	r1, r2
 160 009c 1943     		orr	r1, r3
 161 009e FA68     		ldr	r2, [r7, #12]
 162 00a0 B823     		mov	r3, #184
 163 00a2 D150     		str	r1, [r2, r3]
 249:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                VADC_G_BOUND_BOUNDARY0_Pos, (uint32_t)HandlePtr->kGrpBoundary0);
 250:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 251:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Group specific boundary 1 */
 252:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY1_Msk,
 164              		.loc 1 252 0
 165 00a4 7B68     		ldr	r3, [r7, #4]
 166 00a6 DB88     		ldrh	r3, [r3, #6]
 167 00a8 1A04     		lsl	r2, r3, #16
 168 00aa 3D4B     		ldr	r3, .L6+4
 169 00ac 1A40     		and	r2, r3
 170 00ae F968     		ldr	r1, [r7, #12]
 171 00b0 B823     		mov	r3, #184
 172 00b2 C958     		ldr	r1, [r1, r3]
 173 00b4 3B4B     		ldr	r3, .L6+8
 174 00b6 0B40     		and	r3, r1
 175 00b8 111C     		mov	r1, r2
 176 00ba 1943     		orr	r1, r3
 177 00bc FA68     		ldr	r2, [r7, #12]
 178 00be B823     		mov	r3, #184
 179 00c0 D150     		str	r1, [r2, r3]
 253:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                VADC_G_BOUND_BOUNDARY1_Pos, (uint32_t)HandlePtr->kGrpBoundary1);
 254:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 255:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 256:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Enable write control for EMUX configuration.
 257:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set the EMUX coding scheme, EMUX mode, EMUX start select.
 258:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 259:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         VADCGroupPtr->EMUXCTR |= (uint32_t)((((uint32_t)1 << VADC_G_EMUXCTR_EMXWC_Pos) & VADC_G_EMU
 180              		.loc 1 259 0
 181 00c2 FA68     		ldr	r2, [r7, #12]
 182 00c4 F823     		mov	r3, #248
 183 00c6 5B00     		lsl	r3, r3, #1
 184 00c8 D258     		ldr	r2, [r2, r3]
 260:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                             (((uint32_t)HandlePtr->kEMUXCodeScheme \
 185              		.loc 1 260 0
 186 00ca 7B68     		ldr	r3, [r7, #4]
 187 00cc 1B7A     		ldrb	r3, [r3, #8]
 261:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                   << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EM
 188              		.loc 1 261 0
 189 00ce 1907     		lsl	r1, r3, #28
 190 00d0 8023     		mov	r3, #128
 191 00d2 5B05     		lsl	r3, r3, #21
 192 00d4 1940     		and	r1, r3
 262:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                             (((uint32_t)HandlePtr->kEMUXStartSelect  \
 193              		.loc 1 262 0
 194 00d6 7B68     		ldr	r3, [r7, #4]
 195 00d8 5B7A     		ldrb	r3, [r3, #9]
 263:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                   << VADC_G_EMUXCTR_EMUXSET_Pos) & VADC_G_EMUXCTR_E
 196              		.loc 1 263 0
 197 00da 181C     		mov	r0, r3
 198 00dc 0723     		mov	r3, #7
 199 00de 0340     		and	r3, r0
 261:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                   << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EM
 200              		.loc 1 261 0
 201 00e0 1943     		orr	r1, r3
 264:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                             (((uint32_t)HandlePtr->kEMUXMode \
 202              		.loc 1 264 0
 203 00e2 7B68     		ldr	r3, [r7, #4]
 204 00e4 9B7A     		ldrb	r3, [r3, #10]
 265:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                   << VADC_G_EMUXCTR_EMUXMODE_Pos) & VADC_G_EMUXCTR_
 205              		.loc 1 265 0
 206 00e6 9806     		lsl	r0, r3, #26
 207 00e8 C023     		mov	r3, #192
 208 00ea 1B05     		lsl	r3, r3, #20
 209 00ec 0340     		and	r3, r0
 263:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                   << VADC_G_EMUXCTR_EMUXSET_Pos) & VADC_G_EMUXCTR_E
 210              		.loc 1 263 0
 211 00ee 0B43     		orr	r3, r1
 259:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         VADCGroupPtr->EMUXCTR |= (uint32_t)((((uint32_t)1 << VADC_G_EMUXCTR_EMXWC_Pos) & VADC_G_EMU
 212              		.loc 1 259 0
 213 00f0 1343     		orr	r3, r2
 214 00f2 C022     		mov	r2, #192
 215 00f4 1206     		lsl	r2, r2, #24
 216 00f6 111C     		mov	r1, r2
 217 00f8 1943     		orr	r1, r3
 218 00fa FA68     		ldr	r2, [r7, #12]
 219 00fc F823     		mov	r3, #248
 220 00fe 5B00     		lsl	r3, r3, #1
 221 0100 D150     		str	r1, [r2, r3]
 266:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                             (((uint32_t)1 << VADC_G_EMUXCTR_EMXCSS_Pos) & VADC_G_EM
 267:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 268:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set conversion mode, EMUX conversion mode, sample time control,
 269:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set EMUX sample time control for class 0.
 270:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 271:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass0 \
 222              		.loc 1 271 0
 223 0102 FA68     		ldr	r2, [r7, #12]
 224 0104 A023     		mov	r3, #160
 225 0106 D258     		ldr	r2, [r2, r3]
 226 0108 7B68     		ldr	r3, [r7, #4]
 227 010a 1B7E     		ldrb	r3, [r3, #24]
 272:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 228              		.loc 1 272 0
 229 010c 1902     		lsl	r1, r3, #8
 230 010e E023     		mov	r3, #224
 231 0110 DB00     		lsl	r3, r3, #3
 232 0112 1940     		and	r1, r3
 273:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXConversionModeClass0 \
 233              		.loc 1 273 0
 234 0114 7B68     		ldr	r3, [r7, #4]
 235 0116 1B7F     		ldrb	r3, [r3, #28]
 274:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 236              		.loc 1 274 0
 237 0118 1806     		lsl	r0, r3, #24
 238 011a E023     		mov	r3, #224
 239 011c DB04     		lsl	r3, r3, #19
 240 011e 0340     		and	r3, r0
 272:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 241              		.loc 1 272 0
 242 0120 1943     		orr	r1, r3
 275:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kSampleTimeControlClass0 \
 243              		.loc 1 275 0
 244 0122 7B68     		ldr	r3, [r7, #4]
 245 0124 9B7E     		ldrb	r3, [r3, #26]
 276:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCS_Pos) & VADC_G_ICLASS_STCS_Msk
 246              		.loc 1 276 0
 247 0126 181C     		mov	r0, r3
 248 0128 1F23     		mov	r3, #31
 249 012a 0340     		and	r3, r0
 274:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 250              		.loc 1 274 0
 251 012c 1943     		orr	r1, r3
 277:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXSampleTimeControlClass0 \
 252              		.loc 1 277 0
 253 012e 7B68     		ldr	r3, [r7, #4]
 254 0130 9B7F     		ldrb	r3, [r3, #30]
 278:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCE_Pos) & VADC_G_ICLASS_STCE_Msk
 255              		.loc 1 278 0
 256 0132 1804     		lsl	r0, r3, #16
 257 0134 F823     		mov	r3, #248
 258 0136 5B03     		lsl	r3, r3, #13
 259 0138 0340     		and	r3, r0
 271:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass0 \
 260              		.loc 1 271 0
 261 013a 0B43     		orr	r3, r1
 262 013c 111C     		mov	r1, r2
 263 013e 1943     		orr	r1, r3
 264 0140 FA68     		ldr	r2, [r7, #12]
 265 0142 A023     		mov	r3, #160
 266 0144 D150     		str	r1, [r2, r3]
 279:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 280:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 281:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set conversion mode, EMUX conversion mode, sample time control,
 282:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * EMUX sample time control for class 1.
 283:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 284:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass1 \
 267              		.loc 1 284 0
 268 0146 FA68     		ldr	r2, [r7, #12]
 269 0148 A423     		mov	r3, #164
 270 014a D258     		ldr	r2, [r2, r3]
 271 014c 7B68     		ldr	r3, [r7, #4]
 272 014e 5B7E     		ldrb	r3, [r3, #25]
 285:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 273              		.loc 1 285 0
 274 0150 1902     		lsl	r1, r3, #8
 275 0152 E023     		mov	r3, #224
 276 0154 DB00     		lsl	r3, r3, #3
 277 0156 1940     		and	r1, r3
 286:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXConversionModeClass1 \
 278              		.loc 1 286 0
 279 0158 7B68     		ldr	r3, [r7, #4]
 280 015a 5B7F     		ldrb	r3, [r3, #29]
 287:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 281              		.loc 1 287 0
 282 015c 1806     		lsl	r0, r3, #24
 283 015e E023     		mov	r3, #224
 284 0160 DB04     		lsl	r3, r3, #19
 285 0162 0340     		and	r3, r0
 285:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 286              		.loc 1 285 0
 287 0164 1943     		orr	r1, r3
 288:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kSampleTimeControlClass1 \
 288              		.loc 1 288 0
 289 0166 7B68     		ldr	r3, [r7, #4]
 290 0168 DB7E     		ldrb	r3, [r3, #27]
 289:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCS_Pos) & VADC_G_ICLASS_STCS_Msk
 291              		.loc 1 289 0
 292 016a 181C     		mov	r0, r3
 293 016c 1F23     		mov	r3, #31
 294 016e 0340     		and	r3, r0
 287:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 295              		.loc 1 287 0
 296 0170 1943     		orr	r1, r3
 290:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXSampleTimeControlClass1 \
 297              		.loc 1 290 0
 298 0172 7B68     		ldr	r3, [r7, #4]
 299 0174 DB7F     		ldrb	r3, [r3, #31]
 291:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                     << VADC_G_ICLASS_STCE_Pos) & VADC_G_ICLASS_STCE
 300              		.loc 1 291 0
 301 0176 1804     		lsl	r0, r3, #16
 302 0178 F823     		mov	r3, #248
 303 017a 5B03     		lsl	r3, r3, #13
 304 017c 0340     		and	r3, r0
 284:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass1 \
 305              		.loc 1 284 0
 306 017e 0B43     		orr	r3, r1
 307 0180 111C     		mov	r1, r2
 308 0182 1943     		orr	r1, r3
 309 0184 FA68     		ldr	r2, [r7, #12]
 310 0186 A423     		mov	r3, #164
 311 0188 D150     		str	r1, [r2, r3]
 292:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 293:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the App State to Initialized */
 294:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     HandlePtr->DynamicHandlePtr->State = ADCGROUP001_INITIALIZED;
 312              		.loc 1 294 0
 313 018a 7B68     		ldr	r3, [r7, #4]
 314 018c DB68     		ldr	r3, [r3, #12]
 315 018e 0122     		mov	r2, #1
 316 0190 1A70     		strb	r2, [r3]
 295:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 296:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     Status &= (uint32_t)DAVEApp_SUCCESS;
 317              		.loc 1 296 0
 318 0192 0023     		mov	r3, #0
 319 0194 7B61     		str	r3, [r7, #20]
 320              	.L4:
 297:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 298:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 299:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 300:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 301:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 302:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 303:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 321              		.loc 1 303 0
 322 0196 BD46     		mov	sp, r7
 323 0198 06B0     		add	sp, sp, #24
 324              		@ sp needed for prologue
 325 019a 80BD     		pop	{r7, pc}
 326              	.L7:
 327              		.align	2
 328              	.L6:
 329 019c FFFFFEFF 		.word	-65537
 330 01a0 0000FF0F 		.word	268369920
 331 01a4 FFFF00F0 		.word	-268369921
 332              		.cfi_endproc
 333              	.LFE39:
 335              		.section	.text.ADCGROUP001_Deinit,"ax",%progbits
 336              		.align	2
 337              		.global	ADCGROUP001_Deinit
 338              		.code	16
 339              		.thumb_func
 341              	ADCGROUP001_Deinit:
 342              	.LFB40:
 304:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 305:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function resets the adcgroup001 app */
 306:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_Deinit(const ADCGROUP001_HandleType *HandlePtr )
 307:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 343              		.loc 1 307 0
 344              		.cfi_startproc
 345 0000 80B5     		push	{r7, lr}
 346              	.LCFI5:
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 7, -8
 349              		.cfi_offset 14, -4
 350 0002 86B0     		sub	sp, sp, #24
 351              	.LCFI6:
 352              		.cfi_def_cfa_offset 32
 353 0004 00AF     		add	r7, sp, #0
 354              	.LCFI7:
 355              		.cfi_def_cfa_register 7
 356 0006 7860     		str	r0, [r7, #4]
 308:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 357              		.loc 1 308 0
 358 0008 0123     		mov	r3, #1
 359 000a 7B61     		str	r3, [r7, #20]
 309:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 310:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 311:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 312:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /* Pointer to the VADC Kernel Structure */
 313:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;
 314:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 315:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 360              		.loc 1 315 0
 361 000c 7B68     		ldr	r3, [r7, #4]
 362 000e 1B69     		ldr	r3, [r3, #16]
 363 0010 3B61     		str	r3, [r7, #16]
 316:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 364              		.loc 1 316 0
 365 0012 7B68     		ldr	r3, [r7, #4]
 366 0014 5B69     		ldr	r3, [r3, #20]
 367 0016 FB60     		str	r3, [r7, #12]
 317:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 318:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 368              		.loc 1 318 0
 369 0018 7B68     		ldr	r3, [r7, #4]
 370 001a DB68     		ldr	r3, [r3, #12]
 371 001c 1B78     		ldrb	r3, [r3]
 372 001e 012B     		cmp	r3, #1
 373 0020 24D1     		bne	.L9
 319:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 320:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Post calibration enable\disable */
 321:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     CLR_BIT(VADCGlobalPtr->GLOBCFG, VADC_GLOBCFG_DPCAL0_Pos);
 374              		.loc 1 321 0
 375 0022 3A69     		ldr	r2, [r7, #16]
 376 0024 8023     		mov	r3, #128
 377 0026 D258     		ldr	r2, [r2, r3]
 378 0028 134B     		ldr	r3, .L11
 379 002a 111C     		mov	r1, r2
 380 002c 1940     		and	r1, r3
 381 002e 3A69     		ldr	r2, [r7, #16]
 382 0030 8023     		mov	r3, #128
 383 0032 D150     		str	r1, [r2, r3]
 322:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 323:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Arbitration mode */
 324:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ARBCFG = (uint32_t)0x00;
 384              		.loc 1 324 0
 385 0034 FA68     		ldr	r2, [r7, #12]
 386 0036 8023     		mov	r3, #128
 387 0038 0021     		mov	r1, #0
 388 003a D150     		str	r1, [r2, r3]
 325:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 326:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Group specific boundary */
 327:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->BOUND = (uint32_t)0x00;
 389              		.loc 1 327 0
 390 003c FA68     		ldr	r2, [r7, #12]
 391 003e B823     		mov	r3, #184
 392 0040 0021     		mov	r1, #0
 393 0042 D150     		str	r1, [r2, r3]
 328:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 329:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* ReSet the EMUX control register */
 330:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->EMUXCTR = (uint32_t)(0X80000000);
 394              		.loc 1 330 0
 395 0044 FA68     		ldr	r2, [r7, #12]
 396 0046 F823     		mov	r3, #248
 397 0048 5B00     		lsl	r3, r3, #1
 398 004a 8021     		mov	r1, #128
 399 004c 0906     		lsl	r1, r1, #24
 400 004e D150     		str	r1, [r2, r3]
 331:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 332:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset class 0 input register*/
 333:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] = (uint32_t)0x00;
 401              		.loc 1 333 0
 402 0050 FA68     		ldr	r2, [r7, #12]
 403 0052 A023     		mov	r3, #160
 404 0054 0021     		mov	r1, #0
 405 0056 D150     		str	r1, [r2, r3]
 334:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset class 1 input register*/
 335:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] = (uint32_t)0x00;
 406              		.loc 1 335 0
 407 0058 FA68     		ldr	r2, [r7, #12]
 408 005a A423     		mov	r3, #164
 409 005c 0021     		mov	r1, #0
 410 005e D150     		str	r1, [r2, r3]
 336:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 337:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the App State to Initialized */
 338:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     HandlePtr->DynamicHandlePtr->State = ADCGROUP001_UNINITIALIZED;
 411              		.loc 1 338 0
 412 0060 7B68     		ldr	r3, [r7, #4]
 413 0062 DB68     		ldr	r3, [r3, #12]
 414 0064 0022     		mov	r2, #0
 415 0066 1A70     		strb	r2, [r3]
 339:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 340:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 416              		.loc 1 340 0
 417 0068 0023     		mov	r3, #0
 418 006a 7B61     		str	r3, [r7, #20]
 419              	.L9:
 341:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 342:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 343:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 344:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 345:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 346:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 347:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 420              		.loc 1 347 0
 421 006c 7B69     		ldr	r3, [r7, #20]
 348:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 422              		.loc 1 348 0
 423 006e 181C     		mov	r0, r3
 424 0070 BD46     		mov	sp, r7
 425 0072 06B0     		add	sp, sp, #24
 426              		@ sp needed for prologue
 427 0074 80BD     		pop	{r7, pc}
 428              	.L12:
 429 0076 C046     		.align	2
 430              	.L11:
 431 0078 FFFFFEFF 		.word	-65537
 432              		.cfi_endproc
 433              	.LFE40:
 435              		.section	.text.ADCGROUP001_GetStartupCalStatus,"ax",%progbits
 436              		.align	2
 437              		.global	ADCGROUP001_GetStartupCalStatus
 438              		.code	16
 439              		.thumb_func
 441              	ADCGROUP001_GetStartupCalStatus:
 442              	.LFB41:
 349:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 350:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function checks the status of calibration */
 351:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_GetStartupCalStatus(const ADCGROUP001_HandleType *HandlePtr)
 352:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 443              		.loc 1 352 0
 444              		.cfi_startproc
 445 0000 80B5     		push	{r7, lr}
 446              	.LCFI8:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 7, -8
 449              		.cfi_offset 14, -4
 450 0002 84B0     		sub	sp, sp, #16
 451              	.LCFI9:
 452              		.cfi_def_cfa_offset 24
 453 0004 00AF     		add	r7, sp, #0
 454              	.LCFI10:
 455              		.cfi_def_cfa_register 7
 456 0006 7860     		str	r0, [r7, #4]
 353:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     uint32_t Status=1;
 457              		.loc 1 353 0
 458 0008 0123     		mov	r3, #1
 459 000a FB60     		str	r3, [r7, #12]
 460              	.L14:
 354:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 355:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     do
 356:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 357:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         Status = RD_REG(HandlePtr->VADCGroupPtr->ARBCFG,VADC_G_ARBCFG_CAL_Msk,VADC_G_ARBCFG_CAL_Pos
 461              		.loc 1 357 0 discriminator 1
 462 000c 7B68     		ldr	r3, [r7, #4]
 463 000e 5A69     		ldr	r2, [r3, #20]
 464 0010 8023     		mov	r3, #128
 465 0012 D258     		ldr	r2, [r2, r3]
 466 0014 8023     		mov	r3, #128
 467 0016 5B05     		lsl	r3, r3, #21
 468 0018 1340     		and	r3, r2
 469 001a 1B0F     		lsr	r3, r3, #28
 470 001c FB60     		str	r3, [r7, #12]
 358:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 359:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     while(Status==1);
 471              		.loc 1 359 0 discriminator 1
 472 001e FB68     		ldr	r3, [r7, #12]
 473 0020 012B     		cmp	r3, #1
 474 0022 F3D0     		beq	.L14
 360:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 361:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     return Status;
 475              		.loc 1 361 0
 476 0024 FB68     		ldr	r3, [r7, #12]
 362:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 477              		.loc 1 362 0
 478 0026 181C     		mov	r0, r3
 479 0028 BD46     		mov	sp, r7
 480 002a 04B0     		add	sp, sp, #16
 481              		@ sp needed for prologue
 482 002c 80BD     		pop	{r7, pc}
 483              		.cfi_endproc
 484              	.LFE41:
 486              		.section	.text.ADCGROUP001_SetGroupBound0,"ax",%progbits
 487              		.align	2
 488              		.global	ADCGROUP001_SetGroupBound0
 489              		.code	16
 490              		.thumb_func
 492              	ADCGROUP001_SetGroupBound0:
 493              	.LFB42:
 363:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 364:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 365:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the group specific boundary 0 */
 366:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupBound0(const ADCGROUP001_HandleType *HandlePtr,
 367:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                          uint16_t BoundaryValue)
 368:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 494              		.loc 1 368 0
 495              		.cfi_startproc
 496 0000 80B5     		push	{r7, lr}
 497              	.LCFI11:
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 84B0     		sub	sp, sp, #16
 502              	.LCFI12:
 503              		.cfi_def_cfa_offset 24
 504 0004 00AF     		add	r7, sp, #0
 505              	.LCFI13:
 506              		.cfi_def_cfa_register 7
 507 0006 7860     		str	r0, [r7, #4]
 508 0008 0A1C     		mov	r2, r1
 509 000a BB1C     		add	r3, r7, #2
 510 000c 1A80     		strh	r2, [r3]
 369:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 511              		.loc 1 369 0
 512 000e 0123     		mov	r3, #1
 513 0010 FB60     		str	r3, [r7, #12]
 370:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 371:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 372:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 514              		.loc 1 372 0
 515 0012 7B68     		ldr	r3, [r7, #4]
 516 0014 5B69     		ldr	r3, [r3, #20]
 517 0016 BB60     		str	r3, [r7, #8]
 373:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 374:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED)
 518              		.loc 1 374 0
 519 0018 7B68     		ldr	r3, [r7, #4]
 520 001a DB68     		ldr	r3, [r3, #12]
 521 001c 1B78     		ldrb	r3, [r3]
 522 001e 012B     		cmp	r3, #1
 523 0020 18D1     		bne	.L17
 375:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 376:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(BoundaryValue <= (uint16_t)ADCGROUP001_MAX_BOUNDARY_VALUE)
 524              		.loc 1 376 0
 525 0022 BB1C     		add	r3, r7, #2
 526 0024 1A88     		ldrh	r2, [r3]
 527 0026 8023     		mov	r3, #128
 528 0028 5B01     		lsl	r3, r3, #5
 529 002a 9A42     		cmp	r2, r3
 530 002c 10D8     		bhi	.L18
 377:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 378:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the Group specific boundary 0 */
 379:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY0_Msk,
 531              		.loc 1 379 0
 532 002e BB1C     		add	r3, r7, #2
 533 0030 1B88     		ldrh	r3, [r3]
 534 0032 1B05     		lsl	r3, r3, #20
 535 0034 1A0D     		lsr	r2, r3, #20
 536 0036 B968     		ldr	r1, [r7, #8]
 537 0038 B823     		mov	r3, #184
 538 003a CB58     		ldr	r3, [r1, r3]
 539 003c 1B0B     		lsr	r3, r3, #12
 540 003e 1B03     		lsl	r3, r3, #12
 541 0040 111C     		mov	r1, r2
 542 0042 1943     		orr	r1, r3
 543 0044 BA68     		ldr	r2, [r7, #8]
 544 0046 B823     		mov	r3, #184
 545 0048 D150     		str	r1, [r2, r3]
 380:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_BOUND_BOUNDARY0_Pos, (uint32_t)BoundaryValue);
 381:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 546              		.loc 1 381 0
 547 004a 0023     		mov	r3, #0
 548 004c FB60     		str	r3, [r7, #12]
 549 004e 01E0     		b	.L17
 550              	.L18:
 382:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 383:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 384:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 385:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 551              		.loc 1 385 0
 552 0050 0223     		mov	r3, #2
 553 0052 FB60     		str	r3, [r7, #12]
 554              	.L17:
 386:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 387:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 388:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 389:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 390:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 391:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 392:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 393:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 394:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 555              		.loc 1 394 0
 556 0054 FB68     		ldr	r3, [r7, #12]
 395:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 557              		.loc 1 395 0
 558 0056 181C     		mov	r0, r3
 559 0058 BD46     		mov	sp, r7
 560 005a 04B0     		add	sp, sp, #16
 561              		@ sp needed for prologue
 562 005c 80BD     		pop	{r7, pc}
 563              		.cfi_endproc
 564              	.LFE42:
 566 005e C046     		.section	.text.ADCGROUP001_SetGroupBound1,"ax",%progbits
 567              		.align	2
 568              		.global	ADCGROUP001_SetGroupBound1
 569              		.code	16
 570              		.thumb_func
 572              	ADCGROUP001_SetGroupBound1:
 573              	.LFB43:
 396:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 397:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 398:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the group specific boundary 1 */
 399:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupBound1(const ADCGROUP001_HandleType *HandlePtr,
 400:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                          uint16_t BoundaryValue)
 401:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 574              		.loc 1 401 0
 575              		.cfi_startproc
 576 0000 80B5     		push	{r7, lr}
 577              	.LCFI14:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 7, -8
 580              		.cfi_offset 14, -4
 581 0002 84B0     		sub	sp, sp, #16
 582              	.LCFI15:
 583              		.cfi_def_cfa_offset 24
 584 0004 00AF     		add	r7, sp, #0
 585              	.LCFI16:
 586              		.cfi_def_cfa_register 7
 587 0006 7860     		str	r0, [r7, #4]
 588 0008 0A1C     		mov	r2, r1
 589 000a BB1C     		add	r3, r7, #2
 590 000c 1A80     		strh	r2, [r3]
 402:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 591              		.loc 1 402 0
 592 000e 0123     		mov	r3, #1
 593 0010 FB60     		str	r3, [r7, #12]
 403:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 404:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 405:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 594              		.loc 1 405 0
 595 0012 7B68     		ldr	r3, [r7, #4]
 596 0014 5B69     		ldr	r3, [r3, #20]
 597 0016 BB60     		str	r3, [r7, #8]
 406:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 407:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED)
 598              		.loc 1 407 0
 599 0018 7B68     		ldr	r3, [r7, #4]
 600 001a DB68     		ldr	r3, [r3, #12]
 601 001c 1B78     		ldrb	r3, [r3]
 602 001e 012B     		cmp	r3, #1
 603 0020 19D1     		bne	.L21
 408:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 409:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(BoundaryValue <= (uint16_t)ADCGROUP001_MAX_BOUNDARY_VALUE)
 604              		.loc 1 409 0
 605 0022 BB1C     		add	r3, r7, #2
 606 0024 1A88     		ldrh	r2, [r3]
 607 0026 8023     		mov	r3, #128
 608 0028 5B01     		lsl	r3, r3, #5
 609 002a 9A42     		cmp	r2, r3
 610 002c 11D8     		bhi	.L22
 410:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 411:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the Group specific boundary 0 */
 412:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY1_Msk,
 611              		.loc 1 412 0
 612 002e BB1C     		add	r3, r7, #2
 613 0030 1B88     		ldrh	r3, [r3]
 614 0032 1A04     		lsl	r2, r3, #16
 615 0034 0A4B     		ldr	r3, .L24
 616 0036 1A40     		and	r2, r3
 617 0038 B968     		ldr	r1, [r7, #8]
 618 003a B823     		mov	r3, #184
 619 003c C958     		ldr	r1, [r1, r3]
 620 003e 094B     		ldr	r3, .L24+4
 621 0040 0B40     		and	r3, r1
 622 0042 111C     		mov	r1, r2
 623 0044 1943     		orr	r1, r3
 624 0046 BA68     		ldr	r2, [r7, #8]
 625 0048 B823     		mov	r3, #184
 626 004a D150     		str	r1, [r2, r3]
 413:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_BOUND_BOUNDARY1_Pos, (uint32_t)BoundaryValue);
 414:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 627              		.loc 1 414 0
 628 004c 0023     		mov	r3, #0
 629 004e FB60     		str	r3, [r7, #12]
 630 0050 01E0     		b	.L21
 631              	.L22:
 415:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 416:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 417:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 418:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 632              		.loc 1 418 0
 633 0052 0223     		mov	r3, #2
 634 0054 FB60     		str	r3, [r7, #12]
 635              	.L21:
 419:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 420:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 421:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 422:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 423:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 424:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 425:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 426:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 427:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 636              		.loc 1 427 0
 637 0056 FB68     		ldr	r3, [r7, #12]
 428:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 638              		.loc 1 428 0
 639 0058 181C     		mov	r0, r3
 640 005a BD46     		mov	sp, r7
 641 005c 04B0     		add	sp, sp, #16
 642              		@ sp needed for prologue
 643 005e 80BD     		pop	{r7, pc}
 644              	.L25:
 645              		.align	2
 646              	.L24:
 647 0060 0000FF0F 		.word	268369920
 648 0064 FFFF00F0 		.word	-268369921
 649              		.cfi_endproc
 650              	.LFE43:
 652              		.section	.text.ADCGROUP001_ActiveGroupServiceRequestNode,"ax",%progbits
 653              		.align	2
 654              		.global	ADCGROUP001_ActiveGroupServiceRequestNode
 655              		.code	16
 656              		.thumb_func
 658              	ADCGROUP001_ActiveGroupServiceRequestNode:
 659              	.LFB44:
 429:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 430:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 431:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function activates group specific service request node */
 432:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_ActiveGroupServiceRequestNode(
 433:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 434:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 660              		.loc 1 434 0
 661              		.cfi_startproc
 662 0000 80B5     		push	{r7, lr}
 663              	.LCFI17:
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 7, -8
 666              		.cfi_offset 14, -4
 667 0002 84B0     		sub	sp, sp, #16
 668              	.LCFI18:
 669              		.cfi_def_cfa_offset 24
 670 0004 00AF     		add	r7, sp, #0
 671              	.LCFI19:
 672              		.cfi_def_cfa_register 7
 673 0006 7860     		str	r0, [r7, #4]
 674 0008 0A1C     		mov	r2, r1
 675 000a FB1C     		add	r3, r7, #3
 676 000c 1A70     		strb	r2, [r3]
 435:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 677              		.loc 1 435 0
 678 000e 0123     		mov	r3, #1
 679 0010 FB60     		str	r3, [r7, #12]
 436:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 437:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 438:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 680              		.loc 1 438 0
 681 0012 7B68     		ldr	r3, [r7, #4]
 682 0014 5B69     		ldr	r3, [r3, #20]
 683 0016 BB60     		str	r3, [r7, #8]
 439:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 440:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 684              		.loc 1 440 0
 685 0018 7B68     		ldr	r3, [r7, #4]
 686 001a DB68     		ldr	r3, [r3, #12]
 687 001c 1B78     		ldrb	r3, [r3]
 688 001e 012B     		cmp	r3, #1
 689 0020 29D1     		bne	.L27
 441:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 442:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 690              		.loc 1 442 0
 691 0022 FB1C     		add	r3, r7, #3
 692 0024 1B78     		ldrb	r3, [r3]
 693 0026 032B     		cmp	r3, #3
 694 0028 23D8     		bhi	.L28
 443:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 444:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Activate the Group specific service request node */
 445:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 695              		.loc 1 445 0
 696 002a BA68     		ldr	r2, [r7, #8]
 697 002c E423     		mov	r3, #228
 698 002e 5B00     		lsl	r3, r3, #1
 699 0030 D358     		ldr	r3, [r2, r3]
 700 0032 FA1C     		add	r2, r7, #3
 701 0034 1278     		ldrb	r2, [r2]
 702 0036 0121     		mov	r1, #1
 703 0038 081C     		mov	r0, r1
 704 003a 9040     		lsl	r0, r0, r2
 705 003c 021C     		mov	r2, r0
 706 003e D243     		mvn	r2, r2
 707 0040 111C     		mov	r1, r2
 708 0042 1940     		and	r1, r3
 709 0044 BA68     		ldr	r2, [r7, #8]
 710 0046 E423     		mov	r3, #228
 711 0048 5B00     		lsl	r3, r3, #1
 712 004a D150     		str	r1, [r2, r3]
 446:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SET_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 713              		.loc 1 446 0
 714 004c BA68     		ldr	r2, [r7, #8]
 715 004e E423     		mov	r3, #228
 716 0050 5B00     		lsl	r3, r3, #1
 717 0052 D258     		ldr	r2, [r2, r3]
 718 0054 FB1C     		add	r3, r7, #3
 719 0056 1B78     		ldrb	r3, [r3]
 720 0058 0121     		mov	r1, #1
 721 005a 081C     		mov	r0, r1
 722 005c 9840     		lsl	r0, r0, r3
 723 005e 031C     		mov	r3, r0
 724 0060 111C     		mov	r1, r2
 725 0062 1943     		orr	r1, r3
 726 0064 BA68     		ldr	r2, [r7, #8]
 727 0066 E423     		mov	r3, #228
 728 0068 5B00     		lsl	r3, r3, #1
 729 006a D150     		str	r1, [r2, r3]
 447:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 730              		.loc 1 447 0
 731 006c 0023     		mov	r3, #0
 732 006e FB60     		str	r3, [r7, #12]
 733 0070 01E0     		b	.L27
 734              	.L28:
 448:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 449:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 450:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 451:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 735              		.loc 1 451 0
 736 0072 0223     		mov	r3, #2
 737 0074 FB60     		str	r3, [r7, #12]
 738              	.L27:
 452:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 453:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 454:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 455:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 456:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 457:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 458:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 459:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 460:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 739              		.loc 1 460 0
 740 0076 FB68     		ldr	r3, [r7, #12]
 461:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 741              		.loc 1 461 0
 742 0078 181C     		mov	r0, r3
 743 007a BD46     		mov	sp, r7
 744 007c 04B0     		add	sp, sp, #16
 745              		@ sp needed for prologue
 746 007e 80BD     		pop	{r7, pc}
 747              		.cfi_endproc
 748              	.LFE44:
 750              		.section	.text.ADCGROUP001_DeActiveGroupServiceRequestNode,"ax",%progbits
 751              		.align	2
 752              		.global	ADCGROUP001_DeActiveGroupServiceRequestNode
 753              		.code	16
 754              		.thumb_func
 756              	ADCGROUP001_DeActiveGroupServiceRequestNode:
 757              	.LFB45:
 462:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 463:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function deactivates group specific service request node */
 464:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_DeActiveGroupServiceRequestNode(
 465:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 466:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 758              		.loc 1 466 0
 759              		.cfi_startproc
 760 0000 80B5     		push	{r7, lr}
 761              	.LCFI20:
 762              		.cfi_def_cfa_offset 8
 763              		.cfi_offset 7, -8
 764              		.cfi_offset 14, -4
 765 0002 84B0     		sub	sp, sp, #16
 766              	.LCFI21:
 767              		.cfi_def_cfa_offset 24
 768 0004 00AF     		add	r7, sp, #0
 769              	.LCFI22:
 770              		.cfi_def_cfa_register 7
 771 0006 7860     		str	r0, [r7, #4]
 772 0008 0A1C     		mov	r2, r1
 773 000a FB1C     		add	r3, r7, #3
 774 000c 1A70     		strb	r2, [r3]
 467:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 775              		.loc 1 467 0
 776 000e 0123     		mov	r3, #1
 777 0010 FB60     		str	r3, [r7, #12]
 468:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 469:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 470:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 778              		.loc 1 470 0
 779 0012 7B68     		ldr	r3, [r7, #4]
 780 0014 5B69     		ldr	r3, [r3, #20]
 781 0016 BB60     		str	r3, [r7, #8]
 471:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 472:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 782              		.loc 1 472 0
 783 0018 7B68     		ldr	r3, [r7, #4]
 784 001a DB68     		ldr	r3, [r3, #12]
 785 001c 1B78     		ldrb	r3, [r3]
 786 001e 012B     		cmp	r3, #1
 787 0020 19D1     		bne	.L31
 473:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 474:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 788              		.loc 1 474 0
 789 0022 FB1C     		add	r3, r7, #3
 790 0024 1B78     		ldrb	r3, [r3]
 791 0026 032B     		cmp	r3, #3
 792 0028 13D8     		bhi	.L32
 475:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 476:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Deactivate the Group specific service request node */
 477:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 793              		.loc 1 477 0
 794 002a BA68     		ldr	r2, [r7, #8]
 795 002c E423     		mov	r3, #228
 796 002e 5B00     		lsl	r3, r3, #1
 797 0030 D358     		ldr	r3, [r2, r3]
 798 0032 FA1C     		add	r2, r7, #3
 799 0034 1278     		ldrb	r2, [r2]
 800 0036 0121     		mov	r1, #1
 801 0038 081C     		mov	r0, r1
 802 003a 9040     		lsl	r0, r0, r2
 803 003c 021C     		mov	r2, r0
 804 003e D243     		mvn	r2, r2
 805 0040 111C     		mov	r1, r2
 806 0042 1940     		and	r1, r3
 807 0044 BA68     		ldr	r2, [r7, #8]
 808 0046 E423     		mov	r3, #228
 809 0048 5B00     		lsl	r3, r3, #1
 810 004a D150     		str	r1, [r2, r3]
 478:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 811              		.loc 1 478 0
 812 004c 0023     		mov	r3, #0
 813 004e FB60     		str	r3, [r7, #12]
 814 0050 01E0     		b	.L31
 815              	.L32:
 479:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 480:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 481:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 482:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 816              		.loc 1 482 0
 817 0052 0223     		mov	r3, #2
 818 0054 FB60     		str	r3, [r7, #12]
 819              	.L31:
 483:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 484:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 485:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 486:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 487:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 488:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 489:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 490:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 491:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 820              		.loc 1 491 0
 821 0056 FB68     		ldr	r3, [r7, #12]
 492:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 822              		.loc 1 492 0
 823 0058 181C     		mov	r0, r3
 824 005a BD46     		mov	sp, r7
 825 005c 04B0     		add	sp, sp, #16
 826              		@ sp needed for prologue
 827 005e 80BD     		pop	{r7, pc}
 828              		.cfi_endproc
 829              	.LFE45:
 831              		.section	.text.ADCGROUP001_ActiveSharedServiceRequestNode,"ax",%progbits
 832              		.align	2
 833              		.global	ADCGROUP001_ActiveSharedServiceRequestNode
 834              		.code	16
 835              		.thumb_func
 837              	ADCGROUP001_ActiveSharedServiceRequestNode:
 838              	.LFB46:
 493:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 494:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function activates the shared service request node. */
 495:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_ActiveSharedServiceRequestNode(
 496:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 497:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 839              		.loc 1 497 0
 840              		.cfi_startproc
 841 0000 80B5     		push	{r7, lr}
 842              	.LCFI23:
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 0002 84B0     		sub	sp, sp, #16
 847              	.LCFI24:
 848              		.cfi_def_cfa_offset 24
 849 0004 00AF     		add	r7, sp, #0
 850              	.LCFI25:
 851              		.cfi_def_cfa_register 7
 852 0006 7860     		str	r0, [r7, #4]
 853 0008 0A1C     		mov	r2, r1
 854 000a FB1C     		add	r3, r7, #3
 855 000c 1A70     		strb	r2, [r3]
 498:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 856              		.loc 1 498 0
 857 000e 0123     		mov	r3, #1
 858 0010 FB60     		str	r3, [r7, #12]
 499:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 500:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 501:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 859              		.loc 1 501 0
 860 0012 7B68     		ldr	r3, [r7, #4]
 861 0014 5B69     		ldr	r3, [r3, #20]
 862 0016 BB60     		str	r3, [r7, #8]
 502:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 503:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 863              		.loc 1 503 0
 864 0018 7B68     		ldr	r3, [r7, #4]
 865 001a DB68     		ldr	r3, [r3, #12]
 866 001c 1B78     		ldrb	r3, [r3]
 867 001e 012B     		cmp	r3, #1
 868 0020 2BD1     		bne	.L35
 504:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 505:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 869              		.loc 1 505 0
 870 0022 FB1C     		add	r3, r7, #3
 871 0024 1B78     		ldrb	r3, [r3]
 872 0026 032B     		cmp	r3, #3
 873 0028 25D8     		bhi	.L36
 506:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 507:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Activates the shared service request node. */
 508:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));
 874              		.loc 1 508 0
 875 002a BA68     		ldr	r2, [r7, #8]
 876 002c E423     		mov	r3, #228
 877 002e 5B00     		lsl	r3, r3, #1
 878 0030 D358     		ldr	r3, [r2, r3]
 879 0032 FA1C     		add	r2, r7, #3
 880 0034 1278     		ldrb	r2, [r2]
 881 0036 0832     		add	r2, r2, #8
 882 0038 0121     		mov	r1, #1
 883 003a 081C     		mov	r0, r1
 884 003c 9040     		lsl	r0, r0, r2
 885 003e 021C     		mov	r2, r0
 886 0040 D243     		mvn	r2, r2
 887 0042 111C     		mov	r1, r2
 888 0044 1940     		and	r1, r3
 889 0046 BA68     		ldr	r2, [r7, #8]
 890 0048 E423     		mov	r3, #228
 891 004a 5B00     		lsl	r3, r3, #1
 892 004c D150     		str	r1, [r2, r3]
 509:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SET_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));
 893              		.loc 1 509 0
 894 004e BA68     		ldr	r2, [r7, #8]
 895 0050 E423     		mov	r3, #228
 896 0052 5B00     		lsl	r3, r3, #1
 897 0054 D258     		ldr	r2, [r2, r3]
 898 0056 FB1C     		add	r3, r7, #3
 899 0058 1B78     		ldrb	r3, [r3]
 900 005a 0833     		add	r3, r3, #8
 901 005c 0121     		mov	r1, #1
 902 005e 081C     		mov	r0, r1
 903 0060 9840     		lsl	r0, r0, r3
 904 0062 031C     		mov	r3, r0
 905 0064 111C     		mov	r1, r2
 906 0066 1943     		orr	r1, r3
 907 0068 BA68     		ldr	r2, [r7, #8]
 908 006a E423     		mov	r3, #228
 909 006c 5B00     		lsl	r3, r3, #1
 910 006e D150     		str	r1, [r2, r3]
 510:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 511:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 911              		.loc 1 511 0
 912 0070 0023     		mov	r3, #0
 913 0072 FB60     		str	r3, [r7, #12]
 914 0074 01E0     		b	.L35
 915              	.L36:
 512:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 513:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 514:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 515:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 916              		.loc 1 515 0
 917 0076 0223     		mov	r3, #2
 918 0078 FB60     		str	r3, [r7, #12]
 919              	.L35:
 516:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 517:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 518:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 519:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 520:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 521:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 522:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 523:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 524:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 920              		.loc 1 524 0
 921 007a FB68     		ldr	r3, [r7, #12]
 525:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 922              		.loc 1 525 0
 923 007c 181C     		mov	r0, r3
 924 007e BD46     		mov	sp, r7
 925 0080 04B0     		add	sp, sp, #16
 926              		@ sp needed for prologue
 927 0082 80BD     		pop	{r7, pc}
 928              		.cfi_endproc
 929              	.LFE46:
 931              		.section	.text.ADCGROUP001_DeActiveSharedServiceRequestNode,"ax",%progbits
 932              		.align	2
 933              		.global	ADCGROUP001_DeActiveSharedServiceRequestNode
 934              		.code	16
 935              		.thumb_func
 937              	ADCGROUP001_DeActiveSharedServiceRequestNode:
 938              	.LFB47:
 526:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 527:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This deactivates the shared service request node.*/
 528:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_DeActiveSharedServiceRequestNode(
 529:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 530:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 939              		.loc 1 530 0
 940              		.cfi_startproc
 941 0000 80B5     		push	{r7, lr}
 942              	.LCFI26:
 943              		.cfi_def_cfa_offset 8
 944              		.cfi_offset 7, -8
 945              		.cfi_offset 14, -4
 946 0002 84B0     		sub	sp, sp, #16
 947              	.LCFI27:
 948              		.cfi_def_cfa_offset 24
 949 0004 00AF     		add	r7, sp, #0
 950              	.LCFI28:
 951              		.cfi_def_cfa_register 7
 952 0006 7860     		str	r0, [r7, #4]
 953 0008 0A1C     		mov	r2, r1
 954 000a FB1C     		add	r3, r7, #3
 955 000c 1A70     		strb	r2, [r3]
 531:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 956              		.loc 1 531 0
 957 000e 0123     		mov	r3, #1
 958 0010 FB60     		str	r3, [r7, #12]
 532:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 533:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 534:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 959              		.loc 1 534 0
 960 0012 7B68     		ldr	r3, [r7, #4]
 961 0014 5B69     		ldr	r3, [r3, #20]
 962 0016 BB60     		str	r3, [r7, #8]
 535:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 536:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 963              		.loc 1 536 0
 964 0018 7B68     		ldr	r3, [r7, #4]
 965 001a DB68     		ldr	r3, [r3, #12]
 966 001c 1B78     		ldrb	r3, [r3]
 967 001e 012B     		cmp	r3, #1
 968 0020 1AD1     		bne	.L39
 537:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 538:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 969              		.loc 1 538 0
 970 0022 FB1C     		add	r3, r7, #3
 971 0024 1B78     		ldrb	r3, [r3]
 972 0026 032B     		cmp	r3, #3
 973 0028 14D8     		bhi	.L40
 539:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 540:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Deactivate the shared service request node.*/
 541:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));
 974              		.loc 1 541 0
 975 002a BA68     		ldr	r2, [r7, #8]
 976 002c E423     		mov	r3, #228
 977 002e 5B00     		lsl	r3, r3, #1
 978 0030 D358     		ldr	r3, [r2, r3]
 979 0032 FA1C     		add	r2, r7, #3
 980 0034 1278     		ldrb	r2, [r2]
 981 0036 0832     		add	r2, r2, #8
 982 0038 0121     		mov	r1, #1
 983 003a 081C     		mov	r0, r1
 984 003c 9040     		lsl	r0, r0, r2
 985 003e 021C     		mov	r2, r0
 986 0040 D243     		mvn	r2, r2
 987 0042 111C     		mov	r1, r2
 988 0044 1940     		and	r1, r3
 989 0046 BA68     		ldr	r2, [r7, #8]
 990 0048 E423     		mov	r3, #228
 991 004a 5B00     		lsl	r3, r3, #1
 992 004c D150     		str	r1, [r2, r3]
 542:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 543:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 993              		.loc 1 543 0
 994 004e 0023     		mov	r3, #0
 995 0050 FB60     		str	r3, [r7, #12]
 996 0052 01E0     		b	.L39
 997              	.L40:
 544:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 545:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 546:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 547:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 998              		.loc 1 547 0
 999 0054 0223     		mov	r3, #2
 1000 0056 FB60     		str	r3, [r7, #12]
 1001              	.L39:
 548:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 549:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 550:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 551:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 552:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 553:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 554:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 555:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 556:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1002              		.loc 1 556 0
 1003 0058 FB68     		ldr	r3, [r7, #12]
 557:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1004              		.loc 1 557 0
 1005 005a 181C     		mov	r0, r3
 1006 005c BD46     		mov	sp, r7
 1007 005e 04B0     		add	sp, sp, #16
 1008              		@ sp needed for prologue
 1009 0060 80BD     		pop	{r7, pc}
 1010              		.cfi_endproc
 1011              	.LFE47:
 1013 0062 C046     		.section	.text.ADCGROUP001_EMUXStartSelection,"ax",%progbits
 1014              		.align	2
 1015              		.global	ADCGROUP001_EMUXStartSelection
 1016              		.code	16
 1017              		.thumb_func
 1019              	ADCGROUP001_EMUXStartSelection:
 1020              	.LFB48:
 558:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 559:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 560:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the value of EMUX start selection. */
 561:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_EMUXStartSelection(
 562:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           const ADCGROUP001_HandleType *HandlePtr, uint8_t StartSelectionValue)
 563:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1021              		.loc 1 563 0
 1022              		.cfi_startproc
 1023 0000 80B5     		push	{r7, lr}
 1024              	.LCFI29:
 1025              		.cfi_def_cfa_offset 8
 1026              		.cfi_offset 7, -8
 1027              		.cfi_offset 14, -4
 1028 0002 84B0     		sub	sp, sp, #16
 1029              	.LCFI30:
 1030              		.cfi_def_cfa_offset 24
 1031 0004 00AF     		add	r7, sp, #0
 1032              	.LCFI31:
 1033              		.cfi_def_cfa_register 7
 1034 0006 7860     		str	r0, [r7, #4]
 1035 0008 0A1C     		mov	r2, r1
 1036 000a FB1C     		add	r3, r7, #3
 1037 000c 1A70     		strb	r2, [r3]
 564:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1038              		.loc 1 564 0
 1039 000e 0123     		mov	r3, #1
 1040 0010 FB60     		str	r3, [r7, #12]
 565:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 566:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 567:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1041              		.loc 1 567 0
 1042 0012 7B68     		ldr	r3, [r7, #4]
 1043 0014 5B69     		ldr	r3, [r3, #20]
 1044 0016 BB60     		str	r3, [r7, #8]
 568:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 569:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1045              		.loc 1 569 0
 1046 0018 7B68     		ldr	r3, [r7, #4]
 1047 001a DB68     		ldr	r3, [r3, #12]
 1048 001c 1B78     		ldrb	r3, [r3]
 1049 001e 012B     		cmp	r3, #1
 1050 0020 18D1     		bne	.L43
 570:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 571:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( StartSelectionValue <= (uint8_t)ADCGROUP001_MAX_ADC_GROUP_CHANNEL)
 1051              		.loc 1 571 0
 1052 0022 FB1C     		add	r3, r7, #3
 1053 0024 1B78     		ldrb	r3, [r3]
 1054 0026 082B     		cmp	r3, #8
 1055 0028 12D8     		bhi	.L44
 572:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 573:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX start selection */
 574:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->EMUXCTR, VADC_G_EMUXCTR_EMUXSET_Msk,
 1056              		.loc 1 574 0
 1057 002a FB1C     		add	r3, r7, #3
 1058 002c 1A78     		ldrb	r2, [r3]
 1059 002e 0723     		mov	r3, #7
 1060 0030 1A40     		and	r2, r3
 1061 0032 B968     		ldr	r1, [r7, #8]
 1062 0034 F823     		mov	r3, #248
 1063 0036 5B00     		lsl	r3, r3, #1
 1064 0038 CB58     		ldr	r3, [r1, r3]
 1065 003a 0721     		mov	r1, #7
 1066 003c 8B43     		bic	r3, r1
 1067 003e 111C     		mov	r1, r2
 1068 0040 1943     		orr	r1, r3
 1069 0042 BA68     		ldr	r2, [r7, #8]
 1070 0044 F823     		mov	r3, #248
 1071 0046 5B00     		lsl	r3, r3, #1
 1072 0048 D150     		str	r1, [r2, r3]
 575:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                      VADC_G_EMUXCTR_EMUXSET_Pos, (uint32_t)StartSelectionValue);
 576:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1073              		.loc 1 576 0
 1074 004a 0023     		mov	r3, #0
 1075 004c FB60     		str	r3, [r7, #12]
 1076 004e 01E0     		b	.L43
 1077              	.L44:
 577:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 578:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 579:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 580:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1078              		.loc 1 580 0
 1079 0050 0223     		mov	r3, #2
 1080 0052 FB60     		str	r3, [r7, #12]
 1081              	.L43:
 581:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 582:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 583:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 584:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 585:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 586:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 587:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 588:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 589:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1082              		.loc 1 589 0
 1083 0054 FB68     		ldr	r3, [r7, #12]
 590:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1084              		.loc 1 590 0
 1085 0056 181C     		mov	r0, r3
 1086 0058 BD46     		mov	sp, r7
 1087 005a 04B0     		add	sp, sp, #16
 1088              		@ sp needed for prologue
 1089 005c 80BD     		pop	{r7, pc}
 1090              		.cfi_endproc
 1091              	.LFE48:
 1093 005e C046     		.section	.text.ADCGROUP001_GetEMUXStartSelection,"ax",%progbits
 1094              		.align	2
 1095              		.global	ADCGROUP001_GetEMUXStartSelection
 1096              		.code	16
 1097              		.thumb_func
 1099              	ADCGROUP001_GetEMUXStartSelection:
 1100              	.LFB49:
 591:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 592:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function gets the value of EMUX start selection. */
 593:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_GetEMUXStartSelection(
 594:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****        const ADCGROUP001_HandleType *HandlePtr, uint8_t *StartSelectionValuePtr)
 595:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1101              		.loc 1 595 0
 1102              		.cfi_startproc
 1103 0000 80B5     		push	{r7, lr}
 1104              	.LCFI32:
 1105              		.cfi_def_cfa_offset 8
 1106              		.cfi_offset 7, -8
 1107              		.cfi_offset 14, -4
 1108 0002 84B0     		sub	sp, sp, #16
 1109              	.LCFI33:
 1110              		.cfi_def_cfa_offset 24
 1111 0004 00AF     		add	r7, sp, #0
 1112              	.LCFI34:
 1113              		.cfi_def_cfa_register 7
 1114 0006 7860     		str	r0, [r7, #4]
 1115 0008 3960     		str	r1, [r7]
 596:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1116              		.loc 1 596 0
 1117 000a 0123     		mov	r3, #1
 1118 000c FB60     		str	r3, [r7, #12]
 597:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 598:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 599:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1119              		.loc 1 599 0
 1120 000e 7B68     		ldr	r3, [r7, #4]
 1121 0010 5B69     		ldr	r3, [r3, #20]
 1122 0012 BB60     		str	r3, [r7, #8]
 600:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 601:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1123              		.loc 1 601 0
 1124 0014 7B68     		ldr	r3, [r7, #4]
 1125 0016 DB68     		ldr	r3, [r3, #12]
 1126 0018 1B78     		ldrb	r3, [r3]
 1127 001a 012B     		cmp	r3, #1
 1128 001c 11D1     		bne	.L47
 602:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 603:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(StartSelectionValuePtr != NULL)
 1129              		.loc 1 603 0
 1130 001e 3B68     		ldr	r3, [r7]
 1131 0020 002B     		cmp	r3, #0
 1132 0022 0CD0     		beq	.L48
 604:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 605:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Get the EMUX start selection*/
 606:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       *StartSelectionValuePtr = (uint8_t)RD_REG( VADCGroupPtr->EMUXCTR,
 1133              		.loc 1 606 0
 1134 0024 BA68     		ldr	r2, [r7, #8]
 1135 0026 F823     		mov	r3, #248
 1136 0028 5B00     		lsl	r3, r3, #1
 1137 002a D358     		ldr	r3, [r2, r3]
 1138 002c DAB2     		uxtb	r2, r3
 1139 002e 0723     		mov	r3, #7
 1140 0030 1340     		and	r3, r2
 1141 0032 DAB2     		uxtb	r2, r3
 1142 0034 3B68     		ldr	r3, [r7]
 1143 0036 1A70     		strb	r2, [r3]
 607:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                         VADC_G_EMUXCTR_EMUXSET_Msk, VADC_G_EMUXCTR_EMUXSET_Pos);
 608:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1144              		.loc 1 608 0
 1145 0038 0023     		mov	r3, #0
 1146 003a FB60     		str	r3, [r7, #12]
 1147 003c 01E0     		b	.L47
 1148              	.L48:
 609:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 610:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 611:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 612:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1149              		.loc 1 612 0
 1150 003e 0223     		mov	r3, #2
 1151 0040 FB60     		str	r3, [r7, #12]
 1152              	.L47:
 613:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 614:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 615:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 616:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 617:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 618:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 619:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 620:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 621:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1153              		.loc 1 621 0
 1154 0042 FB68     		ldr	r3, [r7, #12]
 622:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1155              		.loc 1 622 0
 1156 0044 181C     		mov	r0, r3
 1157 0046 BD46     		mov	sp, r7
 1158 0048 04B0     		add	sp, sp, #16
 1159              		@ sp needed for prologue
 1160 004a 80BD     		pop	{r7, pc}
 1161              		.cfi_endproc
 1162              	.LFE49:
 1164              		.section	.text.ADCGROUP001_SetEMUXChannelSelect,"ax",%progbits
 1165              		.align	2
 1166              		.global	ADCGROUP001_SetEMUXChannelSelect
 1167              		.code	16
 1168              		.thumb_func
 1170              	ADCGROUP001_SetEMUXChannelSelect:
 1171              	.LFB50:
 623:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 624:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX channel select. */
 625:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXChannelSelect(
 626:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           const ADCGROUP001_HandleType *HandlePtr, uint8_t ChannelSelectValue)
 627:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1172              		.loc 1 627 0
 1173              		.cfi_startproc
 1174 0000 80B5     		push	{r7, lr}
 1175              	.LCFI35:
 1176              		.cfi_def_cfa_offset 8
 1177              		.cfi_offset 7, -8
 1178              		.cfi_offset 14, -4
 1179 0002 84B0     		sub	sp, sp, #16
 1180              	.LCFI36:
 1181              		.cfi_def_cfa_offset 24
 1182 0004 00AF     		add	r7, sp, #0
 1183              	.LCFI37:
 1184              		.cfi_def_cfa_register 7
 1185 0006 7860     		str	r0, [r7, #4]
 1186 0008 0A1C     		mov	r2, r1
 1187 000a FB1C     		add	r3, r7, #3
 1188 000c 1A70     		strb	r2, [r3]
 628:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1189              		.loc 1 628 0
 1190 000e 0123     		mov	r3, #1
 1191 0010 FB60     		str	r3, [r7, #12]
 629:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 630:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 631:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1192              		.loc 1 631 0
 1193 0012 7B68     		ldr	r3, [r7, #4]
 1194 0014 5B69     		ldr	r3, [r3, #20]
 1195 0016 BB60     		str	r3, [r7, #8]
 632:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 633:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1196              		.loc 1 633 0
 1197 0018 7B68     		ldr	r3, [r7, #4]
 1198 001a DB68     		ldr	r3, [r3, #12]
 1199 001c 1B78     		ldrb	r3, [r3]
 1200 001e 012B     		cmp	r3, #1
 1201 0020 19D1     		bne	.L51
 634:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 635:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( ChannelSelectValue <= (uint8_t)ADCGROUP001_TOTAL_ADC_CHANNEL )
 1202              		.loc 1 635 0
 1203 0022 FB1C     		add	r3, r7, #3
 1204 0024 1B78     		ldrb	r3, [r3]
 1205 0026 202B     		cmp	r3, #32
 1206 0028 13D8     		bhi	.L52
 636:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 637:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX channel select*/
 638:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->EMUXCTR, VADC_G_EMUXCTR_EMUXCH_Msk,
 1207              		.loc 1 638 0
 1208 002a FB1C     		add	r3, r7, #3
 1209 002c 1B78     		ldrb	r3, [r3]
 1210 002e 1A04     		lsl	r2, r3, #16
 1211 0030 0B4B     		ldr	r3, .L54
 1212 0032 1A40     		and	r2, r3
 1213 0034 B968     		ldr	r1, [r7, #8]
 1214 0036 F823     		mov	r3, #248
 1215 0038 5B00     		lsl	r3, r3, #1
 1216 003a C958     		ldr	r1, [r1, r3]
 1217 003c 094B     		ldr	r3, .L54+4
 1218 003e 0B40     		and	r3, r1
 1219 0040 111C     		mov	r1, r2
 1220 0042 1943     		orr	r1, r3
 1221 0044 BA68     		ldr	r2, [r7, #8]
 1222 0046 F823     		mov	r3, #248
 1223 0048 5B00     		lsl	r3, r3, #1
 1224 004a D150     		str	r1, [r2, r3]
 639:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                        VADC_G_EMUXCTR_EMUXCH_Pos, (uint32_t)ChannelSelectValue);
 640:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 641:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1225              		.loc 1 641 0
 1226 004c 0023     		mov	r3, #0
 1227 004e FB60     		str	r3, [r7, #12]
 1228 0050 01E0     		b	.L51
 1229              	.L52:
 642:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 643:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 644:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 645:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1230              		.loc 1 645 0
 1231 0052 0223     		mov	r3, #2
 1232 0054 FB60     		str	r3, [r7, #12]
 1233              	.L51:
 646:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 647:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 648:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 649:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 650:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 651:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 652:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 653:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 654:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1234              		.loc 1 654 0
 1235 0056 FB68     		ldr	r3, [r7, #12]
 655:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1236              		.loc 1 655 0
 1237 0058 181C     		mov	r0, r3
 1238 005a BD46     		mov	sp, r7
 1239 005c 04B0     		add	sp, sp, #16
 1240              		@ sp needed for prologue
 1241 005e 80BD     		pop	{r7, pc}
 1242              	.L55:
 1243              		.align	2
 1244              	.L54:
 1245 0060 0000FF03 		.word	67043328
 1246 0064 FFFF00FC 		.word	-67043329
 1247              		.cfi_endproc
 1248              	.LFE50:
 1250              		.section	.text.ADCGROUP001_SetEMUXMode,"ax",%progbits
 1251              		.align	2
 1252              		.global	ADCGROUP001_SetEMUXMode
 1253              		.code	16
 1254              		.thumb_func
 1256              	ADCGROUP001_SetEMUXMode:
 1257              	.LFB51:
 656:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 657:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX mode. */
 658:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXMode(const ADCGROUP001_HandleType *HandlePtr,
 659:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                   uint8_t Mode)
 660:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1258              		.loc 1 660 0
 1259              		.cfi_startproc
 1260 0000 80B5     		push	{r7, lr}
 1261              	.LCFI38:
 1262              		.cfi_def_cfa_offset 8
 1263              		.cfi_offset 7, -8
 1264              		.cfi_offset 14, -4
 1265 0002 86B0     		sub	sp, sp, #24
 1266              	.LCFI39:
 1267              		.cfi_def_cfa_offset 32
 1268 0004 00AF     		add	r7, sp, #0
 1269              	.LCFI40:
 1270              		.cfi_def_cfa_register 7
 1271 0006 7860     		str	r0, [r7, #4]
 1272 0008 0A1C     		mov	r2, r1
 1273 000a FB1C     		add	r3, r7, #3
 1274 000c 1A70     		strb	r2, [r3]
 661:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1275              		.loc 1 661 0
 1276 000e 0123     		mov	r3, #1
 1277 0010 7B61     		str	r3, [r7, #20]
 662:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t ModeTemp;
 663:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 664:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 665:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1278              		.loc 1 665 0
 1279 0012 7B68     		ldr	r3, [r7, #4]
 1280 0014 5B69     		ldr	r3, [r3, #20]
 1281 0016 3B61     		str	r3, [r7, #16]
 666:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 667:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1282              		.loc 1 667 0
 1283 0018 7B68     		ldr	r3, [r7, #4]
 1284 001a DB68     		ldr	r3, [r3, #12]
 1285 001c 1B78     		ldrb	r3, [r3]
 1286 001e 012B     		cmp	r3, #1
 1287 0020 22D1     		bne	.L57
 668:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 669:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(Mode <= (uint8_t)ADCGROUP001_SEQUENCEMODE)
 1288              		.loc 1 669 0
 1289 0022 FB1C     		add	r3, r7, #3
 1290 0024 1B78     		ldrb	r3, [r3]
 1291 0026 032B     		cmp	r3, #3
 1292 0028 1CD8     		bhi	.L58
 670:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 671:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX mode*/
 672:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp = VADCGroupPtr->EMUXCTR;
 1293              		.loc 1 672 0
 1294 002a 3A69     		ldr	r2, [r7, #16]
 1295 002c F823     		mov	r3, #248
 1296 002e 5B00     		lsl	r3, r3, #1
 1297 0030 D358     		ldr	r3, [r2, r3]
 1298 0032 FB60     		str	r3, [r7, #12]
 673:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp &= (uint32_t)~(VADC_G_EMUXCTR_EMUXMODE_Msk);
 1299              		.loc 1 673 0
 1300 0034 FA68     		ldr	r2, [r7, #12]
 1301 0036 0F4B     		ldr	r3, .L60
 1302 0038 1340     		and	r3, r2
 1303 003a FB60     		str	r3, [r7, #12]
 674:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 675:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                       (((uint32_t)Mode << VADC_G_EMUXCTR_EMUXMODE_Pos) & VADC_G_EMUXCTR_EMUXMODE_Ms
 1304              		.loc 1 675 0
 1305 003c FB1C     		add	r3, r7, #3
 1306 003e 1B78     		ldrb	r3, [r3]
 1307 0040 9A06     		lsl	r2, r3, #26
 1308 0042 C023     		mov	r3, #192
 1309 0044 1B05     		lsl	r3, r3, #20
 1310 0046 1A40     		and	r2, r3
 674:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 1311              		.loc 1 674 0
 1312 0048 FB68     		ldr	r3, [r7, #12]
 1313 004a 1343     		orr	r3, r2
 1314 004c 8022     		mov	r2, #128
 1315 004e 1206     		lsl	r2, r2, #24
 1316 0050 1343     		orr	r3, r2
 1317 0052 FB60     		str	r3, [r7, #12]
 676:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = ModeTemp;
 1318              		.loc 1 676 0
 1319 0054 3A69     		ldr	r2, [r7, #16]
 1320 0056 F823     		mov	r3, #248
 1321 0058 5B00     		lsl	r3, r3, #1
 1322 005a F968     		ldr	r1, [r7, #12]
 1323 005c D150     		str	r1, [r2, r3]
 677:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 678:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1324              		.loc 1 678 0
 1325 005e 0023     		mov	r3, #0
 1326 0060 7B61     		str	r3, [r7, #20]
 1327 0062 01E0     		b	.L57
 1328              	.L58:
 679:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 680:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 681:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 682:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1329              		.loc 1 682 0
 1330 0064 0223     		mov	r3, #2
 1331 0066 7B61     		str	r3, [r7, #20]
 1332              	.L57:
 683:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 684:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 685:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 686:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 687:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 688:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 689:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 690:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 691:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1333              		.loc 1 691 0
 1334 0068 7B69     		ldr	r3, [r7, #20]
 692:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1335              		.loc 1 692 0
 1336 006a 181C     		mov	r0, r3
 1337 006c BD46     		mov	sp, r7
 1338 006e 06B0     		add	sp, sp, #24
 1339              		@ sp needed for prologue
 1340 0070 80BD     		pop	{r7, pc}
 1341              	.L61:
 1342 0072 C046     		.align	2
 1343              	.L60:
 1344 0074 FFFFFFF3 		.word	-201326593
 1345              		.cfi_endproc
 1346              	.LFE51:
 1348              		.section	.text.ADCGROUP001_SetEMUXCodeScheme,"ax",%progbits
 1349              		.align	2
 1350              		.global	ADCGROUP001_SetEMUXCodeScheme
 1351              		.code	16
 1352              		.thumb_func
 1354              	ADCGROUP001_SetEMUXCodeScheme:
 1355              	.LFB52:
 693:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 694:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 695:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX coding scheme. */
 696:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXCodeScheme(const ADCGROUP001_HandleType *HandlePtr,
 697:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                             uint8_t CodeScheme)
 698:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1356              		.loc 1 698 0
 1357              		.cfi_startproc
 1358 0000 80B5     		push	{r7, lr}
 1359              	.LCFI41:
 1360              		.cfi_def_cfa_offset 8
 1361              		.cfi_offset 7, -8
 1362              		.cfi_offset 14, -4
 1363 0002 86B0     		sub	sp, sp, #24
 1364              	.LCFI42:
 1365              		.cfi_def_cfa_offset 32
 1366 0004 00AF     		add	r7, sp, #0
 1367              	.LCFI43:
 1368              		.cfi_def_cfa_register 7
 1369 0006 7860     		str	r0, [r7, #4]
 1370 0008 0A1C     		mov	r2, r1
 1371 000a FB1C     		add	r3, r7, #3
 1372 000c 1A70     		strb	r2, [r3]
 699:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1373              		.loc 1 699 0
 1374 000e 0123     		mov	r3, #1
 1375 0010 7B61     		str	r3, [r7, #20]
 700:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t CodeSchemeTemp = (uint32_t)0;
 1376              		.loc 1 700 0
 1377 0012 0023     		mov	r3, #0
 1378 0014 3B61     		str	r3, [r7, #16]
 701:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 702:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 703:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1379              		.loc 1 703 0
 1380 0016 7B68     		ldr	r3, [r7, #4]
 1381 0018 5B69     		ldr	r3, [r3, #20]
 1382 001a FB60     		str	r3, [r7, #12]
 704:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 705:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1383              		.loc 1 705 0
 1384 001c 7B68     		ldr	r3, [r7, #4]
 1385 001e DB68     		ldr	r3, [r3, #12]
 1386 0020 1B78     		ldrb	r3, [r3]
 1387 0022 012B     		cmp	r3, #1
 1388 0024 22D1     		bne	.L63
 706:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 707:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(CodeScheme <= (uint8_t)ADCGROUP001_GRAYCODE)
 1389              		.loc 1 707 0
 1390 0026 FB1C     		add	r3, r7, #3
 1391 0028 1B78     		ldrb	r3, [r3]
 1392 002a 012B     		cmp	r3, #1
 1393 002c 1CD8     		bhi	.L64
 708:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 709:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX code scheme*/
 710:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp = VADCGroupPtr->EMUXCTR;
 1394              		.loc 1 710 0
 1395 002e FA68     		ldr	r2, [r7, #12]
 1396 0030 F823     		mov	r3, #248
 1397 0032 5B00     		lsl	r3, r3, #1
 1398 0034 D358     		ldr	r3, [r2, r3]
 1399 0036 3B61     		str	r3, [r7, #16]
 711:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp &= (uint32_t)~(VADC_G_EMUXCTR_EMXCOD_Msk);
 1400              		.loc 1 711 0
 1401 0038 3A69     		ldr	r2, [r7, #16]
 1402 003a 0F4B     		ldr	r3, .L66
 1403 003c 1340     		and	r3, r2
 1404 003e 3B61     		str	r3, [r7, #16]
 712:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 713:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                     (((uint32_t)CodeScheme << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXCOD_Ms
 1405              		.loc 1 713 0
 1406 0040 FB1C     		add	r3, r7, #3
 1407 0042 1B78     		ldrb	r3, [r3]
 1408 0044 1A07     		lsl	r2, r3, #28
 1409 0046 8023     		mov	r3, #128
 1410 0048 5B05     		lsl	r3, r3, #21
 1411 004a 1A40     		and	r2, r3
 712:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 1412              		.loc 1 712 0
 1413 004c 3B69     		ldr	r3, [r7, #16]
 1414 004e 1343     		orr	r3, r2
 1415 0050 8022     		mov	r2, #128
 1416 0052 1206     		lsl	r2, r2, #24
 1417 0054 1343     		orr	r3, r2
 1418 0056 3B61     		str	r3, [r7, #16]
 714:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = CodeSchemeTemp;
 1419              		.loc 1 714 0
 1420 0058 FA68     		ldr	r2, [r7, #12]
 1421 005a F823     		mov	r3, #248
 1422 005c 5B00     		lsl	r3, r3, #1
 1423 005e 3969     		ldr	r1, [r7, #16]
 1424 0060 D150     		str	r1, [r2, r3]
 715:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 716:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1425              		.loc 1 716 0
 1426 0062 0023     		mov	r3, #0
 1427 0064 7B61     		str	r3, [r7, #20]
 1428 0066 01E0     		b	.L63
 1429              	.L64:
 717:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 718:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 719:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 720:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1430              		.loc 1 720 0
 1431 0068 0223     		mov	r3, #2
 1432 006a 7B61     		str	r3, [r7, #20]
 1433              	.L63:
 721:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 722:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 723:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 724:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 725:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 726:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 727:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 728:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 729:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1434              		.loc 1 729 0
 1435 006c 7B69     		ldr	r3, [r7, #20]
 730:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1436              		.loc 1 730 0
 1437 006e 181C     		mov	r0, r3
 1438 0070 BD46     		mov	sp, r7
 1439 0072 06B0     		add	sp, sp, #24
 1440              		@ sp needed for prologue
 1441 0074 80BD     		pop	{r7, pc}
 1442              	.L67:
 1443 0076 C046     		.align	2
 1444              	.L66:
 1445 0078 FFFFFFEF 		.word	-268435457
 1446              		.cfi_endproc
 1447              	.LFE52:
 1449              		.section	.text.ADCGROUP001_SetGroupClass0SampleTime,"ax",%progbits
 1450              		.align	2
 1451              		.global	ADCGROUP001_SetGroupClass0SampleTime
 1452              		.code	16
 1453              		.thumb_func
 1455              	ADCGROUP001_SetGroupClass0SampleTime:
 1456              	.LFB53:
 731:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 732:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for standard conversion mode */
 733:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0SampleTime(
 734:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 735:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                              uint8_t SampleTime)
 736:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1457              		.loc 1 736 0
 1458              		.cfi_startproc
 1459 0000 80B5     		push	{r7, lr}
 1460              	.LCFI44:
 1461              		.cfi_def_cfa_offset 8
 1462              		.cfi_offset 7, -8
 1463              		.cfi_offset 14, -4
 1464 0002 84B0     		sub	sp, sp, #16
 1465              	.LCFI45:
 1466              		.cfi_def_cfa_offset 24
 1467 0004 00AF     		add	r7, sp, #0
 1468              	.LCFI46:
 1469              		.cfi_def_cfa_register 7
 1470 0006 7860     		str	r0, [r7, #4]
 1471 0008 0A1C     		mov	r2, r1
 1472 000a FB1C     		add	r3, r7, #3
 1473 000c 1A70     		strb	r2, [r3]
 737:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1474              		.loc 1 737 0
 1475 000e 0123     		mov	r3, #1
 1476 0010 FB60     		str	r3, [r7, #12]
 738:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 739:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 740:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1477              		.loc 1 740 0
 1478 0012 7B68     		ldr	r3, [r7, #4]
 1479 0014 5B69     		ldr	r3, [r3, #20]
 1480 0016 BB60     		str	r3, [r7, #8]
 741:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 742:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1481              		.loc 1 742 0
 1482 0018 7B68     		ldr	r3, [r7, #4]
 1483 001a DB68     		ldr	r3, [r3, #12]
 1484 001c 1B78     		ldrb	r3, [r3]
 1485 001e 012B     		cmp	r3, #1
 1486 0020 16D1     		bne	.L69
 743:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 744:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1487              		.loc 1 744 0
 1488 0022 FB1C     		add	r3, r7, #3
 1489 0024 1B78     		ldrb	r3, [r3]
 1490 0026 1F2B     		cmp	r3, #31
 1491 0028 10D8     		bhi	.L70
 745:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 746:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set standard sample time control for class 0 */
 747:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_STCS_Msk,
 1492              		.loc 1 747 0
 1493 002a FB1C     		add	r3, r7, #3
 1494 002c 1A78     		ldrb	r2, [r3]
 1495 002e 1F23     		mov	r3, #31
 1496 0030 1A40     		and	r2, r3
 1497 0032 B968     		ldr	r1, [r7, #8]
 1498 0034 A023     		mov	r3, #160
 1499 0036 CB58     		ldr	r3, [r1, r3]
 1500 0038 1F21     		mov	r1, #31
 1501 003a 8B43     		bic	r3, r1
 1502 003c 111C     		mov	r1, r2
 1503 003e 1943     		orr	r1, r3
 1504 0040 BA68     		ldr	r2, [r7, #8]
 1505 0042 A023     		mov	r3, #160
 1506 0044 D150     		str	r1, [r2, r3]
 748:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCS_Pos, (uint32_t)SampleTime);
 749:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 750:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1507              		.loc 1 750 0
 1508 0046 0023     		mov	r3, #0
 1509 0048 FB60     		str	r3, [r7, #12]
 1510 004a 01E0     		b	.L69
 1511              	.L70:
 751:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 752:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 753:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 754:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1512              		.loc 1 754 0
 1513 004c 0223     		mov	r3, #2
 1514 004e FB60     		str	r3, [r7, #12]
 1515              	.L69:
 755:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 756:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 757:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 758:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 759:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 760:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 761:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 762:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 763:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1516              		.loc 1 763 0
 1517 0050 FB68     		ldr	r3, [r7, #12]
 764:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1518              		.loc 1 764 0
 1519 0052 181C     		mov	r0, r3
 1520 0054 BD46     		mov	sp, r7
 1521 0056 04B0     		add	sp, sp, #16
 1522              		@ sp needed for prologue
 1523 0058 80BD     		pop	{r7, pc}
 1524              		.cfi_endproc
 1525              	.LFE53:
 1527 005a C046     		.section	.text.ADCGROUP001_SetGroupClass1SampleTime,"ax",%progbits
 1528              		.align	2
 1529              		.global	ADCGROUP001_SetGroupClass1SampleTime
 1530              		.code	16
 1531              		.thumb_func
 1533              	ADCGROUP001_SetGroupClass1SampleTime:
 1534              	.LFB54:
 765:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 766:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 767:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for standard conversion mode */
 768:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1SampleTime(
 769:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 770:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                              uint8_t SampleTime)
 771:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1535              		.loc 1 771 0
 1536              		.cfi_startproc
 1537 0000 80B5     		push	{r7, lr}
 1538              	.LCFI47:
 1539              		.cfi_def_cfa_offset 8
 1540              		.cfi_offset 7, -8
 1541              		.cfi_offset 14, -4
 1542 0002 84B0     		sub	sp, sp, #16
 1543              	.LCFI48:
 1544              		.cfi_def_cfa_offset 24
 1545 0004 00AF     		add	r7, sp, #0
 1546              	.LCFI49:
 1547              		.cfi_def_cfa_register 7
 1548 0006 7860     		str	r0, [r7, #4]
 1549 0008 0A1C     		mov	r2, r1
 1550 000a FB1C     		add	r3, r7, #3
 1551 000c 1A70     		strb	r2, [r3]
 772:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1552              		.loc 1 772 0
 1553 000e 0123     		mov	r3, #1
 1554 0010 FB60     		str	r3, [r7, #12]
 773:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 774:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 775:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1555              		.loc 1 775 0
 1556 0012 7B68     		ldr	r3, [r7, #4]
 1557 0014 5B69     		ldr	r3, [r3, #20]
 1558 0016 BB60     		str	r3, [r7, #8]
 776:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 777:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1559              		.loc 1 777 0
 1560 0018 7B68     		ldr	r3, [r7, #4]
 1561 001a DB68     		ldr	r3, [r3, #12]
 1562 001c 1B78     		ldrb	r3, [r3]
 1563 001e 012B     		cmp	r3, #1
 1564 0020 16D1     		bne	.L73
 778:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 779:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1565              		.loc 1 779 0
 1566 0022 FB1C     		add	r3, r7, #3
 1567 0024 1B78     		ldrb	r3, [r3]
 1568 0026 1F2B     		cmp	r3, #31
 1569 0028 10D8     		bhi	.L74
 780:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 781:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set standard sample time control for class 1 */
 782:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_STCS_Msk,
 1570              		.loc 1 782 0
 1571 002a FB1C     		add	r3, r7, #3
 1572 002c 1A78     		ldrb	r2, [r3]
 1573 002e 1F23     		mov	r3, #31
 1574 0030 1A40     		and	r2, r3
 1575 0032 B968     		ldr	r1, [r7, #8]
 1576 0034 A423     		mov	r3, #164
 1577 0036 CB58     		ldr	r3, [r1, r3]
 1578 0038 1F21     		mov	r1, #31
 1579 003a 8B43     		bic	r3, r1
 1580 003c 111C     		mov	r1, r2
 1581 003e 1943     		orr	r1, r3
 1582 0040 BA68     		ldr	r2, [r7, #8]
 1583 0042 A423     		mov	r3, #164
 1584 0044 D150     		str	r1, [r2, r3]
 783:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCS_Pos, (uint32_t)SampleTime);
 784:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 785:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1585              		.loc 1 785 0
 1586 0046 0023     		mov	r3, #0
 1587 0048 FB60     		str	r3, [r7, #12]
 1588 004a 01E0     		b	.L73
 1589              	.L74:
 786:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 787:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 788:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 789:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1590              		.loc 1 789 0
 1591 004c 0223     		mov	r3, #2
 1592 004e FB60     		str	r3, [r7, #12]
 1593              	.L73:
 790:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 791:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 792:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 793:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 794:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 795:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 796:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 797:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 798:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1594              		.loc 1 798 0
 1595 0050 FB68     		ldr	r3, [r7, #12]
 799:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1596              		.loc 1 799 0
 1597 0052 181C     		mov	r0, r3
 1598 0054 BD46     		mov	sp, r7
 1599 0056 04B0     		add	sp, sp, #16
 1600              		@ sp needed for prologue
 1601 0058 80BD     		pop	{r7, pc}
 1602              		.cfi_endproc
 1603              	.LFE54:
 1605 005a C046     		.section	.text.ADCGROUP001_SetGroupClass0EmuxSampleTime,"ax",%progbits
 1606              		.align	2
 1607              		.global	ADCGROUP001_SetGroupClass0EmuxSampleTime
 1608              		.code	16
 1609              		.thumb_func
 1611              	ADCGROUP001_SetGroupClass0EmuxSampleTime:
 1612              	.LFB55:
 800:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 801:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 802:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for EMUX conversion mode*/
 803:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0EmuxSampleTime(
 804:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 805:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t SampleTime)
 806:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1613              		.loc 1 806 0
 1614              		.cfi_startproc
 1615 0000 80B5     		push	{r7, lr}
 1616              	.LCFI50:
 1617              		.cfi_def_cfa_offset 8
 1618              		.cfi_offset 7, -8
 1619              		.cfi_offset 14, -4
 1620 0002 84B0     		sub	sp, sp, #16
 1621              	.LCFI51:
 1622              		.cfi_def_cfa_offset 24
 1623 0004 00AF     		add	r7, sp, #0
 1624              	.LCFI52:
 1625              		.cfi_def_cfa_register 7
 1626 0006 7860     		str	r0, [r7, #4]
 1627 0008 0A1C     		mov	r2, r1
 1628 000a FB1C     		add	r3, r7, #3
 1629 000c 1A70     		strb	r2, [r3]
 807:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1630              		.loc 1 807 0
 1631 000e 0123     		mov	r3, #1
 1632 0010 FB60     		str	r3, [r7, #12]
 808:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 809:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 810:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1633              		.loc 1 810 0
 1634 0012 7B68     		ldr	r3, [r7, #4]
 1635 0014 5B69     		ldr	r3, [r3, #20]
 1636 0016 BB60     		str	r3, [r7, #8]
 811:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 812:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1637              		.loc 1 812 0
 1638 0018 7B68     		ldr	r3, [r7, #4]
 1639 001a DB68     		ldr	r3, [r3, #12]
 1640 001c 1B78     		ldrb	r3, [r3]
 1641 001e 012B     		cmp	r3, #1
 1642 0020 18D1     		bne	.L77
 813:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 814:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1643              		.loc 1 814 0
 1644 0022 FB1C     		add	r3, r7, #3
 1645 0024 1B78     		ldrb	r3, [r3]
 1646 0026 1F2B     		cmp	r3, #31
 1647 0028 12D8     		bhi	.L78
 815:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 816:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX sample time control for class 0 */
 817:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_STCE_Msk,
 1648              		.loc 1 817 0
 1649 002a FB1C     		add	r3, r7, #3
 1650 002c 1B78     		ldrb	r3, [r3]
 1651 002e 1A04     		lsl	r2, r3, #16
 1652 0030 F823     		mov	r3, #248
 1653 0032 5B03     		lsl	r3, r3, #13
 1654 0034 1A40     		and	r2, r3
 1655 0036 B968     		ldr	r1, [r7, #8]
 1656 0038 A023     		mov	r3, #160
 1657 003a C958     		ldr	r1, [r1, r3]
 1658 003c 084B     		ldr	r3, .L80
 1659 003e 0B40     		and	r3, r1
 1660 0040 111C     		mov	r1, r2
 1661 0042 1943     		orr	r1, r3
 1662 0044 BA68     		ldr	r2, [r7, #8]
 1663 0046 A023     		mov	r3, #160
 1664 0048 D150     		str	r1, [r2, r3]
 818:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCE_Pos, (uint32_t)SampleTime);
 819:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 820:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1665              		.loc 1 820 0
 1666 004a 0023     		mov	r3, #0
 1667 004c FB60     		str	r3, [r7, #12]
 1668 004e 01E0     		b	.L77
 1669              	.L78:
 821:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 822:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 823:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 824:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1670              		.loc 1 824 0
 1671 0050 0223     		mov	r3, #2
 1672 0052 FB60     		str	r3, [r7, #12]
 1673              	.L77:
 825:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 826:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 827:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 828:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 829:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 830:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 831:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 832:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 833:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1674              		.loc 1 833 0
 1675 0054 FB68     		ldr	r3, [r7, #12]
 834:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1676              		.loc 1 834 0
 1677 0056 181C     		mov	r0, r3
 1678 0058 BD46     		mov	sp, r7
 1679 005a 04B0     		add	sp, sp, #16
 1680              		@ sp needed for prologue
 1681 005c 80BD     		pop	{r7, pc}
 1682              	.L81:
 1683 005e C046     		.align	2
 1684              	.L80:
 1685 0060 FFFFE0FF 		.word	-2031617
 1686              		.cfi_endproc
 1687              	.LFE55:
 1689              		.section	.text.ADCGROUP001_SetGroupClass1EmuxSampleTime,"ax",%progbits
 1690              		.align	2
 1691              		.global	ADCGROUP001_SetGroupClass1EmuxSampleTime
 1692              		.code	16
 1693              		.thumb_func
 1695              	ADCGROUP001_SetGroupClass1EmuxSampleTime:
 1696              	.LFB56:
 835:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 836:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 837:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for EMUX conversion mode*/
 838:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1EmuxSampleTime(
 839:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 840:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t SampleTime)
 841:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1697              		.loc 1 841 0
 1698              		.cfi_startproc
 1699 0000 80B5     		push	{r7, lr}
 1700              	.LCFI53:
 1701              		.cfi_def_cfa_offset 8
 1702              		.cfi_offset 7, -8
 1703              		.cfi_offset 14, -4
 1704 0002 84B0     		sub	sp, sp, #16
 1705              	.LCFI54:
 1706              		.cfi_def_cfa_offset 24
 1707 0004 00AF     		add	r7, sp, #0
 1708              	.LCFI55:
 1709              		.cfi_def_cfa_register 7
 1710 0006 7860     		str	r0, [r7, #4]
 1711 0008 0A1C     		mov	r2, r1
 1712 000a FB1C     		add	r3, r7, #3
 1713 000c 1A70     		strb	r2, [r3]
 842:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1714              		.loc 1 842 0
 1715 000e 0123     		mov	r3, #1
 1716 0010 FB60     		str	r3, [r7, #12]
 843:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 844:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 845:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1717              		.loc 1 845 0
 1718 0012 7B68     		ldr	r3, [r7, #4]
 1719 0014 5B69     		ldr	r3, [r3, #20]
 1720 0016 BB60     		str	r3, [r7, #8]
 846:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 847:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1721              		.loc 1 847 0
 1722 0018 7B68     		ldr	r3, [r7, #4]
 1723 001a DB68     		ldr	r3, [r3, #12]
 1724 001c 1B78     		ldrb	r3, [r3]
 1725 001e 012B     		cmp	r3, #1
 1726 0020 18D1     		bne	.L83
 848:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 849:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1727              		.loc 1 849 0
 1728 0022 FB1C     		add	r3, r7, #3
 1729 0024 1B78     		ldrb	r3, [r3]
 1730 0026 1F2B     		cmp	r3, #31
 1731 0028 12D8     		bhi	.L84
 850:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 851:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX sample time control for class 1 */
 852:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_STCE_Msk,
 1732              		.loc 1 852 0
 1733 002a FB1C     		add	r3, r7, #3
 1734 002c 1B78     		ldrb	r3, [r3]
 1735 002e 1A04     		lsl	r2, r3, #16
 1736 0030 F823     		mov	r3, #248
 1737 0032 5B03     		lsl	r3, r3, #13
 1738 0034 1A40     		and	r2, r3
 1739 0036 B968     		ldr	r1, [r7, #8]
 1740 0038 A423     		mov	r3, #164
 1741 003a C958     		ldr	r1, [r1, r3]
 1742 003c 084B     		ldr	r3, .L86
 1743 003e 0B40     		and	r3, r1
 1744 0040 111C     		mov	r1, r2
 1745 0042 1943     		orr	r1, r3
 1746 0044 BA68     		ldr	r2, [r7, #8]
 1747 0046 A423     		mov	r3, #164
 1748 0048 D150     		str	r1, [r2, r3]
 853:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                   VADC_G_ICLASS_STCE_Pos, (uint32_t)SampleTime);
 854:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1749              		.loc 1 854 0
 1750 004a 0023     		mov	r3, #0
 1751 004c FB60     		str	r3, [r7, #12]
 1752 004e 01E0     		b	.L83
 1753              	.L84:
 855:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 856:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 857:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 858:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1754              		.loc 1 858 0
 1755 0050 0223     		mov	r3, #2
 1756 0052 FB60     		str	r3, [r7, #12]
 1757              	.L83:
 859:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 860:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 861:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 862:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 863:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 864:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 865:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 866:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 867:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1758              		.loc 1 867 0
 1759 0054 FB68     		ldr	r3, [r7, #12]
 868:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1760              		.loc 1 868 0
 1761 0056 181C     		mov	r0, r3
 1762 0058 BD46     		mov	sp, r7
 1763 005a 04B0     		add	sp, sp, #16
 1764              		@ sp needed for prologue
 1765 005c 80BD     		pop	{r7, pc}
 1766              	.L87:
 1767 005e C046     		.align	2
 1768              	.L86:
 1769 0060 FFFFE0FF 		.word	-2031617
 1770              		.cfi_endproc
 1771              	.LFE56:
 1773              		.section	.text.ADCGROUP001_SetGroupClass0ConvMode,"ax",%progbits
 1774              		.align	2
 1775              		.global	ADCGROUP001_SetGroupClass0ConvMode
 1776              		.code	16
 1777              		.thumb_func
 1779              	ADCGROUP001_SetGroupClass0ConvMode:
 1780              	.LFB57:
 869:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 870:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 871:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the standard conversion mode in group class 0 */
 872:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0ConvMode(
 873:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       const ADCGROUP001_HandleType *HandlePtr,
 874:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       uint8_t ConversionModeVal)
 875:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1781              		.loc 1 875 0
 1782              		.cfi_startproc
 1783 0000 80B5     		push	{r7, lr}
 1784              	.LCFI56:
 1785              		.cfi_def_cfa_offset 8
 1786              		.cfi_offset 7, -8
 1787              		.cfi_offset 14, -4
 1788 0002 84B0     		sub	sp, sp, #16
 1789              	.LCFI57:
 1790              		.cfi_def_cfa_offset 24
 1791 0004 00AF     		add	r7, sp, #0
 1792              	.LCFI58:
 1793              		.cfi_def_cfa_register 7
 1794 0006 7860     		str	r0, [r7, #4]
 1795 0008 0A1C     		mov	r2, r1
 1796 000a FB1C     		add	r3, r7, #3
 1797 000c 1A70     		strb	r2, [r3]
 876:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1798              		.loc 1 876 0
 1799 000e 0123     		mov	r3, #1
 1800 0010 FB60     		str	r3, [r7, #12]
 877:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 878:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 879:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1801              		.loc 1 879 0
 1802 0012 7B68     		ldr	r3, [r7, #4]
 1803 0014 5B69     		ldr	r3, [r3, #20]
 1804 0016 BB60     		str	r3, [r7, #8]
 880:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 881:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1805              		.loc 1 881 0
 1806 0018 7B68     		ldr	r3, [r7, #4]
 1807 001a DB68     		ldr	r3, [r3, #12]
 1808 001c 1B78     		ldrb	r3, [r3]
 1809 001e 012B     		cmp	r3, #1
 1810 0020 1CD1     		bne	.L89
 882:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 883:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1811              		.loc 1 883 0
 1812 0022 FB1C     		add	r3, r7, #3
 1813 0024 1B78     		ldrb	r3, [r3]
 1814 0026 022B     		cmp	r3, #2
 1815 0028 03D9     		bls	.L90
 1816              		.loc 1 883 0 is_stmt 0 discriminator 1
 1817 002a FB1C     		add	r3, r7, #3
 1818 002c 1B78     		ldrb	r3, [r3]
 1819 002e 052B     		cmp	r3, #5
 1820 0030 12D1     		bne	.L91
 1821              	.L90:
 884:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 885:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 886:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set conversion mode for class 0 */
 887:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_CMS_Msk,
 1822              		.loc 1 887 0 is_stmt 1
 1823 0032 FB1C     		add	r3, r7, #3
 1824 0034 1B78     		ldrb	r3, [r3]
 1825 0036 1A02     		lsl	r2, r3, #8
 1826 0038 E023     		mov	r3, #224
 1827 003a DB00     		lsl	r3, r3, #3
 1828 003c 1A40     		and	r2, r3
 1829 003e B968     		ldr	r1, [r7, #8]
 1830 0040 A023     		mov	r3, #160
 1831 0042 C958     		ldr	r1, [r1, r3]
 1832 0044 084B     		ldr	r3, .L94
 1833 0046 0B40     		and	r3, r1
 1834 0048 111C     		mov	r1, r2
 1835 004a 1943     		orr	r1, r3
 1836 004c BA68     		ldr	r2, [r7, #8]
 1837 004e A023     		mov	r3, #160
 1838 0050 D150     		str	r1, [r2, r3]
 888:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CMS_Pos, (uint32_t)ConversionModeVal);
 889:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 890:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1839              		.loc 1 890 0
 1840 0052 0023     		mov	r3, #0
 1841 0054 FB60     		str	r3, [r7, #12]
 1842 0056 01E0     		b	.L89
 1843              	.L91:
 891:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 892:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 893:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 894:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1844              		.loc 1 894 0
 1845 0058 0223     		mov	r3, #2
 1846 005a FB60     		str	r3, [r7, #12]
 1847              	.L89:
 895:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 896:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 897:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 898:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 899:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 900:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 901:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 902:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 903:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1848              		.loc 1 903 0
 1849 005c FB68     		ldr	r3, [r7, #12]
 904:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1850              		.loc 1 904 0
 1851 005e 181C     		mov	r0, r3
 1852 0060 BD46     		mov	sp, r7
 1853 0062 04B0     		add	sp, sp, #16
 1854              		@ sp needed for prologue
 1855 0064 80BD     		pop	{r7, pc}
 1856              	.L95:
 1857 0066 C046     		.align	2
 1858              	.L94:
 1859 0068 FFF8FFFF 		.word	-1793
 1860              		.cfi_endproc
 1861              	.LFE57:
 1863              		.section	.text.ADCGROUP001_SetGroupClass1ConvMode,"ax",%progbits
 1864              		.align	2
 1865              		.global	ADCGROUP001_SetGroupClass1ConvMode
 1866              		.code	16
 1867              		.thumb_func
 1869              	ADCGROUP001_SetGroupClass1ConvMode:
 1870              	.LFB58:
 905:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 906:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 907:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the standard conversion mode */
 908:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1ConvMode(
 909:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       const ADCGROUP001_HandleType *HandlePtr,
 910:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       uint8_t ConversionModeVal)
 911:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1871              		.loc 1 911 0
 1872              		.cfi_startproc
 1873 0000 80B5     		push	{r7, lr}
 1874              	.LCFI59:
 1875              		.cfi_def_cfa_offset 8
 1876              		.cfi_offset 7, -8
 1877              		.cfi_offset 14, -4
 1878 0002 84B0     		sub	sp, sp, #16
 1879              	.LCFI60:
 1880              		.cfi_def_cfa_offset 24
 1881 0004 00AF     		add	r7, sp, #0
 1882              	.LCFI61:
 1883              		.cfi_def_cfa_register 7
 1884 0006 7860     		str	r0, [r7, #4]
 1885 0008 0A1C     		mov	r2, r1
 1886 000a FB1C     		add	r3, r7, #3
 1887 000c 1A70     		strb	r2, [r3]
 912:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1888              		.loc 1 912 0
 1889 000e 0123     		mov	r3, #1
 1890 0010 FB60     		str	r3, [r7, #12]
 913:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 914:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 915:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1891              		.loc 1 915 0
 1892 0012 7B68     		ldr	r3, [r7, #4]
 1893 0014 5B69     		ldr	r3, [r3, #20]
 1894 0016 BB60     		str	r3, [r7, #8]
 916:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 917:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1895              		.loc 1 917 0
 1896 0018 7B68     		ldr	r3, [r7, #4]
 1897 001a DB68     		ldr	r3, [r3, #12]
 1898 001c 1B78     		ldrb	r3, [r3]
 1899 001e 012B     		cmp	r3, #1
 1900 0020 1CD1     		bne	.L97
 918:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 919:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1901              		.loc 1 919 0
 1902 0022 FB1C     		add	r3, r7, #3
 1903 0024 1B78     		ldrb	r3, [r3]
 1904 0026 022B     		cmp	r3, #2
 1905 0028 03D9     		bls	.L98
 1906              		.loc 1 919 0 is_stmt 0 discriminator 1
 1907 002a FB1C     		add	r3, r7, #3
 1908 002c 1B78     		ldrb	r3, [r3]
 1909 002e 052B     		cmp	r3, #5
 1910 0030 12D1     		bne	.L99
 1911              	.L98:
 920:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 921:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 922:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set conversion mode for class 1 */
 923:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_CMS_Msk,
 1912              		.loc 1 923 0 is_stmt 1
 1913 0032 FB1C     		add	r3, r7, #3
 1914 0034 1B78     		ldrb	r3, [r3]
 1915 0036 1A02     		lsl	r2, r3, #8
 1916 0038 E023     		mov	r3, #224
 1917 003a DB00     		lsl	r3, r3, #3
 1918 003c 1A40     		and	r2, r3
 1919 003e B968     		ldr	r1, [r7, #8]
 1920 0040 A423     		mov	r3, #164
 1921 0042 C958     		ldr	r1, [r1, r3]
 1922 0044 084B     		ldr	r3, .L102
 1923 0046 0B40     		and	r3, r1
 1924 0048 111C     		mov	r1, r2
 1925 004a 1943     		orr	r1, r3
 1926 004c BA68     		ldr	r2, [r7, #8]
 1927 004e A423     		mov	r3, #164
 1928 0050 D150     		str	r1, [r2, r3]
 924:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CMS_Pos, (uint32_t)ConversionModeVal);
 925:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1929              		.loc 1 925 0
 1930 0052 0023     		mov	r3, #0
 1931 0054 FB60     		str	r3, [r7, #12]
 1932 0056 01E0     		b	.L97
 1933              	.L99:
 926:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 927:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 928:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 929:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1934              		.loc 1 929 0
 1935 0058 0223     		mov	r3, #2
 1936 005a FB60     		str	r3, [r7, #12]
 1937              	.L97:
 930:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 931:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 932:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 933:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 934:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 935:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 936:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 937:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 938:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1938              		.loc 1 938 0
 1939 005c FB68     		ldr	r3, [r7, #12]
 939:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1940              		.loc 1 939 0
 1941 005e 181C     		mov	r0, r3
 1942 0060 BD46     		mov	sp, r7
 1943 0062 04B0     		add	sp, sp, #16
 1944              		@ sp needed for prologue
 1945 0064 80BD     		pop	{r7, pc}
 1946              	.L103:
 1947 0066 C046     		.align	2
 1948              	.L102:
 1949 0068 FFF8FFFF 		.word	-1793
 1950              		.cfi_endproc
 1951              	.LFE58:
 1953              		.section	.text.ADCGROUP001_SetGroupClass0EmuxConvMode,"ax",%progbits
 1954              		.align	2
 1955              		.global	ADCGROUP001_SetGroupClass0EmuxConvMode
 1956              		.code	16
 1957              		.thumb_func
 1959              	ADCGROUP001_SetGroupClass0EmuxConvMode:
 1960              	.LFB59:
 940:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 941:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 942:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the emux conversion mode */
 943:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0EmuxConvMode(
 944:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 945:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t ConversionModeVal
 946:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           )
 947:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1961              		.loc 1 947 0
 1962              		.cfi_startproc
 1963 0000 80B5     		push	{r7, lr}
 1964              	.LCFI62:
 1965              		.cfi_def_cfa_offset 8
 1966              		.cfi_offset 7, -8
 1967              		.cfi_offset 14, -4
 1968 0002 84B0     		sub	sp, sp, #16
 1969              	.LCFI63:
 1970              		.cfi_def_cfa_offset 24
 1971 0004 00AF     		add	r7, sp, #0
 1972              	.LCFI64:
 1973              		.cfi_def_cfa_register 7
 1974 0006 7860     		str	r0, [r7, #4]
 1975 0008 0A1C     		mov	r2, r1
 1976 000a FB1C     		add	r3, r7, #3
 1977 000c 1A70     		strb	r2, [r3]
 948:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1978              		.loc 1 948 0
 1979 000e 0123     		mov	r3, #1
 1980 0010 FB60     		str	r3, [r7, #12]
 949:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 950:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 951:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1981              		.loc 1 951 0
 1982 0012 7B68     		ldr	r3, [r7, #4]
 1983 0014 5B69     		ldr	r3, [r3, #20]
 1984 0016 BB60     		str	r3, [r7, #8]
 952:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 953:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1985              		.loc 1 953 0
 1986 0018 7B68     		ldr	r3, [r7, #4]
 1987 001a DB68     		ldr	r3, [r3, #12]
 1988 001c 1B78     		ldrb	r3, [r3]
 1989 001e 012B     		cmp	r3, #1
 1990 0020 1CD1     		bne	.L105
 954:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 955:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1991              		.loc 1 955 0
 1992 0022 FB1C     		add	r3, r7, #3
 1993 0024 1B78     		ldrb	r3, [r3]
 1994 0026 022B     		cmp	r3, #2
 1995 0028 03D9     		bls	.L106
 1996              		.loc 1 955 0 is_stmt 0 discriminator 1
 1997 002a FB1C     		add	r3, r7, #3
 1998 002c 1B78     		ldrb	r3, [r3]
 1999 002e 052B     		cmp	r3, #5
 2000 0030 12D1     		bne	.L107
 2001              	.L106:
 956:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 957:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 958:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX conversion mode for class 0 */
 959:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_CME_Msk,
 2002              		.loc 1 959 0 is_stmt 1
 2003 0032 FB1C     		add	r3, r7, #3
 2004 0034 1B78     		ldrb	r3, [r3]
 2005 0036 1A06     		lsl	r2, r3, #24
 2006 0038 E023     		mov	r3, #224
 2007 003a DB04     		lsl	r3, r3, #19
 2008 003c 1A40     		and	r2, r3
 2009 003e B968     		ldr	r1, [r7, #8]
 2010 0040 A023     		mov	r3, #160
 2011 0042 C958     		ldr	r1, [r1, r3]
 2012 0044 084B     		ldr	r3, .L110
 2013 0046 0B40     		and	r3, r1
 2014 0048 111C     		mov	r1, r2
 2015 004a 1943     		orr	r1, r3
 2016 004c BA68     		ldr	r2, [r7, #8]
 2017 004e A023     		mov	r3, #160
 2018 0050 D150     		str	r1, [r2, r3]
 960:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CME_Pos, (uint32_t)ConversionModeVal);
 961:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 962:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2019              		.loc 1 962 0
 2020 0052 0023     		mov	r3, #0
 2021 0054 FB60     		str	r3, [r7, #12]
 2022 0056 01E0     		b	.L105
 2023              	.L107:
 963:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 964:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 965:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 966:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 2024              		.loc 1 966 0
 2025 0058 0223     		mov	r3, #2
 2026 005a FB60     		str	r3, [r7, #12]
 2027              	.L105:
 967:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 968:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 969:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 970:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 971:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 972:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 973:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 974:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 975:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 2028              		.loc 1 975 0
 2029 005c FB68     		ldr	r3, [r7, #12]
 976:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 2030              		.loc 1 976 0
 2031 005e 181C     		mov	r0, r3
 2032 0060 BD46     		mov	sp, r7
 2033 0062 04B0     		add	sp, sp, #16
 2034              		@ sp needed for prologue
 2035 0064 80BD     		pop	{r7, pc}
 2036              	.L111:
 2037 0066 C046     		.align	2
 2038              	.L110:
 2039 0068 FFFFFFF8 		.word	-117440513
 2040              		.cfi_endproc
 2041              	.LFE59:
 2043              		.section	.text.ADCGROUP001_SetGroupClass1EmuxConvMode,"ax",%progbits
 2044              		.align	2
 2045              		.global	ADCGROUP001_SetGroupClass1EmuxConvMode
 2046              		.code	16
 2047              		.thumb_func
 2049              	ADCGROUP001_SetGroupClass1EmuxConvMode:
 2050              	.LFB60:
 977:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 978:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 979:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the emux conversion mode */
 980:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1EmuxConvMode(
 981:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr,
 982:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t ConversionModeVal
 983:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           )
 984:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 2051              		.loc 1 984 0
 2052              		.cfi_startproc
 2053 0000 80B5     		push	{r7, lr}
 2054              	.LCFI65:
 2055              		.cfi_def_cfa_offset 8
 2056              		.cfi_offset 7, -8
 2057              		.cfi_offset 14, -4
 2058 0002 84B0     		sub	sp, sp, #16
 2059              	.LCFI66:
 2060              		.cfi_def_cfa_offset 24
 2061 0004 00AF     		add	r7, sp, #0
 2062              	.LCFI67:
 2063              		.cfi_def_cfa_register 7
 2064 0006 7860     		str	r0, [r7, #4]
 2065 0008 0A1C     		mov	r2, r1
 2066 000a FB1C     		add	r3, r7, #3
 2067 000c 1A70     		strb	r2, [r3]
 985:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 2068              		.loc 1 985 0
 2069 000e 0123     		mov	r3, #1
 2070 0010 FB60     		str	r3, [r7, #12]
 986:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 987:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
 988:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 2071              		.loc 1 988 0
 2072 0012 7B68     		ldr	r3, [r7, #4]
 2073 0014 5B69     		ldr	r3, [r3, #20]
 2074 0016 BB60     		str	r3, [r7, #8]
 989:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 990:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 2075              		.loc 1 990 0
 2076 0018 7B68     		ldr	r3, [r7, #4]
 2077 001a DB68     		ldr	r3, [r3, #12]
 2078 001c 1B78     		ldrb	r3, [r3]
 2079 001e 012B     		cmp	r3, #1
 2080 0020 1CD1     		bne	.L113
 991:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 992:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 2081              		.loc 1 992 0
 2082 0022 FB1C     		add	r3, r7, #3
 2083 0024 1B78     		ldrb	r3, [r3]
 2084 0026 022B     		cmp	r3, #2
 2085 0028 03D9     		bls	.L114
 2086              		.loc 1 992 0 is_stmt 0 discriminator 1
 2087 002a FB1C     		add	r3, r7, #3
 2088 002c 1B78     		ldrb	r3, [r3]
 2089 002e 052B     		cmp	r3, #5
 2090 0030 12D1     		bne	.L115
 2091              	.L114:
 993:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 994:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 995:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX conversion mode for class 1 */
 996:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_CME_Msk,
 2092              		.loc 1 996 0 is_stmt 1
 2093 0032 FB1C     		add	r3, r7, #3
 2094 0034 1B78     		ldrb	r3, [r3]
 2095 0036 1A06     		lsl	r2, r3, #24
 2096 0038 E023     		mov	r3, #224
 2097 003a DB04     		lsl	r3, r3, #19
 2098 003c 1A40     		and	r2, r3
 2099 003e B968     		ldr	r1, [r7, #8]
 2100 0040 A423     		mov	r3, #164
 2101 0042 C958     		ldr	r1, [r1, r3]
 2102 0044 084B     		ldr	r3, .L118
 2103 0046 0B40     		and	r3, r1
 2104 0048 111C     		mov	r1, r2
 2105 004a 1943     		orr	r1, r3
 2106 004c BA68     		ldr	r2, [r7, #8]
 2107 004e A423     		mov	r3, #164
 2108 0050 D150     		str	r1, [r2, r3]
 997:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_ICLASS_CME_Pos, (uint32_t)ConversionModeVal);
 998:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 999:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2109              		.loc 1 999 0
 2110 0052 0023     		mov	r3, #0
 2111 0054 FB60     		str	r3, [r7, #12]
 2112 0056 01E0     		b	.L113
 2113              	.L115:
1000:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
1001:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
1002:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
1003:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 2114              		.loc 1 1003 0
 2115 0058 0223     		mov	r3, #2
 2116 005a FB60     		str	r3, [r7, #12]
 2117              	.L113:
1004:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1005:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
1006:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
1007:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
1008:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
1009:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1010:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
1011:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1012:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 2118              		.loc 1 1012 0
 2119 005c FB68     		ldr	r3, [r7, #12]
1013:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 2120              		.loc 1 1013 0
 2121 005e 181C     		mov	r0, r3
 2122 0060 BD46     		mov	sp, r7
 2123 0062 04B0     		add	sp, sp, #16
 2124              		@ sp needed for prologue
 2125 0064 80BD     		pop	{r7, pc}
 2126              	.L119:
 2127 0066 C046     		.align	2
 2128              	.L118:
 2129 0068 FFFFFFF8 		.word	-117440513
 2130              		.cfi_endproc
 2131              	.LFE60:
 2133              		.section	.text.ADCGROUP001_SetEMUXSampleTimeControl,"ax",%progbits
 2134              		.align	2
 2135              		.global	ADCGROUP001_SetEMUXSampleTimeControl
 2136              		.code	16
 2137              		.thumb_func
 2139              	ADCGROUP001_SetEMUXSampleTimeControl:
 2140              	.LFB61:
1014:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1015:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1016:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX sample time control. */
1017:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXSampleTimeControl(
1018:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                   const ADCGROUP001_HandleType *HandlePtr, uint8_t ControlValue)
1019:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 2141              		.loc 1 1019 0
 2142              		.cfi_startproc
 2143 0000 80B5     		push	{r7, lr}
 2144              	.LCFI68:
 2145              		.cfi_def_cfa_offset 8
 2146              		.cfi_offset 7, -8
 2147              		.cfi_offset 14, -4
 2148 0002 86B0     		sub	sp, sp, #24
 2149              	.LCFI69:
 2150              		.cfi_def_cfa_offset 32
 2151 0004 00AF     		add	r7, sp, #0
 2152              	.LCFI70:
 2153              		.cfi_def_cfa_register 7
 2154 0006 7860     		str	r0, [r7, #4]
 2155 0008 0A1C     		mov	r2, r1
 2156 000a FB1C     		add	r3, r7, #3
 2157 000c 1A70     		strb	r2, [r3]
1020:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 2158              		.loc 1 1020 0
 2159 000e 0123     		mov	r3, #1
 2160 0010 7B61     		str	r3, [r7, #20]
1021:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t SampleTimeCtrl;
1022:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
1023:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;
1024:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 2161              		.loc 1 1024 0
 2162 0012 7B68     		ldr	r3, [r7, #4]
 2163 0014 5B69     		ldr	r3, [r3, #20]
 2164 0016 3B61     		str	r3, [r7, #16]
1025:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1026:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 2165              		.loc 1 1026 0
 2166 0018 7B68     		ldr	r3, [r7, #4]
 2167 001a DB68     		ldr	r3, [r3, #12]
 2168 001c 1B78     		ldrb	r3, [r3]
 2169 001e 012B     		cmp	r3, #1
 2170 0020 22D1     		bne	.L121
1027:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
1028:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(ControlValue <= (uint8_t)SET)
 2171              		.loc 1 1028 0
 2172 0022 FB1C     		add	r3, r7, #3
 2173 0024 1B78     		ldrb	r3, [r3]
 2174 0026 012B     		cmp	r3, #1
 2175 0028 1CD8     		bhi	.L122
1029:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
1030:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX sample time control */
1031:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl = VADCGroupPtr->EMUXCTR;
 2176              		.loc 1 1031 0
 2177 002a 3A69     		ldr	r2, [r7, #16]
 2178 002c F823     		mov	r3, #248
 2179 002e 5B00     		lsl	r3, r3, #1
 2180 0030 D358     		ldr	r3, [r2, r3]
 2181 0032 FB60     		str	r3, [r7, #12]
1032:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl &= (uint32_t)~(VADC_G_EMUXCTR_EMXST_Msk);
 2182              		.loc 1 1032 0
 2183 0034 FA68     		ldr	r2, [r7, #12]
 2184 0036 0F4B     		ldr	r3, .L124
 2185 0038 1340     		and	r3, r2
 2186 003a FB60     		str	r3, [r7, #12]
1033:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl |= (VADC_G_EMUXCTR_EMXWC_Msk) | \
1034:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                     (((uint32_t)ControlValue << VADC_G_EMUXCTR_EMXST_Pos) & VADC_G_EMUXCTR_EMXST_Ms
 2187              		.loc 1 1034 0
 2188 003c FB1C     		add	r3, r7, #3
 2189 003e 1B78     		ldrb	r3, [r3]
 2190 0040 5A07     		lsl	r2, r3, #29
 2191 0042 8023     		mov	r3, #128
 2192 0044 9B05     		lsl	r3, r3, #22
 2193 0046 1A40     		and	r2, r3
1033:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl |= (VADC_G_EMUXCTR_EMXWC_Msk) | \
 2194              		.loc 1 1033 0
 2195 0048 FB68     		ldr	r3, [r7, #12]
 2196 004a 1343     		orr	r3, r2
 2197 004c 8022     		mov	r2, #128
 2198 004e 1206     		lsl	r2, r2, #24
 2199 0050 1343     		orr	r3, r2
 2200 0052 FB60     		str	r3, [r7, #12]
1035:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = SampleTimeCtrl;
 2201              		.loc 1 1035 0
 2202 0054 3A69     		ldr	r2, [r7, #16]
 2203 0056 F823     		mov	r3, #248
 2204 0058 5B00     		lsl	r3, r3, #1
 2205 005a F968     		ldr	r1, [r7, #12]
 2206 005c D150     		str	r1, [r2, r3]
1036:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1037:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2207              		.loc 1 1037 0
 2208 005e 0023     		mov	r3, #0
 2209 0060 7B61     		str	r3, [r7, #20]
 2210 0062 01E0     		b	.L121
 2211              	.L122:
1038:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
1039:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
1040:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
1041:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 2212              		.loc 1 1041 0
 2213 0064 0223     		mov	r3, #2
 2214 0066 7B61     		str	r3, [r7, #20]
 2215              	.L121:
1042:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1043:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
1044:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
1045:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
1046:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
1047:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1048:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
1049:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1050:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 2216              		.loc 1 1050 0
 2217 0068 7B69     		ldr	r3, [r7, #20]
1051:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 2218              		.loc 1 1051 0
 2219 006a 181C     		mov	r0, r3
 2220 006c BD46     		mov	sp, r7
 2221 006e 06B0     		add	sp, sp, #24
 2222              		@ sp needed for prologue
 2223 0070 80BD     		pop	{r7, pc}
 2224              	.L125:
 2225 0072 C046     		.align	2
 2226              	.L124:
 2227 0074 FFFFFFDF 		.word	-536870913
 2228              		.cfi_endproc
 2229              	.LFE61:
 2231              		.text
 2232              	.Letext0:
 2233              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2234              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 2235              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 2236              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 2237              		.file 6 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
DEFINED SYMBOLS
                            *ABS*:00000000 ADCGroup001.c
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:18     .text.ADCGROUP001_Init:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:23     .text.ADCGROUP001_Init:00000000 ADCGROUP001_Init
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:61     .text.ADCGROUP001_lInit:00000000 ADCGROUP001_lInit
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:51     .text.ADCGROUP001_Init:00000018 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:56     .text.ADCGROUP001_lInit:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:329    .text.ADCGROUP001_lInit:0000019c $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:336    .text.ADCGROUP001_Deinit:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:341    .text.ADCGROUP001_Deinit:00000000 ADCGROUP001_Deinit
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:431    .text.ADCGROUP001_Deinit:00000078 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:436    .text.ADCGROUP001_GetStartupCalStatus:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:441    .text.ADCGROUP001_GetStartupCalStatus:00000000 ADCGROUP001_GetStartupCalStatus
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:487    .text.ADCGROUP001_SetGroupBound0:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:492    .text.ADCGROUP001_SetGroupBound0:00000000 ADCGROUP001_SetGroupBound0
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:567    .text.ADCGROUP001_SetGroupBound1:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:572    .text.ADCGROUP001_SetGroupBound1:00000000 ADCGROUP001_SetGroupBound1
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:647    .text.ADCGROUP001_SetGroupBound1:00000060 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:653    .text.ADCGROUP001_ActiveGroupServiceRequestNode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:658    .text.ADCGROUP001_ActiveGroupServiceRequestNode:00000000 ADCGROUP001_ActiveGroupServiceRequestNode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:751    .text.ADCGROUP001_DeActiveGroupServiceRequestNode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:756    .text.ADCGROUP001_DeActiveGroupServiceRequestNode:00000000 ADCGROUP001_DeActiveGroupServiceRequestNode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:832    .text.ADCGROUP001_ActiveSharedServiceRequestNode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:837    .text.ADCGROUP001_ActiveSharedServiceRequestNode:00000000 ADCGROUP001_ActiveSharedServiceRequestNode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:932    .text.ADCGROUP001_DeActiveSharedServiceRequestNode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:937    .text.ADCGROUP001_DeActiveSharedServiceRequestNode:00000000 ADCGROUP001_DeActiveSharedServiceRequestNode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1014   .text.ADCGROUP001_EMUXStartSelection:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1019   .text.ADCGROUP001_EMUXStartSelection:00000000 ADCGROUP001_EMUXStartSelection
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1094   .text.ADCGROUP001_GetEMUXStartSelection:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1099   .text.ADCGROUP001_GetEMUXStartSelection:00000000 ADCGROUP001_GetEMUXStartSelection
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1165   .text.ADCGROUP001_SetEMUXChannelSelect:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1170   .text.ADCGROUP001_SetEMUXChannelSelect:00000000 ADCGROUP001_SetEMUXChannelSelect
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1245   .text.ADCGROUP001_SetEMUXChannelSelect:00000060 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1251   .text.ADCGROUP001_SetEMUXMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1256   .text.ADCGROUP001_SetEMUXMode:00000000 ADCGROUP001_SetEMUXMode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1344   .text.ADCGROUP001_SetEMUXMode:00000074 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1349   .text.ADCGROUP001_SetEMUXCodeScheme:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1354   .text.ADCGROUP001_SetEMUXCodeScheme:00000000 ADCGROUP001_SetEMUXCodeScheme
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1445   .text.ADCGROUP001_SetEMUXCodeScheme:00000078 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1450   .text.ADCGROUP001_SetGroupClass0SampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1455   .text.ADCGROUP001_SetGroupClass0SampleTime:00000000 ADCGROUP001_SetGroupClass0SampleTime
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1528   .text.ADCGROUP001_SetGroupClass1SampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1533   .text.ADCGROUP001_SetGroupClass1SampleTime:00000000 ADCGROUP001_SetGroupClass1SampleTime
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1606   .text.ADCGROUP001_SetGroupClass0EmuxSampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1611   .text.ADCGROUP001_SetGroupClass0EmuxSampleTime:00000000 ADCGROUP001_SetGroupClass0EmuxSampleTime
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1685   .text.ADCGROUP001_SetGroupClass0EmuxSampleTime:00000060 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1690   .text.ADCGROUP001_SetGroupClass1EmuxSampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1695   .text.ADCGROUP001_SetGroupClass1EmuxSampleTime:00000000 ADCGROUP001_SetGroupClass1EmuxSampleTime
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1769   .text.ADCGROUP001_SetGroupClass1EmuxSampleTime:00000060 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1774   .text.ADCGROUP001_SetGroupClass0ConvMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1779   .text.ADCGROUP001_SetGroupClass0ConvMode:00000000 ADCGROUP001_SetGroupClass0ConvMode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1859   .text.ADCGROUP001_SetGroupClass0ConvMode:00000068 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1864   .text.ADCGROUP001_SetGroupClass1ConvMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1869   .text.ADCGROUP001_SetGroupClass1ConvMode:00000000 ADCGROUP001_SetGroupClass1ConvMode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1949   .text.ADCGROUP001_SetGroupClass1ConvMode:00000068 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1954   .text.ADCGROUP001_SetGroupClass0EmuxConvMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:1959   .text.ADCGROUP001_SetGroupClass0EmuxConvMode:00000000 ADCGROUP001_SetGroupClass0EmuxConvMode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:2039   .text.ADCGROUP001_SetGroupClass0EmuxConvMode:00000068 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:2044   .text.ADCGROUP001_SetGroupClass1EmuxConvMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:2049   .text.ADCGROUP001_SetGroupClass1EmuxConvMode:00000000 ADCGROUP001_SetGroupClass1EmuxConvMode
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:2129   .text.ADCGROUP001_SetGroupClass1EmuxConvMode:00000068 $d
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:2134   .text.ADCGROUP001_SetEMUXSampleTimeControl:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:2139   .text.ADCGROUP001_SetEMUXSampleTimeControl:00000000 ADCGROUP001_SetEMUXSampleTimeControl
C:\Users\maan\AppData\Local\Temp\ccchYw8J.s:2227   .text.ADCGROUP001_SetEMUXSampleTimeControl:00000074 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.665d63c3c957c91c5ed795826dcbc088
                           .group:00000000 wm4.XMC1300.h.45.4ee692c6c98aa9fc42e2abbc732052b9
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1300.h.126.871a37eeeb3f6a078f5ddf5efd64103f
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.1aa717522e337383e1234be386036b7c
                           .group:00000000 wm4.CLK002.h.56.d2936f957892acc36e594c5138aee657
                           .group:00000000 wm4.uc_id.h.35.f852fba3565a132d8ed947977fab9fbc
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.CCU8GLOBAL_Conf.h.82.76c6b1bf357180d1e8ea1f462a66deb8
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.f334402b2e237110b77f625dfc27af0e
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.311363d77acc1b28b7e28dd840e9cd60
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505

UNDEFINED SYMBOLS
ADCGLOB001_Init
ADCGLOB001_StartUpCalibrationInit
ADCGROUP001_Handle0
