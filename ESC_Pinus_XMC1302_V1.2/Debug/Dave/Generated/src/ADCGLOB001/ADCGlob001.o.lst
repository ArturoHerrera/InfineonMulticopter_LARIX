   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADCGlob001.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADCGLOB001_Init,"ax",%progbits
  18              		.align	2
  19              		.global	ADCGLOB001_Init
  20              		.code	16
  21              		.thumb_func
  23              	ADCGLOB001_Init:
  24              	.LFB38:
  25              		.file 1 "../Dave/Generated/src/ADCGLOB001/ADCGlob001.c"
   1:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /*******************************************************************************
   2:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** **  DAVE App Name : ADCGLOB001       App Version: 1.0.26               
   3:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** *******************************************************************************/
   6:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
   7:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
   8:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /*******************************************************************************
   9:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  10:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  All rights reserved.                                                         **
  11:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                                                                               **
  12:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  Redistribution and use in source and binary forms, with or without           **
  13:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  modification,are permitted provided that the following conditions are met:   **
  14:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                                                                               **
  15:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  16:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  this list of conditions and the following disclaimer.                        **
  17:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  18:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  this list of conditions and the following disclaimer in the documentation    **
  19:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  and/or other materials provided with the distribution.                       **
  20:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  21:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  may be used to endorse or promote products derived from this software without**
  22:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  specific prior written permission.                                           **
  23:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                                                                               **
  24:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  25:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  26:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  27:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  28:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  29:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  30:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  31:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  32:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  33:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  34:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  35:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                                                                               **
  36:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  To improve the quality of the software, users are encouraged to share        **
  37:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  38:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  dave@infineon.com).                                                          **
  39:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                                                                               **
  40:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *******************************************************************************
  41:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                                                                           **
  42:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                                                                           **
  43:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** PLATFORM : Infineon XMC4000/XMC1000 Series                                **
  44:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                                                                           **
  45:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** COMPILER : Compiler Independent                                           **
  46:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                                                                           **
  47:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** AUTHOR : App Developer                                                    **
  48:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                                                                           **
  49:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** MAY BE CHANGED BY USER [yes/no]: Yes                                      **
  50:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                                                                           **
  51:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** MODIFICATION DATE : Jan 29, 2014                                          **
  52:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                                                                           **
  53:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ******************************************************************************/
  54:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
  55:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /*******************************************************************************
  56:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                       Author(s) Identity                                  **
  57:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *******************************************************************************
  58:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                                                                           **
  59:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** Initials           Name                                                   **
  60:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** --------------------------------------------------------------------------**
  61:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** Neelakanta        App Developer                                           **
  62:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** SSAM              Sridhar Sampath                                         **
  63:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ******************************************************************************/
  64:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
  65:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
  66:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * @file ADCGLOB001.c
  67:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *
  68:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * @brief
  69:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This is global ADC App which allows the sharing of global ADC resources.
  70:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *
  71:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * Change History:
  72:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * Date       version       Details
  73:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 12-Dec-2012   1.0.5    Initial code added for XMC1000
  74:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 18-Jan-2013   1.0.6    Merging with XMC1000 done
  75:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 24-Apr-2013   1.0.12   Ported to XMC4500 step AB and
  76:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        Source Result selection Feature added
  77:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 10-Jun-2013   1.0.14   1. Supported for XMC1100 device,
  78:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        2. Comment in header section - the Device series name is
  79:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                           made as XMC1000
  80:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 27-Jun-2013   1.0.16   Global limits made unavailable for adc004 app
  81:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 29-Aug-2013   1.0.18   XMC1200/XMC1300 New Sofware IDS added.
  82:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        Unused code removed
  83:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 31-Oct-2013   1.0.20   1. The macro name ADCGLOB001_DBG002_FUNCTION_ENTRY is
  84:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        corrected as ADCGLOB001_FUNCTION_ENTRY
  85:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        2. Analog Clock divider value minimum 1 was generated
  86:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        and now it is made as 0 for XMC1000 devices.
  87:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 14-Nov-2013   1.0.22   CLK001_Init() for XMC4000 devices CLK002_Init() for
  88:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        XMC1000 devices is removed in ADCGLOB001_Init()
  89:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        function, since this CLK00x_Init() function is called
  90:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        at the beginning  of the DAVE_Init() function.
  91:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * 29-Jan-2014   1.0.24   Error codes are added in various functions, that can
  92:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *                        be logged with DBG002 App.
  93:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
  94:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
  95:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /*******************************************************************************
  96:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ** INCLUDE FILES                                                             **
  97:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  ******************************************************************************/
  98:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
  99:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #include <DAVE3.h>
 100:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 101:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 102:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /*****************************************************************************
 103:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 104:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** *****************************************************************************/
 105:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /*These definitions are included here to avoid compilation errors,
 106:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 107:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  as empty*/
 108:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #ifndef _DBG002_H_
 109:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 110:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_RegisterCallBack(A,B,C)
 111:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_I(e)
 112:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_IG(e,g)
 113:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_IH(e,h)
 114:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_IP(e,p)
 115:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_IGH(e,g,h)
 116:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_IGP(e,g,p)
 117:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_IHP(e,h,p)
 118:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_IGHP(e,g,h,p)
 119:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_N(e)
 120:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_NG(e,g)
 121:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_NH(e,h)
 122:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_NP(e,p)
 123:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_NGH(e,g,h)
 124:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_NGP(e,g,p)
 125:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_NHP(e,h,p)
 126:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_NGHP(e,g,h,p)
 127:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_ID(e)
 128:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_IS(e)
 129:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_ISG(e,g)
 130:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 131:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 132:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 133:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 134:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 135:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 136:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status)
 137:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_FUNCTION_EXIT(GID, Status)
 138:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 139:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define DBG002_MESSAGEID_LITERAL
 140:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 141:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #endif/* End of defintions of dummy Debug Log macros*/
 142:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 143:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 144:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /*******************************************************************************
 145:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** **                      Private Macro Definitions                             **
 146:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** *******************************************************************************/
 147:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** #define APP_GID DBG002_GID_ADCGLOB001
 148:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 149:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * @cond INTERNAL_DOCS
 150:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 151:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /*******************************************************************************
 152:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  **                              API DEFINITION
 153:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *******************************************************************************/
 154:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 155:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 156:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  *This function initialize all VADC Global registers based on GUI configuration.
 157:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 158:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** void ADCGLOB001_Init(void)
 159:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
  26              		.loc 1 159 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
 160:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
  39              		.loc 1 160 0
  40 0006 0123     		mov	r3, #1
  41 0008 7B60     		str	r3, [r7, #4]
 161:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 162:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if(ADCGLOB001_Handle0.kDynamicDataPtr->StateType == ADCGLOB001_UNINITIALIZED )
  42              		.loc 1 162 0
  43 000a 504B     		ldr	r3, .L4
  44 000c 5B68     		ldr	r3, [r3, #4]
  45 000e 1B78     		ldrb	r3, [r3]
  46 0010 002B     		cmp	r3, #0
  47 0012 00D0     		beq	.LCB21
  48 0014 96E0     		b	.L1	@long jump
  49              	.LCB21:
 163:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {    
 164:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
  50              		.loc 1 164 0
  51 0016 4E4B     		ldr	r3, .L4+4
  52 0018 4D4A     		ldr	r2, .L4+4
  53 001a 1268     		ldr	r2, [r2]
  54 001c 4D49     		ldr	r1, .L4+8
  55 001e 0A43     		orr	r2, r1
  56 0020 1A60     		str	r2, [r3]
 165:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         SCU_GENERAL->PASSWD = 0x000000C0U;
  57              		.loc 1 165 0
  58 0022 4D4B     		ldr	r3, .L4+12
  59 0024 C022     		mov	r2, #192
  60 0026 5A62     		str	r2, [r3, #36]
 166:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Disables the gating for VADC kernel This line of code is not applicable for XMC4500. */
 167:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_VADC_Pos);
  61              		.loc 1 167 0
  62 0028 494B     		ldr	r3, .L4+4
  63 002a 494A     		ldr	r2, .L4+4
  64 002c 1269     		ldr	r2, [r2, #16]
  65 002e 0121     		mov	r1, #1
  66 0030 0A43     		orr	r2, r1
  67 0032 1A61     		str	r2, [r3, #16]
 168:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         SCU_GENERAL->PASSWD = 0x000000C3UL;
  68              		.loc 1 168 0
  69 0034 484B     		ldr	r3, .L4+12
  70 0036 C322     		mov	r2, #195
  71 0038 5A62     		str	r2, [r3, #36]
 169:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
  72              		.loc 1 169 0
  73 003a C046     		mov	r8, r8
  74              	.L3:
  75              		.loc 1 169 0 is_stmt 0 discriminator 1
  76 003c 444B     		ldr	r3, .L4+4
  77 003e 1A68     		ldr	r2, [r3]
  78 0040 8023     		mov	r3, #128
  79 0042 DB05     		lsl	r3, r3, #23
  80 0044 1340     		and	r3, r2
  81 0046 F9D1     		bne	.L3
 170:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {};     
 171:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Enable Out of range Comparator for ADC channels pins P2.2to P2.9,
 172:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * this code is applicable only for XMC1xxx devices  */
 173:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             COMPARATOR->ORCCTRL = 0XFFU;
  82              		.loc 1 173 0 is_stmt 1
  83 0048 444B     		ldr	r3, .L4+16
  84 004a FF22     		mov	r2, #255
  85 004c 1A60     		str	r2, [r3]
 174:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Bring the module out of disabled state.*/
 175:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         CLR_BIT( ADCGLOB001_Handle0.kGlobalPtr->CLC, VADC_CLC_DISR_Pos);
  86              		.loc 1 175 0
  87 004e 3F4B     		ldr	r3, .L4
  88 0050 1B68     		ldr	r3, [r3]
  89 0052 3E4A     		ldr	r2, .L4
  90 0054 1268     		ldr	r2, [r2]
  91 0056 1268     		ldr	r2, [r2]
  92 0058 0121     		mov	r1, #1
  93 005a 8A43     		bic	r2, r1
  94 005c 1A60     		str	r2, [r3]
 176:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /**
 177:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Make divider bit fields writable.
 178:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Divider Factor for the Analog Internal Clock.
 179:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Divider Factor for the Arbiter Clock.
 180:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Double Clock for the MSB Conversion.
 181:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          */
 182:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG = \
  95              		.loc 1 182 0
  96 005e 3B4B     		ldr	r3, .L4
  97 0060 1A68     		ldr	r2, [r3]
 183:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)(((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)| \
 184:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kArbiterClkDivider <<VADC_GLOBCFG_DIVD_Pos) 
  98              		.loc 1 184 0
  99 0062 3A4B     		ldr	r3, .L4
 100 0064 5B7B     		ldrb	r3, [r3, #13]
 101 0066 1902     		lsl	r1, r3, #8
 102 0068 C023     		mov	r3, #192
 103 006a 9B00     		lsl	r3, r3, #2
 104 006c 1940     		and	r1, r3
 185:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.keDoubleClkMSBConver <<VADC_GLOBCFG_DCMSB_Po
 105              		.loc 1 185 0
 106 006e 374B     		ldr	r3, .L4
 107 0070 DB7D     		ldrb	r3, [r3, #23]
 108 0072 D801     		lsl	r0, r3, #7
 109 0074 FF23     		mov	r3, #255
 110 0076 0340     		and	r3, r0
 184:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kArbiterClkDivider <<VADC_GLOBCFG_DIVD_Pos) 
 111              		.loc 1 184 0
 112 0078 1943     		orr	r1, r3
 186:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kAnalogClkDivider <<VADC_GLOBCFG_DIVA_Pos)&V
 113              		.loc 1 186 0
 114 007a 344B     		ldr	r3, .L4
 115 007c 1B7B     		ldrb	r3, [r3, #12]
 116 007e 181C     		mov	r0, r3
 117 0080 1F23     		mov	r3, #31
 118 0082 0340     		and	r3, r0
 183:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)(((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)| \
 119              		.loc 1 183 0
 120 0084 0B43     		orr	r3, r1
 121 0086 8021     		mov	r1, #128
 122 0088 0902     		lsl	r1, r1, #8
 123 008a 1943     		orr	r1, r3
 182:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG = \
 124              		.loc 1 182 0
 125 008c 8023     		mov	r3, #128
 126 008e D150     		str	r1, [r2, r3]
 187:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Make the divider bit fields write protected */
 188:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         CLR_BIT( ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG, VADC_GLOBCFG_DIVWC_Pos);
 127              		.loc 1 188 0
 128 0090 2E4B     		ldr	r3, .L4
 129 0092 1A68     		ldr	r2, [r3]
 130 0094 2D4B     		ldr	r3, .L4
 131 0096 1968     		ldr	r1, [r3]
 132 0098 8023     		mov	r3, #128
 133 009a C958     		ldr	r1, [r1, r3]
 134 009c 304B     		ldr	r3, .L4+20
 135 009e 1940     		and	r1, r3
 136 00a0 8023     		mov	r3, #128
 137 00a2 D150     		str	r1, [r2, r3]
 189:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 190:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /**
 191:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class0 Sample Time Control for Standard Conversion.
 192:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class0 Sample Time Control for EMUX Conversion.
 193:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class0 Conversion Mode for Standard Conversion.
 194:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class0 Conversion Mode for EMUX Conversion.
 195:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          */
 196:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \
 138              		.loc 1 196 0
 139 00a4 294B     		ldr	r3, .L4
 140 00a6 1A68     		ldr	r2, [r3]
 197:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICL
 141              		.loc 1 197 0
 142 00a8 284B     		ldr	r3, .L4
 143 00aa 1B7D     		ldrb	r3, [r3, #20]
 144 00ac 1906     		lsl	r1, r3, #24
 145 00ae E023     		mov	r3, #224
 146 00b0 DB04     		lsl	r3, r3, #19
 147 00b2 1940     		and	r1, r3
 198:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass0 <<VADC_GLOBICLA
 148              		.loc 1 198 0
 149 00b4 254B     		ldr	r3, .L4
 150 00b6 1B7C     		ldrb	r3, [r3, #16]
 151 00b8 1804     		lsl	r0, r3, #16
 152 00ba F823     		mov	r3, #248
 153 00bc 5B03     		lsl	r3, r3, #13
 154 00be 0340     		and	r3, r0
 197:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICL
 155              		.loc 1 197 0
 156 00c0 1943     		orr	r1, r3
 199:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass0 <<VADC_GLOBICLASS_CMS_
 157              		.loc 1 199 0
 158 00c2 224B     		ldr	r3, .L4
 159 00c4 9B7C     		ldrb	r3, [r3, #18]
 160 00c6 1802     		lsl	r0, r3, #8
 161 00c8 E023     		mov	r3, #224
 162 00ca DB00     		lsl	r3, r3, #3
 163 00cc 0340     		and	r3, r0
 198:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass0 <<VADC_GLOBICLA
 164              		.loc 1 198 0
 165 00ce 1943     		orr	r1, r3
 200:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass0 <<VADC_GLOBICLASS_S
 166              		.loc 1 200 0
 167 00d0 1E4B     		ldr	r3, .L4
 168 00d2 9B7B     		ldrb	r3, [r3, #14]
 169 00d4 181C     		mov	r0, r3
 170 00d6 1F23     		mov	r3, #31
 171 00d8 0340     		and	r3, r0
 197:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICL
 172              		.loc 1 197 0
 173 00da 1943     		orr	r1, r3
 196:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \
 174              		.loc 1 196 0
 175 00dc A023     		mov	r3, #160
 176 00de D150     		str	r1, [r2, r3]
 201:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /**
 202:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class1 Sample Time Control for Standard Conversion.
 203:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class1 Sample Time Control for EMUX Conversion.
 204:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class1 Conversion Mode for Standard Conversion.
 205:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class1 Conversion Mode for EMUX Conversion.
 206:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          */
 207:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \
 177              		.loc 1 207 0
 178 00e0 1A4B     		ldr	r3, .L4
 179 00e2 1A68     		ldr	r2, [r3]
 208:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICL
 180              		.loc 1 208 0
 181 00e4 194B     		ldr	r3, .L4
 182 00e6 5B7D     		ldrb	r3, [r3, #21]
 183 00e8 1906     		lsl	r1, r3, #24
 184 00ea E023     		mov	r3, #224
 185 00ec DB04     		lsl	r3, r3, #19
 186 00ee 1940     		and	r1, r3
 209:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLA
 187              		.loc 1 209 0
 188 00f0 164B     		ldr	r3, .L4
 189 00f2 5B7C     		ldrb	r3, [r3, #17]
 190 00f4 1804     		lsl	r0, r3, #16
 191 00f6 F823     		mov	r3, #248
 192 00f8 5B03     		lsl	r3, r3, #13
 193 00fa 0340     		and	r3, r0
 208:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICL
 194              		.loc 1 208 0
 195 00fc 1943     		orr	r1, r3
 210:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_
 196              		.loc 1 210 0
 197 00fe 134B     		ldr	r3, .L4
 198 0100 DB7C     		ldrb	r3, [r3, #19]
 199 0102 1802     		lsl	r0, r3, #8
 200 0104 E023     		mov	r3, #224
 201 0106 DB00     		lsl	r3, r3, #3
 202 0108 0340     		and	r3, r0
 209:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLA
 203              		.loc 1 209 0
 204 010a 1943     		orr	r1, r3
 211:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass1<<VADC_GLOBICLASS_ST
 205              		.loc 1 211 0
 206 010c 0F4B     		ldr	r3, .L4
 207 010e DB7B     		ldrb	r3, [r3, #15]
 208 0110 181C     		mov	r0, r3
 209 0112 1F23     		mov	r3, #31
 210 0114 0340     		and	r3, r0
 208:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICL
 211              		.loc 1 208 0
 212 0116 1943     		orr	r1, r3
 207:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \
 213              		.loc 1 207 0
 214 0118 A423     		mov	r3, #164
 215 011a D150     		str	r1, [r2, r3]
 212:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 213:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Configure the lower and upper boundary based on the GUI configuration.*/
 214:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kGlobalPtr->GLOBBOUND = \
 216              		.loc 1 214 0
 217 011c 0B4B     		ldr	r3, .L4
 218 011e 1A68     		ldr	r2, [r3]
 215:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)((((uint32_t)ADCGLOB001_Handle0.KGlobBoundary1 <<VADC_GLOBBOUND_BOUNDARY1
 219              		.loc 1 215 0
 220 0120 0A4B     		ldr	r3, .L4
 221 0122 5B89     		ldrh	r3, [r3, #10]
 222 0124 1904     		lsl	r1, r3, #16
 223 0126 0F4B     		ldr	r3, .L4+24
 224 0128 1940     		and	r1, r3
 216:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (((uint32_t)ADCGLOB001_Handle0.KGlobBoundary0 <<VADC_GLOBBOUND_BOUNDARY0_Po
 225              		.loc 1 216 0
 226 012a 084B     		ldr	r3, .L4
 227 012c 1B89     		ldrh	r3, [r3, #8]
 228 012e 1B05     		lsl	r3, r3, #20
 229 0130 1B0D     		lsr	r3, r3, #20
 215:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (uint32_t)((((uint32_t)ADCGLOB001_Handle0.KGlobBoundary1 <<VADC_GLOBBOUND_BOUNDARY1
 230              		.loc 1 215 0
 231 0132 1943     		orr	r1, r3
 214:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kGlobalPtr->GLOBBOUND = \
 232              		.loc 1 214 0
 233 0134 B823     		mov	r3, #184
 234 0136 D150     		str	r1, [r2, r3]
 217:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_Handle0.kDynamicDataPtr->StateType = ADCGLOB001_INITIALIZED;
 235              		.loc 1 217 0
 236 0138 044B     		ldr	r3, .L4
 237 013a 5B68     		ldr	r3, [r3, #4]
 238 013c 0122     		mov	r2, #1
 239 013e 1A70     		strb	r2, [r3]
 218:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status &= (uint32_t)DAVEApp_SUCCESS;
 240              		.loc 1 218 0
 241 0140 0023     		mov	r3, #0
 242 0142 7B60     		str	r3, [r7, #4]
 243              	.L1:
 219:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     } else {
 220:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 221:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 222:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 223:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 244              		.loc 1 223 0
 245 0144 BD46     		mov	sp, r7
 246 0146 02B0     		add	sp, sp, #8
 247              		@ sp needed for prologue
 248 0148 80BD     		pop	{r7, pc}
 249              	.L5:
 250 014a C046     		.align	2
 251              	.L4:
 252 014c 00000000 		.word	ADCGLOB001_Handle0
 253 0150 00030140 		.word	1073808128
 254 0154 0000F03F 		.word	1072693248
 255 0158 00000140 		.word	1073807360
 256 015c 00050140 		.word	1073808640
 257 0160 FF7FFFFF 		.word	-32769
 258 0164 0000FF0F 		.word	268369920
 259              		.cfi_endproc
 260              	.LFE38:
 262              		.section	.text.ADCGLOB001_DeInit,"ax",%progbits
 263              		.align	2
 264              		.global	ADCGLOB001_DeInit
 265              		.code	16
 266              		.thumb_func
 268              	ADCGLOB001_DeInit:
 269              	.LFB39:
 224:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 225:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 226:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function will de-initialize VADC Global registers.
 227:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 228:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_DeInit(const ADCGLOB001_HandleType * HandlePtr)
 229:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 270              		.loc 1 229 0
 271              		.cfi_startproc
 272 0000 80B5     		push	{r7, lr}
 273              	.LCFI3:
 274              		.cfi_def_cfa_offset 8
 275              		.cfi_offset 7, -8
 276              		.cfi_offset 14, -4
 277 0002 84B0     		sub	sp, sp, #16
 278              	.LCFI4:
 279              		.cfi_def_cfa_offset 24
 280 0004 00AF     		add	r7, sp, #0
 281              	.LCFI5:
 282              		.cfi_def_cfa_register 7
 283 0006 7860     		str	r0, [r7, #4]
 230:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 284              		.loc 1 230 0
 285 0008 0123     		mov	r3, #1
 286 000a FB60     		str	r3, [r7, #12]
 231:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 232:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if(HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED )
 287              		.loc 1 232 0
 288 000c 7B68     		ldr	r3, [r7, #4]
 289 000e 5B68     		ldr	r3, [r3, #4]
 290 0010 1B78     		ldrb	r3, [r3]
 291 0012 012B     		cmp	r3, #1
 292 0014 31D1     		bne	.L7
 233:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 234:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Enable the VADC clock gating
 235:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * This line of code is not applicable for XMC4500.
 236:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          */
 237:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 238:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         SET_BIT(SCU_CLK->CGATSET0, SCU_CLK_CGATSET0_VADC_Pos);
 293              		.loc 1 238 0
 294 0016 1B4B     		ldr	r3, .L9
 295 0018 1A4A     		ldr	r2, .L9
 296 001a D268     		ldr	r2, [r2, #12]
 297 001c 0121     		mov	r1, #1
 298 001e 0A43     		orr	r2, r1
 299 0020 DA60     		str	r2, [r3, #12]
 239:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Bring the module out of disabled state */
 240:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);
 300              		.loc 1 240 0
 301 0022 7B68     		ldr	r3, [r7, #4]
 302 0024 1B68     		ldr	r3, [r3]
 303 0026 7A68     		ldr	r2, [r7, #4]
 304 0028 1268     		ldr	r2, [r2]
 305 002a 1268     		ldr	r2, [r2]
 306 002c 0121     		mov	r1, #1
 307 002e 8A43     		bic	r2, r1
 308 0030 1A60     		str	r2, [r3]
 241:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 242:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Make divider bit fields writable and deconfigure Analog Internal Clock,
 243:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****      Arbiter Clock & MSB Conversion bits.*/
 244:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         HandlePtr->kGlobalPtr->GLOBCFG = \
 309              		.loc 1 244 0
 310 0032 7B68     		ldr	r3, [r7, #4]
 311 0034 1A68     		ldr	r2, [r3]
 312 0036 8023     		mov	r3, #128
 313 0038 1349     		ldr	r1, .L9+4
 314 003a D150     		str	r1, [r2, r3]
 245:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)|((~(VADC_GLOBCFG_DIVD_Msk))& \
 246:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (~(VADC_GLOBCFG_DCMSB_Msk)) & (~(VADC_GLOBCFG_DIVA_Msk))));
 247:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 248:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Again make the divider bit fields write protected */
 249:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         CLR_BIT( HandlePtr->kGlobalPtr->GLOBCFG, VADC_GLOBCFG_DIVWC_Pos);
 315              		.loc 1 249 0
 316 003c 7B68     		ldr	r3, [r7, #4]
 317 003e 1A68     		ldr	r2, [r3]
 318 0040 7B68     		ldr	r3, [r7, #4]
 319 0042 1968     		ldr	r1, [r3]
 320 0044 8023     		mov	r3, #128
 321 0046 C958     		ldr	r1, [r1, r3]
 322 0048 104B     		ldr	r3, .L9+8
 323 004a 1940     		and	r1, r3
 324 004c 8023     		mov	r3, #128
 325 004e D150     		str	r1, [r2, r3]
 250:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 251:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*
 252:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class0 Sample Time Control for Standard Conversion into default
 253:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          *  mode.
 254:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class0 Conversion Mode for Standard Conversion into default mode.
 255:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class0 Sample Time Control for EMUX Conversion into default mode.
 256:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class0  Conversion Mode for EMUX Conversion into default mode.
 257:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          */
 258:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         HandlePtr->kGlobalPtr->GLOBICLASS[0] = \
 326              		.loc 1 258 0
 327 0050 7B68     		ldr	r3, [r7, #4]
 328 0052 1A68     		ldr	r2, [r3]
 329 0054 A023     		mov	r3, #160
 330 0056 0E49     		ldr	r1, .L9+12
 331 0058 D150     		str	r1, [r2, r3]
 259:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 ((~(VADC_GLOBICLASS_CME_Msk))&(~(VADC_GLOBICLASS_STCE_Msk))& \
 260:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));
 261:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*
 262:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class1 Sample Time Control for Standard Conversion into default
 263:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          *  mode.
 264:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class1 Conversion Mode for Standard Conversion into default mode.
 265:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class1 Sample Time Control for EMUX Conversion into default mode.
 266:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Configure Class1  Conversion Mode for EMUX Conversion into default mode.
 267:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          */
 268:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         HandlePtr->kGlobalPtr->GLOBICLASS[1] = \
 332              		.loc 1 268 0
 333 005a 7B68     		ldr	r3, [r7, #4]
 334 005c 1A68     		ldr	r2, [r3]
 335 005e A423     		mov	r3, #164
 336 0060 0B49     		ldr	r1, .L9+12
 337 0062 D150     		str	r1, [r2, r3]
 269:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 ((~(VADC_GLOBICLASS_CME_Msk))&(~(VADC_GLOBICLASS_STCE_Msk))& \
 270:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                         (~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));
 271:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 272:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Configure global lower and upper boundary value into default value.*/
 273:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         HandlePtr->kGlobalPtr->GLOBBOUND = \
 338              		.loc 1 273 0
 339 0064 7B68     		ldr	r3, [r7, #4]
 340 0066 1A68     		ldr	r2, [r3]
 341 0068 B823     		mov	r3, #184
 342 006a 0A49     		ldr	r1, .L9+16
 343 006c D150     		str	r1, [r2, r3]
 274:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 ((~(VADC_GLOBBOUND_BOUNDARY1_Msk))&(~(VADC_GLOBBOUND_BOUNDARY0_Msk)));
 275:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 276:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         HandlePtr->kDynamicDataPtr->StateType = ADCGLOB001_UNINITIALIZED;
 344              		.loc 1 276 0
 345 006e 7B68     		ldr	r3, [r7, #4]
 346 0070 5B68     		ldr	r3, [r3, #4]
 347 0072 0022     		mov	r2, #0
 348 0074 1A70     		strb	r2, [r3]
 277:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 349              		.loc 1 277 0
 350 0076 0023     		mov	r3, #0
 351 0078 FB60     		str	r3, [r7, #12]
 352              	.L7:
 278:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     } else {
 279:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 280:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 281:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 282:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 353              		.loc 1 282 0
 354 007a FB68     		ldr	r3, [r7, #12]
 283:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 355              		.loc 1 283 0
 356 007c 181C     		mov	r0, r3
 357 007e BD46     		mov	sp, r7
 358 0080 04B0     		add	sp, sp, #16
 359              		@ sp needed for prologue
 360 0082 80BD     		pop	{r7, pc}
 361              	.L10:
 362              		.align	2
 363              	.L9:
 364 0084 00030140 		.word	1073808128
 365 0088 60FCFFFF 		.word	-928
 366 008c FF7FFFFF 		.word	-32769
 367 0090 E0F8E0F8 		.word	-119473952
 368 0094 00F000F0 		.word	-268374016
 369              		.cfi_endproc
 370              	.LFE39:
 372              		.section	.text.ADCGLOB001_CLKRequestDisable,"ax",%progbits
 373              		.align	2
 374              		.global	ADCGLOB001_CLKRequestDisable
 375              		.code	16
 376              		.thumb_func
 378              	ADCGLOB001_CLKRequestDisable:
 379              	.LFB40:
 284:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 285:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 286:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function disable the control of the module.
 287:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 288:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_CLKRequestDisable(const ADCGLOB001_HandleType * HandlePtr)
 289:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 380              		.loc 1 289 0
 381              		.cfi_startproc
 382 0000 80B5     		push	{r7, lr}
 383              	.LCFI6:
 384              		.cfi_def_cfa_offset 8
 385              		.cfi_offset 7, -8
 386              		.cfi_offset 14, -4
 387 0002 84B0     		sub	sp, sp, #16
 388              	.LCFI7:
 389              		.cfi_def_cfa_offset 24
 390 0004 00AF     		add	r7, sp, #0
 391              	.LCFI8:
 392              		.cfi_def_cfa_register 7
 393 0006 7860     		str	r0, [r7, #4]
 290:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 394              		.loc 1 290 0
 395 0008 0123     		mov	r3, #1
 396 000a FB60     		str	r3, [r7, #12]
 291:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 292:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 397              		.loc 1 292 0
 398 000c 7B68     		ldr	r3, [r7, #4]
 399 000e 5B68     		ldr	r3, [r3, #4]
 400 0010 1B78     		ldrb	r3, [r3]
 401 0012 012B     		cmp	r3, #1
 402 0014 09D1     		bne	.L12
 293:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 294:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 295:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Bring the module in disabled state
 296:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * Module Disable Request Bit
 297:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * 0 : enable the module clock
 298:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****          * 1 : stop the module clock */
 299:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 300:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         SET_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);
 403              		.loc 1 300 0
 404 0016 7B68     		ldr	r3, [r7, #4]
 405 0018 1B68     		ldr	r3, [r3]
 406 001a 7A68     		ldr	r2, [r7, #4]
 407 001c 1268     		ldr	r2, [r2]
 408 001e 1268     		ldr	r2, [r2]
 409 0020 0121     		mov	r1, #1
 410 0022 0A43     		orr	r2, r1
 411 0024 1A60     		str	r2, [r3]
 301:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 302:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 412              		.loc 1 302 0
 413 0026 0023     		mov	r3, #0
 414 0028 FB60     		str	r3, [r7, #12]
 415              	.L12:
 303:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 304:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 305:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 306:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 307:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 308:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 309:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 310:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 311:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 416              		.loc 1 311 0
 417 002a FB68     		ldr	r3, [r7, #12]
 312:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 418              		.loc 1 312 0
 419 002c 181C     		mov	r0, r3
 420 002e BD46     		mov	sp, r7
 421 0030 04B0     		add	sp, sp, #16
 422              		@ sp needed for prologue
 423 0032 80BD     		pop	{r7, pc}
 424              		.cfi_endproc
 425              	.LFE40:
 427              		.section	.text.ADCGLOB001_CLKRequestEnable,"ax",%progbits
 428              		.align	2
 429              		.global	ADCGLOB001_CLKRequestEnable
 430              		.code	16
 431              		.thumb_func
 433              	ADCGLOB001_CLKRequestEnable:
 434              	.LFB41:
 313:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 314:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function enable the control of the module.
 315:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 316:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_CLKRequestEnable(const ADCGLOB001_HandleType * HandlePtr)
 317:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 435              		.loc 1 317 0
 436              		.cfi_startproc
 437 0000 80B5     		push	{r7, lr}
 438              	.LCFI9:
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 7, -8
 441              		.cfi_offset 14, -4
 442 0002 84B0     		sub	sp, sp, #16
 443              	.LCFI10:
 444              		.cfi_def_cfa_offset 24
 445 0004 00AF     		add	r7, sp, #0
 446              	.LCFI11:
 447              		.cfi_def_cfa_register 7
 448 0006 7860     		str	r0, [r7, #4]
 318:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 449              		.loc 1 318 0
 450 0008 0123     		mov	r3, #1
 451 000a FB60     		str	r3, [r7, #12]
 319:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 320:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 452              		.loc 1 320 0
 453 000c 7B68     		ldr	r3, [r7, #4]
 454 000e 5B68     		ldr	r3, [r3, #4]
 455 0010 1B78     		ldrb	r3, [r3]
 456 0012 012B     		cmp	r3, #1
 457 0014 09D1     		bne	.L15
 321:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 322:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Bring the module out of disabled state */
 323:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 324:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);
 458              		.loc 1 324 0
 459 0016 7B68     		ldr	r3, [r7, #4]
 460 0018 1B68     		ldr	r3, [r3]
 461 001a 7A68     		ldr	r2, [r7, #4]
 462 001c 1268     		ldr	r2, [r2]
 463 001e 1268     		ldr	r2, [r2]
 464 0020 0121     		mov	r1, #1
 465 0022 8A43     		bic	r2, r1
 466 0024 1A60     		str	r2, [r3]
 325:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 326:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 467              		.loc 1 326 0
 468 0026 0023     		mov	r3, #0
 469 0028 FB60     		str	r3, [r7, #12]
 470              	.L15:
 327:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 328:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 329:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 330:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 331:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 332:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 333:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 334:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 471              		.loc 1 334 0
 472 002a FB68     		ldr	r3, [r7, #12]
 335:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 473              		.loc 1 335 0
 474 002c 181C     		mov	r0, r3
 475 002e BD46     		mov	sp, r7
 476 0030 04B0     		add	sp, sp, #16
 477              		@ sp needed for prologue
 478 0032 80BD     		pop	{r7, pc}
 479              		.cfi_endproc
 480              	.LFE41:
 482              		.section	.text.ADCGLOB001_SetStartUpCalibration,"ax",%progbits
 483              		.align	2
 484              		.global	ADCGLOB001_SetStartUpCalibration
 485              		.code	16
 486              		.thumb_func
 488              	ADCGLOB001_SetStartUpCalibration:
 489              	.LFB42:
 336:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 337:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function Initiate the start-up calibration phase.
 338:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 339:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 340:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetStartUpCalibration(
 341:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType *HandlePtr
 342:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 343:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 490              		.loc 1 343 0
 491              		.cfi_startproc
 492 0000 80B5     		push	{r7, lr}
 493              	.LCFI12:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 84B0     		sub	sp, sp, #16
 498              	.LCFI13:
 499              		.cfi_def_cfa_offset 24
 500 0004 00AF     		add	r7, sp, #0
 501              	.LCFI14:
 502              		.cfi_def_cfa_register 7
 503 0006 7860     		str	r0, [r7, #4]
 344:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 504              		.loc 1 344 0
 505 0008 0123     		mov	r3, #1
 506 000a FB60     		str	r3, [r7, #12]
 345:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 346:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 507              		.loc 1 346 0
 508 000c 7B68     		ldr	r3, [r7, #4]
 509 000e 5B68     		ldr	r3, [r3, #4]
 510 0010 1B78     		ldrb	r3, [r3]
 511 0012 012B     		cmp	r3, #1
 512 0014 0CD1     		bne	.L18
 347:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 348:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Initiate Start-Up Calibration */
 349:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 350:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         SET_BIT( HandlePtr->kGlobalPtr->GLOBCFG, VADC_GLOBCFG_SUCAL_Pos);
 513              		.loc 1 350 0
 514 0016 7B68     		ldr	r3, [r7, #4]
 515 0018 1A68     		ldr	r2, [r3]
 516 001a 7B68     		ldr	r3, [r7, #4]
 517 001c 1968     		ldr	r1, [r3]
 518 001e 8023     		mov	r3, #128
 519 0020 CB58     		ldr	r3, [r1, r3]
 520 0022 8021     		mov	r1, #128
 521 0024 0906     		lsl	r1, r1, #24
 522 0026 1943     		orr	r1, r3
 523 0028 8023     		mov	r3, #128
 524 002a D150     		str	r1, [r2, r3]
 351:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 352:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 525              		.loc 1 352 0
 526 002c 0023     		mov	r3, #0
 527 002e FB60     		str	r3, [r7, #12]
 528              	.L18:
 353:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 354:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 355:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 356:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 357:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 358:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 359:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 360:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 529              		.loc 1 360 0
 530 0030 FB68     		ldr	r3, [r7, #12]
 361:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 531              		.loc 1 361 0
 532 0032 181C     		mov	r0, r3
 533 0034 BD46     		mov	sp, r7
 534 0036 04B0     		add	sp, sp, #16
 535              		@ sp needed for prologue
 536 0038 80BD     		pop	{r7, pc}
 537              		.cfi_endproc
 538              	.LFE42:
 540 003a C046     		.section	.text.ADCGLOB001_StartUpCalibrationInit,"ax",%progbits
 541              		.align	2
 542              		.global	ADCGLOB001_StartUpCalibrationInit
 543              		.code	16
 544              		.thumb_func
 546              	ADCGLOB001_StartUpCalibrationInit:
 547              	.LFB43:
 362:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 363:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function Initialise the calibration based on GUI configuration.
 364:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 365:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_StartUpCalibrationInit(void)
 366:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 548              		.loc 1 366 0
 549              		.cfi_startproc
 550 0000 80B5     		push	{r7, lr}
 551              	.LCFI15:
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 7, -8
 554              		.cfi_offset 14, -4
 555 0002 82B0     		sub	sp, sp, #8
 556              	.LCFI16:
 557              		.cfi_def_cfa_offset 16
 558 0004 00AF     		add	r7, sp, #0
 559              	.LCFI17:
 560              		.cfi_def_cfa_register 7
 367:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 561              		.loc 1 367 0
 562 0006 0123     		mov	r3, #1
 563 0008 7B60     		str	r3, [r7, #4]
 368:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 369:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if(ADCGLOB001_Handle0.kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED )
 564              		.loc 1 369 0
 565 000a 0D4B     		ldr	r3, .L24
 566 000c 5B68     		ldr	r3, [r3, #4]
 567 000e 1B78     		ldrb	r3, [r3]
 568 0010 012B     		cmp	r3, #1
 569 0012 10D1     		bne	.L21
 370:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 371:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Initialise Calibration */
 372:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 373:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if(ADCGLOB001_Handle0.keStartCalib == (uint8_t)1)
 570              		.loc 1 373 0
 571 0014 0A4B     		ldr	r3, .L24
 572 0016 9B7D     		ldrb	r3, [r3, #22]
 573 0018 012B     		cmp	r3, #1
 574 001a 0AD1     		bne	.L22
 374:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 375:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Initiate Start-Up Calibration */
 376:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             SET_BIT( ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG, VADC_GLOBCFG_SUCAL_Pos);
 575              		.loc 1 376 0
 576 001c 084B     		ldr	r3, .L24
 577 001e 1A68     		ldr	r2, [r3]
 578 0020 074B     		ldr	r3, .L24
 579 0022 1968     		ldr	r1, [r3]
 580 0024 8023     		mov	r3, #128
 581 0026 CB58     		ldr	r3, [r1, r3]
 582 0028 8021     		mov	r1, #128
 583 002a 0906     		lsl	r1, r1, #24
 584 002c 1943     		orr	r1, r3
 585 002e 8023     		mov	r3, #128
 586 0030 D150     		str	r1, [r2, r3]
 587              	.L22:
 377:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 378:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 379:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 588              		.loc 1 379 0
 589 0032 0023     		mov	r3, #0
 590 0034 7B60     		str	r3, [r7, #4]
 591              	.L21:
 380:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 381:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 382:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 383:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 384:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 385:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 386:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 387:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 592              		.loc 1 387 0
 593 0036 7B68     		ldr	r3, [r7, #4]
 388:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 594              		.loc 1 388 0
 595 0038 181C     		mov	r0, r3
 596 003a BD46     		mov	sp, r7
 597 003c 02B0     		add	sp, sp, #8
 598              		@ sp needed for prologue
 599 003e 80BD     		pop	{r7, pc}
 600              	.L25:
 601              		.align	2
 602              	.L24:
 603 0040 00000000 		.word	ADCGLOB001_Handle0
 604              		.cfi_endproc
 605              	.LFE43:
 607              		.section	.text.ADCGLOB001_EnableSleepModeControl,"ax",%progbits
 608              		.align	2
 609              		.global	ADCGLOB001_EnableSleepModeControl
 610              		.code	16
 611              		.thumb_func
 613              	ADCGLOB001_EnableSleepModeControl:
 614              	.LFB44:
 389:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 390:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 391:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function Enables Sleep Mode Control.Which is used to control module?s
 392:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * reaction to sleep mode.
 393:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 394:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_EnableSleepModeControl(
 395:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr
 396:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 397:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 615              		.loc 1 397 0
 616              		.cfi_startproc
 617 0000 80B5     		push	{r7, lr}
 618              	.LCFI18:
 619              		.cfi_def_cfa_offset 8
 620              		.cfi_offset 7, -8
 621              		.cfi_offset 14, -4
 622 0002 84B0     		sub	sp, sp, #16
 623              	.LCFI19:
 624              		.cfi_def_cfa_offset 24
 625 0004 00AF     		add	r7, sp, #0
 626              	.LCFI20:
 627              		.cfi_def_cfa_register 7
 628 0006 7860     		str	r0, [r7, #4]
 398:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 629              		.loc 1 398 0
 630 0008 0123     		mov	r3, #1
 631 000a FB60     		str	r3, [r7, #12]
 399:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 400:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 632              		.loc 1 400 0
 633 000c 7B68     		ldr	r3, [r7, #4]
 634 000e 5B68     		ldr	r3, [r3, #4]
 635 0010 1B78     		ldrb	r3, [r3]
 636 0012 012B     		cmp	r3, #1
 637 0014 09D1     		bne	.L27
 401:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 402:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* Reset  Sleep Mode Enable Control bit*/
 403:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_EDIS_Pos);
 638              		.loc 1 403 0
 639 0016 7B68     		ldr	r3, [r7, #4]
 640 0018 1B68     		ldr	r3, [r3]
 641 001a 7A68     		ldr	r2, [r7, #4]
 642 001c 1268     		ldr	r2, [r2]
 643 001e 1268     		ldr	r2, [r2]
 644 0020 0821     		mov	r1, #8
 645 0022 8A43     		bic	r2, r1
 646 0024 1A60     		str	r2, [r3]
 404:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 405:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 647              		.loc 1 405 0
 648 0026 0023     		mov	r3, #0
 649 0028 FB60     		str	r3, [r7, #12]
 650              	.L27:
 406:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 407:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 408:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 409:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 410:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 411:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 412:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 413:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 651              		.loc 1 413 0
 652 002a FB68     		ldr	r3, [r7, #12]
 414:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 653              		.loc 1 414 0
 654 002c 181C     		mov	r0, r3
 655 002e BD46     		mov	sp, r7
 656 0030 04B0     		add	sp, sp, #16
 657              		@ sp needed for prologue
 658 0032 80BD     		pop	{r7, pc}
 659              		.cfi_endproc
 660              	.LFE44:
 662              		.section	.text.ADCGLOB001_DisregardSleepModeControl,"ax",%progbits
 663              		.align	2
 664              		.global	ADCGLOB001_DisregardSleepModeControl
 665              		.code	16
 666              		.thumb_func
 668              	ADCGLOB001_DisregardSleepModeControl:
 669              	.LFB45:
 415:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 416:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function disregards Sleep Mode Control.
 417:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 418:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_DisregardSleepModeControl(
 419:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr
 420:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 421:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 670              		.loc 1 421 0
 671              		.cfi_startproc
 672 0000 80B5     		push	{r7, lr}
 673              	.LCFI21:
 674              		.cfi_def_cfa_offset 8
 675              		.cfi_offset 7, -8
 676              		.cfi_offset 14, -4
 677 0002 84B0     		sub	sp, sp, #16
 678              	.LCFI22:
 679              		.cfi_def_cfa_offset 24
 680 0004 00AF     		add	r7, sp, #0
 681              	.LCFI23:
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 422:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 684              		.loc 1 422 0
 685 0008 0123     		mov	r3, #1
 686 000a FB60     		str	r3, [r7, #12]
 423:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 424:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 687              		.loc 1 424 0
 688 000c 7B68     		ldr	r3, [r7, #4]
 689 000e 5B68     		ldr	r3, [r3, #4]
 690 0010 1B78     		ldrb	r3, [r3]
 691 0012 012B     		cmp	r3, #1
 692 0014 09D1     		bne	.L30
 425:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 426:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /* set  Sleep Mode Enable Control bit*/
 427:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         SET_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_EDIS_Pos);
 693              		.loc 1 427 0
 694 0016 7B68     		ldr	r3, [r7, #4]
 695 0018 1B68     		ldr	r3, [r3]
 696 001a 7A68     		ldr	r2, [r7, #4]
 697 001c 1268     		ldr	r2, [r2]
 698 001e 1268     		ldr	r2, [r2]
 699 0020 0821     		mov	r1, #8
 700 0022 0A43     		orr	r2, r1
 701 0024 1A60     		str	r2, [r3]
 428:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 429:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 702              		.loc 1 429 0
 703 0026 0023     		mov	r3, #0
 704 0028 FB60     		str	r3, [r7, #12]
 705              	.L30:
 430:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 431:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 432:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 433:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 434:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 435:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 436:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 437:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 706              		.loc 1 437 0
 707 002a FB68     		ldr	r3, [r7, #12]
 438:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 708              		.loc 1 438 0
 709 002c 181C     		mov	r0, r3
 710 002e BD46     		mov	sp, r7
 711 0030 04B0     		add	sp, sp, #16
 712              		@ sp needed for prologue
 713 0032 80BD     		pop	{r7, pc}
 714              		.cfi_endproc
 715              	.LFE45:
 717              		.section	.text.ADCGLOB001_SetGlobClass0ConvMode,"ax",%progbits
 718              		.align	2
 719              		.global	ADCGLOB001_SetGlobClass0ConvMode
 720              		.code	16
 721              		.thumb_func
 723              	ADCGLOB001_SetGlobClass0ConvMode:
 724              	.LFB46:
 439:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 440:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 441:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function configure the class 0 conversion mode for standard conversions.
 442:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 443:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetGlobClass0ConvMode(
 444:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 445:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_ConversionMode ConversionModeVal
 446:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 447:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 725              		.loc 1 447 0
 726              		.cfi_startproc
 727 0000 80B5     		push	{r7, lr}
 728              	.LCFI24:
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 7, -8
 731              		.cfi_offset 14, -4
 732 0002 84B0     		sub	sp, sp, #16
 733              	.LCFI25:
 734              		.cfi_def_cfa_offset 24
 735 0004 00AF     		add	r7, sp, #0
 736              	.LCFI26:
 737              		.cfi_def_cfa_register 7
 738 0006 7860     		str	r0, [r7, #4]
 739 0008 0A1C     		mov	r2, r1
 740 000a FB1C     		add	r3, r7, #3
 741 000c 1A70     		strb	r2, [r3]
 448:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 742              		.loc 1 448 0
 743 000e 0123     		mov	r3, #1
 744 0010 FB60     		str	r3, [r7, #12]
 449:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 450:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 745              		.loc 1 450 0
 746 0012 7B68     		ldr	r3, [r7, #4]
 747 0014 5B68     		ldr	r3, [r3, #4]
 748 0016 1B78     		ldrb	r3, [r3]
 749 0018 012B     		cmp	r3, #1
 750 001a 1DD1     		bne	.L33
 451:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 452:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||
 751              		.loc 1 452 0
 752 001c FB1C     		add	r3, r7, #3
 753 001e 1B78     		ldrb	r3, [r3]
 754 0020 022B     		cmp	r3, #2
 755 0022 03D9     		bls	.L34
 756              		.loc 1 452 0 is_stmt 0 discriminator 1
 757 0024 FB1C     		add	r3, r7, #3
 758 0026 1B78     		ldrb	r3, [r3]
 759 0028 052B     		cmp	r3, #5
 760 002a 13D1     		bne	.L35
 761              	.L34:
 453:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {
 454:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Set the global class0 conversion mode */
 455:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0],
 762              		.loc 1 455 0 is_stmt 1
 763 002c 7B68     		ldr	r3, [r7, #4]
 764 002e 1A68     		ldr	r2, [r3]
 765 0030 FB1C     		add	r3, r7, #3
 766 0032 1B78     		ldrb	r3, [r3]
 767 0034 1902     		lsl	r1, r3, #8
 768 0036 E023     		mov	r3, #224
 769 0038 DB00     		lsl	r3, r3, #3
 770 003a 1940     		and	r1, r3
 771 003c 7B68     		ldr	r3, [r7, #4]
 772 003e 1868     		ldr	r0, [r3]
 773 0040 A023     		mov	r3, #160
 774 0042 C058     		ldr	r0, [r0, r3]
 775 0044 074B     		ldr	r3, .L37
 776 0046 0340     		and	r3, r0
 777 0048 1943     		orr	r1, r3
 778 004a A023     		mov	r3, #160
 779 004c D150     		str	r1, [r2, r3]
 456:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_CMS_Msk,
 457:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_CMS_Pos,
 458:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     (uint32_t)ConversionModeVal
 459:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             );
 460:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 461:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)DAVEApp_SUCCESS;
 780              		.loc 1 461 0
 781 004e 0023     		mov	r3, #0
 782 0050 FB60     		str	r3, [r7, #12]
 783 0052 01E0     		b	.L33
 784              	.L35:
 462:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 463:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         else
 464:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 465:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
 785              		.loc 1 465 0
 786 0054 0223     		mov	r3, #2
 787 0056 FB60     		str	r3, [r7, #12]
 788              	.L33:
 466:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 467:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 468:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 469:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 470:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 471:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 472:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 473:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 474:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 475:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 789              		.loc 1 475 0
 790 0058 FB68     		ldr	r3, [r7, #12]
 476:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 791              		.loc 1 476 0
 792 005a 181C     		mov	r0, r3
 793 005c BD46     		mov	sp, r7
 794 005e 04B0     		add	sp, sp, #16
 795              		@ sp needed for prologue
 796 0060 80BD     		pop	{r7, pc}
 797              	.L38:
 798 0062 C046     		.align	2
 799              	.L37:
 800 0064 FFF8FFFF 		.word	-1793
 801              		.cfi_endproc
 802              	.LFE46:
 804              		.section	.text.ADCGLOB001_SetGlobClass0SampleTime,"ax",%progbits
 805              		.align	2
 806              		.global	ADCGLOB001_SetGlobClass0SampleTime
 807              		.code	16
 808              		.thumb_func
 810              	ADCGLOB001_SetGlobClass0SampleTime:
 811              	.LFB47:
 477:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 478:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function configure the class 0 Sample Time Control for Standard
 479:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * Conversions.
 480:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 481:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 482:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetGlobClass0SampleTime(
 483:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 484:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         uint8_t SampleTime
 485:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 486:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 812              		.loc 1 486 0
 813              		.cfi_startproc
 814 0000 80B5     		push	{r7, lr}
 815              	.LCFI27:
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 7, -8
 818              		.cfi_offset 14, -4
 819 0002 84B0     		sub	sp, sp, #16
 820              	.LCFI28:
 821              		.cfi_def_cfa_offset 24
 822 0004 00AF     		add	r7, sp, #0
 823              	.LCFI29:
 824              		.cfi_def_cfa_register 7
 825 0006 7860     		str	r0, [r7, #4]
 826 0008 0A1C     		mov	r2, r1
 827 000a FB1C     		add	r3, r7, #3
 828 000c 1A70     		strb	r2, [r3]
 487:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 829              		.loc 1 487 0
 830 000e 0123     		mov	r3, #1
 831 0010 FB60     		str	r3, [r7, #12]
 488:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 489:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 832              		.loc 1 489 0
 833 0012 7B68     		ldr	r3, [r7, #4]
 834 0014 5B68     		ldr	r3, [r3, #4]
 835 0016 1B78     		ldrb	r3, [r3]
 836 0018 012B     		cmp	r3, #1
 837 001a 17D1     		bne	.L40
 490:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 491:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if(SampleTime < (uint8_t)32){
 838              		.loc 1 491 0
 839 001c FB1C     		add	r3, r7, #3
 840 001e 1B78     		ldrb	r3, [r3]
 841 0020 1F2B     		cmp	r3, #31
 842 0022 11D8     		bhi	.L41
 492:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Set the global class0 Sample Time */
 493:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0],
 843              		.loc 1 493 0
 844 0024 7B68     		ldr	r3, [r7, #4]
 845 0026 1A68     		ldr	r2, [r3]
 846 0028 FB1C     		add	r3, r7, #3
 847 002a 1978     		ldrb	r1, [r3]
 848 002c 1F23     		mov	r3, #31
 849 002e 1940     		and	r1, r3
 850 0030 7B68     		ldr	r3, [r7, #4]
 851 0032 1868     		ldr	r0, [r3]
 852 0034 A023     		mov	r3, #160
 853 0036 C358     		ldr	r3, [r0, r3]
 854 0038 1F20     		mov	r0, #31
 855 003a 8343     		bic	r3, r0
 856 003c 1943     		orr	r1, r3
 857 003e A023     		mov	r3, #160
 858 0040 D150     		str	r1, [r2, r3]
 494:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_STCS_Msk,
 495:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_STCS_Pos,
 496:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     (uint32_t)SampleTime
 497:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             );
 498:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 499:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)DAVEApp_SUCCESS;
 859              		.loc 1 499 0
 860 0042 0023     		mov	r3, #0
 861 0044 FB60     		str	r3, [r7, #12]
 862 0046 01E0     		b	.L40
 863              	.L41:
 500:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 501:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         else
 502:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 503:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
 864              		.loc 1 503 0
 865 0048 0223     		mov	r3, #2
 866 004a FB60     		str	r3, [r7, #12]
 867              	.L40:
 504:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 505:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 506:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 507:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 508:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 509:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 510:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 511:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 512:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 513:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 868              		.loc 1 513 0
 869 004c FB68     		ldr	r3, [r7, #12]
 514:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 515:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 870              		.loc 1 515 0
 871 004e 181C     		mov	r0, r3
 872 0050 BD46     		mov	sp, r7
 873 0052 04B0     		add	sp, sp, #16
 874              		@ sp needed for prologue
 875 0054 80BD     		pop	{r7, pc}
 876              		.cfi_endproc
 877              	.LFE47:
 879 0056 C046     		.section	.text.ADCGLOB001_SetGlobClass0EmuxConvMode,"ax",%progbits
 880              		.align	2
 881              		.global	ADCGLOB001_SetGlobClass0EmuxConvMode
 882              		.code	16
 883              		.thumb_func
 885              	ADCGLOB001_SetGlobClass0EmuxConvMode:
 886              	.LFB48:
 516:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 517:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function configure the class 0 Conversion Mode for EMUX Conversions.
 518:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 519:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetGlobClass0EmuxConvMode(
 520:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 521:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_ConversionMode ConversionModeVal
 522:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 523:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 887              		.loc 1 523 0
 888              		.cfi_startproc
 889 0000 80B5     		push	{r7, lr}
 890              	.LCFI30:
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 0002 84B0     		sub	sp, sp, #16
 895              	.LCFI31:
 896              		.cfi_def_cfa_offset 24
 897 0004 00AF     		add	r7, sp, #0
 898              	.LCFI32:
 899              		.cfi_def_cfa_register 7
 900 0006 7860     		str	r0, [r7, #4]
 901 0008 0A1C     		mov	r2, r1
 902 000a FB1C     		add	r3, r7, #3
 903 000c 1A70     		strb	r2, [r3]
 524:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 904              		.loc 1 524 0
 905 000e 0123     		mov	r3, #1
 906 0010 FB60     		str	r3, [r7, #12]
 525:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 526:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 907              		.loc 1 526 0
 908 0012 7B68     		ldr	r3, [r7, #4]
 909 0014 5B68     		ldr	r3, [r3, #4]
 910 0016 1B78     		ldrb	r3, [r3]
 911 0018 012B     		cmp	r3, #1
 912 001a 1DD1     		bne	.L44
 527:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 528:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||
 913              		.loc 1 528 0
 914 001c FB1C     		add	r3, r7, #3
 915 001e 1B78     		ldrb	r3, [r3]
 916 0020 022B     		cmp	r3, #2
 917 0022 03D9     		bls	.L45
 918              		.loc 1 528 0 is_stmt 0 discriminator 1
 919 0024 FB1C     		add	r3, r7, #3
 920 0026 1B78     		ldrb	r3, [r3]
 921 0028 052B     		cmp	r3, #5
 922 002a 13D1     		bne	.L46
 923              	.L45:
 529:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {
 530:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Set the global class0 External Multiplexer conversion mode*/
 531:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0],
 924              		.loc 1 531 0 is_stmt 1
 925 002c 7B68     		ldr	r3, [r7, #4]
 926 002e 1A68     		ldr	r2, [r3]
 927 0030 FB1C     		add	r3, r7, #3
 928 0032 1B78     		ldrb	r3, [r3]
 929 0034 1906     		lsl	r1, r3, #24
 930 0036 E023     		mov	r3, #224
 931 0038 DB04     		lsl	r3, r3, #19
 932 003a 1940     		and	r1, r3
 933 003c 7B68     		ldr	r3, [r7, #4]
 934 003e 1868     		ldr	r0, [r3]
 935 0040 A023     		mov	r3, #160
 936 0042 C058     		ldr	r0, [r0, r3]
 937 0044 074B     		ldr	r3, .L48
 938 0046 0340     		and	r3, r0
 939 0048 1943     		orr	r1, r3
 940 004a A023     		mov	r3, #160
 941 004c D150     		str	r1, [r2, r3]
 532:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_CME_Msk,
 533:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_CME_Pos,
 534:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     (uint32_t)ConversionModeVal
 535:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             );
 536:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)DAVEApp_SUCCESS;
 942              		.loc 1 536 0
 943 004e 0023     		mov	r3, #0
 944 0050 FB60     		str	r3, [r7, #12]
 945 0052 01E0     		b	.L44
 946              	.L46:
 537:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 538:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 539:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         else
 540:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 541:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
 947              		.loc 1 541 0
 948 0054 0223     		mov	r3, #2
 949 0056 FB60     		str	r3, [r7, #12]
 950              	.L44:
 542:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 543:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 544:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 545:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 546:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 547:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 548:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 549:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 550:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 551:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 951              		.loc 1 551 0
 952 0058 FB68     		ldr	r3, [r7, #12]
 552:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 553:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 953              		.loc 1 553 0
 954 005a 181C     		mov	r0, r3
 955 005c BD46     		mov	sp, r7
 956 005e 04B0     		add	sp, sp, #16
 957              		@ sp needed for prologue
 958 0060 80BD     		pop	{r7, pc}
 959              	.L49:
 960 0062 C046     		.align	2
 961              	.L48:
 962 0064 FFFFFFF8 		.word	-117440513
 963              		.cfi_endproc
 964              	.LFE48:
 966              		.section	.text.ADCGLOB001_SetGlobClass0EmuxSampleTime,"ax",%progbits
 967              		.align	2
 968              		.global	ADCGLOB001_SetGlobClass0EmuxSampleTime
 969              		.code	16
 970              		.thumb_func
 972              	ADCGLOB001_SetGlobClass0EmuxSampleTime:
 973              	.LFB49:
 554:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 555:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 556:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function configure the class 0 Sample Time Control for EMUX Conversions.
 557:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 558:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetGlobClass0EmuxSampleTime(
 559:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 560:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         uint8_t SampleTime
 561:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 562:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 974              		.loc 1 562 0
 975              		.cfi_startproc
 976 0000 80B5     		push	{r7, lr}
 977              	.LCFI33:
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 0002 84B0     		sub	sp, sp, #16
 982              	.LCFI34:
 983              		.cfi_def_cfa_offset 24
 984 0004 00AF     		add	r7, sp, #0
 985              	.LCFI35:
 986              		.cfi_def_cfa_register 7
 987 0006 7860     		str	r0, [r7, #4]
 988 0008 0A1C     		mov	r2, r1
 989 000a FB1C     		add	r3, r7, #3
 990 000c 1A70     		strb	r2, [r3]
 563:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 991              		.loc 1 563 0
 992 000e 0123     		mov	r3, #1
 993 0010 FB60     		str	r3, [r7, #12]
 564:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 565:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 994              		.loc 1 565 0
 995 0012 7B68     		ldr	r3, [r7, #4]
 996 0014 5B68     		ldr	r3, [r3, #4]
 997 0016 1B78     		ldrb	r3, [r3]
 998 0018 012B     		cmp	r3, #1
 999 001a 19D1     		bne	.L51
 566:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 567:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if(SampleTime < (uint8_t)32){
 1000              		.loc 1 567 0
 1001 001c FB1C     		add	r3, r7, #3
 1002 001e 1B78     		ldrb	r3, [r3]
 1003 0020 1F2B     		cmp	r3, #31
 1004 0022 13D8     		bhi	.L52
 568:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 569:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Set the global class0 External Multiplexer Sample Time */
 570:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0],
 1005              		.loc 1 570 0
 1006 0024 7B68     		ldr	r3, [r7, #4]
 1007 0026 1A68     		ldr	r2, [r3]
 1008 0028 FB1C     		add	r3, r7, #3
 1009 002a 1B78     		ldrb	r3, [r3]
 1010 002c 1904     		lsl	r1, r3, #16
 1011 002e F823     		mov	r3, #248
 1012 0030 5B03     		lsl	r3, r3, #13
 1013 0032 1940     		and	r1, r3
 1014 0034 7B68     		ldr	r3, [r7, #4]
 1015 0036 1868     		ldr	r0, [r3]
 1016 0038 A023     		mov	r3, #160
 1017 003a C058     		ldr	r0, [r0, r3]
 1018 003c 074B     		ldr	r3, .L54
 1019 003e 0340     		and	r3, r0
 1020 0040 1943     		orr	r1, r3
 1021 0042 A023     		mov	r3, #160
 1022 0044 D150     		str	r1, [r2, r3]
 571:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_STCE_Msk,
 572:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_STCE_Pos,
 573:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     (uint32_t)SampleTime
 574:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             );
 575:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 576:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)DAVEApp_SUCCESS;
 1023              		.loc 1 576 0
 1024 0046 0023     		mov	r3, #0
 1025 0048 FB60     		str	r3, [r7, #12]
 1026 004a 01E0     		b	.L51
 1027              	.L52:
 577:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 578:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 579:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         else
 580:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 581:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
 1028              		.loc 1 581 0
 1029 004c 0223     		mov	r3, #2
 1030 004e FB60     		str	r3, [r7, #12]
 1031              	.L51:
 582:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 583:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 584:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 585:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 586:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 587:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 588:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 589:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 590:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 591:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 1032              		.loc 1 591 0
 1033 0050 FB68     		ldr	r3, [r7, #12]
 592:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1034              		.loc 1 592 0
 1035 0052 181C     		mov	r0, r3
 1036 0054 BD46     		mov	sp, r7
 1037 0056 04B0     		add	sp, sp, #16
 1038              		@ sp needed for prologue
 1039 0058 80BD     		pop	{r7, pc}
 1040              	.L55:
 1041 005a C046     		.align	2
 1042              	.L54:
 1043 005c FFFFE0FF 		.word	-2031617
 1044              		.cfi_endproc
 1045              	.LFE49:
 1047              		.section	.text.ADCGLOB001_SetGlobClass1ConvMode,"ax",%progbits
 1048              		.align	2
 1049              		.global	ADCGLOB001_SetGlobClass1ConvMode
 1050              		.code	16
 1051              		.thumb_func
 1053              	ADCGLOB001_SetGlobClass1ConvMode:
 1054              	.LFB50:
 593:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 594:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function configure the class 1 conversion mode for standard conversions.
 595:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 596:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetGlobClass1ConvMode(
 597:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 598:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_ConversionMode ConversionModeVal
 599:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 600:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 1055              		.loc 1 600 0
 1056              		.cfi_startproc
 1057 0000 80B5     		push	{r7, lr}
 1058              	.LCFI36:
 1059              		.cfi_def_cfa_offset 8
 1060              		.cfi_offset 7, -8
 1061              		.cfi_offset 14, -4
 1062 0002 84B0     		sub	sp, sp, #16
 1063              	.LCFI37:
 1064              		.cfi_def_cfa_offset 24
 1065 0004 00AF     		add	r7, sp, #0
 1066              	.LCFI38:
 1067              		.cfi_def_cfa_register 7
 1068 0006 7860     		str	r0, [r7, #4]
 1069 0008 0A1C     		mov	r2, r1
 1070 000a FB1C     		add	r3, r7, #3
 1071 000c 1A70     		strb	r2, [r3]
 601:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 1072              		.loc 1 601 0
 1073 000e 0123     		mov	r3, #1
 1074 0010 FB60     		str	r3, [r7, #12]
 602:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 603:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 1075              		.loc 1 603 0
 1076 0012 7B68     		ldr	r3, [r7, #4]
 1077 0014 5B68     		ldr	r3, [r3, #4]
 1078 0016 1B78     		ldrb	r3, [r3]
 1079 0018 012B     		cmp	r3, #1
 1080 001a 1DD1     		bne	.L57
 604:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 605:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||
 1081              		.loc 1 605 0
 1082 001c FB1C     		add	r3, r7, #3
 1083 001e 1B78     		ldrb	r3, [r3]
 1084 0020 022B     		cmp	r3, #2
 1085 0022 03D9     		bls	.L58
 1086              		.loc 1 605 0 is_stmt 0 discriminator 1
 1087 0024 FB1C     		add	r3, r7, #3
 1088 0026 1B78     		ldrb	r3, [r3]
 1089 0028 052B     		cmp	r3, #5
 1090 002a 13D1     		bne	.L59
 1091              	.L58:
 606:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {
 607:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Set the global class 1 conversion mode */
 608:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1],
 1092              		.loc 1 608 0 is_stmt 1
 1093 002c 7B68     		ldr	r3, [r7, #4]
 1094 002e 1A68     		ldr	r2, [r3]
 1095 0030 FB1C     		add	r3, r7, #3
 1096 0032 1B78     		ldrb	r3, [r3]
 1097 0034 1902     		lsl	r1, r3, #8
 1098 0036 E023     		mov	r3, #224
 1099 0038 DB00     		lsl	r3, r3, #3
 1100 003a 1940     		and	r1, r3
 1101 003c 7B68     		ldr	r3, [r7, #4]
 1102 003e 1868     		ldr	r0, [r3]
 1103 0040 A423     		mov	r3, #164
 1104 0042 C058     		ldr	r0, [r0, r3]
 1105 0044 074B     		ldr	r3, .L61
 1106 0046 0340     		and	r3, r0
 1107 0048 1943     		orr	r1, r3
 1108 004a A423     		mov	r3, #164
 1109 004c D150     		str	r1, [r2, r3]
 609:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_CMS_Msk,
 610:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_CMS_Pos,
 611:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     (uint32_t)ConversionModeVal
 612:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             );
 613:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 614:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)DAVEApp_SUCCESS;
 1110              		.loc 1 614 0
 1111 004e 0023     		mov	r3, #0
 1112 0050 FB60     		str	r3, [r7, #12]
 1113 0052 01E0     		b	.L57
 1114              	.L59:
 615:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 616:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 617:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         else
 618:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 619:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
 1115              		.loc 1 619 0
 1116 0054 0223     		mov	r3, #2
 1117 0056 FB60     		str	r3, [r7, #12]
 1118              	.L57:
 620:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 621:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 622:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 623:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 624:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 625:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 626:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 627:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 628:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 629:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 1119              		.loc 1 629 0
 1120 0058 FB68     		ldr	r3, [r7, #12]
 630:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1121              		.loc 1 630 0
 1122 005a 181C     		mov	r0, r3
 1123 005c BD46     		mov	sp, r7
 1124 005e 04B0     		add	sp, sp, #16
 1125              		@ sp needed for prologue
 1126 0060 80BD     		pop	{r7, pc}
 1127              	.L62:
 1128 0062 C046     		.align	2
 1129              	.L61:
 1130 0064 FFF8FFFF 		.word	-1793
 1131              		.cfi_endproc
 1132              	.LFE50:
 1134              		.section	.text.ADCGLOB001_SetGlobClass1SampleTime,"ax",%progbits
 1135              		.align	2
 1136              		.global	ADCGLOB001_SetGlobClass1SampleTime
 1137              		.code	16
 1138              		.thumb_func
 1140              	ADCGLOB001_SetGlobClass1SampleTime:
 1141              	.LFB51:
 631:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 632:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function configure the class 1 Sample Time Control for Standard
 633:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * Conversions.
 634:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 635:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetGlobClass1SampleTime(
 636:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 637:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         uint8_t SampleTime
 638:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 639:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 1142              		.loc 1 639 0
 1143              		.cfi_startproc
 1144 0000 80B5     		push	{r7, lr}
 1145              	.LCFI39:
 1146              		.cfi_def_cfa_offset 8
 1147              		.cfi_offset 7, -8
 1148              		.cfi_offset 14, -4
 1149 0002 84B0     		sub	sp, sp, #16
 1150              	.LCFI40:
 1151              		.cfi_def_cfa_offset 24
 1152 0004 00AF     		add	r7, sp, #0
 1153              	.LCFI41:
 1154              		.cfi_def_cfa_register 7
 1155 0006 7860     		str	r0, [r7, #4]
 1156 0008 0A1C     		mov	r2, r1
 1157 000a FB1C     		add	r3, r7, #3
 1158 000c 1A70     		strb	r2, [r3]
 640:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 1159              		.loc 1 640 0
 1160 000e 0123     		mov	r3, #1
 1161 0010 FB60     		str	r3, [r7, #12]
 641:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 642:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 1162              		.loc 1 642 0
 1163 0012 7B68     		ldr	r3, [r7, #4]
 1164 0014 5B68     		ldr	r3, [r3, #4]
 1165 0016 1B78     		ldrb	r3, [r3]
 1166 0018 012B     		cmp	r3, #1
 1167 001a 17D1     		bne	.L64
 643:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 644:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 645:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if(SampleTime < (uint8_t)32){
 1168              		.loc 1 645 0
 1169 001c FB1C     		add	r3, r7, #3
 1170 001e 1B78     		ldrb	r3, [r3]
 1171 0020 1F2B     		cmp	r3, #31
 1172 0022 11D8     		bhi	.L65
 646:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Write the global class 1 Sample Time */
 647:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1],
 1173              		.loc 1 647 0
 1174 0024 7B68     		ldr	r3, [r7, #4]
 1175 0026 1A68     		ldr	r2, [r3]
 1176 0028 FB1C     		add	r3, r7, #3
 1177 002a 1978     		ldrb	r1, [r3]
 1178 002c 1F23     		mov	r3, #31
 1179 002e 1940     		and	r1, r3
 1180 0030 7B68     		ldr	r3, [r7, #4]
 1181 0032 1868     		ldr	r0, [r3]
 1182 0034 A423     		mov	r3, #164
 1183 0036 C358     		ldr	r3, [r0, r3]
 1184 0038 1F20     		mov	r0, #31
 1185 003a 8343     		bic	r3, r0
 1186 003c 1943     		orr	r1, r3
 1187 003e A423     		mov	r3, #164
 1188 0040 D150     		str	r1, [r2, r3]
 648:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_STCS_Msk,
 649:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_STCS_Pos,
 650:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     (uint32_t)SampleTime
 651:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             );
 652:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 653:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)DAVEApp_SUCCESS;
 1189              		.loc 1 653 0
 1190 0042 0023     		mov	r3, #0
 1191 0044 FB60     		str	r3, [r7, #12]
 1192 0046 01E0     		b	.L64
 1193              	.L65:
 654:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 655:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 656:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         else
 657:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 658:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
 1194              		.loc 1 658 0
 1195 0048 0223     		mov	r3, #2
 1196 004a FB60     		str	r3, [r7, #12]
 1197              	.L64:
 659:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 660:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 661:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 662:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 663:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 664:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 665:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 666:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 667:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 668:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 1198              		.loc 1 668 0
 1199 004c FB68     		ldr	r3, [r7, #12]
 669:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1200              		.loc 1 669 0
 1201 004e 181C     		mov	r0, r3
 1202 0050 BD46     		mov	sp, r7
 1203 0052 04B0     		add	sp, sp, #16
 1204              		@ sp needed for prologue
 1205 0054 80BD     		pop	{r7, pc}
 1206              		.cfi_endproc
 1207              	.LFE51:
 1209 0056 C046     		.section	.text.ADCGLOB001_SetGlobClass1EmuxConvMode,"ax",%progbits
 1210              		.align	2
 1211              		.global	ADCGLOB001_SetGlobClass1EmuxConvMode
 1212              		.code	16
 1213              		.thumb_func
 1215              	ADCGLOB001_SetGlobClass1EmuxConvMode:
 1216              	.LFB52:
 670:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 671:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 672:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function configure the class 1 Conversion Mode for EMUX Conversions.
 673:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 674:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetGlobClass1EmuxConvMode(
 675:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 676:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         ADCGLOB001_ConversionMode ConversionModeVal
 677:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 678:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 1217              		.loc 1 678 0
 1218              		.cfi_startproc
 1219 0000 80B5     		push	{r7, lr}
 1220              	.LCFI42:
 1221              		.cfi_def_cfa_offset 8
 1222              		.cfi_offset 7, -8
 1223              		.cfi_offset 14, -4
 1224 0002 84B0     		sub	sp, sp, #16
 1225              	.LCFI43:
 1226              		.cfi_def_cfa_offset 24
 1227 0004 00AF     		add	r7, sp, #0
 1228              	.LCFI44:
 1229              		.cfi_def_cfa_register 7
 1230 0006 7860     		str	r0, [r7, #4]
 1231 0008 0A1C     		mov	r2, r1
 1232 000a FB1C     		add	r3, r7, #3
 1233 000c 1A70     		strb	r2, [r3]
 679:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 1234              		.loc 1 679 0
 1235 000e 0123     		mov	r3, #1
 1236 0010 FB60     		str	r3, [r7, #12]
 680:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 681:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 1237              		.loc 1 681 0
 1238 0012 7B68     		ldr	r3, [r7, #4]
 1239 0014 5B68     		ldr	r3, [r3, #4]
 1240 0016 1B78     		ldrb	r3, [r3]
 1241 0018 012B     		cmp	r3, #1
 1242 001a 1DD1     		bne	.L68
 682:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 683:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||
 1243              		.loc 1 683 0
 1244 001c FB1C     		add	r3, r7, #3
 1245 001e 1B78     		ldrb	r3, [r3]
 1246 0020 022B     		cmp	r3, #2
 1247 0022 03D9     		bls	.L69
 1248              		.loc 1 683 0 is_stmt 0 discriminator 1
 1249 0024 FB1C     		add	r3, r7, #3
 1250 0026 1B78     		ldrb	r3, [r3]
 1251 0028 052B     		cmp	r3, #5
 1252 002a 13D1     		bne	.L70
 1253              	.L69:
 684:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {
 685:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Write the global class1 External Multiplexer conversion mode */
 686:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 687:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1],
 1254              		.loc 1 687 0 is_stmt 1
 1255 002c 7B68     		ldr	r3, [r7, #4]
 1256 002e 1A68     		ldr	r2, [r3]
 1257 0030 FB1C     		add	r3, r7, #3
 1258 0032 1B78     		ldrb	r3, [r3]
 1259 0034 1906     		lsl	r1, r3, #24
 1260 0036 E023     		mov	r3, #224
 1261 0038 DB04     		lsl	r3, r3, #19
 1262 003a 1940     		and	r1, r3
 1263 003c 7B68     		ldr	r3, [r7, #4]
 1264 003e 1868     		ldr	r0, [r3]
 1265 0040 A423     		mov	r3, #164
 1266 0042 C058     		ldr	r0, [r0, r3]
 1267 0044 074B     		ldr	r3, .L72
 1268 0046 0340     		and	r3, r0
 1269 0048 1943     		orr	r1, r3
 1270 004a A423     		mov	r3, #164
 1271 004c D150     		str	r1, [r2, r3]
 688:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_CME_Msk,
 689:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_CME_Pos,
 690:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     (uint32_t)ConversionModeVal
 691:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             );
 692:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)DAVEApp_SUCCESS;
 1272              		.loc 1 692 0
 1273 004e 0023     		mov	r3, #0
 1274 0050 FB60     		str	r3, [r7, #12]
 1275 0052 01E0     		b	.L68
 1276              	.L70:
 693:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 694:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         else
 695:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 696:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
 1277              		.loc 1 696 0
 1278 0054 0223     		mov	r3, #2
 1279 0056 FB60     		str	r3, [r7, #12]
 1280              	.L68:
 697:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 698:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 699:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 700:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 701:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 702:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 703:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 704:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 705:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 706:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 1281              		.loc 1 706 0
 1282 0058 FB68     		ldr	r3, [r7, #12]
 707:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1283              		.loc 1 707 0
 1284 005a 181C     		mov	r0, r3
 1285 005c BD46     		mov	sp, r7
 1286 005e 04B0     		add	sp, sp, #16
 1287              		@ sp needed for prologue
 1288 0060 80BD     		pop	{r7, pc}
 1289              	.L73:
 1290 0062 C046     		.align	2
 1291              	.L72:
 1292 0064 FFFFFFF8 		.word	-117440513
 1293              		.cfi_endproc
 1294              	.LFE52:
 1296              		.section	.text.ADCGLOB001_SetGlobClass1EmuxSampleTime,"ax",%progbits
 1297              		.align	2
 1298              		.global	ADCGLOB001_SetGlobClass1EmuxSampleTime
 1299              		.code	16
 1300              		.thumb_func
 1302              	ADCGLOB001_SetGlobClass1EmuxSampleTime:
 1303              	.LFB53:
 708:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 709:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 710:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function configure the class 1 Sample Time Control for EMUX Conversions.
 711:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 712:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_SetGlobClass1EmuxSampleTime(
 713:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 714:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         uint8_t SampleTime
 715:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 716:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 1304              		.loc 1 716 0
 1305              		.cfi_startproc
 1306 0000 80B5     		push	{r7, lr}
 1307              	.LCFI45:
 1308              		.cfi_def_cfa_offset 8
 1309              		.cfi_offset 7, -8
 1310              		.cfi_offset 14, -4
 1311 0002 84B0     		sub	sp, sp, #16
 1312              	.LCFI46:
 1313              		.cfi_def_cfa_offset 24
 1314 0004 00AF     		add	r7, sp, #0
 1315              	.LCFI47:
 1316              		.cfi_def_cfa_register 7
 1317 0006 7860     		str	r0, [r7, #4]
 1318 0008 0A1C     		mov	r2, r1
 1319 000a FB1C     		add	r3, r7, #3
 1320 000c 1A70     		strb	r2, [r3]
 717:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 1321              		.loc 1 717 0
 1322 000e 0123     		mov	r3, #1
 1323 0010 FB60     		str	r3, [r7, #12]
 718:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 719:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 1324              		.loc 1 719 0
 1325 0012 7B68     		ldr	r3, [r7, #4]
 1326 0014 5B68     		ldr	r3, [r3, #4]
 1327 0016 1B78     		ldrb	r3, [r3]
 1328 0018 012B     		cmp	r3, #1
 1329 001a 19D1     		bne	.L75
 720:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 721:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         if(SampleTime < (uint8_t)32){
 1330              		.loc 1 721 0
 1331 001c FB1C     		add	r3, r7, #3
 1332 001e 1B78     		ldrb	r3, [r3]
 1333 0020 1F2B     		cmp	r3, #31
 1334 0022 13D8     		bhi	.L76
 722:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             /* Write the global class1 External Multiplexer Sample Time */
 723:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1],
 1335              		.loc 1 723 0
 1336 0024 7B68     		ldr	r3, [r7, #4]
 1337 0026 1A68     		ldr	r2, [r3]
 1338 0028 FB1C     		add	r3, r7, #3
 1339 002a 1B78     		ldrb	r3, [r3]
 1340 002c 1904     		lsl	r1, r3, #16
 1341 002e F823     		mov	r3, #248
 1342 0030 5B03     		lsl	r3, r3, #13
 1343 0032 1940     		and	r1, r3
 1344 0034 7B68     		ldr	r3, [r7, #4]
 1345 0036 1868     		ldr	r0, [r3]
 1346 0038 A423     		mov	r3, #164
 1347 003a C058     		ldr	r0, [r0, r3]
 1348 003c 074B     		ldr	r3, .L78
 1349 003e 0340     		and	r3, r0
 1350 0040 1943     		orr	r1, r3
 1351 0042 A423     		mov	r3, #164
 1352 0044 D150     		str	r1, [r2, r3]
 724:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_STCE_Msk,
 725:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     VADC_GLOBICLASS_STCE_Pos,
 726:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                     (uint32_t)SampleTime
 727:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             );
 728:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)DAVEApp_SUCCESS;
 1353              		.loc 1 728 0
 1354 0046 0023     		mov	r3, #0
 1355 0048 FB60     		str	r3, [r7, #12]
 1356 004a 01E0     		b	.L75
 1357              	.L76:
 729:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 730:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 731:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         else
 732:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         {
 733:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
 1358              		.loc 1 733 0
 1359 004c 0223     		mov	r3, #2
 1360 004e FB60     		str	r3, [r7, #12]
 1361              	.L75:
 734:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****             DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 735:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         }
 736:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 737:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 738:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 739:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 740:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 741:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 742:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 743:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 1362              		.loc 1 743 0
 1363 0050 FB68     		ldr	r3, [r7, #12]
 744:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1364              		.loc 1 744 0
 1365 0052 181C     		mov	r0, r3
 1366 0054 BD46     		mov	sp, r7
 1367 0056 04B0     		add	sp, sp, #16
 1368              		@ sp needed for prologue
 1369 0058 80BD     		pop	{r7, pc}
 1370              	.L79:
 1371 005a C046     		.align	2
 1372              	.L78:
 1373 005c FFFFE0FF 		.word	-2031617
 1374              		.cfi_endproc
 1375              	.LFE53:
 1377              		.section	.text.ADCGLOB001_GetDisableBitStatus,"ax",%progbits
 1378              		.align	2
 1379              		.global	ADCGLOB001_GetDisableBitStatus
 1380              		.code	16
 1381              		.thumb_func
 1383              	ADCGLOB001_GetDisableBitStatus:
 1384              	.LFB54:
 745:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 746:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function gives the status of Module Disable bit.
 747:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 748:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_GetDisableBitStatus(
 749:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 750:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         uint8_t *StatusValue
 751:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 752:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 1385              		.loc 1 752 0
 1386              		.cfi_startproc
 1387 0000 80B5     		push	{r7, lr}
 1388              	.LCFI48:
 1389              		.cfi_def_cfa_offset 8
 1390              		.cfi_offset 7, -8
 1391              		.cfi_offset 14, -4
 1392 0002 84B0     		sub	sp, sp, #16
 1393              	.LCFI49:
 1394              		.cfi_def_cfa_offset 24
 1395 0004 00AF     		add	r7, sp, #0
 1396              	.LCFI50:
 1397              		.cfi_def_cfa_register 7
 1398 0006 7860     		str	r0, [r7, #4]
 1399 0008 3960     		str	r1, [r7]
 753:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 1400              		.loc 1 753 0
 1401 000a 0123     		mov	r3, #1
 1402 000c FB60     		str	r3, [r7, #12]
 754:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 755:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 1403              		.loc 1 755 0
 1404 000e 7B68     		ldr	r3, [r7, #4]
 1405 0010 5B68     		ldr	r3, [r3, #4]
 1406 0012 1B78     		ldrb	r3, [r3]
 1407 0014 012B     		cmp	r3, #1
 1408 0016 0AD1     		bne	.L81
 756:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 757:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Read the status value */
 758:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 759:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         *StatusValue = (uint8_t) RD_REG( HandlePtr->kGlobalPtr->CLC,
 1409              		.loc 1 759 0
 1410 0018 7B68     		ldr	r3, [r7, #4]
 1411 001a 1B68     		ldr	r3, [r3]
 1412 001c 1A68     		ldr	r2, [r3]
 1413 001e 0223     		mov	r3, #2
 1414 0020 1340     		and	r3, r2
 1415 0022 5B08     		lsr	r3, r3, #1
 1416 0024 DAB2     		uxtb	r2, r3
 1417 0026 3B68     		ldr	r3, [r7]
 1418 0028 1A70     		strb	r2, [r3]
 760:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 VADC_CLC_DISS_Msk,
 761:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****                 VADC_CLC_DISS_Pos
 762:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         );
 763:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1419              		.loc 1 763 0
 1420 002a 0023     		mov	r3, #0
 1421 002c FB60     		str	r3, [r7, #12]
 1422              	.L81:
 764:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 765:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 766:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 767:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 768:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 769:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 770:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 771:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 1423              		.loc 1 771 0
 1424 002e FB68     		ldr	r3, [r7, #12]
 772:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1425              		.loc 1 772 0
 1426 0030 181C     		mov	r0, r3
 1427 0032 BD46     		mov	sp, r7
 1428 0034 04B0     		add	sp, sp, #16
 1429              		@ sp needed for prologue
 1430 0036 80BD     		pop	{r7, pc}
 1431              		.cfi_endproc
 1432              	.LFE54:
 1434              		.section	.text.ADCGLOB001_GetIdValue,"ax",%progbits
 1435              		.align	2
 1436              		.global	ADCGLOB001_GetIdValue
 1437              		.code	16
 1438              		.thumb_func
 1440              	ADCGLOB001_GetIdValue:
 1441              	.LFB55:
 773:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /**
 774:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * This function gives the Id Value.
 775:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  */
 776:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 777:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** status_t ADCGLOB001_GetIdValue(
 778:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         const ADCGLOB001_HandleType * HandlePtr,
 779:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         uint32_t *IDValue
 780:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** )
 781:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 1442              		.loc 1 781 0
 1443              		.cfi_startproc
 1444 0000 80B5     		push	{r7, lr}
 1445              	.LCFI51:
 1446              		.cfi_def_cfa_offset 8
 1447              		.cfi_offset 7, -8
 1448              		.cfi_offset 14, -4
 1449 0002 84B0     		sub	sp, sp, #16
 1450              	.LCFI52:
 1451              		.cfi_def_cfa_offset 24
 1452 0004 00AF     		add	r7, sp, #0
 1453              	.LCFI53:
 1454              		.cfi_def_cfa_register 7
 1455 0006 7860     		str	r0, [r7, #4]
 1456 0008 3960     		str	r1, [r7]
 782:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 1457              		.loc 1 782 0
 1458 000a 0123     		mov	r3, #1
 1459 000c FB60     		str	r3, [r7, #12]
 783:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 784:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
 1460              		.loc 1 784 0
 1461 000e 7B68     		ldr	r3, [r7, #4]
 1462 0010 5B68     		ldr	r3, [r3, #4]
 1463 0012 1B78     		ldrb	r3, [r3]
 1464 0014 012B     		cmp	r3, #1
 1465 0016 06D1     		bne	.L84
 785:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 786:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Read the ID value */
 787:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         *IDValue =(uint32_t)HandlePtr->kGlobalPtr->ID;
 1466              		.loc 1 787 0
 1467 0018 7B68     		ldr	r3, [r7, #4]
 1468 001a 1B68     		ldr	r3, [r3]
 1469 001c 9A68     		ldr	r2, [r3, #8]
 1470 001e 3B68     		ldr	r3, [r7]
 1471 0020 1A60     		str	r2, [r3]
 788:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 789:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1472              		.loc 1 789 0
 1473 0022 0023     		mov	r3, #0
 1474 0024 FB60     		str	r3, [r7, #12]
 1475              	.L84:
 790:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 791:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 792:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 793:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 794:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 795:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 796:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 797:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     return Status;
 1476              		.loc 1 797 0
 1477 0026 FB68     		ldr	r3, [r7, #12]
 798:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1478              		.loc 1 798 0
 1479 0028 181C     		mov	r0, r3
 1480 002a BD46     		mov	sp, r7
 1481 002c 04B0     		add	sp, sp, #16
 1482              		@ sp needed for prologue
 1483 002e 80BD     		pop	{r7, pc}
 1484              		.cfi_endproc
 1485              	.LFE55:
 1487              		.section	.text.EnableWritetoVadcRegisters,"ax",%progbits
 1488              		.align	2
 1489              		.global	EnableWritetoVadcRegisters
 1490              		.code	16
 1491              		.thumb_func
 1493              	EnableWritetoVadcRegisters:
 1494              	.LFB56:
 799:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /* By default all Vadc registers are writable.
 800:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * EnableWritetoVadcRegisters function is called to write to registers, this function can be called
 801:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * only if the vadc registers disabled for writing by calling the function DisableWritetoVadcRegist
 802:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 803:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** void EnableWritetoVadcRegisters(void)
 804:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 1495              		.loc 1 804 0
 1496              		.cfi_startproc
 1497 0000 80B5     		push	{r7, lr}
 1498              	.LCFI54:
 1499              		.cfi_def_cfa_offset 8
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
 1502 0002 82B0     		sub	sp, sp, #8
 1503              	.LCFI55:
 1504              		.cfi_def_cfa_offset 16
 1505 0004 00AF     		add	r7, sp, #0
 1506              	.LCFI56:
 1507              		.cfi_def_cfa_register 7
 805:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 1508              		.loc 1 805 0
 1509 0006 0123     		mov	r3, #1
 1510 0008 7B60     		str	r3, [r7, #4]
 806:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 807:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     SCU_GENERAL->PASSWD = 0x000000C0U;
 1511              		.loc 1 807 0
 1512 000a 344B     		ldr	r3, .L88
 1513 000c C022     		mov	r2, #192
 1514 000e 5A62     		str	r2, [r3, #36]
 808:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk)==0)
 1515              		.loc 1 808 0
 1516 0010 324B     		ldr	r3, .L88
 1517 0012 5A6A     		ldr	r2, [r3, #36]
 1518 0014 0423     		mov	r3, #4
 1519 0016 1340     		and	r3, r2
 1520 0018 59D1     		bne	.L87
 809:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 810:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Channel control registers*/
 811:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC0_Msk, VADC_ACCPROT0_APC0_Pos, 0U);
 1521              		.loc 1 811 0
 1522 001a 314A     		ldr	r2, .L88+4
 1523 001c 3049     		ldr	r1, .L88+4
 1524 001e 8823     		mov	r3, #136
 1525 0020 CB58     		ldr	r3, [r1, r3]
 1526 0022 0121     		mov	r1, #1
 1527 0024 181C     		mov	r0, r3
 1528 0026 8843     		bic	r0, r1
 1529 0028 011C     		mov	r1, r0
 1530 002a 8823     		mov	r3, #136
 1531 002c D150     		str	r1, [r2, r3]
 812:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC1_Msk, VADC_ACCPROT0_APC1_Pos, 0U);
 1532              		.loc 1 812 0
 1533 002e 2C4A     		ldr	r2, .L88+4
 1534 0030 2B49     		ldr	r1, .L88+4
 1535 0032 8823     		mov	r3, #136
 1536 0034 CB58     		ldr	r3, [r1, r3]
 1537 0036 0221     		mov	r1, #2
 1538 0038 181C     		mov	r0, r3
 1539 003a 8843     		bic	r0, r1
 1540 003c 011C     		mov	r1, r0
 1541 003e 8823     		mov	r3, #136
 1542 0040 D150     		str	r1, [r2, r3]
 813:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 814:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*    Enable write to External multiplexer control registers*/
 815:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APEM_Msk, VADC_ACCPROT0_APEM_Pos, 0U);
 1543              		.loc 1 815 0
 1544 0042 274A     		ldr	r2, .L88+4
 1545 0044 2649     		ldr	r1, .L88+4
 1546 0046 8823     		mov	r3, #136
 1547 0048 C958     		ldr	r1, [r1, r3]
 1548 004a 264B     		ldr	r3, .L88+8
 1549 004c 1940     		and	r1, r3
 1550 004e 8823     		mov	r3, #136
 1551 0050 D150     		str	r1, [r2, r3]
 816:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 817:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*    Initialization control registers */
 818:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API0_Msk, VADC_ACCPROT0_API0_Pos, 0U);
 1552              		.loc 1 818 0
 1553 0052 234A     		ldr	r2, .L88+4
 1554 0054 2249     		ldr	r1, .L88+4
 1555 0056 8823     		mov	r3, #136
 1556 0058 C958     		ldr	r1, [r1, r3]
 1557 005a 234B     		ldr	r3, .L88+12
 1558 005c 1940     		and	r1, r3
 1559 005e 8823     		mov	r3, #136
 1560 0060 D150     		str	r1, [r2, r3]
 819:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API1_Msk, VADC_ACCPROT0_API1_Pos, 0U);
 1561              		.loc 1 819 0
 1562 0062 1F4A     		ldr	r2, .L88+4
 1563 0064 1E49     		ldr	r1, .L88+4
 1564 0066 8823     		mov	r3, #136
 1565 0068 C958     		ldr	r1, [r1, r3]
 1566 006a 204B     		ldr	r3, .L88+16
 1567 006c 1940     		and	r1, r3
 1568 006e 8823     		mov	r3, #136
 1569 0070 D150     		str	r1, [r2, r3]
 820:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 821:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*    Enable write to Gobal configuration registers */
 822:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APGC_Msk, VADC_ACCPROT0_APGC_Pos, 0U);
 1570              		.loc 1 822 0
 1571 0072 1B4A     		ldr	r2, .L88+4
 1572 0074 1A49     		ldr	r1, .L88+4
 1573 0076 8823     		mov	r3, #136
 1574 0078 CB58     		ldr	r3, [r1, r3]
 1575 007a 5B00     		lsl	r3, r3, #1
 1576 007c 5908     		lsr	r1, r3, #1
 1577 007e 8823     		mov	r3, #136
 1578 0080 D150     		str	r1, [r2, r3]
 823:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 824:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*    Enable write to Service request control registers*/
 825:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS0_Pos, 0U);
 1579              		.loc 1 825 0
 1580 0082 174A     		ldr	r2, .L88+4
 1581 0084 1649     		ldr	r1, .L88+4
 1582 0086 8C23     		mov	r3, #140
 1583 0088 CB58     		ldr	r3, [r1, r3]
 1584 008a 0221     		mov	r1, #2
 1585 008c 181C     		mov	r0, r3
 1586 008e 8843     		bic	r0, r1
 1587 0090 011C     		mov	r1, r0
 1588 0092 8C23     		mov	r3, #140
 1589 0094 D150     		str	r1, [r2, r3]
 826:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS1_Pos, 0U);
 1590              		.loc 1 826 0
 1591 0096 124A     		ldr	r2, .L88+4
 1592 0098 1149     		ldr	r1, .L88+4
 1593 009a 8C23     		mov	r3, #140
 1594 009c CB58     		ldr	r3, [r1, r3]
 1595 009e 0221     		mov	r1, #2
 1596 00a0 181C     		mov	r0, r3
 1597 00a2 8843     		bic	r0, r1
 1598 00a4 011C     		mov	r1, r0
 1599 00a6 8C23     		mov	r3, #140
 1600 00a8 D150     		str	r1, [r2, r3]
 827:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 828:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Enable write to Result control registers*/
 829:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR0_Msk, VADC_ACCPROT1_APR0_Pos, 0U);
 1601              		.loc 1 829 0
 1602 00aa 0D4A     		ldr	r2, .L88+4
 1603 00ac 0C49     		ldr	r1, .L88+4
 1604 00ae 8C23     		mov	r3, #140
 1605 00b0 C958     		ldr	r1, [r1, r3]
 1606 00b2 0D4B     		ldr	r3, .L88+12
 1607 00b4 1940     		and	r1, r3
 1608 00b6 8C23     		mov	r3, #140
 1609 00b8 D150     		str	r1, [r2, r3]
 830:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR1_Msk, VADC_ACCPROT1_APR1_Pos, 0U);
 1610              		.loc 1 830 0
 1611 00ba 094A     		ldr	r2, .L88+4
 1612 00bc 0849     		ldr	r1, .L88+4
 1613 00be 8C23     		mov	r3, #140
 1614 00c0 C958     		ldr	r1, [r1, r3]
 1615 00c2 0A4B     		ldr	r3, .L88+16
 1616 00c4 1940     		and	r1, r3
 1617 00c6 8C23     		mov	r3, #140
 1618 00c8 D150     		str	r1, [r2, r3]
 831:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1619              		.loc 1 831 0
 1620 00ca 0023     		mov	r3, #0
 1621 00cc 7B60     		str	r3, [r7, #4]
 1622              	.L87:
 832:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 833:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     SCU_GENERAL->PASSWD = 0x000000C3UL;
 1623              		.loc 1 833 0
 1624 00ce 034B     		ldr	r3, .L88
 1625 00d0 C322     		mov	r2, #195
 1626 00d2 5A62     		str	r2, [r3, #36]
 834:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 835:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 836:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 837:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 838:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 839:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 840:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1627              		.loc 1 840 0
 1628 00d4 BD46     		mov	sp, r7
 1629 00d6 02B0     		add	sp, sp, #8
 1630              		@ sp needed for prologue
 1631 00d8 80BD     		pop	{r7, pc}
 1632              	.L89:
 1633 00da C046     		.align	2
 1634              	.L88:
 1635 00dc 00000140 		.word	1073807360
 1636 00e0 00000348 		.word	1208156160
 1637 00e4 FF7FFFFF 		.word	-32769
 1638 00e8 FFFFFEFF 		.word	-65537
 1639 00ec FFFFFDFF 		.word	-131073
 1640              		.cfi_endproc
 1641              	.LFE56:
 1643              		.section	.text.DisableWritetoVadcRegisters,"ax",%progbits
 1644              		.align	2
 1645              		.global	DisableWritetoVadcRegisters
 1646              		.code	16
 1647              		.thumb_func
 1649              	DisableWritetoVadcRegisters:
 1650              	.LFB57:
 841:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 842:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** /* DisableWritetoVadcRegisters function is called to disable write to vadc registers, this function
 843:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * be called only if the user wants to disable writing to vadc registers. To enable writing to regi
 844:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****  * EnableWritetoVadcRegisters() function needs to be called. */
 845:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 846:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 847:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** void DisableWritetoVadcRegisters(void)
 848:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** {
 1651              		.loc 1 848 0
 1652              		.cfi_startproc
 1653 0000 80B5     		push	{r7, lr}
 1654              	.LCFI57:
 1655              		.cfi_def_cfa_offset 8
 1656              		.cfi_offset 7, -8
 1657              		.cfi_offset 14, -4
 1658 0002 82B0     		sub	sp, sp, #8
 1659              	.LCFI58:
 1660              		.cfi_def_cfa_offset 16
 1661 0004 00AF     		add	r7, sp, #0
 1662              	.LCFI59:
 1663              		.cfi_def_cfa_register 7
 849:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
 1664              		.loc 1 849 0
 1665 0006 0123     		mov	r3, #1
 1666 0008 7B60     		str	r3, [r7, #4]
 850:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 851:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     SCU_GENERAL->PASSWD = 0x000000C0U;
 1667              		.loc 1 851 0
 1668 000a 334B     		ldr	r3, .L92
 1669 000c C022     		mov	r2, #192
 1670 000e 5A62     		str	r2, [r3, #36]
 852:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk)==0)
 1671              		.loc 1 852 0
 1672 0010 314B     		ldr	r3, .L92
 1673 0012 5A6A     		ldr	r2, [r3, #36]
 1674 0014 0423     		mov	r3, #4
 1675 0016 1340     		and	r3, r2
 1676 0018 57D1     		bne	.L91
 853:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 854:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Channel control registers*/
 855:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC0_Msk, VADC_ACCPROT0_APC0_Pos, 1U);
 1677              		.loc 1 855 0
 1678 001a 304A     		ldr	r2, .L92+4
 1679 001c 2F49     		ldr	r1, .L92+4
 1680 001e 8823     		mov	r3, #136
 1681 0020 CB58     		ldr	r3, [r1, r3]
 1682 0022 0121     		mov	r1, #1
 1683 0024 1943     		orr	r1, r3
 1684 0026 8823     		mov	r3, #136
 1685 0028 D150     		str	r1, [r2, r3]
 856:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC1_Msk, VADC_ACCPROT0_APC1_Pos, 1U);
 1686              		.loc 1 856 0
 1687 002a 2C4A     		ldr	r2, .L92+4
 1688 002c 2B49     		ldr	r1, .L92+4
 1689 002e 8823     		mov	r3, #136
 1690 0030 CB58     		ldr	r3, [r1, r3]
 1691 0032 0221     		mov	r1, #2
 1692 0034 1943     		orr	r1, r3
 1693 0036 8823     		mov	r3, #136
 1694 0038 D150     		str	r1, [r2, r3]
 857:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 858:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Enable write to External multiplexer control registers*/
 859:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APEM_Msk, VADC_ACCPROT0_APEM_Pos, 1U);
 1695              		.loc 1 859 0
 1696 003a 284A     		ldr	r2, .L92+4
 1697 003c 2749     		ldr	r1, .L92+4
 1698 003e 8823     		mov	r3, #136
 1699 0040 CB58     		ldr	r3, [r1, r3]
 1700 0042 8021     		mov	r1, #128
 1701 0044 0902     		lsl	r1, r1, #8
 1702 0046 1943     		orr	r1, r3
 1703 0048 8823     		mov	r3, #136
 1704 004a D150     		str	r1, [r2, r3]
 860:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 861:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Initialization control registers*/
 862:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API0_Msk, VADC_ACCPROT0_API0_Pos, 1U);
 1705              		.loc 1 862 0
 1706 004c 234A     		ldr	r2, .L92+4
 1707 004e 2349     		ldr	r1, .L92+4
 1708 0050 8823     		mov	r3, #136
 1709 0052 CB58     		ldr	r3, [r1, r3]
 1710 0054 8021     		mov	r1, #128
 1711 0056 4902     		lsl	r1, r1, #9
 1712 0058 1943     		orr	r1, r3
 1713 005a 8823     		mov	r3, #136
 1714 005c D150     		str	r1, [r2, r3]
 863:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API1_Msk, VADC_ACCPROT0_API1_Pos, 1U);
 1715              		.loc 1 863 0
 1716 005e 1F4A     		ldr	r2, .L92+4
 1717 0060 1E49     		ldr	r1, .L92+4
 1718 0062 8823     		mov	r3, #136
 1719 0064 CB58     		ldr	r3, [r1, r3]
 1720 0066 8021     		mov	r1, #128
 1721 0068 8902     		lsl	r1, r1, #10
 1722 006a 1943     		orr	r1, r3
 1723 006c 8823     		mov	r3, #136
 1724 006e D150     		str	r1, [r2, r3]
 864:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 865:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Enable write to Gobal configuration registers*/
 866:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APGC_Msk, VADC_ACCPROT0_APGC_Pos, 1U);
 1725              		.loc 1 866 0
 1726 0070 1A4A     		ldr	r2, .L92+4
 1727 0072 1A49     		ldr	r1, .L92+4
 1728 0074 8823     		mov	r3, #136
 1729 0076 CB58     		ldr	r3, [r1, r3]
 1730 0078 8021     		mov	r1, #128
 1731 007a 0906     		lsl	r1, r1, #24
 1732 007c 1943     		orr	r1, r3
 1733 007e 8823     		mov	r3, #136
 1734 0080 D150     		str	r1, [r2, r3]
 867:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 868:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Enable write to Service request control registers*/
 869:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS0_Msk, VADC_ACCPROT1_APS0_Pos, 1U);
 1735              		.loc 1 869 0
 1736 0082 164A     		ldr	r2, .L92+4
 1737 0084 1549     		ldr	r1, .L92+4
 1738 0086 8C23     		mov	r3, #140
 1739 0088 CB58     		ldr	r3, [r1, r3]
 1740 008a 0121     		mov	r1, #1
 1741 008c 1943     		orr	r1, r3
 1742 008e 8C23     		mov	r3, #140
 1743 0090 D150     		str	r1, [r2, r3]
 870:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS1_Pos, 1U);
 1744              		.loc 1 870 0
 1745 0092 124A     		ldr	r2, .L92+4
 1746 0094 1149     		ldr	r1, .L92+4
 1747 0096 8C23     		mov	r3, #140
 1748 0098 CB58     		ldr	r3, [r1, r3]
 1749 009a 0221     		mov	r1, #2
 1750 009c 1943     		orr	r1, r3
 1751 009e 8C23     		mov	r3, #140
 1752 00a0 D150     		str	r1, [r2, r3]
 871:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 872:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         /*Enable write to Result control registers*/
 873:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR0_Msk, VADC_ACCPROT1_APR0_Pos, 1U);
 1753              		.loc 1 873 0
 1754 00a2 0E4A     		ldr	r2, .L92+4
 1755 00a4 0D49     		ldr	r1, .L92+4
 1756 00a6 8C23     		mov	r3, #140
 1757 00a8 CB58     		ldr	r3, [r1, r3]
 1758 00aa 8021     		mov	r1, #128
 1759 00ac 4902     		lsl	r1, r1, #9
 1760 00ae 1943     		orr	r1, r3
 1761 00b0 8C23     		mov	r3, #140
 1762 00b2 D150     		str	r1, [r2, r3]
 874:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR1_Msk, VADC_ACCPROT1_APR1_Pos, 1U);
 1763              		.loc 1 874 0
 1764 00b4 094A     		ldr	r2, .L92+4
 1765 00b6 0949     		ldr	r1, .L92+4
 1766 00b8 8C23     		mov	r3, #140
 1767 00ba CB58     		ldr	r3, [r1, r3]
 1768 00bc 8021     		mov	r1, #128
 1769 00be 8902     		lsl	r1, r1, #10
 1770 00c0 1943     		orr	r1, r3
 1771 00c2 8C23     		mov	r3, #140
 1772 00c4 D150     		str	r1, [r2, r3]
 875:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1773              		.loc 1 875 0
 1774 00c6 0023     		mov	r3, #0
 1775 00c8 7B60     		str	r3, [r7, #4]
 1776              	.L91:
 876:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 877:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 878:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     SCU_GENERAL->PASSWD = 0x000000C3UL;
 1777              		.loc 1 878 0
 1778 00ca 034B     		ldr	r3, .L92
 1779 00cc C322     		mov	r2, #195
 1780 00ce 5A62     		str	r2, [r3, #36]
 879:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 880:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     {
 881:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****         DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 882:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c ****     }
 883:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** 
 884:../Dave/Generated/src/ADCGLOB001/ADCGlob001.c **** }
 1781              		.loc 1 884 0
 1782 00d0 BD46     		mov	sp, r7
 1783 00d2 02B0     		add	sp, sp, #8
 1784              		@ sp needed for prologue
 1785 00d4 80BD     		pop	{r7, pc}
 1786              	.L93:
 1787 00d6 C046     		.align	2
 1788              	.L92:
 1789 00d8 00000140 		.word	1073807360
 1790 00dc 00000348 		.word	1208156160
 1791              		.cfi_endproc
 1792              	.LFE57:
 1794              		.text
 1795              	.Letext0:
 1796              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1797              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 1798              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 1799              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 1800              		.file 6 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
DEFINED SYMBOLS
                            *ABS*:00000000 ADCGlob001.c
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:18     .text.ADCGLOB001_Init:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:23     .text.ADCGLOB001_Init:00000000 ADCGLOB001_Init
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:252    .text.ADCGLOB001_Init:0000014c $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:263    .text.ADCGLOB001_DeInit:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:268    .text.ADCGLOB001_DeInit:00000000 ADCGLOB001_DeInit
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:364    .text.ADCGLOB001_DeInit:00000084 $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:373    .text.ADCGLOB001_CLKRequestDisable:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:378    .text.ADCGLOB001_CLKRequestDisable:00000000 ADCGLOB001_CLKRequestDisable
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:428    .text.ADCGLOB001_CLKRequestEnable:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:433    .text.ADCGLOB001_CLKRequestEnable:00000000 ADCGLOB001_CLKRequestEnable
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:483    .text.ADCGLOB001_SetStartUpCalibration:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:488    .text.ADCGLOB001_SetStartUpCalibration:00000000 ADCGLOB001_SetStartUpCalibration
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:541    .text.ADCGLOB001_StartUpCalibrationInit:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:546    .text.ADCGLOB001_StartUpCalibrationInit:00000000 ADCGLOB001_StartUpCalibrationInit
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:603    .text.ADCGLOB001_StartUpCalibrationInit:00000040 $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:608    .text.ADCGLOB001_EnableSleepModeControl:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:613    .text.ADCGLOB001_EnableSleepModeControl:00000000 ADCGLOB001_EnableSleepModeControl
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:663    .text.ADCGLOB001_DisregardSleepModeControl:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:668    .text.ADCGLOB001_DisregardSleepModeControl:00000000 ADCGLOB001_DisregardSleepModeControl
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:718    .text.ADCGLOB001_SetGlobClass0ConvMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:723    .text.ADCGLOB001_SetGlobClass0ConvMode:00000000 ADCGLOB001_SetGlobClass0ConvMode
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:800    .text.ADCGLOB001_SetGlobClass0ConvMode:00000064 $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:805    .text.ADCGLOB001_SetGlobClass0SampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:810    .text.ADCGLOB001_SetGlobClass0SampleTime:00000000 ADCGLOB001_SetGlobClass0SampleTime
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:880    .text.ADCGLOB001_SetGlobClass0EmuxConvMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:885    .text.ADCGLOB001_SetGlobClass0EmuxConvMode:00000000 ADCGLOB001_SetGlobClass0EmuxConvMode
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:962    .text.ADCGLOB001_SetGlobClass0EmuxConvMode:00000064 $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:967    .text.ADCGLOB001_SetGlobClass0EmuxSampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:972    .text.ADCGLOB001_SetGlobClass0EmuxSampleTime:00000000 ADCGLOB001_SetGlobClass0EmuxSampleTime
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1043   .text.ADCGLOB001_SetGlobClass0EmuxSampleTime:0000005c $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1048   .text.ADCGLOB001_SetGlobClass1ConvMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1053   .text.ADCGLOB001_SetGlobClass1ConvMode:00000000 ADCGLOB001_SetGlobClass1ConvMode
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1130   .text.ADCGLOB001_SetGlobClass1ConvMode:00000064 $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1135   .text.ADCGLOB001_SetGlobClass1SampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1140   .text.ADCGLOB001_SetGlobClass1SampleTime:00000000 ADCGLOB001_SetGlobClass1SampleTime
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1210   .text.ADCGLOB001_SetGlobClass1EmuxConvMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1215   .text.ADCGLOB001_SetGlobClass1EmuxConvMode:00000000 ADCGLOB001_SetGlobClass1EmuxConvMode
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1292   .text.ADCGLOB001_SetGlobClass1EmuxConvMode:00000064 $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1297   .text.ADCGLOB001_SetGlobClass1EmuxSampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1302   .text.ADCGLOB001_SetGlobClass1EmuxSampleTime:00000000 ADCGLOB001_SetGlobClass1EmuxSampleTime
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1373   .text.ADCGLOB001_SetGlobClass1EmuxSampleTime:0000005c $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1378   .text.ADCGLOB001_GetDisableBitStatus:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1383   .text.ADCGLOB001_GetDisableBitStatus:00000000 ADCGLOB001_GetDisableBitStatus
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1435   .text.ADCGLOB001_GetIdValue:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1440   .text.ADCGLOB001_GetIdValue:00000000 ADCGLOB001_GetIdValue
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1488   .text.EnableWritetoVadcRegisters:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1493   .text.EnableWritetoVadcRegisters:00000000 EnableWritetoVadcRegisters
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1635   .text.EnableWritetoVadcRegisters:000000dc $d
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1644   .text.DisableWritetoVadcRegisters:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1649   .text.DisableWritetoVadcRegisters:00000000 DisableWritetoVadcRegisters
C:\Users\maan\AppData\Local\Temp\ccjgnpbk.s:1789   .text.DisableWritetoVadcRegisters:000000d8 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.665d63c3c957c91c5ed795826dcbc088
                           .group:00000000 wm4.XMC1300.h.45.4ee692c6c98aa9fc42e2abbc732052b9
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1300.h.126.871a37eeeb3f6a078f5ddf5efd64103f
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.1aa717522e337383e1234be386036b7c
                           .group:00000000 wm4.CLK002.h.56.d2936f957892acc36e594c5138aee657
                           .group:00000000 wm4.uc_id.h.35.f852fba3565a132d8ed947977fab9fbc
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.CCU8GLOBAL_Conf.h.82.76c6b1bf357180d1e8ea1f462a66deb8
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.f334402b2e237110b77f625dfc27af0e
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.00b91c10e79f81ab4aec2120d8519584

UNDEFINED SYMBOLS
ADCGLOB001_Handle0
