   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADCCMP001.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADCCMP001_lInit,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	ADCCMP001_lInit:
  23              	.LFB38:
  24              		.file 1 "../Dave/Generated/src/ADCCMP001/ADCCMP001.c"
   1:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **  DAVE App Name : ADCCMP001       App Version: 1.0.18               
   3:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
   7:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*CODE_BLOCK_BEGIN[ADCCMP001.c]*/
   8:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*******************************************************************************
   9:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  10:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  All rights reserved.                                                         **
  11:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                                                                               **
  12:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  Redistribution and use in source and binary forms, with or without           **
  13:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  modification,are permitted provided that the following conditions are met:   **
  14:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                                                                               **
  15:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  16:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  this list of conditions and the following disclaimer.                        **
  17:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  18:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  19:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  and/or other materials provided with the distribution.                       **
  20:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  21:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  may be used to endorse or promote products derived from this software without**
  22:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  specific prior written permission.                                           **
  23:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                                                                               **
  24:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  25:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  26:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  27:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  28:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  29:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  30:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  31:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  32:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  33:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  34:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  35:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                                                                               **
  36:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  To improve the quality of the software, users are encouraged to share        **
  37:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  38:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  dave@infineon.com).                                                          **
  39:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                                                                               **
  40:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ********************************************************************************
  41:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                                                                            **
  42:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                                                                            **
  43:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  44:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                                                                            **
  45:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** COMPILER : Compiler Independent                                            **
  46:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                                                                            **
  47:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** AUTHOR   : DAVE App Developer                                              **
  48:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                                                                            **
  49:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  50:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                                                                            **
  51:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** MODIFICATION DATE : 29 Jan 2014                                            **
  52:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                                                                            **
  53:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** *******************************************************************************/
  54:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
  55:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*******************************************************************************
  56:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                       Author(s) Identity                                   **
  57:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ********************************************************************************
  58:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                                                                            **
  59:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** Initials     Name                                                          **
  60:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** ---------------------------------------------------------------------------**
  61:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** PM           DAVE App Developer                                            **
  62:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** *******************************************************************************/
  63:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
  64:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
  65:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * @file ADCCMP001.c
  66:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *
  67:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * @brief   This file contains the implementation of all public and private functions of the
  68:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *          ADCCMP001 App.
  69:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *
  70:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * Change History:
  71:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * Date       version       Details
  72:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * 12-Jan-2013   1.0.2    Initial code added for XMC1000
  73:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * 05-Mar-2013   1.0.4    App version changed for XMC1000 and XMC4400/XMC4200
  74:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * 24-Apr-2013   1.0.6    Ported to XMC4500 step AB
  75:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * 27-Jun-2013   1.0.8    1.Boundary flag feature supported.
  76:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                        2.In the Header comment section device name changed to
  77:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                          XMC1000.
  78:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * 09-Jul-2013   1.0.10   Boundary flag register BFLC memory accessing variable
  79:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                        names modified.
  80:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * 30-Aug-2013   1.0.12   Workaround for the boundaryflag registers is removed
  81:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                        since the registers are available in the header file.
  82:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * 10-Sep-2013   1.0.14   Added support for the following devices under XMC1200
  83:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                        and XMC1300 Series XMC1201, XMC1202, XMC1301
  84:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * 29-Jan-2014   1.0.16   Error codes are added in various functions, that can 
  85:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                        be logged with DBG002 App.
  86:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
  87:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
  88:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*******************************************************************************
  89:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                      Include Files                                         **
  90:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** *******************************************************************************/
  91:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #include <DAVE3.h>
  92:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
  93:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
  94:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*****************************************************************************
  95:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
  96:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** *****************************************************************************/
  97:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*These definitions are included here to avoid compilation errors,
  98:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
  99:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  as empty*/
 100:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #ifndef _DBG002_H_
 101:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 102:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 103:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_I(e)
 104:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_IG(e,g)
 105:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_IH(e,h)
 106:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_IP(e,p)
 107:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_IGH(e,g,h)
 108:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_IGP(e,g,p)
 109:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_IHP(e,h,p)
 110:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_IGHP(e,g,h,p)
 111:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_N(e)
 112:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_NG(e,g)
 113:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_NH(e,h)
 114:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_NP(e,p)
 115:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_NGH(e,g,h)
 116:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_NGP(e,g,p)
 117:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_NHP(e,h,p)
 118:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_NGHP(e,g,h,p)
 119:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_ID(e)
 120:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_IS(e)
 121:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_ISG(e,g)
 122:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 123:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 124:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 125:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 126:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 127:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 128:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status)
 129:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status)
 130:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 131:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define DBG002_MESSAGEID_LITERAL
 132:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 133:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #endif/* End of defintions of dummy Debug Log macros*/
 134:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 135:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 136:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*******************************************************************************
 137:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                      Private Macro Definitions                             **
 138:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** *******************************************************************************/
 139:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** #define APP_GID DBG002_GID_ADCGLOB001
 140:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 141:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 142:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /***************************************************************************************
 143:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** **                      Global variables Definitions                                  **
 144:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ** These variables defined temporarily due to updated header files not available.     **
 145:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** ****************************************************************************************/
 146:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 147:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 148:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * @cond INTERNAL_DOCS
 149:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 150:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 151:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 152:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 153:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /*************************************************************************
 154:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                 Private Function declarations
 155:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  ***************************************************************************/
 156:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 157:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 158:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * @brief This function initializes ADC channel and result register. \n
 159:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * @param[in] HandlePtr Handle of the ADCCMP001 App
 160:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * @return void
 161:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * <BR>
 162:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *
 163:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * <b>Reentrancy:  Yes</b><BR>
 164:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * <b>Sync/Async:  Synchronous</b><BR>
 165:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 166:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** static void ADCCMP001_lInit(const ADCCMP001_HandleType* HandlePtr);
 167:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 168:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 169:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /********************************************************************************
 170:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                 LOCAL FUNCTIONS DEFINITIONS
 171:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  **********************************************************************************/
 172:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 173:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function initializes ADC channel and result registers as per UI configurations.
 174:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 175:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** static void ADCCMP001_lInit(const ADCCMP001_HandleType* HandlePtr)
 176:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
  25              		.loc 1 176 0
  26              		.cfi_startproc
  27 0000 90B5     		push	{r4, r7, lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 12
  30              		.cfi_offset 4, -12
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 85B0     		sub	sp, sp, #20
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 32
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
 177:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
  40              		.loc 1 177 0
  41 0008 0123     		mov	r3, #1
  42 000a FB60     		str	r3, [r7, #12]
 178:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 179:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   VADC_G_TypeDef* GroupPtr = HandlePtr->ADCGrPtr;
  43              		.loc 1 179 0
  44 000c 7B68     		ldr	r3, [r7, #4]
  45 000e 1B68     		ldr	r3, [r3]
  46 0010 BB60     		str	r3, [r7, #8]
 180:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 181:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCCMP001_UNINITIALIZED))
  47              		.loc 1 181 0
  48 0012 7B68     		ldr	r3, [r7, #4]
  49 0014 5B68     		ldr	r3, [r3, #4]
  50 0016 5B78     		ldrb	r3, [r3, #1]
  51 0018 002B     		cmp	r3, #0
  52 001a 00D0     		beq	.LCB26
  53 001c EAE0     		b	.L1	@long jump
  54              	.LCB26:
 182:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 183:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* Priority Channel */
 184:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     SET_BIT(GroupPtr->CHASS, (uint32_t)(HandlePtr->kChannelNo));
  55              		.loc 1 184 0
  56 001e BA68     		ldr	r2, [r7, #8]
  57 0020 8823     		mov	r3, #136
  58 0022 D258     		ldr	r2, [r2, r3]
  59 0024 7B68     		ldr	r3, [r7, #4]
  60 0026 5B7C     		ldrb	r3, [r3, #17]
  61 0028 0121     		mov	r1, #1
  62 002a 081C     		mov	r0, r1
  63 002c 9840     		lsl	r0, r0, r3
  64 002e 031C     		mov	r3, r0
  65 0030 111C     		mov	r1, r2
  66 0032 1943     		orr	r1, r3
  67 0034 BA68     		ldr	r2, [r7, #8]
  68 0036 8823     		mov	r3, #136
  69 0038 D150     		str	r1, [r2, r3]
 185:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* Input class */
 186:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     WR_REG( GroupPtr->CHCTR[HandlePtr->kChannelNo],
  70              		.loc 1 186 0
  71 003a 7B68     		ldr	r3, [r7, #4]
  72 003c 5B7C     		ldrb	r3, [r3, #17]
  73 003e 1A1C     		mov	r2, r3
  74 0040 7B68     		ldr	r3, [r7, #4]
  75 0042 1B7A     		ldrb	r3, [r3, #8]
  76 0044 191C     		mov	r1, r3
  77 0046 0323     		mov	r3, #3
  78 0048 1940     		and	r1, r3
  79 004a 7B68     		ldr	r3, [r7, #4]
  80 004c 5B7C     		ldrb	r3, [r3, #17]
  81 004e 181C     		mov	r0, r3
  82 0050 BB68     		ldr	r3, [r7, #8]
  83 0052 8030     		add	r0, r0, #128
  84 0054 8000     		lsl	r0, r0, #2
  85 0056 C358     		ldr	r3, [r0, r3]
  86 0058 0320     		mov	r0, #3
  87 005a 8343     		bic	r3, r0
  88 005c 1943     		orr	r1, r3
  89 005e BB68     		ldr	r3, [r7, #8]
  90 0060 8032     		add	r2, r2, #128
  91 0062 9200     		lsl	r2, r2, #2
  92 0064 D150     		str	r1, [r2, r3]
 187:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_CHCTR_ICLSEL_Msk,
 188:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_CHCTR_ICLSEL_Pos,
 189:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             (uint32_t)HandlePtr->kIpClassSel
 190:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****            );
 191:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* Channel event mode */
 192:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     WR_REG( GroupPtr->CHCTR[HandlePtr->kChannelNo],
  93              		.loc 1 192 0
  94 0066 7B68     		ldr	r3, [r7, #4]
  95 0068 5B7C     		ldrb	r3, [r3, #17]
  96 006a 1A1C     		mov	r2, r3
  97 006c 7B68     		ldr	r3, [r7, #4]
  98 006e 5B7A     		ldrb	r3, [r3, #9]
  99 0070 1902     		lsl	r1, r3, #8
 100 0072 C023     		mov	r3, #192
 101 0074 9B00     		lsl	r3, r3, #2
 102 0076 1940     		and	r1, r3
 103 0078 7B68     		ldr	r3, [r7, #4]
 104 007a 5B7C     		ldrb	r3, [r3, #17]
 105 007c 181C     		mov	r0, r3
 106 007e BB68     		ldr	r3, [r7, #8]
 107 0080 8030     		add	r0, r0, #128
 108 0082 8000     		lsl	r0, r0, #2
 109 0084 C058     		ldr	r0, [r0, r3]
 110 0086 5D4B     		ldr	r3, .L5
 111 0088 0340     		and	r3, r0
 112 008a 1943     		orr	r1, r3
 113 008c BB68     		ldr	r3, [r7, #8]
 114 008e 8032     		add	r2, r2, #128
 115 0090 9200     		lsl	r2, r2, #2
 116 0092 D150     		str	r1, [r2, r3]
 193:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_CHCTR_CHEVMODE_Msk,
 194:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_CHCTR_CHEVMODE_Pos,
 195:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             (uint32_t)HandlePtr->kChEvtmode
 196:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****            );
 197:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* reference input selection */
 198:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     WR_REG( GroupPtr->CHCTR[HandlePtr->kChannelNo],
 117              		.loc 1 198 0
 118 0094 7B68     		ldr	r3, [r7, #4]
 119 0096 5B7C     		ldrb	r3, [r3, #17]
 120 0098 1A1C     		mov	r2, r3
 121 009a 7B68     		ldr	r3, [r7, #4]
 122 009c 9B7A     		ldrb	r3, [r3, #10]
 123 009e D902     		lsl	r1, r3, #11
 124 00a0 8023     		mov	r3, #128
 125 00a2 1B01     		lsl	r3, r3, #4
 126 00a4 1940     		and	r1, r3
 127 00a6 7B68     		ldr	r3, [r7, #4]
 128 00a8 5B7C     		ldrb	r3, [r3, #17]
 129 00aa 181C     		mov	r0, r3
 130 00ac BB68     		ldr	r3, [r7, #8]
 131 00ae 8030     		add	r0, r0, #128
 132 00b0 8000     		lsl	r0, r0, #2
 133 00b2 C058     		ldr	r0, [r0, r3]
 134 00b4 524B     		ldr	r3, .L5+4
 135 00b6 0340     		and	r3, r0
 136 00b8 1943     		orr	r1, r3
 137 00ba BB68     		ldr	r3, [r7, #8]
 138 00bc 8032     		add	r2, r2, #128
 139 00be 9200     		lsl	r2, r2, #2
 140 00c0 D150     		str	r1, [r2, r3]
 199:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_CHCTR_REFSEL_Msk,
 200:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_CHCTR_REFSEL_Pos,
 201:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             (uint32_t)HandlePtr->kRefInput
 202:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****            );
 203:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* XMC4500: EMUXCSS is not present.  */
 204:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     if(HandlePtr->kExtMuxControl == (uint8_t)1)
 141              		.loc 1 204 0
 142 00c2 7B68     		ldr	r3, [r7, #4]
 143 00c4 1B7C     		ldrb	r3, [r3, #16]
 144 00c6 012B     		cmp	r3, #1
 145 00c8 10D1     		bne	.L3
 205:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     {
 206:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       /*WR_REG( GroupPtr->EMUXCTR,
 207:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****               VADC_G_EMUXCTR_EMXCSS_Msk,
 208:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****               VADC_G_EMUXCTR_EMXCSS_Pos,
 209:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****               (0x01)
 210:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****              );     */
 211:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       WR_REG( GroupPtr->EMUXCTR,
 146              		.loc 1 211 0
 147 00ca 7B68     		ldr	r3, [r7, #4]
 148 00cc 5B7C     		ldrb	r3, [r3, #17]
 149 00ce 1A04     		lsl	r2, r3, #16
 150 00d0 4C4B     		ldr	r3, .L5+8
 151 00d2 1A40     		and	r2, r3
 152 00d4 B968     		ldr	r1, [r7, #8]
 153 00d6 F823     		mov	r3, #248
 154 00d8 5B00     		lsl	r3, r3, #1
 155 00da C958     		ldr	r1, [r1, r3]
 156 00dc 4A4B     		ldr	r3, .L5+12
 157 00de 0B40     		and	r3, r1
 158 00e0 111C     		mov	r1, r2
 159 00e2 1943     		orr	r1, r3
 160 00e4 BA68     		ldr	r2, [r7, #8]
 161 00e6 F823     		mov	r3, #248
 162 00e8 5B00     		lsl	r3, r3, #1
 163 00ea D150     		str	r1, [r2, r3]
 164              	.L3:
 212:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****               VADC_G_EMUXCTR_EMUXCH_Msk,
 213:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****               VADC_G_EMUXCTR_EMUXCH_Pos,
 214:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****               (uint32_t)(HandlePtr->kChannelNo)
 215:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****              );
 216:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     }
 217:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 218:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /* Write compare value in the result register for the Fast Compare Mode */
 219:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     WR_REG( GroupPtr->RES[HandlePtr->kResultReg],
 165              		.loc 1 219 0
 166 00ec 7B68     		ldr	r3, [r7, #4]
 167 00ee DB7B     		ldrb	r3, [r3, #15]
 168 00f0 1A1C     		mov	r2, r3
 169 00f2 7B68     		ldr	r3, [r7, #4]
 170 00f4 5B8A     		ldrh	r3, [r3, #18]
 171 00f6 191C     		mov	r1, r3
 172 00f8 7B68     		ldr	r3, [r7, #4]
 173 00fa DB7B     		ldrb	r3, [r3, #15]
 174 00fc 181C     		mov	r0, r3
 175 00fe BB68     		ldr	r3, [r7, #8]
 176 0100 C030     		add	r0, r0, #192
 177 0102 8000     		lsl	r0, r0, #2
 178 0104 C358     		ldr	r3, [r0, r3]
 179 0106 1B0C     		lsr	r3, r3, #16
 180 0108 1B04     		lsl	r3, r3, #16
 181 010a 1943     		orr	r1, r3
 182 010c BB68     		ldr	r3, [r7, #8]
 183 010e C032     		add	r2, r2, #192
 184 0110 9200     		lsl	r2, r2, #2
 185 0112 D150     		str	r1, [r2, r3]
 220:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_RES_RESULT_Msk,
 221:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_RES_RESULT_Pos,
 222:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             (uint32_t)(HandlePtr->kResultCompVal)
 223:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****           );
 224:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 225:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* Set boundary flag for all the advanced result registers */
 226:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     if(HandlePtr->kBoundaryFlagEnable == (uint8_t)1)
 186              		.loc 1 226 0
 187 0114 7B68     		ldr	r3, [r7, #4]
 188 0116 DB7A     		ldrb	r3, [r3, #11]
 189 0118 012B     		cmp	r3, #1
 190 011a 65D1     		bne	.L4
 227:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     {        
 228:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****            WR_REG( GroupPtr->BFL, ((uint32_t)0x01 << (HandlePtr->kResultReg + (uint8_t)16)),
 191              		.loc 1 228 0
 192 011c 7B68     		ldr	r3, [r7, #4]
 193 011e 5B7B     		ldrb	r3, [r3, #13]
 194 0120 1A1C     		mov	r2, r3
 195 0122 7B68     		ldr	r3, [r7, #4]
 196 0124 DB7B     		ldrb	r3, [r3, #15]
 197 0126 1033     		add	r3, r3, #16
 198 0128 111C     		mov	r1, r2
 199 012a 9940     		lsl	r1, r1, r3
 200 012c 0B1C     		mov	r3, r1
 201 012e 7A68     		ldr	r2, [r7, #4]
 202 0130 D27B     		ldrb	r2, [r2, #15]
 203 0132 1032     		add	r2, r2, #16
 204 0134 0121     		mov	r1, #1
 205 0136 0C1C     		mov	r4, r1
 206 0138 9440     		lsl	r4, r4, r2
 207 013a 221C     		mov	r2, r4
 208 013c 1A40     		and	r2, r3
 209 013e B968     		ldr	r1, [r7, #8]
 210 0140 C823     		mov	r3, #200
 211 0142 CB58     		ldr	r3, [r1, r3]
 212 0144 7968     		ldr	r1, [r7, #4]
 213 0146 C97B     		ldrb	r1, [r1, #15]
 214 0148 1031     		add	r1, r1, #16
 215 014a 0120     		mov	r0, #1
 216 014c 041C     		mov	r4, r0
 217 014e 8C40     		lsl	r4, r4, r1
 218 0150 211C     		mov	r1, r4
 219 0152 C943     		mvn	r1, r1
 220 0154 0B40     		and	r3, r1
 221 0156 111C     		mov	r1, r2
 222 0158 1943     		orr	r1, r3
 223 015a BA68     		ldr	r2, [r7, #8]
 224 015c C823     		mov	r3, #200
 225 015e D150     		str	r1, [r2, r3]
 229:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                  (HandlePtr->kResultReg + (uint8_t)16), (uint32_t)(HandlePtr->kBoundaryFlagInv));
 230:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****            WR_REG( GroupPtr->BFL, ((uint32_t)0x01 << (HandlePtr->kResultReg + (uint8_t)8)),
 226              		.loc 1 230 0
 227 0160 7B68     		ldr	r3, [r7, #4]
 228 0162 1B7B     		ldrb	r3, [r3, #12]
 229 0164 1A1C     		mov	r2, r3
 230 0166 7B68     		ldr	r3, [r7, #4]
 231 0168 DB7B     		ldrb	r3, [r3, #15]
 232 016a 0833     		add	r3, r3, #8
 233 016c 101C     		mov	r0, r2
 234 016e 9840     		lsl	r0, r0, r3
 235 0170 031C     		mov	r3, r0
 236 0172 7A68     		ldr	r2, [r7, #4]
 237 0174 D27B     		ldrb	r2, [r2, #15]
 238 0176 0832     		add	r2, r2, #8
 239 0178 0121     		mov	r1, #1
 240 017a 0C1C     		mov	r4, r1
 241 017c 9440     		lsl	r4, r4, r2
 242 017e 221C     		mov	r2, r4
 243 0180 1A40     		and	r2, r3
 244 0182 B968     		ldr	r1, [r7, #8]
 245 0184 C823     		mov	r3, #200
 246 0186 CB58     		ldr	r3, [r1, r3]
 247 0188 7968     		ldr	r1, [r7, #4]
 248 018a C97B     		ldrb	r1, [r1, #15]
 249 018c 0831     		add	r1, r1, #8
 250 018e 0120     		mov	r0, #1
 251 0190 041C     		mov	r4, r0
 252 0192 8C40     		lsl	r4, r4, r1
 253 0194 211C     		mov	r1, r4
 254 0196 C943     		mvn	r1, r1
 255 0198 0B40     		and	r3, r1
 256 019a 111C     		mov	r1, r2
 257 019c 1943     		orr	r1, r3
 258 019e BA68     		ldr	r2, [r7, #8]
 259 01a0 C823     		mov	r3, #200
 260 01a2 D150     		str	r1, [r2, r3]
 231:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                  (HandlePtr->kResultReg + (uint8_t)8), (uint32_t)(HandlePtr->kBoundaryFlagAct));
 232:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****            WR_REG( GroupPtr->BFLC, ((uint32_t)0xf << (HandlePtr->kResultReg * (uint8_t)4)),
 261              		.loc 1 232 0
 262 01a4 7B68     		ldr	r3, [r7, #4]
 263 01a6 9B7B     		ldrb	r3, [r3, #14]
 264 01a8 1A1C     		mov	r2, r3
 265 01aa 7B68     		ldr	r3, [r7, #4]
 266 01ac DB7B     		ldrb	r3, [r3, #15]
 267 01ae 9B00     		lsl	r3, r3, #2
 268 01b0 101C     		mov	r0, r2
 269 01b2 9840     		lsl	r0, r0, r3
 270 01b4 031C     		mov	r3, r0
 271 01b6 7A68     		ldr	r2, [r7, #4]
 272 01b8 D27B     		ldrb	r2, [r2, #15]
 273 01ba 9200     		lsl	r2, r2, #2
 274 01bc 0F21     		mov	r1, #15
 275 01be 0C1C     		mov	r4, r1
 276 01c0 9440     		lsl	r4, r4, r2
 277 01c2 221C     		mov	r2, r4
 278 01c4 1A40     		and	r2, r3
 279 01c6 B968     		ldr	r1, [r7, #8]
 280 01c8 D023     		mov	r3, #208
 281 01ca CB58     		ldr	r3, [r1, r3]
 282 01cc 7968     		ldr	r1, [r7, #4]
 283 01ce C97B     		ldrb	r1, [r1, #15]
 284 01d0 8900     		lsl	r1, r1, #2
 285 01d2 0F20     		mov	r0, #15
 286 01d4 041C     		mov	r4, r0
 287 01d6 8C40     		lsl	r4, r4, r1
 288 01d8 211C     		mov	r1, r4
 289 01da C943     		mvn	r1, r1
 290 01dc 0B40     		and	r3, r1
 291 01de 111C     		mov	r1, r2
 292 01e0 1943     		orr	r1, r3
 293 01e2 BA68     		ldr	r2, [r7, #8]
 294 01e4 D023     		mov	r3, #208
 295 01e6 D150     		str	r1, [r2, r3]
 296              	.L4:
 233:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                  (HandlePtr->kResultReg * (uint8_t)4), (uint32_t)(HandlePtr->kBoundaryFlagMode));
 234:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     }
 235:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* change the state to the Initialized */
 236:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     HandlePtr->DynamicHandlePtr->State = ADCCMP001_INITIALIZED;
 297              		.loc 1 236 0
 298 01e8 7B68     		ldr	r3, [r7, #4]
 299 01ea 5B68     		ldr	r3, [r3, #4]
 300 01ec 0122     		mov	r2, #1
 301 01ee 5A70     		strb	r2, [r3, #1]
 237:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 	Status &= (uint32_t)DAVEApp_SUCCESS;
 302              		.loc 1 237 0
 303 01f0 0023     		mov	r3, #0
 304 01f2 FB60     		str	r3, [r7, #12]
 305              	.L1:
 238:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 239:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 240:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 241:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 242:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 243:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 244:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 306              		.loc 1 244 0
 307 01f4 BD46     		mov	sp, r7
 308 01f6 05B0     		add	sp, sp, #20
 309              		@ sp needed for prologue
 310 01f8 90BD     		pop	{r4, r7, pc}
 311              	.L6:
 312 01fa C046     		.align	2
 313              	.L5:
 314 01fc FFFCFFFF 		.word	-769
 315 0200 FFF7FFFF 		.word	-2049
 316 0204 0000FF03 		.word	67043328
 317 0208 FFFF00FC 		.word	-67043329
 318              		.cfi_endproc
 319              	.LFE38:
 321              		.section	.text.ADCCMP001_Init,"ax",%progbits
 322              		.align	2
 323              		.global	ADCCMP001_Init
 324              		.code	16
 325              		.thumb_func
 327              	ADCCMP001_Init:
 328              	.LFB39:
 245:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 246:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**************************************************************************************************
 247:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  *                 API DEFINITION
 248:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  **************************************************************************************************
 249:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 250:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 251:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function initializes all instances of the ADCCMP001 App
 252:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 253:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** void ADCCMP001_Init(void)
 254:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 329              		.loc 1 254 0
 330              		.cfi_startproc
 331 0000 80B5     		push	{r7, lr}
 332              	.LCFI3:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 00AF     		add	r7, sp, #0
 337              	.LCFI4:
 338              		.cfi_def_cfa_register 7
 255:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 256:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   ADCGLOB001_Init();
 339              		.loc 1 256 0
 340 0004 FFF7FEFF 		bl	ADCGLOB001_Init
 257:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /* Call the local function with the handle pointer for each instance */
 258:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   ADCCMP001_lInit(&ADCCMP001_Handle0);
 341              		.loc 1 258 0
 342 0008 064B     		ldr	r3, .L8
 343 000a 181C     		mov	r0, r3
 344 000c FFF7FEFF 		bl	ADCCMP001_lInit
 259:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /* Call the local function with the handle pointer for each instance */
 260:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   ADCCMP001_lInit(&ADCCMP001_Handle1);
 345              		.loc 1 260 0
 346 0010 054B     		ldr	r3, .L8+4
 347 0012 181C     		mov	r0, r3
 348 0014 FFF7FEFF 		bl	ADCCMP001_lInit
 261:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /* Call the local function with the handle pointer for each instance */
 262:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   ADCCMP001_lInit(&ADCCMP001_Handle2);
 349              		.loc 1 262 0
 350 0018 044B     		ldr	r3, .L8+8
 351 001a 181C     		mov	r0, r3
 352 001c FFF7FEFF 		bl	ADCCMP001_lInit
 263:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 264:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 353              		.loc 1 264 0
 354 0020 BD46     		mov	sp, r7
 355              		@ sp needed for prologue
 356 0022 80BD     		pop	{r7, pc}
 357              	.L9:
 358              		.align	2
 359              	.L8:
 360 0024 00000000 		.word	ADCCMP001_Handle0
 361 0028 00000000 		.word	ADCCMP001_Handle1
 362 002c 00000000 		.word	ADCCMP001_Handle2
 363              		.cfi_endproc
 364              	.LFE39:
 366              		.section	.text.ADCCMP001_Deinit,"ax",%progbits
 367              		.align	2
 368              		.global	ADCCMP001_Deinit
 369              		.code	16
 370              		.thumb_func
 372              	ADCCMP001_Deinit:
 373              	.LFB40:
 265:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 266:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 267:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function resets all the channel and result registers.
 268:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 269:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_Deinit(const ADCCMP001_HandleType* HandlePtr)
 270:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 374              		.loc 1 270 0
 375              		.cfi_startproc
 376 0000 80B5     		push	{r7, lr}
 377              	.LCFI5:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 84B0     		sub	sp, sp, #16
 382              	.LCFI6:
 383              		.cfi_def_cfa_offset 24
 384 0004 00AF     		add	r7, sp, #0
 385              	.LCFI7:
 386              		.cfi_def_cfa_register 7
 387 0006 7860     		str	r0, [r7, #4]
 271:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 272:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   VADC_G_TypeDef* GroupPtr = HandlePtr->ADCGrPtr;
 388              		.loc 1 272 0
 389 0008 7B68     		ldr	r3, [r7, #4]
 390 000a 1B68     		ldr	r3, [r3]
 391 000c BB60     		str	r3, [r7, #8]
 273:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 392              		.loc 1 273 0
 393 000e 0123     		mov	r3, #1
 394 0010 FB60     		str	r3, [r7, #12]
 274:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 275:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCCMP001_INITIALIZED))
 395              		.loc 1 275 0
 396 0012 7B68     		ldr	r3, [r7, #4]
 397 0014 5B68     		ldr	r3, [r3, #4]
 398 0016 5B78     		ldrb	r3, [r3, #1]
 399 0018 012B     		cmp	r3, #1
 400 001a 38D1     		bne	.L11
 276:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 277:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     GroupPtr->CHCTR[HandlePtr->kChannelNo] = (uint32_t)0x00;
 401              		.loc 1 277 0
 402 001c 7B68     		ldr	r3, [r7, #4]
 403 001e 5B7C     		ldrb	r3, [r3, #17]
 404 0020 1A1C     		mov	r2, r3
 405 0022 BB68     		ldr	r3, [r7, #8]
 406 0024 8032     		add	r2, r2, #128
 407 0026 9200     		lsl	r2, r2, #2
 408 0028 0021     		mov	r1, #0
 409 002a D150     		str	r1, [r2, r3]
 278:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     WR_REG( GroupPtr->EMUXCTR,
 410              		.loc 1 278 0
 411 002c BA68     		ldr	r2, [r7, #8]
 412 002e F823     		mov	r3, #248
 413 0030 5B00     		lsl	r3, r3, #1
 414 0032 D258     		ldr	r2, [r2, r3]
 415 0034 184B     		ldr	r3, .L14
 416 0036 111C     		mov	r1, r2
 417 0038 1940     		and	r1, r3
 418 003a BA68     		ldr	r2, [r7, #8]
 419 003c F823     		mov	r3, #248
 420 003e 5B00     		lsl	r3, r3, #1
 421 0040 D150     		str	r1, [r2, r3]
 279:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_EMUXCTR_EMUXCH_Msk,
 280:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_EMUXCTR_EMUXCH_Pos,
 281:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             (uint32_t)0x00
 282:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****           );
 283:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 284:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     GroupPtr->RES[HandlePtr->kResultReg] = (uint32_t)0x00;
 422              		.loc 1 284 0
 423 0042 7B68     		ldr	r3, [r7, #4]
 424 0044 DB7B     		ldrb	r3, [r3, #15]
 425 0046 1A1C     		mov	r2, r3
 426 0048 BB68     		ldr	r3, [r7, #8]
 427 004a C032     		add	r2, r2, #192
 428 004c 9200     		lsl	r2, r2, #2
 429 004e 0021     		mov	r1, #0
 430 0050 D150     		str	r1, [r2, r3]
 285:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 286:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     if(HandlePtr->kBoundaryFlagEnable == (uint8_t)1)
 431              		.loc 1 286 0
 432 0052 7B68     		ldr	r3, [r7, #4]
 433 0054 DB7A     		ldrb	r3, [r3, #11]
 434 0056 012B     		cmp	r3, #1
 435 0058 13D1     		bne	.L12
 287:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     {
 288:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       CLR_BIT(GroupPtr->BFL, (((uint32_t)16 + (uint32_t)HandlePtr->kResultReg)));
 436              		.loc 1 288 0
 437 005a BA68     		ldr	r2, [r7, #8]
 438 005c C823     		mov	r3, #200
 439 005e D358     		ldr	r3, [r2, r3]
 440 0060 7A68     		ldr	r2, [r7, #4]
 441 0062 D27B     		ldrb	r2, [r2, #15]
 442 0064 1032     		add	r2, r2, #16
 443 0066 0121     		mov	r1, #1
 444 0068 081C     		mov	r0, r1
 445 006a 9040     		lsl	r0, r0, r2
 446 006c 021C     		mov	r2, r0
 447 006e D243     		mvn	r2, r2
 448 0070 111C     		mov	r1, r2
 449 0072 1940     		and	r1, r3
 450 0074 BA68     		ldr	r2, [r7, #8]
 451 0076 C823     		mov	r3, #200
 452 0078 D150     		str	r1, [r2, r3]
 289:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       GroupPtr->BFLC = (uint32_t)0x00;
 453              		.loc 1 289 0
 454 007a BA68     		ldr	r2, [r7, #8]
 455 007c D023     		mov	r3, #208
 456 007e 0021     		mov	r1, #0
 457 0080 D150     		str	r1, [r2, r3]
 458              	.L12:
 290:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     }
 291:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     HandlePtr->DynamicHandlePtr->State = ADCCMP001_UNINITIALIZED;
 459              		.loc 1 291 0
 460 0082 7B68     		ldr	r3, [r7, #4]
 461 0084 5B68     		ldr	r3, [r3, #4]
 462 0086 0022     		mov	r2, #0
 463 0088 5A70     		strb	r2, [r3, #1]
 292:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 464              		.loc 1 292 0
 465 008a 0023     		mov	r3, #0
 466 008c FB60     		str	r3, [r7, #12]
 467              	.L11:
 293:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 294:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 295:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 296:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 297:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 298:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 299:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 468              		.loc 1 299 0
 469 008e FB68     		ldr	r3, [r7, #12]
 300:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 470              		.loc 1 300 0
 471 0090 181C     		mov	r0, r3
 472 0092 BD46     		mov	sp, r7
 473 0094 04B0     		add	sp, sp, #16
 474              		@ sp needed for prologue
 475 0096 80BD     		pop	{r7, pc}
 476              	.L15:
 477              		.align	2
 478              	.L14:
 479 0098 FFFF00FC 		.word	-67043329
 480              		.cfi_endproc
 481              	.LFE40:
 483              		.section	.text.ADCCMP001_SetAlias,"ax",%progbits
 484              		.align	2
 485              		.global	ADCCMP001_SetAlias
 486              		.code	16
 487              		.thumb_func
 489              	ADCCMP001_SetAlias:
 490              	.LFB41:
 301:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 302:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 303:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function assigns the alias channel number
 304:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 305:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_SetAlias(const ADCCMP001_HandleType* HandlePtr, uint8_t ChannelNo)
 306:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 491              		.loc 1 306 0
 492              		.cfi_startproc
 493 0000 90B5     		push	{r4, r7, lr}
 494              	.LCFI8:
 495              		.cfi_def_cfa_offset 12
 496              		.cfi_offset 4, -12
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 499 0002 85B0     		sub	sp, sp, #20
 500              	.LCFI9:
 501              		.cfi_def_cfa_offset 32
 502 0004 00AF     		add	r7, sp, #0
 503              	.LCFI10:
 504              		.cfi_def_cfa_register 7
 505 0006 7860     		str	r0, [r7, #4]
 506 0008 0A1C     		mov	r2, r1
 507 000a FB1C     		add	r3, r7, #3
 508 000c 1A70     		strb	r2, [r3]
 307:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 509              		.loc 1 307 0
 510 000e 0123     		mov	r3, #1
 511 0010 FB60     		str	r3, [r7, #12]
 308:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 309:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if((ChannelNo > (uint8_t)7))
 512              		.loc 1 309 0
 513 0012 FB1C     		add	r3, r7, #3
 514 0014 1B78     		ldrb	r3, [r3]
 515 0016 072B     		cmp	r3, #7
 516 0018 02D9     		bls	.L17
 310:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 311:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)ADCCMP001_INVALID_PARAM;
 517              		.loc 1 311 0
 518 001a 0223     		mov	r3, #2
 519 001c FB60     		str	r3, [r7, #12]
 520 001e 30E0     		b	.L18
 521              	.L17:
 312:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 313:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 314:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else if((HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED) &&
 522              		.loc 1 314 0
 523 0020 7B68     		ldr	r3, [r7, #4]
 524 0022 5B68     		ldr	r3, [r3, #4]
 525 0024 5B78     		ldrb	r3, [r3, #1]
 526 0026 002B     		cmp	r3, #0
 527 0028 2BD0     		beq	.L18
 315:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       ((HandlePtr->kChannelNo == (uint8_t)0) || (HandlePtr->kChannelNo == (uint8_t)1)))
 528              		.loc 1 315 0 discriminator 1
 529 002a 7B68     		ldr	r3, [r7, #4]
 530 002c 5B7C     		ldrb	r3, [r3, #17]
 314:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else if((HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED) &&
 531              		.loc 1 314 0 discriminator 1
 532 002e 002B     		cmp	r3, #0
 533 0030 03D0     		beq	.L19
 534              		.loc 1 315 0
 535 0032 7B68     		ldr	r3, [r7, #4]
 536 0034 5B7C     		ldrb	r3, [r3, #17]
 537 0036 012B     		cmp	r3, #1
 538 0038 23D1     		bne	.L18
 539              	.L19:
 316:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 317:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     HandlePtr->ADCGrPtr->ALIAS &= ~((uint32_t)0x1F << (HandlePtr->kChannelNo * (uint8_t)8));
 540              		.loc 1 317 0
 541 003a 7B68     		ldr	r3, [r7, #4]
 542 003c 1A68     		ldr	r2, [r3]
 543 003e 7B68     		ldr	r3, [r7, #4]
 544 0040 1968     		ldr	r1, [r3]
 545 0042 B023     		mov	r3, #176
 546 0044 CB58     		ldr	r3, [r1, r3]
 547 0046 7968     		ldr	r1, [r7, #4]
 548 0048 497C     		ldrb	r1, [r1, #17]
 549 004a C900     		lsl	r1, r1, #3
 550 004c 1F20     		mov	r0, #31
 551 004e 041C     		mov	r4, r0
 552 0050 8C40     		lsl	r4, r4, r1
 553 0052 211C     		mov	r1, r4
 554 0054 C943     		mvn	r1, r1
 555 0056 1940     		and	r1, r3
 556 0058 B023     		mov	r3, #176
 557 005a D150     		str	r1, [r2, r3]
 318:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     HandlePtr->ADCGrPtr->ALIAS |= ((uint32_t)ChannelNo << (HandlePtr->kChannelNo * (uint8_t)8));
 558              		.loc 1 318 0
 559 005c 7B68     		ldr	r3, [r7, #4]
 560 005e 1A68     		ldr	r2, [r3]
 561 0060 7B68     		ldr	r3, [r7, #4]
 562 0062 1968     		ldr	r1, [r3]
 563 0064 B023     		mov	r3, #176
 564 0066 C958     		ldr	r1, [r1, r3]
 565 0068 FB1C     		add	r3, r7, #3
 566 006a 1878     		ldrb	r0, [r3]
 567 006c 7B68     		ldr	r3, [r7, #4]
 568 006e 5B7C     		ldrb	r3, [r3, #17]
 569 0070 DB00     		lsl	r3, r3, #3
 570 0072 041C     		mov	r4, r0
 571 0074 9C40     		lsl	r4, r4, r3
 572 0076 231C     		mov	r3, r4
 573 0078 1943     		orr	r1, r3
 574 007a B023     		mov	r3, #176
 575 007c D150     		str	r1, [r2, r3]
 319:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 576              		.loc 1 319 0
 577 007e 0023     		mov	r3, #0
 578 0080 FB60     		str	r3, [r7, #12]
 579              	.L18:
 320:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 321:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 322:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 323:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 324:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 325:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 326:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 580              		.loc 1 326 0
 581 0082 FB68     		ldr	r3, [r7, #12]
 327:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 582              		.loc 1 327 0
 583 0084 181C     		mov	r0, r3
 584 0086 BD46     		mov	sp, r7
 585 0088 05B0     		add	sp, sp, #20
 586              		@ sp needed for prologue
 587 008a 90BD     		pop	{r4, r7, pc}
 588              		.cfi_endproc
 589              	.LFE41:
 591              		.section	.text.ADCCMP001_EnableBoundaryFlag,"ax",%progbits
 592              		.align	2
 593              		.global	ADCCMP001_EnableBoundaryFlag
 594              		.code	16
 595              		.thumb_func
 597              	ADCCMP001_EnableBoundaryFlag:
 598              	.LFB42:
 328:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 329:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 330:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function enables the boundary flag for result register.
 331:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 332:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_EnableBoundaryFlag(const ADCCMP001_HandleType* HandlePtr)
 333:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 599              		.loc 1 333 0
 600              		.cfi_startproc
 601 0000 90B5     		push	{r4, r7, lr}
 602              	.LCFI11:
 603              		.cfi_def_cfa_offset 12
 604              		.cfi_offset 4, -12
 605              		.cfi_offset 7, -8
 606              		.cfi_offset 14, -4
 607 0002 85B0     		sub	sp, sp, #20
 608              	.LCFI12:
 609              		.cfi_def_cfa_offset 32
 610 0004 00AF     		add	r7, sp, #0
 611              	.LCFI13:
 612              		.cfi_def_cfa_register 7
 613 0006 7860     		str	r0, [r7, #4]
 334:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 614              		.loc 1 334 0
 615 0008 0123     		mov	r3, #1
 616 000a FB60     		str	r3, [r7, #12]
 335:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 336:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if((HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED) &&
 617              		.loc 1 336 0
 618 000c 7B68     		ldr	r3, [r7, #4]
 619 000e 5B68     		ldr	r3, [r3, #4]
 620 0010 5B78     		ldrb	r3, [r3, #1]
 621 0012 002B     		cmp	r3, #0
 622 0014 15D0     		beq	.L22
 337:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       (HandlePtr->kBoundaryFlagEnable == (uint8_t)1))
 623              		.loc 1 337 0 discriminator 1
 624 0016 7B68     		ldr	r3, [r7, #4]
 625 0018 DB7A     		ldrb	r3, [r3, #11]
 336:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if((HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED) &&
 626              		.loc 1 336 0 discriminator 1
 627 001a 012B     		cmp	r3, #1
 628 001c 11D1     		bne	.L22
 338:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 339:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     SET_BIT(HandlePtr->ADCGrPtr->BFL, ((uint32_t)HandlePtr->kResultReg + (uint32_t)16));
 629              		.loc 1 339 0
 630 001e 7B68     		ldr	r3, [r7, #4]
 631 0020 1A68     		ldr	r2, [r3]
 632 0022 7B68     		ldr	r3, [r7, #4]
 633 0024 1968     		ldr	r1, [r3]
 634 0026 C823     		mov	r3, #200
 635 0028 C958     		ldr	r1, [r1, r3]
 636 002a 7B68     		ldr	r3, [r7, #4]
 637 002c DB7B     		ldrb	r3, [r3, #15]
 638 002e 1033     		add	r3, r3, #16
 639 0030 0120     		mov	r0, #1
 640 0032 041C     		mov	r4, r0
 641 0034 9C40     		lsl	r4, r4, r3
 642 0036 231C     		mov	r3, r4
 643 0038 1943     		orr	r1, r3
 644 003a C823     		mov	r3, #200
 645 003c D150     		str	r1, [r2, r3]
 340:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 646              		.loc 1 340 0
 647 003e 0023     		mov	r3, #0
 648 0040 FB60     		str	r3, [r7, #12]
 649              	.L22:
 341:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 342:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 343:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 344:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 345:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 346:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 347:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 650              		.loc 1 347 0
 651 0042 FB68     		ldr	r3, [r7, #12]
 348:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 652              		.loc 1 348 0
 653 0044 181C     		mov	r0, r3
 654 0046 BD46     		mov	sp, r7
 655 0048 05B0     		add	sp, sp, #20
 656              		@ sp needed for prologue
 657 004a 90BD     		pop	{r4, r7, pc}
 658              		.cfi_endproc
 659              	.LFE42:
 661              		.section	.text.ADCCMP001_DisableBoundaryFlag,"ax",%progbits
 662              		.align	2
 663              		.global	ADCCMP001_DisableBoundaryFlag
 664              		.code	16
 665              		.thumb_func
 667              	ADCCMP001_DisableBoundaryFlag:
 668              	.LFB43:
 349:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 350:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 351:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function disables the boundary flag for result register.
 352:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 353:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_DisableBoundaryFlag(const ADCCMP001_HandleType* HandlePtr)
 354:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 669              		.loc 1 354 0
 670              		.cfi_startproc
 671 0000 90B5     		push	{r4, r7, lr}
 672              	.LCFI14:
 673              		.cfi_def_cfa_offset 12
 674              		.cfi_offset 4, -12
 675              		.cfi_offset 7, -8
 676              		.cfi_offset 14, -4
 677 0002 85B0     		sub	sp, sp, #20
 678              	.LCFI15:
 679              		.cfi_def_cfa_offset 32
 680 0004 00AF     		add	r7, sp, #0
 681              	.LCFI16:
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 355:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 684              		.loc 1 355 0
 685 0008 0123     		mov	r3, #1
 686 000a FB60     		str	r3, [r7, #12]
 356:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 357:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if((HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED) &&
 687              		.loc 1 357 0
 688 000c 7B68     		ldr	r3, [r7, #4]
 689 000e 5B68     		ldr	r3, [r3, #4]
 690 0010 5B78     		ldrb	r3, [r3, #1]
 691 0012 002B     		cmp	r3, #0
 692 0014 16D0     		beq	.L25
 358:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       (HandlePtr->kBoundaryFlagEnable == (uint8_t)1))
 693              		.loc 1 358 0 discriminator 1
 694 0016 7B68     		ldr	r3, [r7, #4]
 695 0018 DB7A     		ldrb	r3, [r3, #11]
 357:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if((HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED) &&
 696              		.loc 1 357 0 discriminator 1
 697 001a 012B     		cmp	r3, #1
 698 001c 12D1     		bne	.L25
 359:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 360:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     CLR_BIT(HandlePtr->ADCGrPtr->BFL, ((uint32_t)HandlePtr->kResultReg + (uint32_t)16));
 699              		.loc 1 360 0
 700 001e 7B68     		ldr	r3, [r7, #4]
 701 0020 1A68     		ldr	r2, [r3]
 702 0022 7B68     		ldr	r3, [r7, #4]
 703 0024 1968     		ldr	r1, [r3]
 704 0026 C823     		mov	r3, #200
 705 0028 CB58     		ldr	r3, [r1, r3]
 706 002a 7968     		ldr	r1, [r7, #4]
 707 002c C97B     		ldrb	r1, [r1, #15]
 708 002e 1031     		add	r1, r1, #16
 709 0030 0120     		mov	r0, #1
 710 0032 041C     		mov	r4, r0
 711 0034 8C40     		lsl	r4, r4, r1
 712 0036 211C     		mov	r1, r4
 713 0038 C943     		mvn	r1, r1
 714 003a 1940     		and	r1, r3
 715 003c C823     		mov	r3, #200
 716 003e D150     		str	r1, [r2, r3]
 361:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 717              		.loc 1 361 0
 718 0040 0023     		mov	r3, #0
 719 0042 FB60     		str	r3, [r7, #12]
 720              	.L25:
 362:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 363:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 364:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 365:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 366:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 367:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 368:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 721              		.loc 1 368 0
 722 0044 FB68     		ldr	r3, [r7, #12]
 369:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 723              		.loc 1 369 0
 724 0046 181C     		mov	r0, r3
 725 0048 BD46     		mov	sp, r7
 726 004a 05B0     		add	sp, sp, #20
 727              		@ sp needed for prologue
 728 004c 90BD     		pop	{r4, r7, pc}
 729              		.cfi_endproc
 730              	.LFE43:
 732 004e C046     		.section	.text.ADCCMP001_SelectChEvtMode,"ax",%progbits
 733              		.align	2
 734              		.global	ADCCMP001_SelectChEvtMode
 735              		.code	16
 736              		.thumb_func
 738              	ADCCMP001_SelectChEvtMode:
 739              	.LFB44:
 370:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 371:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 372:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 373:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function configures the channel event mode to generate the channel interrupt
 374:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 375:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_SelectChEvtMode(const ADCCMP001_HandleType* HandlePtr, ADCCMP001_ChanEvtModeType
 376:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 740              		.loc 1 376 0
 741              		.cfi_startproc
 742 0000 90B5     		push	{r4, r7, lr}
 743              	.LCFI17:
 744              		.cfi_def_cfa_offset 12
 745              		.cfi_offset 4, -12
 746              		.cfi_offset 7, -8
 747              		.cfi_offset 14, -4
 748 0002 85B0     		sub	sp, sp, #20
 749              	.LCFI18:
 750              		.cfi_def_cfa_offset 32
 751 0004 00AF     		add	r7, sp, #0
 752              	.LCFI19:
 753              		.cfi_def_cfa_register 7
 754 0006 7860     		str	r0, [r7, #4]
 755 0008 0A1C     		mov	r2, r1
 756 000a FB1C     		add	r3, r7, #3
 757 000c 1A70     		strb	r2, [r3]
 377:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 758              		.loc 1 377 0
 759 000e 0123     		mov	r3, #1
 760 0010 FB60     		str	r3, [r7, #12]
 378:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 379:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if((Mode > (ADCCMP001_ChanEvtModeType)3))
 761              		.loc 1 379 0
 762 0012 FB1C     		add	r3, r7, #3
 763 0014 1B78     		ldrb	r3, [r3]
 764 0016 032B     		cmp	r3, #3
 765 0018 02D9     		bls	.L28
 380:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 381:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)ADCCMP001_INVALID_PARAM;
 766              		.loc 1 381 0
 767 001a 0223     		mov	r3, #2
 768 001c FB60     		str	r3, [r7, #12]
 769 001e 1FE0     		b	.L29
 770              	.L28:
 382:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 383:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 384:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else if(HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED)
 771              		.loc 1 384 0
 772 0020 7B68     		ldr	r3, [r7, #4]
 773 0022 5B68     		ldr	r3, [r3, #4]
 774 0024 5B78     		ldrb	r3, [r3, #1]
 775 0026 002B     		cmp	r3, #0
 776 0028 1AD0     		beq	.L29
 385:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 386:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     WR_REG( HandlePtr->ADCGrPtr->CHCTR[HandlePtr->kChannelNo],
 777              		.loc 1 386 0
 778 002a 7B68     		ldr	r3, [r7, #4]
 779 002c 1A68     		ldr	r2, [r3]
 780 002e 7B68     		ldr	r3, [r7, #4]
 781 0030 5B7C     		ldrb	r3, [r3, #17]
 782 0032 181C     		mov	r0, r3
 783 0034 FB1C     		add	r3, r7, #3
 784 0036 1B78     		ldrb	r3, [r3]
 785 0038 1902     		lsl	r1, r3, #8
 786 003a C023     		mov	r3, #192
 787 003c 9B00     		lsl	r3, r3, #2
 788 003e 1940     		and	r1, r3
 789 0040 7B68     		ldr	r3, [r7, #4]
 790 0042 1B68     		ldr	r3, [r3]
 791 0044 7C68     		ldr	r4, [r7, #4]
 792 0046 647C     		ldrb	r4, [r4, #17]
 793 0048 8034     		add	r4, r4, #128
 794 004a A400     		lsl	r4, r4, #2
 795 004c E458     		ldr	r4, [r4, r3]
 796 004e 074B     		ldr	r3, .L31
 797 0050 2340     		and	r3, r4
 798 0052 1943     		orr	r1, r3
 799 0054 031C     		mov	r3, r0
 800 0056 8033     		add	r3, r3, #128
 801 0058 9B00     		lsl	r3, r3, #2
 802 005a 9950     		str	r1, [r3, r2]
 387:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_CHCTR_CHEVMODE_Msk,
 388:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_CHCTR_CHEVMODE_Pos,
 389:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             (uint32_t)Mode
 390:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****           );
 391:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 803              		.loc 1 391 0
 804 005c 0023     		mov	r3, #0
 805 005e FB60     		str	r3, [r7, #12]
 806              	.L29:
 392:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 393:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 394:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 395:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 396:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 397:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 398:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 807              		.loc 1 398 0
 808 0060 FB68     		ldr	r3, [r7, #12]
 399:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 809              		.loc 1 399 0
 810 0062 181C     		mov	r0, r3
 811 0064 BD46     		mov	sp, r7
 812 0066 05B0     		add	sp, sp, #20
 813              		@ sp needed for prologue
 814 0068 90BD     		pop	{r4, r7, pc}
 815              	.L32:
 816 006a C046     		.align	2
 817              	.L31:
 818 006c FFFCFFFF 		.word	-769
 819              		.cfi_endproc
 820              	.LFE44:
 822              		.section	.text.ADCCMP001_GetFastCompareResult,"ax",%progbits
 823              		.align	2
 824              		.global	ADCCMP001_GetFastCompareResult
 825              		.code	16
 826              		.thumb_func
 828              	ADCCMP001_GetFastCompareResult:
 829              	.LFB45:
 400:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 401:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 402:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function returns the result of the fast compare ADC conversion.
 403:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 404:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_GetFastCompareResult(const ADCCMP001_HandleType* HandlePtr, uint8_t* ResultPtr)
 405:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 830              		.loc 1 405 0
 831              		.cfi_startproc
 832 0000 80B5     		push	{r7, lr}
 833              	.LCFI20:
 834              		.cfi_def_cfa_offset 8
 835              		.cfi_offset 7, -8
 836              		.cfi_offset 14, -4
 837 0002 86B0     		sub	sp, sp, #24
 838              	.LCFI21:
 839              		.cfi_def_cfa_offset 32
 840 0004 00AF     		add	r7, sp, #0
 841              	.LCFI22:
 842              		.cfi_def_cfa_register 7
 843 0006 7860     		str	r0, [r7, #4]
 844 0008 3960     		str	r1, [r7]
 406:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 845              		.loc 1 406 0
 846 000a 0123     		mov	r3, #1
 847 000c 7B61     		str	r3, [r7, #20]
 407:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   VADC_G_TypeDef* GroupPtr = HandlePtr->ADCGrPtr;
 848              		.loc 1 407 0
 849 000e 7B68     		ldr	r3, [r7, #4]
 850 0010 1B68     		ldr	r3, [r3]
 851 0012 3B61     		str	r3, [r7, #16]
 408:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   uint32_t TempResult;
 409:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 410:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED)
 852              		.loc 1 410 0
 853 0014 7B68     		ldr	r3, [r7, #4]
 854 0016 5B68     		ldr	r3, [r3, #4]
 855 0018 5B78     		ldrb	r3, [r3, #1]
 856 001a 002B     		cmp	r3, #0
 857 001c 23D0     		beq	.L34
 411:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 412:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     TempResult = GroupPtr->RES[HandlePtr->kResultReg];
 858              		.loc 1 412 0
 859 001e 7B68     		ldr	r3, [r7, #4]
 860 0020 DB7B     		ldrb	r3, [r3, #15]
 861 0022 1A1C     		mov	r2, r3
 862 0024 3B69     		ldr	r3, [r7, #16]
 863 0026 C032     		add	r2, r2, #192
 864 0028 9200     		lsl	r2, r2, #2
 865 002a D358     		ldr	r3, [r2, r3]
 866 002c FB60     		str	r3, [r7, #12]
 413:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* If valid flag is set */
 414:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     if(((TempResult & VADC_G_RES_VF_Msk) >> VADC_G_RES_VF_Pos) == (uint32_t)1)
 867              		.loc 1 414 0
 868 002e FB68     		ldr	r3, [r7, #12]
 869 0030 DB0F     		lsr	r3, r3, #31
 870 0032 012B     		cmp	r3, #1
 871 0034 10D1     		bne	.L35
 415:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     {
 416:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       HandlePtr->DynamicHandlePtr->Result = (uint8_t)RD_REG(TempResult,
 872              		.loc 1 416 0
 873 0036 7B68     		ldr	r3, [r7, #4]
 874 0038 5B68     		ldr	r3, [r3, #4]
 875 003a F968     		ldr	r1, [r7, #12]
 876 003c 8022     		mov	r2, #128
 877 003e D205     		lsl	r2, r2, #23
 878 0040 0A40     		and	r2, r1
 879 0042 920F     		lsr	r2, r2, #30
 880 0044 D2B2     		uxtb	r2, r2
 881 0046 1A70     		strb	r2, [r3]
 417:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                                                     VADC_G_RES_FCR_Msk,
 418:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                                                     VADC_G_RES_FCR_Pos
 419:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                                                    );
 420:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       *ResultPtr = HandlePtr->DynamicHandlePtr->Result;
 882              		.loc 1 420 0
 883 0048 7B68     		ldr	r3, [r7, #4]
 884 004a 5B68     		ldr	r3, [r3, #4]
 885 004c 1A78     		ldrb	r2, [r3]
 886 004e 3B68     		ldr	r3, [r7]
 887 0050 1A70     		strb	r2, [r3]
 421:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 888              		.loc 1 421 0
 889 0052 0023     		mov	r3, #0
 890 0054 7B61     		str	r3, [r7, #20]
 891 0056 06E0     		b	.L34
 892              	.L35:
 422:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     }
 423:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     /* If data is old, then send error as invalid data */
 424:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     else
 425:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     {
 426:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       *ResultPtr = HandlePtr->DynamicHandlePtr->Result;
 893              		.loc 1 426 0
 894 0058 7B68     		ldr	r3, [r7, #4]
 895 005a 5B68     		ldr	r3, [r3, #4]
 896 005c 1A78     		ldrb	r2, [r3]
 897 005e 3B68     		ldr	r3, [r7]
 898 0060 1A70     		strb	r2, [r3]
 427:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       Status = (uint32_t)ADCCMP001_INVALID_RESULT;
 899              		.loc 1 427 0
 900 0062 0323     		mov	r3, #3
 901 0064 7B61     		str	r3, [r7, #20]
 902              	.L34:
 428:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 429:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     }
 430:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 431:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 432:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 433:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 434:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 435:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 436:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 903              		.loc 1 436 0
 904 0066 7B69     		ldr	r3, [r7, #20]
 437:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 905              		.loc 1 437 0
 906 0068 181C     		mov	r0, r3
 907 006a BD46     		mov	sp, r7
 908 006c 06B0     		add	sp, sp, #24
 909              		@ sp needed for prologue
 910 006e 80BD     		pop	{r7, pc}
 911              		.cfi_endproc
 912              	.LFE45:
 914              		.section	.text.ADCCMP001_SetCompareValue,"ax",%progbits
 915              		.align	2
 916              		.global	ADCCMP001_SetCompareValue
 917              		.code	16
 918              		.thumb_func
 920              	ADCCMP001_SetCompareValue:
 921              	.LFB46:
 438:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 439:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 440:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function sets the compare value for the Fast Compare Mode.
 441:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * Compare value should 10-bit value.
 442:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 443:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_SetCompareValue(const ADCCMP001_HandleType* HandlePtr, uint16_t CompVal)
 444:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 922              		.loc 1 444 0
 923              		.cfi_startproc
 924 0000 90B5     		push	{r4, r7, lr}
 925              	.LCFI23:
 926              		.cfi_def_cfa_offset 12
 927              		.cfi_offset 4, -12
 928              		.cfi_offset 7, -8
 929              		.cfi_offset 14, -4
 930 0002 85B0     		sub	sp, sp, #20
 931              	.LCFI24:
 932              		.cfi_def_cfa_offset 32
 933 0004 00AF     		add	r7, sp, #0
 934              	.LCFI25:
 935              		.cfi_def_cfa_register 7
 936 0006 7860     		str	r0, [r7, #4]
 937 0008 0A1C     		mov	r2, r1
 938 000a BB1C     		add	r3, r7, #2
 939 000c 1A80     		strh	r2, [r3]
 445:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 940              		.loc 1 445 0
 941 000e 0123     		mov	r3, #1
 942 0010 FB60     		str	r3, [r7, #12]
 446:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 447:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if(CompVal > (uint16_t)0x3FF)
 943              		.loc 1 447 0
 944 0012 BB1C     		add	r3, r7, #2
 945 0014 1A88     		ldrh	r2, [r3]
 946 0016 154B     		ldr	r3, .L41
 947 0018 9A42     		cmp	r2, r3
 948 001a 02D9     		bls	.L38
 448:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 449:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)ADCCMP001_INVALID_PARAM;
 949              		.loc 1 449 0
 950 001c 0223     		mov	r3, #2
 951 001e FB60     		str	r3, [r7, #12]
 952 0020 1EE0     		b	.L39
 953              	.L38:
 450:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 451:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 452:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else if((HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED))
 954              		.loc 1 452 0
 955 0022 7B68     		ldr	r3, [r7, #4]
 956 0024 5B68     		ldr	r3, [r3, #4]
 957 0026 5B78     		ldrb	r3, [r3, #1]
 958 0028 002B     		cmp	r3, #0
 959 002a 19D0     		beq	.L39
 453:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 454:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     WR_REG( HandlePtr->ADCGrPtr->RES[HandlePtr->kResultReg],
 960              		.loc 1 454 0
 961 002c 7B68     		ldr	r3, [r7, #4]
 962 002e 1A68     		ldr	r2, [r3]
 963 0030 7B68     		ldr	r3, [r7, #4]
 964 0032 DB7B     		ldrb	r3, [r3, #15]
 965 0034 181C     		mov	r0, r3
 966 0036 BB1C     		add	r3, r7, #2
 967 0038 1B88     		ldrh	r3, [r3]
 968 003a 9B00     		lsl	r3, r3, #2
 969 003c 1B04     		lsl	r3, r3, #16
 970 003e 190C     		lsr	r1, r3, #16
 971 0040 7B68     		ldr	r3, [r7, #4]
 972 0042 1B68     		ldr	r3, [r3]
 973 0044 7C68     		ldr	r4, [r7, #4]
 974 0046 E47B     		ldrb	r4, [r4, #15]
 975 0048 C034     		add	r4, r4, #192
 976 004a A400     		lsl	r4, r4, #2
 977 004c E358     		ldr	r3, [r4, r3]
 978 004e 1B0C     		lsr	r3, r3, #16
 979 0050 1B04     		lsl	r3, r3, #16
 980 0052 1943     		orr	r1, r3
 981 0054 031C     		mov	r3, r0
 982 0056 C033     		add	r3, r3, #192
 983 0058 9B00     		lsl	r3, r3, #2
 984 005a 9950     		str	r1, [r3, r2]
 455:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_RES_RESULT_Msk,
 456:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             VADC_G_RES_RESULT_Pos,
 457:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****             ((uint32_t)CompVal << (uint8_t)2)
 458:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****           );
 459:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 985              		.loc 1 459 0
 986 005c 0023     		mov	r3, #0
 987 005e FB60     		str	r3, [r7, #12]
 988              	.L39:
 460:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 461:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 462:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 463:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 464:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 465:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 466:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 989              		.loc 1 466 0
 990 0060 FB68     		ldr	r3, [r7, #12]
 467:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 991              		.loc 1 467 0
 992 0062 181C     		mov	r0, r3
 993 0064 BD46     		mov	sp, r7
 994 0066 05B0     		add	sp, sp, #20
 995              		@ sp needed for prologue
 996 0068 90BD     		pop	{r4, r7, pc}
 997              	.L42:
 998 006a C046     		.align	2
 999              	.L41:
 1000 006c FF030000 		.word	1023
 1001              		.cfi_endproc
 1002              	.LFE46:
 1004              		.section	.text.ADCCMP001_GetChannelEvtFlag,"ax",%progbits
 1005              		.align	2
 1006              		.global	ADCCMP001_GetChannelEvtFlag
 1007              		.code	16
 1008              		.thumb_func
 1010              	ADCCMP001_GetChannelEvtFlag:
 1011              	.LFB47:
 468:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 469:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 470:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This function checks whether Channel event flag is set.
 471:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 472:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_GetChannelEvtFlag(const ADCCMP001_HandleType* HandlePtr, uint8_t* EvtStatus)
 473:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 1012              		.loc 1 473 0
 1013              		.cfi_startproc
 1014 0000 80B5     		push	{r7, lr}
 1015              	.LCFI26:
 1016              		.cfi_def_cfa_offset 8
 1017              		.cfi_offset 7, -8
 1018              		.cfi_offset 14, -4
 1019 0002 84B0     		sub	sp, sp, #16
 1020              	.LCFI27:
 1021              		.cfi_def_cfa_offset 24
 1022 0004 00AF     		add	r7, sp, #0
 1023              	.LCFI28:
 1024              		.cfi_def_cfa_register 7
 1025 0006 7860     		str	r0, [r7, #4]
 1026 0008 3960     		str	r1, [r7]
 474:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 1027              		.loc 1 474 0
 1028 000a 0123     		mov	r3, #1
 1029 000c FB60     		str	r3, [r7, #12]
 475:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 476:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED)
 1030              		.loc 1 476 0
 1031 000e 7B68     		ldr	r3, [r7, #4]
 1032 0010 5B68     		ldr	r3, [r3, #4]
 1033 0012 5B78     		ldrb	r3, [r3, #1]
 1034 0014 002B     		cmp	r3, #0
 1035 0016 15D0     		beq	.L44
 477:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 478:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     *EvtStatus = (uint8_t)RD_REG(HandlePtr->ADCGrPtr->CEFLAG,
 1036              		.loc 1 478 0
 1037 0018 7B68     		ldr	r3, [r7, #4]
 1038 001a 1A68     		ldr	r2, [r3]
 1039 001c C023     		mov	r3, #192
 1040 001e 5B00     		lsl	r3, r3, #1
 1041 0020 D358     		ldr	r3, [r2, r3]
 1042 0022 7A68     		ldr	r2, [r7, #4]
 1043 0024 527C     		ldrb	r2, [r2, #17]
 1044 0026 0121     		mov	r1, #1
 1045 0028 081C     		mov	r0, r1
 1046 002a 9040     		lsl	r0, r0, r2
 1047 002c 021C     		mov	r2, r0
 1048 002e 1A40     		and	r2, r3
 1049 0030 7B68     		ldr	r3, [r7, #4]
 1050 0032 5B7C     		ldrb	r3, [r3, #17]
 1051 0034 111C     		mov	r1, r2
 1052 0036 D940     		lsr	r1, r1, r3
 1053 0038 0B1C     		mov	r3, r1
 1054 003a DAB2     		uxtb	r2, r3
 1055 003c 3B68     		ldr	r3, [r7]
 1056 003e 1A70     		strb	r2, [r3]
 479:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                         ((uint32_t)0x01 << HandlePtr->kChannelNo),
 480:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                         HandlePtr->kChannelNo
 481:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****                  );
 482:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1057              		.loc 1 482 0
 1058 0040 0023     		mov	r3, #0
 1059 0042 FB60     		str	r3, [r7, #12]
 1060              	.L44:
 483:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 484:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 485:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 486:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 487:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 488:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 489:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 1061              		.loc 1 489 0
 1062 0044 FB68     		ldr	r3, [r7, #12]
 490:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 1063              		.loc 1 490 0
 1064 0046 181C     		mov	r0, r3
 1065 0048 BD46     		mov	sp, r7
 1066 004a 04B0     		add	sp, sp, #16
 1067              		@ sp needed for prologue
 1068 004c 80BD     		pop	{r7, pc}
 1069              		.cfi_endproc
 1070              	.LFE47:
 1072 004e C046     		.section	.text.ADCCMP001_SetChannelEvtFlag,"ax",%progbits
 1073              		.align	2
 1074              		.global	ADCCMP001_SetChannelEvtFlag
 1075              		.code	16
 1076              		.thumb_func
 1078              	ADCCMP001_SetChannelEvtFlag:
 1079              	.LFB48:
 491:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 492:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 493:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This will set the channel event flagv through software
 494:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 495:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_SetChannelEvtFlag(const ADCCMP001_HandleType* HandlePtr)
 496:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 1080              		.loc 1 496 0
 1081              		.cfi_startproc
 1082 0000 90B5     		push	{r4, r7, lr}
 1083              	.LCFI29:
 1084              		.cfi_def_cfa_offset 12
 1085              		.cfi_offset 4, -12
 1086              		.cfi_offset 7, -8
 1087              		.cfi_offset 14, -4
 1088 0002 85B0     		sub	sp, sp, #20
 1089              	.LCFI30:
 1090              		.cfi_def_cfa_offset 32
 1091 0004 00AF     		add	r7, sp, #0
 1092              	.LCFI31:
 1093              		.cfi_def_cfa_register 7
 1094 0006 7860     		str	r0, [r7, #4]
 497:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 1095              		.loc 1 497 0
 1096 0008 0123     		mov	r3, #1
 1097 000a FB60     		str	r3, [r7, #12]
 498:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 499:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED)
 1098              		.loc 1 499 0
 1099 000c 7B68     		ldr	r3, [r7, #4]
 1100 000e 5B68     		ldr	r3, [r3, #4]
 1101 0010 5B78     		ldrb	r3, [r3, #1]
 1102 0012 002B     		cmp	r3, #0
 1103 0014 12D0     		beq	.L47
 500:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 501:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     SET_BIT( HandlePtr->ADCGrPtr->CEFLAG,
 1104              		.loc 1 501 0
 1105 0016 7B68     		ldr	r3, [r7, #4]
 1106 0018 1A68     		ldr	r2, [r3]
 1107 001a 7B68     		ldr	r3, [r7, #4]
 1108 001c 1968     		ldr	r1, [r3]
 1109 001e C023     		mov	r3, #192
 1110 0020 5B00     		lsl	r3, r3, #1
 1111 0022 C958     		ldr	r1, [r1, r3]
 1112 0024 7B68     		ldr	r3, [r7, #4]
 1113 0026 5B7C     		ldrb	r3, [r3, #17]
 1114 0028 0120     		mov	r0, #1
 1115 002a 041C     		mov	r4, r0
 1116 002c 9C40     		lsl	r4, r4, r3
 1117 002e 231C     		mov	r3, r4
 1118 0030 1943     		orr	r1, r3
 1119 0032 C023     		mov	r3, #192
 1120 0034 5B00     		lsl	r3, r3, #1
 1121 0036 D150     		str	r1, [r2, r3]
 502:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****              (uint32_t)HandlePtr->kChannelNo
 503:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****            );
 504:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1122              		.loc 1 504 0
 1123 0038 0023     		mov	r3, #0
 1124 003a FB60     		str	r3, [r7, #12]
 1125              	.L47:
 505:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 506:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 507:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 508:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 509:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 510:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 511:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 1126              		.loc 1 511 0
 1127 003c FB68     		ldr	r3, [r7, #12]
 512:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 1128              		.loc 1 512 0
 1129 003e 181C     		mov	r0, r3
 1130 0040 BD46     		mov	sp, r7
 1131 0042 05B0     		add	sp, sp, #20
 1132              		@ sp needed for prologue
 1133 0044 90BD     		pop	{r4, r7, pc}
 1134              		.cfi_endproc
 1135              	.LFE48:
 1137 0046 C046     		.section	.text.ADCCMP001_ClearChannelEvtFlag,"ax",%progbits
 1138              		.align	2
 1139              		.global	ADCCMP001_ClearChannelEvtFlag
 1140              		.code	16
 1141              		.thumb_func
 1143              	ADCCMP001_ClearChannelEvtFlag:
 1144              	.LFB49:
 513:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 514:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** /**
 515:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  * This will clear the pending channel event flag
 516:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****  */
 517:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** status_t ADCCMP001_ClearChannelEvtFlag(const ADCCMP001_HandleType* HandlePtr)
 518:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** {
 1145              		.loc 1 518 0
 1146              		.cfi_startproc
 1147 0000 90B5     		push	{r4, r7, lr}
 1148              	.LCFI32:
 1149              		.cfi_def_cfa_offset 12
 1150              		.cfi_offset 4, -12
 1151              		.cfi_offset 7, -8
 1152              		.cfi_offset 14, -4
 1153 0002 85B0     		sub	sp, sp, #20
 1154              	.LCFI33:
 1155              		.cfi_def_cfa_offset 32
 1156 0004 00AF     		add	r7, sp, #0
 1157              	.LCFI34:
 1158              		.cfi_def_cfa_register 7
 1159 0006 7860     		str	r0, [r7, #4]
 519:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   status_t Status = (uint32_t)ADCCMP001_OPERATION_NOT_ALLOWED;
 1160              		.loc 1 519 0
 1161 0008 0123     		mov	r3, #1
 1162 000a FB60     		str	r3, [r7, #12]
 520:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 521:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   if(HandlePtr->DynamicHandlePtr->State != ADCCMP001_UNINITIALIZED)
 1163              		.loc 1 521 0
 1164 000c 7B68     		ldr	r3, [r7, #4]
 1165 000e 5B68     		ldr	r3, [r3, #4]
 1166 0010 5B78     		ldrb	r3, [r3, #1]
 1167 0012 002B     		cmp	r3, #0
 1168 0014 12D0     		beq	.L50
 522:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 523:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     SET_BIT( HandlePtr->ADCGrPtr->CEFCLR,
 1169              		.loc 1 523 0
 1170 0016 7B68     		ldr	r3, [r7, #4]
 1171 0018 1A68     		ldr	r2, [r3]
 1172 001a 7B68     		ldr	r3, [r7, #4]
 1173 001c 1968     		ldr	r1, [r3]
 1174 001e C823     		mov	r3, #200
 1175 0020 5B00     		lsl	r3, r3, #1
 1176 0022 C958     		ldr	r1, [r1, r3]
 1177 0024 7B68     		ldr	r3, [r7, #4]
 1178 0026 5B7C     		ldrb	r3, [r3, #17]
 1179 0028 0120     		mov	r0, #1
 1180 002a 041C     		mov	r4, r0
 1181 002c 9C40     		lsl	r4, r4, r3
 1182 002e 231C     		mov	r3, r4
 1183 0030 1943     		orr	r1, r3
 1184 0032 C823     		mov	r3, #200
 1185 0034 5B00     		lsl	r3, r3, #1
 1186 0036 D150     		str	r1, [r2, r3]
 524:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****              (uint32_t)HandlePtr->kChannelNo
 525:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****            );
 526:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1187              		.loc 1 526 0
 1188 0038 0023     		mov	r3, #0
 1189 003a FB60     		str	r3, [r7, #12]
 1190              	.L50:
 527:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 528:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   else
 529:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   {
 530:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 531:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   }
 532:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** 
 533:../Dave/Generated/src/ADCCMP001/ADCCMP001.c ****   return Status;
 1191              		.loc 1 533 0
 1192 003c FB68     		ldr	r3, [r7, #12]
 534:../Dave/Generated/src/ADCCMP001/ADCCMP001.c **** }
 1193              		.loc 1 534 0
 1194 003e 181C     		mov	r0, r3
 1195 0040 BD46     		mov	sp, r7
 1196 0042 05B0     		add	sp, sp, #20
 1197              		@ sp needed for prologue
 1198 0044 90BD     		pop	{r4, r7, pc}
 1199              		.cfi_endproc
 1200              	.LFE49:
 1202 0046 C046     		.text
 1203              	.Letext0:
 1204              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1205              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 1206              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 1207              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 1208              		.file 6 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
DEFINED SYMBOLS
                            *ABS*:00000000 ADCCMP001.c
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:18     .text.ADCCMP001_lInit:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:22     .text.ADCCMP001_lInit:00000000 ADCCMP001_lInit
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:314    .text.ADCCMP001_lInit:000001fc $d
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:322    .text.ADCCMP001_Init:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:327    .text.ADCCMP001_Init:00000000 ADCCMP001_Init
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:360    .text.ADCCMP001_Init:00000024 $d
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:367    .text.ADCCMP001_Deinit:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:372    .text.ADCCMP001_Deinit:00000000 ADCCMP001_Deinit
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:479    .text.ADCCMP001_Deinit:00000098 $d
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:484    .text.ADCCMP001_SetAlias:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:489    .text.ADCCMP001_SetAlias:00000000 ADCCMP001_SetAlias
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:592    .text.ADCCMP001_EnableBoundaryFlag:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:597    .text.ADCCMP001_EnableBoundaryFlag:00000000 ADCCMP001_EnableBoundaryFlag
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:662    .text.ADCCMP001_DisableBoundaryFlag:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:667    .text.ADCCMP001_DisableBoundaryFlag:00000000 ADCCMP001_DisableBoundaryFlag
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:733    .text.ADCCMP001_SelectChEvtMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:738    .text.ADCCMP001_SelectChEvtMode:00000000 ADCCMP001_SelectChEvtMode
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:818    .text.ADCCMP001_SelectChEvtMode:0000006c $d
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:823    .text.ADCCMP001_GetFastCompareResult:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:828    .text.ADCCMP001_GetFastCompareResult:00000000 ADCCMP001_GetFastCompareResult
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:915    .text.ADCCMP001_SetCompareValue:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:920    .text.ADCCMP001_SetCompareValue:00000000 ADCCMP001_SetCompareValue
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:1000   .text.ADCCMP001_SetCompareValue:0000006c $d
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:1005   .text.ADCCMP001_GetChannelEvtFlag:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:1010   .text.ADCCMP001_GetChannelEvtFlag:00000000 ADCCMP001_GetChannelEvtFlag
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:1073   .text.ADCCMP001_SetChannelEvtFlag:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:1078   .text.ADCCMP001_SetChannelEvtFlag:00000000 ADCCMP001_SetChannelEvtFlag
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:1138   .text.ADCCMP001_ClearChannelEvtFlag:00000000 $t
C:\Users\maan\AppData\Local\Temp\ccywAzJm.s:1143   .text.ADCCMP001_ClearChannelEvtFlag:00000000 ADCCMP001_ClearChannelEvtFlag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.665d63c3c957c91c5ed795826dcbc088
                           .group:00000000 wm4.XMC1300.h.45.4ee692c6c98aa9fc42e2abbc732052b9
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1300.h.126.871a37eeeb3f6a078f5ddf5efd64103f
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.1aa717522e337383e1234be386036b7c
                           .group:00000000 wm4.CLK002.h.56.d2936f957892acc36e594c5138aee657
                           .group:00000000 wm4.uc_id.h.35.f852fba3565a132d8ed947977fab9fbc
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.CCU8GLOBAL_Conf.h.82.76c6b1bf357180d1e8ea1f462a66deb8
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.f334402b2e237110b77f625dfc27af0e
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.311363d77acc1b28b7e28dd840e9cd60
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505

UNDEFINED SYMBOLS
ADCGLOB001_Init
ADCCMP001_Handle0
ADCCMP001_Handle1
ADCCMP001_Handle2
