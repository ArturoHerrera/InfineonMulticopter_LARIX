package CodeGenerator;

import java.util.*;
import com.ifx.davex.appjetinteract.App2JetInterface;

public class gmm001c_template
{
  protected static String nl;
  public static synchronized gmm001c_template create(String lineSeparator)
  {
    nl = lineSeparator;
    gmm001c_template result = new gmm001c_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "/*CODE_BLOCK_BEGIN[gmm001.c]*/" + NL + "/*******************************************************************************" + NL + " Copyright (c) 2014, Infineon Technologies AG                                 **" + NL + " All rights reserved.                                                         **" + NL + "                                                                              **" + NL + " Redistribution and use in source and binary forms, with or without           **" + NL + " modification,are permitted provided that the following conditions are met:   **" + NL + "                                                                              **" + NL + " *Redistributions of source code must retain the above copyright notice,      **" + NL + " this list of conditions and the following disclaimer.                        **" + NL + " *Redistributions in binary form must reproduce the above copyright notice,   **" + NL + " this list of conditions and the following disclaimer in the documentation    **" + NL + " and/or other materials provided with the distribution.                       **" + NL + " *Neither the name of the copyright holders nor the names of its contributors **" + NL + " may be used to endorse or promote products derived from this software without** " + NL + " specific prior written permission.                                           **" + NL + "                                                                              **" + NL + " THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"  **" + NL + " AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **" + NL + " IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **" + NL + " ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **" + NL + " LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **" + NL + " CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **" + NL + " SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **" + NL + " INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **" + NL + " CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **" + NL + " ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **" + NL + " POSSIBILITY OF SUCH DAMAGE.                                                  **" + NL + "                                                                              **" + NL + " To improve the quality of the software, users are encouraged to share        **" + NL + " modifications, enhancements or bug fixes with Infineon Technologies AG       **" + NL + " dave@infineon.com).                                                          **" + NL + "                                                                              **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "**                                                                            **" + NL + "** PLATFORM : Infineon XMC4000 Series                           \t\t\t  **" + NL + "**                                                                            **" + NL + "** COMPILER : Compiler Independent                                            **" + NL + "**                                                                            **" + NL + "** AUTHOR : App Developer                                         \t\t      **" + NL + "**                                                                            **" + NL + "** MAY BE CHANGED BY USER [yes/no]: Yes                                       **" + NL + "**                                                                            **" + NL + "** MODIFICATION DATE : Jan 20, 2014                                           **" + NL + "**                                                                            **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                       Author(s) Identity                                   **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "** Initials   Name                                                            **" + NL + "** ---------------------------------------------------------------------------**" + NL + "** kks        App Developer                                                   **" + NL + "*******************************************************************************/" + NL + "" + NL + "/**" + NL + " * @file GMM001.c" + NL + " *" + NL + " * @brief This file implements the APIs for GMM001 App." + NL + " *" + NL + " */" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Include Files                                         **" + NL + "*******************************************************************************/" + NL + "#include <DAVE3.h>" + NL + "#include \"../../inc/LMM001/LMM001.h\"" + NL + "#include \"../../inc/GMM001/GMM001.h\"" + NL;
  protected final String TEXT_2 = NL;
  protected final String TEXT_3 = "  " + NL + "/*****************************************************************************" + NL + "              DUMMY DEFINTIONS OF DEBUG LOG MACROS" + NL + "*****************************************************************************/" + NL + "/*These definitions are included here to avoid compilation errors," + NL + " since the DBG002 app is not part of the project. All the macros are defined" + NL + " as empty*/ " + NL + "#ifndef _DBG002_H_" + NL + "" + NL + "#define DBG002_RegisterCallBack(A,B,C)" + NL + "#define DBG002_I(e) " + NL + "#define DBG002_IG(e,g) " + NL + "#define DBG002_IH(e,h) " + NL + "#define DBG002_IP(e,p) " + NL + "#define DBG002_IGH(e,g,h) " + NL + "#define DBG002_IGP(e,g,p) " + NL + "#define DBG002_IHP(e,h,p) " + NL + "#define DBG002_IGHP(e,g,h,p) " + NL + "#define DBG002_N(e) " + NL + "#define DBG002_NG(e,g) " + NL + "#define DBG002_NH(e,h) " + NL + "#define DBG002_NP(e,p) " + NL + "#define DBG002_NGH(e,g,h) " + NL + "#define DBG002_NGP(e,g,p) " + NL + "#define DBG002_NHP(e,h,p) " + NL + "#define DBG002_NGHP(e,g,h,p) " + NL + "#define DBG002_ID(e) " + NL + "#define DBG002_IS(e) " + NL + "#define DBG002_ISG(e,g) " + NL + "#define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)" + NL + "#define DBG002_CRITICAL(groupid,messageid,length,value)" + NL + "#define DBG002_ERROR(groupid,messageid,length,value)" + NL + "#define DBG002_WARNING(groupid,messageid,length,value)" + NL + "#define DBG002_INFO(groupid,messageid,length,value)" + NL + "#define DBG002_TRACE(groupid,messageid,length,value)" + NL + "#define DBG002_FUNCTION_ENTRY(GID, Status) " + NL + "#define DBG002_FUNCTION_EXIT(GID, Status) " + NL + "" + NL + "#endif/* End of defintions of dummy Debug Log macros*/";
  protected final String TEXT_4 = "                  " + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Global Variable declarations                          **" + NL + "*******************************************************************************/" + NL + "/**" + NL + " * GROUP ID FOR DBG LOG APP ." + NL + " */" + NL + "#define APP_GID DBG002_GID_GMM001" + NL + "" + NL + "#if defined (__GNUC__) || defined (__TASKING__)" + NL + "/**" + NL + " * Heap Banks : Defined in Linker script" + NL + " */" + NL + "extern unsigned char Heap_Bank1_Start[];" + NL + "extern unsigned char Heap_Bank2_Start[];" + NL + "extern unsigned char Heap_Bank3_Start[];" + NL + "" + NL + "/**" + NL + "  * Sizes of Heap Banks : Defined in Linker script" + NL + "  */" + NL + "extern unsigned int Heap_Bank1_Size;" + NL + "extern unsigned int Heap_Bank2_Size;" + NL + "extern unsigned int Heap_Bank3_Size;" + NL + "" + NL + "#define LENGTH1 ((uint32_t)(&Heap_Bank1_Size))" + NL + "#define LENGTH2 ((uint32_t)(&Heap_Bank2_Size))" + NL + "#define LENGTH3 ((uint32_t)(&Heap_Bank3_Size))" + NL + "#endif" + NL + "" + NL + "#if defined (__CC_ARM)" + NL + "/**" + NL + " * Heap Banks : Defined in Linker script" + NL + " */" + NL + "extern int Image$$Heap_Bank1_Start$$Base;" + NL + "extern int Image$$Heap_Bank1_End$$Base;" + NL + "extern int Image$$Heap_Bank2_Start$$Base;" + NL + "extern int Image$$Heap_Bank2_End$$Base;" + NL + "extern int Image$$Heap_Bank3_Start$$Base;" + NL + "extern int Image$$Heap_Bank3_End$$Base;" + NL + "" + NL + "/**" + NL + " * Length of the respective memory banks" + NL + " * calculated from linker symbols" + NL + " */" + NL + "#define LENGTH1 ((uint32_t)&Image$$Heap_Bank1_End$$Base -\\" + NL + "                               (uint32_t)&Image$$Heap_Bank1_Start$$Base)" + NL + "#define LENGTH2 ((uint32_t)&Image$$Heap_Bank2_End$$Base -\\" + NL + "                               (uint32_t)&Image$$Heap_Bank2_Start$$Base)" + NL + "#define LENGTH3 ((uint32_t)&Image$$Heap_Bank3_End$$Base -\\" + NL + "                               (uint32_t)&Image$$Heap_Bank3_Start$$Base)" + NL + "" + NL + "/**" + NL + " * Aliases for start of the banks - " + NL + " * used in further assignments" + NL + " */" + NL + "#define Heap_Bank1_Start (&Image$$Heap_Bank1_Start$$Base)" + NL + "#define Heap_Bank2_Start (&Image$$Heap_Bank2_Start$$Base)" + NL + "#define Heap_Bank3_Start (&Image$$Heap_Bank3_Start$$Base)" + NL + "#endif" + NL + "" + NL + "#if defined (__ICCARM__)" + NL + "/**" + NL + " * Heap Banks : Defined in Linker script" + NL + " */" + NL + "" + NL + "#pragma section = \"Heap_Bank1_Start\" " + NL + "#pragma section = \"Heap_Bank1_End\" " + NL + "#pragma section = \"Heap_Bank2_Start\" " + NL + "#pragma section = \"Heap_Bank2_End\" " + NL + "#pragma section = \"Heap_Bank3_Start\" " + NL + "#pragma section = \"Heap_Bank3_End\" " + NL + "" + NL + "/**" + NL + " * Aliases for start of the banks - " + NL + " * used in further assignments" + NL + " */" + NL + "#define Heap_Bank1_Start ((uint32_t)__section_begin (\"Heap_Bank1_Start\"))" + NL + "#define Heap_Bank2_Start ((uint32_t)__section_begin (\"Heap_Bank2_Start\"))" + NL + "#define Heap_Bank3_Start ((uint32_t)__section_begin (\"Heap_Bank3_Start\"))" + NL + "" + NL + "/**" + NL + " * Length of the respective memory banks" + NL + " * calculated from linker symbols" + NL + " */" + NL + "#define LENGTH1 (((uint32_t)__section_begin (\"Heap_Bank1_End\")) -\\" + NL + "               ((uint32_t)__section_begin (\"Heap_Bank1_Start\")))" + NL + "#define LENGTH2 (((uint32_t)__section_begin (\"Heap_Bank2_End\")) -\\" + NL + "               ((uint32_t)__section_begin (\"Heap_Bank2_Start\")))" + NL + "#define LENGTH3 (((uint32_t)__section_begin (\"Heap_Bank3_End\")) -\\" + NL + "               ((uint32_t)__section_begin (\"Heap_Bank3_Start\")))" + NL + "#endif" + NL + "" + NL + "/**" + NL + " * These are the LMM001 handles per RAM section." + NL + "*/" + NL + "LMM001_HandleType GMM001_handle0;" + NL + "LMM001_HandleType GMM001_handle1;" + NL + "LMM001_HandleType GMM001_handle2;" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Public Function Definitions                           **" + NL + "*******************************************************************************/" + NL + "/*<<<DD_GMM001_API_1>>>*/" + NL + "/* This function configures LMM001 handles using different RAM sections available" + NL + " * depending on the heap requirement." + NL + " */" + NL + "void GMM001_Init (void)" + NL + "{" + NL + "  " + NL + "  " + NL + "  memset ((void *)Heap_Bank1_Start, 0, LENGTH1);" + NL + "  memset ((void *)Heap_Bank2_Start, 0, LENGTH2);" + NL + "  memset ((void *)Heap_Bank3_Start, 0, LENGTH3);" + NL + "" + NL + "/* Allocate Heap from RAM1 and RAM2 and RAM3*/  " + NL + "/*<<<DD_GMM001_API_1_6>>>*/  " + NL + "  GMM001_handle0.umm_heap = ((LMM001_BlockType *)Heap_Bank1_Start);" + NL + "  GMM001_handle0.umm_numblocks = (uint32_t)LENGTH1 / (sizeof(LMM001_BlockType));" + NL + "  GMM001_handle1.umm_heap = ((LMM001_BlockType *)Heap_Bank2_Start);" + NL + "  GMM001_handle1.umm_numblocks = (uint32_t)LENGTH2 / (sizeof(LMM001_BlockType));" + NL + "  GMM001_handle2.umm_heap = ((LMM001_BlockType *)Heap_Bank3_Start);" + NL + "  GMM001_handle2.umm_numblocks = (uint32_t) LENGTH3/ (sizeof(LMM001_BlockType));" + NL + "" + NL + "  " + NL + "}" + NL + "" + NL + "/*<<<DD_GMM001_API_2>>>*/" + NL + "/*" + NL + " * The function allocates memory of 'size' number of bytes." + NL + " */" + NL + "void * GMM001_malloc (uint32_t size)" + NL + "{" + NL + "  void * MemPtr = NULL;" + NL + "  " + NL + "" + NL + "/*<<<DD_GMM001_API_2_1>>>*/  " + NL + "  MemPtr = LMM001_malloc(&GMM001_handle0, size);" + NL + "  if (MemPtr == NULL)" + NL + "  {" + NL + "    MemPtr = LMM001_malloc(&GMM001_handle1, size);" + NL + "\tif (MemPtr == NULL)" + NL + "\t{" + NL + "\t\tMemPtr = LMM001_malloc(&GMM001_handle2, size);" + NL + "\t}" + NL + "  }" + NL + "" + NL + "  " + NL + "  return MemPtr;" + NL + "}" + NL + "" + NL + "/*<<<DD_GMM001_API_3>>>*/ " + NL + "/*" + NL + " * This function changes the size of a block of memory that was previously allocated with malloc()." + NL + " */" + NL + "void * GMM001_realloc (uint32_t size, void * MemPtr)" + NL + "{" + NL + "  void * MemPtr1 = NULL;" + NL + "  " + NL + "" + NL + "  if (MemPtr == NULL)" + NL + "  {" + NL + "    return(GMM001_malloc(size));" + NL + "  }" + NL + "" + NL + "/*<<<DD_GMM001_API_3_1>>>*/   " + NL + "  if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank1_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank1_Start + LENGTH1)))" + NL + "  {" + NL + "    MemPtr1 = LMM001_realloc(&GMM001_handle0, MemPtr, size);" + NL + "  }" + NL + "" + NL + "/*<<<DD_GMM001_API_3_2>>>*/   " + NL + "  else if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank2_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank2_Start + LENGTH2)))" + NL + "  {" + NL + " \tMemPtr1 = LMM001_realloc(&GMM001_handle1, MemPtr, size);" + NL + "  }" + NL + "" + NL + "/*<<<DD_GMM001_API_3_3>>>*/   " + NL + "  else if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank3_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank3_Start + LENGTH3)))" + NL + "  {" + NL + "    MemPtr1 = LMM001_realloc(&GMM001_handle2, MemPtr, size);" + NL + "  }" + NL + "  else " + NL + "  {" + NL + "    MemPtr1 = NULL;" + NL + "  }" + NL + "  " + NL + "  return MemPtr1;" + NL + "}" + NL + "" + NL + "/*<<<DD_GMM001_API_4>>>*/ " + NL + "/*" + NL + " *  The function deallocates the memory pointed by Memptr." + NL + " */" + NL + "void GMM001_free (void * MemPtr)" + NL + "{" + NL + "  " + NL + "" + NL + "/*<<<DD_GMM001_API_4_1>>>*/   " + NL + "  if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank1_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank1_Start + LENGTH1)))" + NL + "  {" + NL + "    LMM001_free(&GMM001_handle0, MemPtr);" + NL + "  }" + NL + "" + NL + "/*<<<DD_GMM001_API_4_2>>>*/   " + NL + "  if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank2_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank2_Start + LENGTH2)))" + NL + "  {" + NL + "    LMM001_free(&GMM001_handle1, MemPtr);" + NL + "  }" + NL + "" + NL + "/*<<<DD_GMM001_API_4_3>>>*/   " + NL + "  if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank3_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank3_Start + LENGTH3)))" + NL + "  {" + NL + "    LMM001_free(&GMM001_handle2, MemPtr);" + NL + "  }" + NL + "  " + NL + "}";
  protected final String TEXT_5 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
    stringBuffer.append(TEXT_1);
     String TempApps = null;
   String MyAppName = null;
   ArrayList<String> apps;
   String TempLowerApps = null; 
   boolean DBGApp = false;   
   apps=(ArrayList<String>)(app.getApps());
        for (int k = 0; k < apps.size(); k++) {
              TempApps = apps.get(k);
//            if(app.isAppInitProvider(apps.get(k)) == true) {
              MyAppName = TempApps.substring(TempApps.indexOf("/app/") + 5, TempApps.lastIndexOf("/"));
              TempLowerApps = MyAppName.toLowerCase();
              if (TempLowerApps.equalsIgnoreCase("dbg002")) {DBGApp = true;}   
//   }  
  } 
    stringBuffer.append(TEXT_2);
     if (!DBGApp) { 
    stringBuffer.append(TEXT_3);
     } 
    stringBuffer.append(TEXT_4);
    stringBuffer.append(TEXT_5);
    return stringBuffer.toString();
  }
}
