   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"BlockCommutation.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	NVIC_EnableIRQ:
  23              	.LFB24:
  24              		.file 1 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm0.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  * @file     core_cm0.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  * @date     25. February 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #if defined ( __ICCARM__ )
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  extern "C" {
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*******************************************************************************
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  *                 CMSIS definitions
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \ingroup Cortex_M0
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   @{
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | \
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define __CORTEX_M                (0x00)                                   /*!< Cortex-M Core      
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #if   defined ( __CC_ARM )
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __STATIC_INLINE  static __inline
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __STATIC_INLINE  static inline
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __STATIC_INLINE  static inline
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define __STATIC_INLINE  static inline
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** */
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define __FPU_USED       0
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #if defined ( __CC_ARM )
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #endif
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #if defined __ARMVFP__
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #endif
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #endif
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #if defined __FPU_VFP__
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #endif
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #include <stdint.h>                      /* standard types definitions                      */
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* check device defines and use defaults */
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #ifndef __CM0_REV
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #define __CM0_REV               0x0000
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #endif
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #endif
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #endif
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /**
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** */
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #else
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*******************************************************************************
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  *                 Register Abstraction
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   Core Register contain:
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   - Core Register
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   - Core NVIC Register
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   - Core SCB Register
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   - Core SysTick Register
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** */
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \ingroup    CMSIS_core_register
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \brief  Core Register type definitions.
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   @{
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** typedef union
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   struct
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   {
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #if (__CORTEX_M != 0x04)
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #else
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** } APSR_Type;
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** typedef union
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   struct
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   {
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** } IPSR_Type;
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** typedef union
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   struct
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   {
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #if (__CORTEX_M != 0x04)
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #else
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #endif
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** } xPSR_Type;
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** typedef union
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   struct
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   {
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** } CONTROL_Type;
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \ingroup    CMSIS_core_register
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \brief      Type definitions for the NVIC Registers
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   @{
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** typedef struct
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****        uint32_t RESERVED0[31];
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****        uint32_t RSERVED1[31];
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****        uint32_t RESERVED2[31];
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****        uint32_t RESERVED3[31];
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****        uint32_t RESERVED4[64];
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register     
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** }  NVIC_Type;
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \ingroup  CMSIS_core_register
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \brief      Type definitions for the System Control Block Registers
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   @{
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Structure type to access the System Control Block (SCB).
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** typedef struct
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****        uint32_t RESERVED0;
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****        uint32_t RESERVED1;
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** } SCB_Type;
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 328:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 329:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 330:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 331:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 332:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 333:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 334:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 335:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 336:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 337:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 338:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 339:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 340:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 341:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 342:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 343:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 344:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 345:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 346:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 347:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 348:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 349:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 350:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 351:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 352:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 353:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 354:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 355:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 356:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 357:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 358:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 359:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 360:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 361:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 362:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 363:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 364:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 365:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 366:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 367:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 368:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 369:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 370:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 371:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 372:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 373:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 374:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 375:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 376:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 377:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 378:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SCB System Control Register Definitions */
 379:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 380:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 381:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 382:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 383:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 384:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 385:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 386:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 387:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 388:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 389:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 390:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 391:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 392:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 393:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 394:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 395:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 396:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 397:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 398:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 399:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 400:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 401:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 402:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \ingroup  CMSIS_core_register
 403:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 404:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \brief      Type definitions for the System Timer Registers.
 405:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   @{
 406:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 407:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 408:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Structure type to access the System Timer (SysTick).
 409:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 410:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** typedef struct
 411:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 412:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 413:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 414:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 415:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 416:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** } SysTick_Type;
 417:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 418:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 419:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 420:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 421:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 422:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 423:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 424:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 425:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 426:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 427:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 428:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 429:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 430:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 431:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 432:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 433:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 434:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 435:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SysTick Current Register Definitions */
 436:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 437:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 438:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 439:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 440:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 441:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 442:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 443:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 444:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 445:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 446:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 447:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 448:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 449:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 450:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 451:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 452:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \ingroup  CMSIS_core_register
 453:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 454:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \brief      Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR)
 455:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****                 are only accessible over DAP and not via processor. Therefore
 456:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****                 they are not covered by the Cortex-M0 header file.
 457:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   @{
 458:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 459:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 460:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 461:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 462:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \ingroup    CMSIS_core_register
 463:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \defgroup   CMSIS_core_base     Core Definitions
 464:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \brief      Definitions for base addresses, unions, and structures.
 465:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   @{
 466:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 467:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 468:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 469:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 470:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 471:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 472:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 473:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 474:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 475:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 476:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 477:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 478:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 479:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*@} */
 480:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 481:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 482:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 483:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /*******************************************************************************
 484:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  *                Hardware Abstraction Layer
 485:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   Core Function Interface contains:
 486:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   - Core NVIC Functions
 487:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   - Core SysTick Functions
 488:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   - Core Register Access Functions
 489:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 490:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 491:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** */
 492:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 493:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 494:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 495:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 496:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 497:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 498:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
 499:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     @{
 500:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 501:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 502:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 503:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 504:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 505:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 506:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 507:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 508:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 509:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Enable External Interrupt
 510:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 511:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
 512:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 513:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
 514:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 515:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 516:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
  25              		.loc 1 516 0
  26              		.cfi_startproc
  27 0000 80B5     		push	{r7, lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 82B0     		sub	sp, sp, #8
  33              	.LCFI1:
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              	.LCFI2:
  37              		.cfi_def_cfa_register 7
  38 0006 021C     		mov	r2, r0
  39 0008 FB1D     		add	r3, r7, #7
  40 000a 1A70     		strb	r2, [r3]
 517:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
  41              		.loc 1 517 0
  42 000c 064B     		ldr	r3, .L2
  43 000e FA1D     		add	r2, r7, #7
  44 0010 1278     		ldrb	r2, [r2]
  45 0012 111C     		mov	r1, r2
  46 0014 1F22     		mov	r2, #31
  47 0016 0A40     		and	r2, r1
  48 0018 0121     		mov	r1, #1
  49 001a 081C     		mov	r0, r1
  50 001c 9040     		lsl	r0, r0, r2
  51 001e 021C     		mov	r2, r0
  52 0020 1A60     		str	r2, [r3]
 518:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** }
  53              		.loc 1 518 0
  54 0022 BD46     		mov	sp, r7
  55 0024 02B0     		add	sp, sp, #8
  56              		@ sp needed for prologue
  57 0026 80BD     		pop	{r7, pc}
  58              	.L3:
  59              		.align	2
  60              	.L2:
  61 0028 00E100E0 		.word	-536813312
  62              		.cfi_endproc
  63              	.LFE24:
  65              		.section	.text.NVIC_SetPriority,"ax",%progbits
  66              		.align	2
  67              		.code	16
  68              		.thumb_func
  70              	NVIC_SetPriority:
  71              	.LFB29:
 519:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 520:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 521:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Disable External Interrupt
 522:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 523:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
 524:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 525:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
 526:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 527:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 528:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 529:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 530:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** }
 531:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 532:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 533:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Get Pending Interrupt
 534:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 535:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     The function reads the pending register in the NVIC and returns the pending bit
 536:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     for the specified interrupt.
 537:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 538:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \param [in]      IRQn  Interrupt number.
 539:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 540:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \return             0  Interrupt status is not pending.
 541:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \return             1  Interrupt status is pending.
 542:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 543:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 544:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 545:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
 546:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** }
 547:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 548:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 549:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Set Pending Interrupt
 550:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 551:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     The function sets the pending bit of an external interrupt.
 552:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 553:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
 554:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 555:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 556:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 557:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 558:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** }
 559:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 560:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 561:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Clear Pending Interrupt
 562:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 563:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     The function clears the pending bit of an external interrupt.
 564:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 565:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
 566:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 567:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 568:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
 569:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 570:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** }
 571:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 572:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 573:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** /** \brief  Set Interrupt Priority
 574:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 575:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     The function sets the priority of an interrupt.
 576:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 577:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \note The priority cannot be set for every core interrupt.
 578:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** 
 579:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \param [in]      IRQn  Interrupt number.
 580:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     \param [in]  priority  Priority to set.
 581:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****  */
 582:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 583:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** {
  72              		.loc 1 583 0
  73              		.cfi_startproc
  74 0000 B0B5     		push	{r4, r5, r7, lr}
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 16
  77              		.cfi_offset 4, -16
  78              		.cfi_offset 5, -12
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 82B0     		sub	sp, sp, #8
  82              	.LCFI4:
  83              		.cfi_def_cfa_offset 24
  84 0004 00AF     		add	r7, sp, #0
  85              	.LCFI5:
  86              		.cfi_def_cfa_register 7
  87 0006 021C     		mov	r2, r0
  88 0008 3960     		str	r1, [r7]
  89 000a FB1D     		add	r3, r7, #7
  90 000c 1A70     		strb	r2, [r3]
 584:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   if(IRQn < 0) {
  91              		.loc 1 584 0
  92 000e FB1D     		add	r3, r7, #7
  93 0010 1B78     		ldrb	r3, [r3]
  94 0012 7F2B     		cmp	r3, #127
  95 0014 32D9     		bls	.L5
 585:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  96              		.loc 1 585 0
  97 0016 3049     		ldr	r1, .L7
  98 0018 FB1D     		add	r3, r7, #7
  99 001a 1B78     		ldrb	r3, [r3]
 100 001c 1A1C     		mov	r2, r3
 101 001e 0F23     		mov	r3, #15
 102 0020 1340     		and	r3, r2
 103 0022 083B     		sub	r3, r3, #8
 104 0024 9808     		lsr	r0, r3, #2
 105 0026 2C4A     		ldr	r2, .L7
 106 0028 FB1D     		add	r3, r7, #7
 107 002a 1B78     		ldrb	r3, [r3]
 108 002c 1C1C     		mov	r4, r3
 109 002e 0F23     		mov	r3, #15
 110 0030 2340     		and	r3, r4
 111 0032 083B     		sub	r3, r3, #8
 112 0034 9B08     		lsr	r3, r3, #2
 113 0036 0633     		add	r3, r3, #6
 114 0038 9B00     		lsl	r3, r3, #2
 115 003a D318     		add	r3, r2, r3
 116 003c 5B68     		ldr	r3, [r3, #4]
 117 003e FA1D     		add	r2, r7, #7
 118 0040 1278     		ldrb	r2, [r2]
 119 0042 141C     		mov	r4, r2
 120 0044 0322     		mov	r2, #3
 121 0046 2240     		and	r2, r4
 122 0048 D200     		lsl	r2, r2, #3
 123 004a FF24     		mov	r4, #255
 124 004c 251C     		mov	r5, r4
 125 004e 9540     		lsl	r5, r5, r2
 126 0050 2A1C     		mov	r2, r5
 127 0052 D243     		mvn	r2, r2
 128 0054 1A40     		and	r2, r3
 586:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 129              		.loc 1 586 0
 130 0056 3B68     		ldr	r3, [r7]
 131 0058 9C01     		lsl	r4, r3, #6
 132 005a FF23     		mov	r3, #255
 133 005c 1C40     		and	r4, r3
 134 005e FB1D     		add	r3, r7, #7
 135 0060 1B78     		ldrb	r3, [r3]
 136 0062 1D1C     		mov	r5, r3
 137 0064 0323     		mov	r3, #3
 138 0066 2B40     		and	r3, r5
 139 0068 DB00     		lsl	r3, r3, #3
 140 006a 251C     		mov	r5, r4
 141 006c 9D40     		lsl	r5, r5, r3
 142 006e 2B1C     		mov	r3, r5
 585:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 143              		.loc 1 585 0
 144 0070 1A43     		orr	r2, r3
 145 0072 831D     		add	r3, r0, #6
 146 0074 9B00     		lsl	r3, r3, #2
 147 0076 CB18     		add	r3, r1, r3
 148 0078 5A60     		str	r2, [r3, #4]
 149 007a 29E0     		b	.L4
 150              	.L5:
 587:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****   else {
 588:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 151              		.loc 1 588 0
 152 007c 174B     		ldr	r3, .L7+4
 153 007e FA1D     		add	r2, r7, #7
 154 0080 1278     		ldrb	r2, [r2]
 155 0082 52B2     		sxtb	r2, r2
 156 0084 9208     		lsr	r2, r2, #2
 157 0086 1549     		ldr	r1, .L7+4
 158 0088 F81D     		add	r0, r7, #7
 159 008a 0078     		ldrb	r0, [r0]
 160 008c 40B2     		sxtb	r0, r0
 161 008e 8008     		lsr	r0, r0, #2
 162 0090 C030     		add	r0, r0, #192
 163 0092 8000     		lsl	r0, r0, #2
 164 0094 4158     		ldr	r1, [r0, r1]
 165 0096 F81D     		add	r0, r7, #7
 166 0098 0078     		ldrb	r0, [r0]
 167 009a 041C     		mov	r4, r0
 168 009c 0320     		mov	r0, #3
 169 009e 2040     		and	r0, r4
 170 00a0 C000     		lsl	r0, r0, #3
 171 00a2 FF24     		mov	r4, #255
 172 00a4 251C     		mov	r5, r4
 173 00a6 8540     		lsl	r5, r5, r0
 174 00a8 281C     		mov	r0, r5
 175 00aa C043     		mvn	r0, r0
 176 00ac 0840     		and	r0, r1
 589:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 177              		.loc 1 589 0
 178 00ae 3968     		ldr	r1, [r7]
 179 00b0 8C01     		lsl	r4, r1, #6
 180 00b2 FF21     		mov	r1, #255
 181 00b4 0C40     		and	r4, r1
 182 00b6 F91D     		add	r1, r7, #7
 183 00b8 0978     		ldrb	r1, [r1]
 184 00ba 0D1C     		mov	r5, r1
 185 00bc 0321     		mov	r1, #3
 186 00be 2940     		and	r1, r5
 187 00c0 C900     		lsl	r1, r1, #3
 188 00c2 251C     		mov	r5, r4
 189 00c4 8D40     		lsl	r5, r5, r1
 190 00c6 291C     		mov	r1, r5
 588:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 191              		.loc 1 588 0
 192 00c8 0143     		orr	r1, r0
 193 00ca C032     		add	r2, r2, #192
 194 00cc 9200     		lsl	r2, r2, #2
 195 00ce D150     		str	r1, [r2, r3]
 196              	.L4:
 590:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cm0.h **** }
 197              		.loc 1 590 0
 198 00d0 BD46     		mov	sp, r7
 199 00d2 02B0     		add	sp, sp, #8
 200              		@ sp needed for prologue
 201 00d4 B0BD     		pop	{r4, r5, r7, pc}
 202              	.L8:
 203 00d6 C046     		.align	2
 204              	.L7:
 205 00d8 00ED00E0 		.word	-536810240
 206 00dc 00E100E0 		.word	-536813312
 207              		.cfi_endproc
 208              	.LFE29:
 210              		.global	InnerPWMFreq
 211              		.data
 212              		.align	2
 215              	InnerPWMFreq:
 216 0000 0050C346 		.word	1187205120
 217              		.global	CurrentDutyCycleStart
 218              		.align	2
 221              	CurrentDutyCycleStart:
 222 0004 CDCCCC3D 		.word	1036831949
 223              		.global	InnerPWMPeriod
 224              		.bss
 225              		.align	2
 228              	InnerPWMPeriod:
 229 0000 00000000 		.space	4
 230              		.global	InnerPWMCompare
 231              		.align	2
 234              	InnerPWMCompare:
 235 0004 00000000 		.space	4
 236              		.global	PhaseState
 239              	PhaseState:
 240 0008 00       		.space	1
 241              		.global	motorState
 244              	motorState:
 245 0009 00       		.space	1
 246              		.global	__aeabi_f2d
 247              		.global	__aeabi_dmul
 248              		.global	__aeabi_ddiv
 249              		.global	__aeabi_d2uiz
 250              		.global	__aeabi_ui2f
 251              		.global	__aeabi_fmul
 252              		.global	__aeabi_f2uiz
 253              		.section	.text.InitBlockCommutation,"ax",%progbits
 254              		.align	2
 255              		.global	InitBlockCommutation
 256              		.code	16
 257              		.thumb_func
 259              	InitBlockCommutation:
 260              	.LFB38:
 261              		.file 2 "../BlockCommutation.c"
   1:../BlockCommutation.c **** /*
   2:../BlockCommutation.c ****  * BlockCommutation.c
   3:../BlockCommutation.c ****  *
   4:../BlockCommutation.c ****  *  Created on: 01.09.2015
   5:../BlockCommutation.c ****  *      Author: maan
   6:../BlockCommutation.c ****  */
   7:../BlockCommutation.c **** 
   8:../BlockCommutation.c **** 
   9:../BlockCommutation.c **** #include "BlockCommutation.h"
  10:../BlockCommutation.c **** 
  11:../BlockCommutation.c **** volatile float InnerPWMFreq=25000;
  12:../BlockCommutation.c **** volatile float CurrentDutyCycleStart=0.1;
  13:../BlockCommutation.c **** 
  14:../BlockCommutation.c **** volatile uint32_t InnerPWMPeriod=0;
  15:../BlockCommutation.c **** volatile uint32_t InnerPWMCompare=0;
  16:../BlockCommutation.c **** 
  17:../BlockCommutation.c **** volatile int8_t PhaseState=0;
  18:../BlockCommutation.c **** volatile enum MotorState motorState = Stopped;
  19:../BlockCommutation.c **** 
  20:../BlockCommutation.c **** void InitBlockCommutation()
  21:../BlockCommutation.c **** {
 262              		.loc 2 21 0
 263              		.cfi_startproc
 264 0000 98B5     		push	{r3, r4, r7, lr}
 265              	.LCFI6:
 266              		.cfi_def_cfa_offset 16
 267              		.cfi_offset 3, -16
 268              		.cfi_offset 4, -12
 269              		.cfi_offset 7, -8
 270              		.cfi_offset 14, -4
 271 0002 00AF     		add	r7, sp, #0
 272              	.LCFI7:
 273              		.cfi_def_cfa_register 7
  22:../BlockCommutation.c **** 	//Set Period and Compare for all slices
  23:../BlockCommutation.c **** 	InnerPWMPeriod=((uint32_t)(1000000000.0f/(InnerPWMFreq*31.25)))-(uint32_t)1;
 274              		.loc 2 23 0
 275 0004 904B     		ldr	r3, .L10+16
 276 0006 1B68     		ldr	r3, [r3]
 277 0008 181C     		add	r0, r3, #0
 278 000a FFF7FEFF 		bl	__aeabi_f2d
 279 000e 031C     		mov	r3, r0
 280 0010 0C1C     		mov	r4, r1
 281 0012 181C     		mov	r0, r3
 282 0014 211C     		mov	r1, r4
 283 0016 894B     		ldr	r3, .L10+4
 284 0018 874A     		ldr	r2, .L10
 285 001a FFF7FEFF 		bl	__aeabi_dmul
 286 001e 031C     		mov	r3, r0
 287 0020 0C1C     		mov	r4, r1
 288 0022 8748     		ldr	r0, .L10+8
 289 0024 8749     		ldr	r1, .L10+12
 290 0026 1A1C     		mov	r2, r3
 291 0028 231C     		mov	r3, r4
 292 002a FFF7FEFF 		bl	__aeabi_ddiv
 293 002e 031C     		mov	r3, r0
 294 0030 0C1C     		mov	r4, r1
 295 0032 181C     		mov	r0, r3
 296 0034 211C     		mov	r1, r4
 297 0036 FFF7FEFF 		bl	__aeabi_d2uiz
 298 003a 031C     		mov	r3, r0
 299 003c 5A1E     		sub	r2, r3, #1
 300 003e 834B     		ldr	r3, .L10+20
 301 0040 1A60     		str	r2, [r3]
  24:../BlockCommutation.c **** 	InnerPWMCompare=InnerPWMPeriod*CurrentDutyCycleStart;
 302              		.loc 2 24 0
 303 0042 824B     		ldr	r3, .L10+20
 304 0044 1B68     		ldr	r3, [r3]
 305 0046 181C     		mov	r0, r3
 306 0048 FFF7FEFF 		bl	__aeabi_ui2f
 307 004c 021C     		add	r2, r0, #0
 308 004e 804B     		ldr	r3, .L10+24
 309 0050 1B68     		ldr	r3, [r3]
 310 0052 101C     		add	r0, r2, #0
 311 0054 191C     		add	r1, r3, #0
 312 0056 FFF7FEFF 		bl	__aeabi_fmul
 313 005a 031C     		add	r3, r0, #0
 314 005c 181C     		add	r0, r3, #0
 315 005e FFF7FEFF 		bl	__aeabi_f2uiz
 316 0062 021C     		mov	r2, r0
 317 0064 7B4B     		ldr	r3, .L10+28
 318 0066 1A60     		str	r2, [r3]
  25:../BlockCommutation.c **** 	CCU80_CC80->PRS = CCU80_CC81->PRS = CCU80_CC82->PRS = CCU80_CC83->PRS = InnerPWMPeriod;
 319              		.loc 2 25 0
 320 0068 7B4B     		ldr	r3, .L10+32
 321 006a 7C49     		ldr	r1, .L10+36
 322 006c 7C48     		ldr	r0, .L10+40
 323 006e 7D4C     		ldr	r4, .L10+44
 324 0070 764A     		ldr	r2, .L10+20
 325 0072 1268     		ldr	r2, [r2]
 326 0074 6263     		str	r2, [r4, #52]
 327 0076 4263     		str	r2, [r0, #52]
 328 0078 4A63     		str	r2, [r1, #52]
 329 007a 5A63     		str	r2, [r3, #52]
  26:../BlockCommutation.c **** 	CCU80_CC80->CR1S = InnerPWMCompare;
 330              		.loc 2 26 0
 331 007c 764B     		ldr	r3, .L10+32
 332 007e 754A     		ldr	r2, .L10+28
 333 0080 1268     		ldr	r2, [r2]
 334 0082 DA63     		str	r2, [r3, #60]
  27:../BlockCommutation.c **** 	CCU80_CC80->CR2S = InnerPWMPeriod+1;
 335              		.loc 2 27 0
 336 0084 744B     		ldr	r3, .L10+32
 337 0086 714A     		ldr	r2, .L10+20
 338 0088 1268     		ldr	r2, [r2]
 339 008a 0132     		add	r2, r2, #1
 340 008c 5A64     		str	r2, [r3, #68]
  28:../BlockCommutation.c **** 	CCU80_CC81->CR1S = 0;
 341              		.loc 2 28 0
 342 008e 734B     		ldr	r3, .L10+36
 343 0090 0022     		mov	r2, #0
 344 0092 DA63     		str	r2, [r3, #60]
  29:../BlockCommutation.c **** 	CCU80_CC81->CR2S = 0;
 345              		.loc 2 29 0
 346 0094 714B     		ldr	r3, .L10+36
 347 0096 0022     		mov	r2, #0
 348 0098 5A64     		str	r2, [r3, #68]
  30:../BlockCommutation.c **** 	CCU80_CC82->CR1S = 0;
 349              		.loc 2 30 0
 350 009a 714B     		ldr	r3, .L10+40
 351 009c 0022     		mov	r2, #0
 352 009e DA63     		str	r2, [r3, #60]
  31:../BlockCommutation.c **** 	CCU80_CC82->CR2S = InnerPWMPeriod+1;
 353              		.loc 2 31 0
 354 00a0 6F4B     		ldr	r3, .L10+40
 355 00a2 6A4A     		ldr	r2, .L10+20
 356 00a4 1268     		ldr	r2, [r2]
 357 00a6 0132     		add	r2, r2, #1
 358 00a8 5A64     		str	r2, [r3, #68]
  32:../BlockCommutation.c **** 	CCU80_CC83->CR1S = InnerPWMCompare-1;//>>1;
 359              		.loc 2 32 0
 360 00aa 6E4B     		ldr	r3, .L10+44
 361 00ac 694A     		ldr	r2, .L10+28
 362 00ae 1268     		ldr	r2, [r2]
 363 00b0 013A     		sub	r2, r2, #1
 364 00b2 DA63     		str	r2, [r3, #60]
  33:../BlockCommutation.c **** 	CCU80_CC83->CR2S = InnerPWMCompare-1;//>>1;
 365              		.loc 2 33 0
 366 00b4 6B4B     		ldr	r3, .L10+44
 367 00b6 674A     		ldr	r2, .L10+28
 368 00b8 1268     		ldr	r2, [r2]
 369 00ba 013A     		sub	r2, r2, #1
 370 00bc 5A64     		str	r2, [r3, #68]
  34:../BlockCommutation.c **** 	CCU80->GCSS |= 0x1111UL;
 371              		.loc 2 34 0
 372 00be A023     		mov	r3, #160
 373 00c0 DB05     		lsl	r3, r3, #23
 374 00c2 A022     		mov	r2, #160
 375 00c4 D205     		lsl	r2, r2, #23
 376 00c6 1269     		ldr	r2, [r2, #16]
 377 00c8 6749     		ldr	r1, .L10+48
 378 00ca 0A43     		orr	r2, r1
 379 00cc 1A61     		str	r2, [r3, #16]
  35:../BlockCommutation.c **** 
  36:../BlockCommutation.c **** 	//Synchronos start
  37:../BlockCommutation.c **** 	CCU80_CC80->INS |= 0x10007UL;
 380              		.loc 2 37 0
 381 00ce 624B     		ldr	r3, .L10+32
 382 00d0 614A     		ldr	r2, .L10+32
 383 00d2 1268     		ldr	r2, [r2]
 384 00d4 6549     		ldr	r1, .L10+52
 385 00d6 0A43     		orr	r2, r1
 386 00d8 1A60     		str	r2, [r3]
  38:../BlockCommutation.c **** 	CCU80_CC80->CMC |= 0x1UL;
 387              		.loc 2 38 0
 388 00da 5F4B     		ldr	r3, .L10+32
 389 00dc 5E4A     		ldr	r2, .L10+32
 390 00de 5268     		ldr	r2, [r2, #4]
 391 00e0 0121     		mov	r1, #1
 392 00e2 0A43     		orr	r2, r1
 393 00e4 5A60     		str	r2, [r3, #4]
  39:../BlockCommutation.c **** 	CCU80_CC81->INS |= 0x10007UL;
 394              		.loc 2 39 0
 395 00e6 5D4B     		ldr	r3, .L10+36
 396 00e8 5C4A     		ldr	r2, .L10+36
 397 00ea 1268     		ldr	r2, [r2]
 398 00ec 5F49     		ldr	r1, .L10+52
 399 00ee 0A43     		orr	r2, r1
 400 00f0 1A60     		str	r2, [r3]
  40:../BlockCommutation.c **** 	CCU80_CC81->CMC |= 0x1UL;
 401              		.loc 2 40 0
 402 00f2 5A4B     		ldr	r3, .L10+36
 403 00f4 594A     		ldr	r2, .L10+36
 404 00f6 5268     		ldr	r2, [r2, #4]
 405 00f8 0121     		mov	r1, #1
 406 00fa 0A43     		orr	r2, r1
 407 00fc 5A60     		str	r2, [r3, #4]
  41:../BlockCommutation.c **** 	CCU80_CC82->INS |= 0x10007UL;
 408              		.loc 2 41 0
 409 00fe 584B     		ldr	r3, .L10+40
 410 0100 574A     		ldr	r2, .L10+40
 411 0102 1268     		ldr	r2, [r2]
 412 0104 5949     		ldr	r1, .L10+52
 413 0106 0A43     		orr	r2, r1
 414 0108 1A60     		str	r2, [r3]
  42:../BlockCommutation.c **** 	CCU80_CC82->CMC |= 0x1UL;
 415              		.loc 2 42 0
 416 010a 554B     		ldr	r3, .L10+40
 417 010c 544A     		ldr	r2, .L10+40
 418 010e 5268     		ldr	r2, [r2, #4]
 419 0110 0121     		mov	r1, #1
 420 0112 0A43     		orr	r2, r1
 421 0114 5A60     		str	r2, [r3, #4]
  43:../BlockCommutation.c **** 	CCU80_CC83->INS |= 0x10007UL;
 422              		.loc 2 43 0
 423 0116 534B     		ldr	r3, .L10+44
 424 0118 524A     		ldr	r2, .L10+44
 425 011a 1268     		ldr	r2, [r2]
 426 011c 5349     		ldr	r1, .L10+52
 427 011e 0A43     		orr	r2, r1
 428 0120 1A60     		str	r2, [r3]
  44:../BlockCommutation.c **** 	CCU80_CC83->CMC |= 0x1UL;
 429              		.loc 2 44 0
 430 0122 504B     		ldr	r3, .L10+44
 431 0124 4F4A     		ldr	r2, .L10+44
 432 0126 5268     		ldr	r2, [r2, #4]
 433 0128 0121     		mov	r1, #1
 434 012a 0A43     		orr	r2, r1
 435 012c 5A60     		str	r2, [r3, #4]
  45:../BlockCommutation.c **** 
  46:../BlockCommutation.c **** 	//Enable slices
  47:../BlockCommutation.c **** 	CCU80->GIDLC |= 0xFUL;
 436              		.loc 2 47 0
 437 012e A023     		mov	r3, #160
 438 0130 DB05     		lsl	r3, r3, #23
 439 0132 A022     		mov	r2, #160
 440 0134 D205     		lsl	r2, r2, #23
 441 0136 D268     		ldr	r2, [r2, #12]
 442 0138 0F21     		mov	r1, #15
 443 013a 0A43     		orr	r2, r1
 444 013c DA60     		str	r2, [r3, #12]
  48:../BlockCommutation.c **** 
  49:../BlockCommutation.c **** 	//CCU8 Channel Selection
  50:../BlockCommutation.c **** 	CCU80_CC80->CHC |= 0x1E;
 445              		.loc 2 50 0
 446 013e 464B     		ldr	r3, .L10+32
 447 0140 454A     		ldr	r2, .L10+32
 448 0142 926C     		ldr	r2, [r2, #72]
 449 0144 1E21     		mov	r1, #30
 450 0146 0A43     		orr	r2, r1
 451 0148 9A64     		str	r2, [r3, #72]
  51:../BlockCommutation.c **** 	CCU80_CC81->CHC |= 0x1E;
 452              		.loc 2 51 0
 453 014a 444B     		ldr	r3, .L10+36
 454 014c 434A     		ldr	r2, .L10+36
 455 014e 926C     		ldr	r2, [r2, #72]
 456 0150 1E21     		mov	r1, #30
 457 0152 0A43     		orr	r2, r1
 458 0154 9A64     		str	r2, [r3, #72]
  52:../BlockCommutation.c **** 	CCU80_CC82->CHC |= 0x1E;
 459              		.loc 2 52 0
 460 0156 424B     		ldr	r3, .L10+40
 461 0158 414A     		ldr	r2, .L10+40
 462 015a 926C     		ldr	r2, [r2, #72]
 463 015c 1E21     		mov	r1, #30
 464 015e 0A43     		orr	r2, r1
 465 0160 9A64     		str	r2, [r3, #72]
  53:../BlockCommutation.c **** 
  54:../BlockCommutation.c **** 	//IO CCU8
  55:../BlockCommutation.c **** 	PORT0->IOCR0  |= 0x15UL << 3;		//P0.0  UH
 466              		.loc 2 55 0
 467 0162 434B     		ldr	r3, .L10+56
 468 0164 424A     		ldr	r2, .L10+56
 469 0166 1269     		ldr	r2, [r2, #16]
 470 0168 A821     		mov	r1, #168
 471 016a 0A43     		orr	r2, r1
 472 016c 1A61     		str	r2, [r3, #16]
  56:../BlockCommutation.c **** 	PORT0->IOCR0  |= 0x15UL << 27;		//P0.3  UL
 473              		.loc 2 56 0
 474 016e 404B     		ldr	r3, .L10+56
 475 0170 3F4A     		ldr	r2, .L10+56
 476 0172 1269     		ldr	r2, [r2, #16]
 477 0174 A821     		mov	r1, #168
 478 0176 0906     		lsl	r1, r1, #24
 479 0178 0A43     		orr	r2, r1
 480 017a 1A61     		str	r2, [r3, #16]
  57:../BlockCommutation.c **** 	PORT0->IOCR4  |= 0x15UL << 27;		//P0.7  VH
 481              		.loc 2 57 0
 482 017c 3C4B     		ldr	r3, .L10+56
 483 017e 3C4A     		ldr	r2, .L10+56
 484 0180 5269     		ldr	r2, [r2, #20]
 485 0182 A821     		mov	r1, #168
 486 0184 0906     		lsl	r1, r1, #24
 487 0186 0A43     		orr	r2, r1
 488 0188 5A61     		str	r2, [r3, #20]
  58:../BlockCommutation.c **** 	PORT0->IOCR4  |= 0x15UL << 3;		//P0.4  VL
 489              		.loc 2 58 0
 490 018a 394B     		ldr	r3, .L10+56
 491 018c 384A     		ldr	r2, .L10+56
 492 018e 5269     		ldr	r2, [r2, #20]
 493 0190 A821     		mov	r1, #168
 494 0192 0A43     		orr	r2, r1
 495 0194 5A61     		str	r2, [r3, #20]
  59:../BlockCommutation.c **** 	//The startup software (SSW) will change the PC8 value to input pull-up device active, 00010b.
  60:../BlockCommutation.c **** 	PORT0->IOCR8 = 0x00UL;
 496              		.loc 2 60 0
 497 0196 364B     		ldr	r3, .L10+56
 498 0198 0022     		mov	r2, #0
 499 019a 9A61     		str	r2, [r3, #24]
  61:../BlockCommutation.c **** 	PORT0->IOCR8  |= 0x15UL << 3;		//P0.8  WH
 500              		.loc 2 61 0
 501 019c 344B     		ldr	r3, .L10+56
 502 019e 344A     		ldr	r2, .L10+56
 503 01a0 9269     		ldr	r2, [r2, #24]
 504 01a2 A821     		mov	r1, #168
 505 01a4 0A43     		orr	r2, r1
 506 01a6 9A61     		str	r2, [r3, #24]
  62:../BlockCommutation.c **** 	PORT0->IOCR8  |= 0x15UL << 27;		//P0.11 WL
 507              		.loc 2 62 0
 508 01a8 314B     		ldr	r3, .L10+56
 509 01aa 314A     		ldr	r2, .L10+56
 510 01ac 9269     		ldr	r2, [r2, #24]
 511 01ae A821     		mov	r1, #168
 512 01b0 0906     		lsl	r1, r1, #24
 513 01b2 0A43     		orr	r2, r1
 514 01b4 9A61     		str	r2, [r3, #24]
  63:../BlockCommutation.c **** 
  64:../BlockCommutation.c **** 	//Blockcommutation
  65:../BlockCommutation.c **** 	CCU40_CC40->PSC |= 0x08;
 515              		.loc 2 65 0
 516 01b6 2F4B     		ldr	r3, .L10+60
 517 01b8 2E4A     		ldr	r2, .L10+60
 518 01ba 526A     		ldr	r2, [r2, #36]
 519 01bc 0821     		mov	r1, #8
 520 01be 0A43     		orr	r2, r1
 521 01c0 5A62     		str	r2, [r3, #36]
  66:../BlockCommutation.c **** 	CCU40_CC40->PRS = 0xFFFF;
 522              		.loc 2 66 0
 523 01c2 2C4B     		ldr	r3, .L10+60
 524 01c4 2C4A     		ldr	r2, .L10+64
 525 01c6 5A63     		str	r2, [r3, #52]
  67:../BlockCommutation.c **** 	CCU40_CC40->CRS = 0;
 526              		.loc 2 67 0
 527 01c8 2A4B     		ldr	r3, .L10+60
 528 01ca 0022     		mov	r2, #0
 529 01cc DA63     		str	r2, [r3, #60]
  68:../BlockCommutation.c **** 	CCU40->GCSS |= (0x01UL << 0);
 530              		.loc 2 68 0
 531 01ce 2B4B     		ldr	r3, .L10+68
 532 01d0 2A4A     		ldr	r2, .L10+68
 533 01d2 1269     		ldr	r2, [r2, #16]
 534 01d4 0121     		mov	r1, #1
 535 01d6 0A43     		orr	r2, r1
 536 01d8 1A61     		str	r2, [r3, #16]
  69:../BlockCommutation.c **** 
  70:../BlockCommutation.c **** 	//Interrupt Compare Match Slice 0
  71:../BlockCommutation.c **** 	CCU40_CC40->INTE |= 0x04UL;
 537              		.loc 2 71 0
 538 01da 264A     		ldr	r2, .L10+60
 539 01dc 2549     		ldr	r1, .L10+60
 540 01de A423     		mov	r3, #164
 541 01e0 CB58     		ldr	r3, [r1, r3]
 542 01e2 0421     		mov	r1, #4
 543 01e4 1943     		orr	r1, r3
 544 01e6 A423     		mov	r3, #164
 545 01e8 D150     		str	r1, [r2, r3]
  72:../BlockCommutation.c **** 	NVIC_SetPriority((IRQn_Type)21, 0);
 546              		.loc 2 72 0
 547 01ea 1520     		mov	r0, #21
 548 01ec 0021     		mov	r1, #0
 549 01ee FFF7FEFF 		bl	NVIC_SetPriority
  73:../BlockCommutation.c **** 	NVIC_EnableIRQ((IRQn_Type)21);
 550              		.loc 2 73 0
 551 01f2 1520     		mov	r0, #21
 552 01f4 FFF7FEFF 		bl	NVIC_EnableIRQ
  74:../BlockCommutation.c **** 
  75:../BlockCommutation.c **** 	//Enable slice
  76:../BlockCommutation.c **** 	CCU40->GIDLC |= 0x01UL;
 553              		.loc 2 76 0
 554 01f8 204B     		ldr	r3, .L10+68
 555 01fa 204A     		ldr	r2, .L10+68
 556 01fc D268     		ldr	r2, [r2, #12]
 557 01fe 0121     		mov	r1, #1
 558 0200 0A43     		orr	r2, r1
 559 0202 DA60     		str	r2, [r3, #12]
  77:../BlockCommutation.c **** 
  78:../BlockCommutation.c **** 	//ADC Trigger
  79:../BlockCommutation.c **** 	CCU80_CC83->SRS |= 2UL<<4;
 560              		.loc 2 79 0
 561 0204 174A     		ldr	r2, .L10+44
 562 0206 1749     		ldr	r1, .L10+44
 563 0208 A823     		mov	r3, #168
 564 020a CB58     		ldr	r3, [r1, r3]
 565 020c 2021     		mov	r1, #32
 566 020e 1943     		orr	r1, r3
 567 0210 A823     		mov	r3, #168
 568 0212 D150     		str	r1, [r2, r3]
  80:../BlockCommutation.c **** 	CCU80_CC83->SRS |= 1UL<<2;
 569              		.loc 2 80 0
 570 0214 134A     		ldr	r2, .L10+44
 571 0216 1349     		ldr	r1, .L10+44
 572 0218 A823     		mov	r3, #168
 573 021a CB58     		ldr	r3, [r1, r3]
 574 021c 0421     		mov	r1, #4
 575 021e 1943     		orr	r1, r3
 576 0220 A823     		mov	r3, #168
 577 0222 D150     		str	r1, [r2, r3]
  81:../BlockCommutation.c **** 	CCU80_CC83->INTE |= 1UL<<2;
 578              		.loc 2 81 0
 579 0224 0F4A     		ldr	r2, .L10+44
 580 0226 0F49     		ldr	r1, .L10+44
 581 0228 A423     		mov	r3, #164
 582 022a CB58     		ldr	r3, [r1, r3]
 583 022c 0421     		mov	r1, #4
 584 022e 1943     		orr	r1, r3
 585 0230 A423     		mov	r3, #164
 586 0232 D150     		str	r1, [r2, r3]
  82:../BlockCommutation.c **** }
 587              		.loc 2 82 0
 588 0234 BD46     		mov	sp, r7
 589              		@ sp needed for prologue
 590 0236 98BD     		pop	{r3, r4, r7, pc}
 591              	.L11:
 592              		.align	3
 593              	.L10:
 594 0238 00000000 		.word	0
 595 023c 00403F40 		.word	1077886976
 596 0240 00000000 		.word	0
 597 0244 65CDCD41 		.word	1104006501
 598 0248 00000000 		.word	InnerPWMFreq
 599 024c 00000000 		.word	InnerPWMPeriod
 600 0250 00000000 		.word	CurrentDutyCycleStart
 601 0254 00000000 		.word	InnerPWMCompare
 602 0258 00010050 		.word	1342177536
 603 025c 00020050 		.word	1342177792
 604 0260 00030050 		.word	1342178048
 605 0264 00040050 		.word	1342178304
 606 0268 11110000 		.word	4369
 607 026c 07000100 		.word	65543
 608 0270 00000440 		.word	1074003968
 609 0274 00010448 		.word	1208221952
 610 0278 FFFF0000 		.word	65535
 611 027c 00000448 		.word	1208221696
 612              		.cfi_endproc
 613              	.LFE38:
 615              		.section	.text.CCU40_0_IRQHandler,"ax",%progbits
 616              		.align	2
 617              		.global	CCU40_0_IRQHandler
 618              		.code	16
 619              		.thumb_func
 621              	CCU40_0_IRQHandler:
 622              	.LFB39:
  83:../BlockCommutation.c **** 
  84:../BlockCommutation.c **** void BlockCommutation_ISR()
  85:../BlockCommutation.c **** {
 623              		.loc 2 85 0
 624              		.cfi_startproc
 625 0000 80B5     		push	{r7, lr}
 626              	.LCFI8:
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 7, -8
 629              		.cfi_offset 14, -4
 630 0002 00AF     		add	r7, sp, #0
 631              	.LCFI9:
 632              		.cfi_def_cfa_register 7
  86:../BlockCommutation.c **** 	if (motorState > Stopped)
 633              		.loc 2 86 0
 634 0004 854B     		ldr	r3, .L25
 635 0006 1B78     		ldrb	r3, [r3]
 636 0008 DBB2     		uxtb	r3, r3
 637 000a 002B     		cmp	r3, #0
 638 000c 00D1     		bne	.LCB515
 639 000e FFE0     		b	.L13	@long jump
 640              	.LCB515:
 641              	.LBB2:
  87:../BlockCommutation.c **** 	{
  88:../BlockCommutation.c **** 		PhaseState++;
 642              		.loc 2 88 0
 643 0010 834B     		ldr	r3, .L25+4
 644 0012 1B78     		ldrb	r3, [r3]
 645 0014 DBB2     		uxtb	r3, r3
 646 0016 0133     		add	r3, r3, #1
 647 0018 DAB2     		uxtb	r2, r3
 648 001a 814B     		ldr	r3, .L25+4
 649 001c 1A70     		strb	r2, [r3]
  89:../BlockCommutation.c **** 
  90:../BlockCommutation.c **** 		if (PhaseState > 5)
 650              		.loc 2 90 0
 651 001e 804B     		ldr	r3, .L25+4
 652 0020 1B78     		ldrb	r3, [r3]
 653 0022 DBB2     		uxtb	r3, r3
 654 0024 5BB2     		sxtb	r3, r3
 655 0026 052B     		cmp	r3, #5
 656 0028 02DD     		ble	.L14
  91:../BlockCommutation.c **** 			PhaseState = 0;
 657              		.loc 2 91 0
 658 002a 7D4B     		ldr	r3, .L25+4
 659 002c 0022     		mov	r2, #0
 660 002e 1A70     		strb	r2, [r3]
 661              	.L14:
  92:../BlockCommutation.c **** 
  93:../BlockCommutation.c **** 		switch (PhaseState)
 662              		.loc 2 93 0
 663 0030 7B4B     		ldr	r3, .L25+4
 664 0032 1B78     		ldrb	r3, [r3]
 665 0034 DBB2     		uxtb	r3, r3
 666 0036 5BB2     		sxtb	r3, r3
 667 0038 052B     		cmp	r3, #5
 668 003a 00D9     		bls	.LCB540
 669 003c B2E0     		b	.L15	@long jump
 670              	.LCB540:
 671 003e 9A00     		lsl	r2, r3, #2
 672 0040 784B     		ldr	r3, .L25+8
 673 0042 D318     		add	r3, r2, r3
 674 0044 1B68     		ldr	r3, [r3]
 675 0046 9F46     		mov	pc, r3
 676              		.section	.rodata
 677              		.align	2
 678              	.L22:
 679 0000 48000000 		.word	.L16
 680 0004 82000000 		.word	.L17
 681 0008 BC000000 		.word	.L18
 682 000c F6000000 		.word	.L19
 683 0010 30010000 		.word	.L20
 684 0014 6A010000 		.word	.L21
 685              		.section	.text.CCU40_0_IRQHandler
 686              	.L16:
  94:../BlockCommutation.c **** 		{
  95:../BlockCommutation.c **** 			case 0:
  96:../BlockCommutation.c **** 				VADC_G0->ASSEL = 0x04UL;
 687              		.loc 2 96 0
 688 0048 774A     		ldr	r2, .L25+12
 689 004a 9423     		mov	r3, #148
 690 004c 5B00     		lsl	r3, r3, #1
 691 004e 0421     		mov	r1, #4
 692 0050 D150     		str	r1, [r2, r3]
  97:../BlockCommutation.c **** 				CCU80_CC80->CR1S = InnerPWMCompare;
 693              		.loc 2 97 0
 694 0052 764B     		ldr	r3, .L25+16
 695 0054 764A     		ldr	r2, .L25+20
 696 0056 1268     		ldr	r2, [r2]
 697 0058 DA63     		str	r2, [r3, #60]
  98:../BlockCommutation.c **** 				CCU80_CC80->CR2S = InnerPWMPeriod+1;
 698              		.loc 2 98 0
 699 005a 744B     		ldr	r3, .L25+16
 700 005c 754A     		ldr	r2, .L25+24
 701 005e 1268     		ldr	r2, [r2]
 702 0060 0132     		add	r2, r2, #1
 703 0062 5A64     		str	r2, [r3, #68]
  99:../BlockCommutation.c **** 				CCU80_CC81->CR1S = 0;
 704              		.loc 2 99 0
 705 0064 744B     		ldr	r3, .L25+28
 706 0066 0022     		mov	r2, #0
 707 0068 DA63     		str	r2, [r3, #60]
 100:../BlockCommutation.c **** 				CCU80_CC81->CR2S = 0;
 708              		.loc 2 100 0
 709 006a 734B     		ldr	r3, .L25+28
 710 006c 0022     		mov	r2, #0
 711 006e 5A64     		str	r2, [r3, #68]
 101:../BlockCommutation.c **** 				CCU80_CC82->CR1S = 0;
 712              		.loc 2 101 0
 713 0070 724B     		ldr	r3, .L25+32
 714 0072 0022     		mov	r2, #0
 715 0074 DA63     		str	r2, [r3, #60]
 102:../BlockCommutation.c **** 				CCU80_CC82->CR2S = InnerPWMPeriod+1;
 716              		.loc 2 102 0
 717 0076 714B     		ldr	r3, .L25+32
 718 0078 6E4A     		ldr	r2, .L25+24
 719 007a 1268     		ldr	r2, [r2]
 720 007c 0132     		add	r2, r2, #1
 721 007e 5A64     		str	r2, [r3, #68]
 103:../BlockCommutation.c **** 				break;
 722              		.loc 2 103 0
 723 0080 90E0     		b	.L15
 724              	.L17:
 104:../BlockCommutation.c **** 			case 1:
 105:../BlockCommutation.c **** 				VADC_G0->ASSEL = 0x02UL;
 725              		.loc 2 105 0
 726 0082 694A     		ldr	r2, .L25+12
 727 0084 9423     		mov	r3, #148
 728 0086 5B00     		lsl	r3, r3, #1
 729 0088 0221     		mov	r1, #2
 730 008a D150     		str	r1, [r2, r3]
 106:../BlockCommutation.c **** 				CCU80_CC80->CR1S = InnerPWMCompare;
 731              		.loc 2 106 0
 732 008c 674B     		ldr	r3, .L25+16
 733 008e 684A     		ldr	r2, .L25+20
 734 0090 1268     		ldr	r2, [r2]
 735 0092 DA63     		str	r2, [r3, #60]
 107:../BlockCommutation.c **** 				CCU80_CC80->CR2S = InnerPWMPeriod+1;
 736              		.loc 2 107 0
 737 0094 654B     		ldr	r3, .L25+16
 738 0096 674A     		ldr	r2, .L25+24
 739 0098 1268     		ldr	r2, [r2]
 740 009a 0132     		add	r2, r2, #1
 741 009c 5A64     		str	r2, [r3, #68]
 108:../BlockCommutation.c **** 				CCU80_CC81->CR1S = 0;
 742              		.loc 2 108 0
 743 009e 664B     		ldr	r3, .L25+28
 744 00a0 0022     		mov	r2, #0
 745 00a2 DA63     		str	r2, [r3, #60]
 109:../BlockCommutation.c **** 				CCU80_CC81->CR2S = InnerPWMPeriod+1;
 746              		.loc 2 109 0
 747 00a4 644B     		ldr	r3, .L25+28
 748 00a6 634A     		ldr	r2, .L25+24
 749 00a8 1268     		ldr	r2, [r2]
 750 00aa 0132     		add	r2, r2, #1
 751 00ac 5A64     		str	r2, [r3, #68]
 110:../BlockCommutation.c **** 				CCU80_CC82->CR1S = 0;
 752              		.loc 2 110 0
 753 00ae 634B     		ldr	r3, .L25+32
 754 00b0 0022     		mov	r2, #0
 755 00b2 DA63     		str	r2, [r3, #60]
 111:../BlockCommutation.c **** 				CCU80_CC82->CR2S = 0;
 756              		.loc 2 111 0
 757 00b4 614B     		ldr	r3, .L25+32
 758 00b6 0022     		mov	r2, #0
 759 00b8 5A64     		str	r2, [r3, #68]
 112:../BlockCommutation.c **** 				break;
 760              		.loc 2 112 0
 761 00ba 73E0     		b	.L15
 762              	.L18:
 113:../BlockCommutation.c **** 			case 2:
 114:../BlockCommutation.c **** 				VADC_G0->ASSEL = 0x01UL;
 763              		.loc 2 114 0
 764 00bc 5A4A     		ldr	r2, .L25+12
 765 00be 9423     		mov	r3, #148
 766 00c0 5B00     		lsl	r3, r3, #1
 767 00c2 0121     		mov	r1, #1
 768 00c4 D150     		str	r1, [r2, r3]
 115:../BlockCommutation.c **** 				CCU80_CC80->CR1S = 0;
 769              		.loc 2 115 0
 770 00c6 594B     		ldr	r3, .L25+16
 771 00c8 0022     		mov	r2, #0
 772 00ca DA63     		str	r2, [r3, #60]
 116:../BlockCommutation.c **** 				CCU80_CC80->CR2S = InnerPWMPeriod+1;
 773              		.loc 2 116 0
 774 00cc 574B     		ldr	r3, .L25+16
 775 00ce 594A     		ldr	r2, .L25+24
 776 00d0 1268     		ldr	r2, [r2]
 777 00d2 0132     		add	r2, r2, #1
 778 00d4 5A64     		str	r2, [r3, #68]
 117:../BlockCommutation.c **** 				CCU80_CC81->CR1S = InnerPWMCompare;
 779              		.loc 2 117 0
 780 00d6 584B     		ldr	r3, .L25+28
 781 00d8 554A     		ldr	r2, .L25+20
 782 00da 1268     		ldr	r2, [r2]
 783 00dc DA63     		str	r2, [r3, #60]
 118:../BlockCommutation.c **** 				CCU80_CC81->CR2S = InnerPWMPeriod+1;
 784              		.loc 2 118 0
 785 00de 564B     		ldr	r3, .L25+28
 786 00e0 544A     		ldr	r2, .L25+24
 787 00e2 1268     		ldr	r2, [r2]
 788 00e4 0132     		add	r2, r2, #1
 789 00e6 5A64     		str	r2, [r3, #68]
 119:../BlockCommutation.c **** 				CCU80_CC82->CR1S = 0;
 790              		.loc 2 119 0
 791 00e8 544B     		ldr	r3, .L25+32
 792 00ea 0022     		mov	r2, #0
 793 00ec DA63     		str	r2, [r3, #60]
 120:../BlockCommutation.c **** 				CCU80_CC82->CR2S = 0;
 794              		.loc 2 120 0
 795 00ee 534B     		ldr	r3, .L25+32
 796 00f0 0022     		mov	r2, #0
 797 00f2 5A64     		str	r2, [r3, #68]
 121:../BlockCommutation.c **** 				break;
 798              		.loc 2 121 0
 799 00f4 56E0     		b	.L15
 800              	.L19:
 122:../BlockCommutation.c **** 			case 3:
 123:../BlockCommutation.c **** 				VADC_G0->ASSEL = 0x04UL;
 801              		.loc 2 123 0
 802 00f6 4C4A     		ldr	r2, .L25+12
 803 00f8 9423     		mov	r3, #148
 804 00fa 5B00     		lsl	r3, r3, #1
 805 00fc 0421     		mov	r1, #4
 806 00fe D150     		str	r1, [r2, r3]
 124:../BlockCommutation.c **** 				CCU80_CC80->CR1S = 0;
 807              		.loc 2 124 0
 808 0100 4A4B     		ldr	r3, .L25+16
 809 0102 0022     		mov	r2, #0
 810 0104 DA63     		str	r2, [r3, #60]
 125:../BlockCommutation.c **** 				CCU80_CC80->CR2S = 0;
 811              		.loc 2 125 0
 812 0106 494B     		ldr	r3, .L25+16
 813 0108 0022     		mov	r2, #0
 814 010a 5A64     		str	r2, [r3, #68]
 126:../BlockCommutation.c **** 				CCU80_CC81->CR1S = InnerPWMCompare;
 815              		.loc 2 126 0
 816 010c 4A4B     		ldr	r3, .L25+28
 817 010e 484A     		ldr	r2, .L25+20
 818 0110 1268     		ldr	r2, [r2]
 819 0112 DA63     		str	r2, [r3, #60]
 127:../BlockCommutation.c **** 				CCU80_CC81->CR2S = InnerPWMPeriod+1;
 820              		.loc 2 127 0
 821 0114 484B     		ldr	r3, .L25+28
 822 0116 474A     		ldr	r2, .L25+24
 823 0118 1268     		ldr	r2, [r2]
 824 011a 0132     		add	r2, r2, #1
 825 011c 5A64     		str	r2, [r3, #68]
 128:../BlockCommutation.c **** 				CCU80_CC82->CR1S = 0;
 826              		.loc 2 128 0
 827 011e 474B     		ldr	r3, .L25+32
 828 0120 0022     		mov	r2, #0
 829 0122 DA63     		str	r2, [r3, #60]
 129:../BlockCommutation.c **** 				CCU80_CC82->CR2S = InnerPWMPeriod+1;
 830              		.loc 2 129 0
 831 0124 454B     		ldr	r3, .L25+32
 832 0126 434A     		ldr	r2, .L25+24
 833 0128 1268     		ldr	r2, [r2]
 834 012a 0132     		add	r2, r2, #1
 835 012c 5A64     		str	r2, [r3, #68]
 130:../BlockCommutation.c **** 				break;
 836              		.loc 2 130 0
 837 012e 39E0     		b	.L15
 838              	.L20:
 131:../BlockCommutation.c **** 			case 4:
 132:../BlockCommutation.c **** 				VADC_G0->ASSEL = 0x02UL;
 839              		.loc 2 132 0
 840 0130 3D4A     		ldr	r2, .L25+12
 841 0132 9423     		mov	r3, #148
 842 0134 5B00     		lsl	r3, r3, #1
 843 0136 0221     		mov	r1, #2
 844 0138 D150     		str	r1, [r2, r3]
 133:../BlockCommutation.c **** 				CCU80_CC80->CR1S = 0;
 845              		.loc 2 133 0
 846 013a 3C4B     		ldr	r3, .L25+16
 847 013c 0022     		mov	r2, #0
 848 013e DA63     		str	r2, [r3, #60]
 134:../BlockCommutation.c **** 				CCU80_CC80->CR2S = 0;
 849              		.loc 2 134 0
 850 0140 3A4B     		ldr	r3, .L25+16
 851 0142 0022     		mov	r2, #0
 852 0144 5A64     		str	r2, [r3, #68]
 135:../BlockCommutation.c **** 				CCU80_CC81->CR1S = 0;
 853              		.loc 2 135 0
 854 0146 3C4B     		ldr	r3, .L25+28
 855 0148 0022     		mov	r2, #0
 856 014a DA63     		str	r2, [r3, #60]
 136:../BlockCommutation.c **** 				CCU80_CC81->CR2S = InnerPWMPeriod+1;
 857              		.loc 2 136 0
 858 014c 3A4B     		ldr	r3, .L25+28
 859 014e 394A     		ldr	r2, .L25+24
 860 0150 1268     		ldr	r2, [r2]
 861 0152 0132     		add	r2, r2, #1
 862 0154 5A64     		str	r2, [r3, #68]
 137:../BlockCommutation.c **** 				CCU80_CC82->CR1S = InnerPWMCompare;
 863              		.loc 2 137 0
 864 0156 394B     		ldr	r3, .L25+32
 865 0158 354A     		ldr	r2, .L25+20
 866 015a 1268     		ldr	r2, [r2]
 867 015c DA63     		str	r2, [r3, #60]
 138:../BlockCommutation.c **** 				CCU80_CC82->CR2S = InnerPWMPeriod+1;
 868              		.loc 2 138 0
 869 015e 374B     		ldr	r3, .L25+32
 870 0160 344A     		ldr	r2, .L25+24
 871 0162 1268     		ldr	r2, [r2]
 872 0164 0132     		add	r2, r2, #1
 873 0166 5A64     		str	r2, [r3, #68]
 139:../BlockCommutation.c **** 				break;
 874              		.loc 2 139 0
 875 0168 1CE0     		b	.L15
 876              	.L21:
 140:../BlockCommutation.c **** 			case 5:
 141:../BlockCommutation.c **** 				VADC_G0->ASSEL = 0x01UL;
 877              		.loc 2 141 0
 878 016a 2F4A     		ldr	r2, .L25+12
 879 016c 9423     		mov	r3, #148
 880 016e 5B00     		lsl	r3, r3, #1
 881 0170 0121     		mov	r1, #1
 882 0172 D150     		str	r1, [r2, r3]
 142:../BlockCommutation.c **** 				CCU80_CC80->CR1S = 0;
 883              		.loc 2 142 0
 884 0174 2D4B     		ldr	r3, .L25+16
 885 0176 0022     		mov	r2, #0
 886 0178 DA63     		str	r2, [r3, #60]
 143:../BlockCommutation.c **** 				CCU80_CC80->CR2S = InnerPWMPeriod+1;
 887              		.loc 2 143 0
 888 017a 2C4B     		ldr	r3, .L25+16
 889 017c 2D4A     		ldr	r2, .L25+24
 890 017e 1268     		ldr	r2, [r2]
 891 0180 0132     		add	r2, r2, #1
 892 0182 5A64     		str	r2, [r3, #68]
 144:../BlockCommutation.c **** 				CCU80_CC81->CR1S = 0;
 893              		.loc 2 144 0
 894 0184 2C4B     		ldr	r3, .L25+28
 895 0186 0022     		mov	r2, #0
 896 0188 DA63     		str	r2, [r3, #60]
 145:../BlockCommutation.c **** 				CCU80_CC81->CR2S = 0;
 897              		.loc 2 145 0
 898 018a 2B4B     		ldr	r3, .L25+28
 899 018c 0022     		mov	r2, #0
 900 018e 5A64     		str	r2, [r3, #68]
 146:../BlockCommutation.c **** 				CCU80_CC82->CR1S = InnerPWMCompare;
 901              		.loc 2 146 0
 902 0190 2A4B     		ldr	r3, .L25+32
 903 0192 274A     		ldr	r2, .L25+20
 904 0194 1268     		ldr	r2, [r2]
 905 0196 DA63     		str	r2, [r3, #60]
 147:../BlockCommutation.c **** 				CCU80_CC82->CR2S = InnerPWMPeriod+1;
 906              		.loc 2 147 0
 907 0198 284B     		ldr	r3, .L25+32
 908 019a 264A     		ldr	r2, .L25+24
 909 019c 1268     		ldr	r2, [r2]
 910 019e 0132     		add	r2, r2, #1
 911 01a0 5A64     		str	r2, [r3, #68]
 148:../BlockCommutation.c **** 				break;
 912              		.loc 2 148 0
 913 01a2 C046     		mov	r8, r8
 914              	.L15:
 149:../BlockCommutation.c **** 		}
 150:../BlockCommutation.c **** 		CCU80_CC83->CR1S = InnerPWMCompare-1;//>>1;
 915              		.loc 2 150 0
 916 01a4 264B     		ldr	r3, .L25+36
 917 01a6 224A     		ldr	r2, .L25+20
 918 01a8 1268     		ldr	r2, [r2]
 919 01aa 013A     		sub	r2, r2, #1
 920 01ac DA63     		str	r2, [r3, #60]
 151:../BlockCommutation.c **** 		CCU80_CC83->CR2S = InnerPWMCompare-1;//>>1;
 921              		.loc 2 151 0
 922 01ae 244B     		ldr	r3, .L25+36
 923 01b0 1F4A     		ldr	r2, .L25+20
 924 01b2 1268     		ldr	r2, [r2]
 925 01b4 013A     		sub	r2, r2, #1
 926 01b6 5A64     		str	r2, [r3, #68]
 152:../BlockCommutation.c **** 		CCU80->GCSS |= 0x1111;
 927              		.loc 2 152 0
 928 01b8 A023     		mov	r3, #160
 929 01ba DB05     		lsl	r3, r3, #23
 930 01bc A022     		mov	r2, #160
 931 01be D205     		lsl	r2, r2, #23
 932 01c0 1269     		ldr	r2, [r2, #16]
 933 01c2 2049     		ldr	r1, .L25+40
 934 01c4 0A43     		orr	r2, r1
 935 01c6 1A61     		str	r2, [r3, #16]
 153:../BlockCommutation.c **** 
 154:../BlockCommutation.c **** 		// --- all shadow registers set?
 155:../BlockCommutation.c **** 		while ((CCU80->GCST & 0x1111) != 0);
 936              		.loc 2 155 0
 937 01c8 C046     		mov	r8, r8
 938              	.L23:
 939              		.loc 2 155 0 is_stmt 0 discriminator 1
 940 01ca A023     		mov	r3, #160
 941 01cc DB05     		lsl	r3, r3, #23
 942 01ce 9A69     		ldr	r2, [r3, #24]
 943 01d0 1C4B     		ldr	r3, .L25+40
 944 01d2 1340     		and	r3, r2
 945 01d4 F9D1     		bne	.L23
 156:../BlockCommutation.c **** 
 157:../BlockCommutation.c **** 		CCU80_CC83->INTE |= 1UL<<4;
 946              		.loc 2 157 0 is_stmt 1
 947 01d6 1A4A     		ldr	r2, .L25+36
 948 01d8 1949     		ldr	r1, .L25+36
 949 01da A423     		mov	r3, #164
 950 01dc CB58     		ldr	r3, [r1, r3]
 951 01de 1021     		mov	r1, #16
 952 01e0 1943     		orr	r1, r3
 953 01e2 A423     		mov	r3, #164
 954 01e4 D150     		str	r1, [r2, r3]
 158:../BlockCommutation.c **** 
 159:../BlockCommutation.c **** 		static uint16_t cnt=0;
 160:../BlockCommutation.c **** 
 161:../BlockCommutation.c **** 		if (motorState==StartUp)
 955              		.loc 2 161 0
 956 01e6 0D4B     		ldr	r3, .L25
 957 01e8 1B78     		ldrb	r3, [r3]
 958 01ea DBB2     		uxtb	r3, r3
 959 01ec 012B     		cmp	r3, #1
 960 01ee 12D1     		bne	.L12
 162:../BlockCommutation.c **** 		{
 163:../BlockCommutation.c **** 			cnt++;
 961              		.loc 2 163 0
 962 01f0 154B     		ldr	r3, .L25+44
 963 01f2 1B88     		ldrh	r3, [r3]
 964 01f4 0133     		add	r3, r3, #1
 965 01f6 9AB2     		uxth	r2, r3
 966 01f8 134B     		ldr	r3, .L25+44
 967 01fa 1A80     		strh	r2, [r3]
 164:../BlockCommutation.c **** 			if (cnt > 720)
 968              		.loc 2 164 0
 969 01fc 124B     		ldr	r3, .L25+44
 970 01fe 1A88     		ldrh	r2, [r3]
 971 0200 B423     		mov	r3, #180
 972 0202 9B00     		lsl	r3, r3, #2
 973 0204 9A42     		cmp	r2, r3
 974 0206 06D9     		bls	.L12
 165:../BlockCommutation.c **** 				motorState=Running;
 975              		.loc 2 165 0
 976 0208 044B     		ldr	r3, .L25
 977 020a 0222     		mov	r2, #2
 978 020c 1A70     		strb	r2, [r3]
 979 020e 02E0     		b	.L12
 980              	.L13:
 981              	.LBE2:
 166:../BlockCommutation.c **** 		}
 167:../BlockCommutation.c **** 	}
 168:../BlockCommutation.c **** 	else
 169:../BlockCommutation.c **** 		motorState=StartUp;
 982              		.loc 2 169 0
 983 0210 024B     		ldr	r3, .L25
 984 0212 0122     		mov	r2, #1
 985 0214 1A70     		strb	r2, [r3]
 986              	.L12:
 170:../BlockCommutation.c **** }
 987              		.loc 2 170 0
 988 0216 BD46     		mov	sp, r7
 989              		@ sp needed for prologue
 990 0218 80BD     		pop	{r7, pc}
 991              	.L26:
 992 021a C046     		.align	2
 993              	.L25:
 994 021c 00000000 		.word	motorState
 995 0220 00000000 		.word	PhaseState
 996 0224 00000000 		.word	.L22
 997 0228 00040348 		.word	1208157184
 998 022c 00010050 		.word	1342177536
 999 0230 00000000 		.word	InnerPWMCompare
 1000 0234 00000000 		.word	InnerPWMPeriod
 1001 0238 00020050 		.word	1342177792
 1002 023c 00030050 		.word	1342178048
 1003 0240 00040050 		.word	1342178304
 1004 0244 11110000 		.word	4369
 1005 0248 0A000000 		.word	cnt.5566
 1006              		.cfi_endproc
 1007              	.LFE39:
 1009              		.section	.text.GetPhaseState,"ax",%progbits
 1010              		.align	2
 1011              		.global	GetPhaseState
 1012              		.code	16
 1013              		.thumb_func
 1015              	GetPhaseState:
 1016              	.LFB40:
 171:../BlockCommutation.c **** 
 172:../BlockCommutation.c **** uint8_t GetPhaseState()
 173:../BlockCommutation.c **** {
 1017              		.loc 2 173 0
 1018              		.cfi_startproc
 1019 0000 80B5     		push	{r7, lr}
 1020              	.LCFI10:
 1021              		.cfi_def_cfa_offset 8
 1022              		.cfi_offset 7, -8
 1023              		.cfi_offset 14, -4
 1024 0002 00AF     		add	r7, sp, #0
 1025              	.LCFI11:
 1026              		.cfi_def_cfa_register 7
 174:../BlockCommutation.c **** 	return PhaseState;
 1027              		.loc 2 174 0
 1028 0004 034B     		ldr	r3, .L29
 1029 0006 1B78     		ldrb	r3, [r3]
 1030 0008 DBB2     		uxtb	r3, r3
 1031 000a DBB2     		uxtb	r3, r3
 175:../BlockCommutation.c **** }
 1032              		.loc 2 175 0
 1033 000c 181C     		mov	r0, r3
 1034 000e BD46     		mov	sp, r7
 1035              		@ sp needed for prologue
 1036 0010 80BD     		pop	{r7, pc}
 1037              	.L30:
 1038 0012 C046     		.align	2
 1039              	.L29:
 1040 0014 00000000 		.word	PhaseState
 1041              		.cfi_endproc
 1042              	.LFE40:
 1044              		.section	.text.StartMotor,"ax",%progbits
 1045              		.align	2
 1046              		.global	StartMotor
 1047              		.code	16
 1048              		.thumb_func
 1050              	StartMotor:
 1051              	.LFB41:
 176:../BlockCommutation.c **** 
 177:../BlockCommutation.c **** void StartMotor()
 178:../BlockCommutation.c **** {
 1052              		.loc 2 178 0
 1053              		.cfi_startproc
 1054 0000 80B5     		push	{r7, lr}
 1055              	.LCFI12:
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 00AF     		add	r7, sp, #0
 1060              	.LCFI13:
 1061              		.cfi_def_cfa_register 7
 179:../BlockCommutation.c **** 	if (motorState==Stopped)
 1062              		.loc 2 179 0
 1063 0004 0C4B     		ldr	r3, .L33
 1064 0006 1B78     		ldrb	r3, [r3]
 1065 0008 DBB2     		uxtb	r3, r3
 1066 000a 002B     		cmp	r3, #0
 1067 000c 12D1     		bne	.L31
 180:../BlockCommutation.c **** 	{
 181:../BlockCommutation.c **** 		//Start slices
 182:../BlockCommutation.c **** 		SCU_GENERAL->CCUCON |= 0x100UL;
 1068              		.loc 2 182 0
 1069 000e 0B4B     		ldr	r3, .L33+4
 1070 0010 0A4A     		ldr	r2, .L33+4
 1071 0012 126B     		ldr	r2, [r2, #48]
 1072 0014 8021     		mov	r1, #128
 1073 0016 4900     		lsl	r1, r1, #1
 1074 0018 0A43     		orr	r2, r1
 1075 001a 1A63     		str	r2, [r3, #48]
 183:../BlockCommutation.c **** 		SCU_GENERAL->CCUCON &= ~(0x100UL);
 1076              		.loc 2 183 0
 1077 001c 074B     		ldr	r3, .L33+4
 1078 001e 074A     		ldr	r2, .L33+4
 1079 0020 116B     		ldr	r1, [r2, #48]
 1080 0022 074A     		ldr	r2, .L33+8
 1081 0024 0A40     		and	r2, r1
 1082 0026 1A63     		str	r2, [r3, #48]
 184:../BlockCommutation.c **** 
 185:../BlockCommutation.c **** 		//Start slices
 186:../BlockCommutation.c **** 		CCU40_CC40->TCSET |= 0x01UL;
 1083              		.loc 2 186 0
 1084 0028 064B     		ldr	r3, .L33+12
 1085 002a 064A     		ldr	r2, .L33+12
 1086 002c D268     		ldr	r2, [r2, #12]
 1087 002e 0121     		mov	r1, #1
 1088 0030 0A43     		orr	r2, r1
 1089 0032 DA60     		str	r2, [r3, #12]
 1090              	.L31:
 187:../BlockCommutation.c **** 	}
 188:../BlockCommutation.c **** }
 1091              		.loc 2 188 0
 1092 0034 BD46     		mov	sp, r7
 1093              		@ sp needed for prologue
 1094 0036 80BD     		pop	{r7, pc}
 1095              	.L34:
 1096              		.align	2
 1097              	.L33:
 1098 0038 00000000 		.word	motorState
 1099 003c 00000140 		.word	1073807360
 1100 0040 FFFEFFFF 		.word	-257
 1101 0044 00010448 		.word	1208221952
 1102              		.cfi_endproc
 1103              	.LFE41:
 1105              		.section	.text.StopMotor,"ax",%progbits
 1106              		.align	2
 1107              		.global	StopMotor
 1108              		.code	16
 1109              		.thumb_func
 1111              	StopMotor:
 1112              	.LFB42:
 189:../BlockCommutation.c **** 
 190:../BlockCommutation.c **** void StopMotor()
 191:../BlockCommutation.c **** {
 1113              		.loc 2 191 0
 1114              		.cfi_startproc
 1115 0000 80B5     		push	{r7, lr}
 1116              	.LCFI14:
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 7, -8
 1119              		.cfi_offset 14, -4
 1120 0002 00AF     		add	r7, sp, #0
 1121              	.LCFI15:
 1122              		.cfi_def_cfa_register 7
 192:../BlockCommutation.c **** 	if (motorState != Stopped)
 1123              		.loc 2 192 0
 1124 0004 1D4B     		ldr	r3, .L37
 1125 0006 1B78     		ldrb	r3, [r3]
 1126 0008 DBB2     		uxtb	r3, r3
 1127 000a 002B     		cmp	r3, #0
 1128 000c 33D0     		beq	.L35
 193:../BlockCommutation.c **** 	{
 194:../BlockCommutation.c **** 		InnerPWMCompare=InnerPWMPeriod*CurrentDutyCycleStart;
 1129              		.loc 2 194 0
 1130 000e 1C4B     		ldr	r3, .L37+4
 1131 0010 1B68     		ldr	r3, [r3]
 1132 0012 181C     		mov	r0, r3
 1133 0014 FFF7FEFF 		bl	__aeabi_ui2f
 1134 0018 021C     		add	r2, r0, #0
 1135 001a 1A4B     		ldr	r3, .L37+8
 1136 001c 1B68     		ldr	r3, [r3]
 1137 001e 101C     		add	r0, r2, #0
 1138 0020 191C     		add	r1, r3, #0
 1139 0022 FFF7FEFF 		bl	__aeabi_fmul
 1140 0026 031C     		add	r3, r0, #0
 1141 0028 181C     		add	r0, r3, #0
 1142 002a FFF7FEFF 		bl	__aeabi_f2uiz
 1143 002e 021C     		mov	r2, r0
 1144 0030 154B     		ldr	r3, .L37+12
 1145 0032 1A60     		str	r2, [r3]
 195:../BlockCommutation.c **** 
 196:../BlockCommutation.c **** 		//Stop slices CCU4
 197:../BlockCommutation.c **** 		CCU40_CC40->TCCLR |= 3UL;
 1146              		.loc 2 197 0
 1147 0034 154B     		ldr	r3, .L37+16
 1148 0036 154A     		ldr	r2, .L37+16
 1149 0038 1269     		ldr	r2, [r2, #16]
 1150 003a 0321     		mov	r1, #3
 1151 003c 0A43     		orr	r2, r1
 1152 003e 1A61     		str	r2, [r3, #16]
 198:../BlockCommutation.c **** 
 199:../BlockCommutation.c **** 		//Stop slices CCU8
 200:../BlockCommutation.c **** 		CCU80_CC80->TCCLR |= 3UL;
 1153              		.loc 2 200 0
 1154 0040 134B     		ldr	r3, .L37+20
 1155 0042 134A     		ldr	r2, .L37+20
 1156 0044 1269     		ldr	r2, [r2, #16]
 1157 0046 0321     		mov	r1, #3
 1158 0048 0A43     		orr	r2, r1
 1159 004a 1A61     		str	r2, [r3, #16]
 201:../BlockCommutation.c **** 		CCU80_CC81->TCCLR |= 3UL;
 1160              		.loc 2 201 0
 1161 004c 114B     		ldr	r3, .L37+24
 1162 004e 114A     		ldr	r2, .L37+24
 1163 0050 1269     		ldr	r2, [r2, #16]
 1164 0052 0321     		mov	r1, #3
 1165 0054 0A43     		orr	r2, r1
 1166 0056 1A61     		str	r2, [r3, #16]
 202:../BlockCommutation.c **** 		CCU80_CC82->TCCLR |= 3UL;
 1167              		.loc 2 202 0
 1168 0058 0F4B     		ldr	r3, .L37+28
 1169 005a 0F4A     		ldr	r2, .L37+28
 1170 005c 1269     		ldr	r2, [r2, #16]
 1171 005e 0321     		mov	r1, #3
 1172 0060 0A43     		orr	r2, r1
 1173 0062 1A61     		str	r2, [r3, #16]
 203:../BlockCommutation.c **** 		CCU80_CC83->TCCLR |= 3UL;
 1174              		.loc 2 203 0
 1175 0064 0D4B     		ldr	r3, .L37+32
 1176 0066 0D4A     		ldr	r2, .L37+32
 1177 0068 1269     		ldr	r2, [r2, #16]
 1178 006a 0321     		mov	r1, #3
 1179 006c 0A43     		orr	r2, r1
 1180 006e 1A61     		str	r2, [r3, #16]
 204:../BlockCommutation.c **** 
 205:../BlockCommutation.c **** 		motorState=Stopped;
 1181              		.loc 2 205 0
 1182 0070 024B     		ldr	r3, .L37
 1183 0072 0022     		mov	r2, #0
 1184 0074 1A70     		strb	r2, [r3]
 1185              	.L35:
 206:../BlockCommutation.c **** 	}
 207:../BlockCommutation.c **** }
 1186              		.loc 2 207 0
 1187 0076 BD46     		mov	sp, r7
 1188              		@ sp needed for prologue
 1189 0078 80BD     		pop	{r7, pc}
 1190              	.L38:
 1191 007a C046     		.align	2
 1192              	.L37:
 1193 007c 00000000 		.word	motorState
 1194 0080 00000000 		.word	InnerPWMPeriod
 1195 0084 00000000 		.word	CurrentDutyCycleStart
 1196 0088 00000000 		.word	InnerPWMCompare
 1197 008c 00010448 		.word	1208221952
 1198 0090 00010050 		.word	1342177536
 1199 0094 00020050 		.word	1342177792
 1200 0098 00030050 		.word	1342178048
 1201 009c 00040050 		.word	1342178304
 1202              		.cfi_endproc
 1203              	.LFE42:
 1205              		.section	.text.SetReferenceCurrent,"ax",%progbits
 1206              		.align	2
 1207              		.global	SetReferenceCurrent
 1208              		.code	16
 1209              		.thumb_func
 1211              	SetReferenceCurrent:
 1212              	.LFB43:
 208:../BlockCommutation.c **** 
 209:../BlockCommutation.c **** uint8_t SetReferenceCurrent(uint16_t ref)
 210:../BlockCommutation.c **** {
 1213              		.loc 2 210 0
 1214              		.cfi_startproc
 1215 0000 80B5     		push	{r7, lr}
 1216              	.LCFI16:
 1217              		.cfi_def_cfa_offset 8
 1218              		.cfi_offset 7, -8
 1219              		.cfi_offset 14, -4
 1220 0002 82B0     		sub	sp, sp, #8
 1221              	.LCFI17:
 1222              		.cfi_def_cfa_offset 16
 1223 0004 00AF     		add	r7, sp, #0
 1224              	.LCFI18:
 1225              		.cfi_def_cfa_register 7
 1226 0006 021C     		mov	r2, r0
 1227 0008 BB1D     		add	r3, r7, #6
 1228 000a 1A80     		strh	r2, [r3]
 211:../BlockCommutation.c **** 	StartMotor();
 1229              		.loc 2 211 0
 1230 000c FFF7FEFF 		bl	StartMotor
 212:../BlockCommutation.c **** 
 213:../BlockCommutation.c **** 	if (motorState == Running)
 1231              		.loc 2 213 0
 1232 0010 074B     		ldr	r3, .L42
 1233 0012 1B78     		ldrb	r3, [r3]
 1234 0014 DBB2     		uxtb	r3, r3
 1235 0016 022B     		cmp	r3, #2
 1236 0018 05D1     		bne	.L40
 214:../BlockCommutation.c **** 	{
 215:../BlockCommutation.c **** 		InnerPWMCompare=ref;
 1237              		.loc 2 215 0
 1238 001a BB1D     		add	r3, r7, #6
 1239 001c 1A88     		ldrh	r2, [r3]
 1240 001e 054B     		ldr	r3, .L42+4
 1241 0020 1A60     		str	r2, [r3]
 216:../BlockCommutation.c **** 		return 1;
 1242              		.loc 2 216 0
 1243 0022 0123     		mov	r3, #1
 1244 0024 00E0     		b	.L41
 1245              	.L40:
 217:../BlockCommutation.c **** 	}
 218:../BlockCommutation.c **** 	else
 219:../BlockCommutation.c **** 		return 0;
 1246              		.loc 2 219 0
 1247 0026 0023     		mov	r3, #0
 1248              	.L41:
 220:../BlockCommutation.c **** }
 1249              		.loc 2 220 0
 1250 0028 181C     		mov	r0, r3
 1251 002a BD46     		mov	sp, r7
 1252 002c 02B0     		add	sp, sp, #8
 1253              		@ sp needed for prologue
 1254 002e 80BD     		pop	{r7, pc}
 1255              	.L43:
 1256              		.align	2
 1257              	.L42:
 1258 0030 00000000 		.word	motorState
 1259 0034 00000000 		.word	InnerPWMCompare
 1260              		.cfi_endproc
 1261              	.LFE43:
 1263              		.bss
 1264              		.align	1
 1265              	cnt.5566:
 1266 000a 0000     		.space	2
 1267              		.text
 1268              	.Letext0:
 1269              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 1270              		.file 4 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1271              		.file 5 "../BlockCommutation.h"
DEFINED SYMBOLS
                            *ABS*:00000000 BlockCommutation.c
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:18     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:22     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:61     .text.NVIC_EnableIRQ:00000028 $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:66     .text.NVIC_SetPriority:00000000 $t
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:70     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:205    .text.NVIC_SetPriority:000000d8 $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:215    .data:00000000 InnerPWMFreq
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:212    .data:00000000 $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:221    .data:00000004 CurrentDutyCycleStart
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:228    .bss:00000000 InnerPWMPeriod
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:225    .bss:00000000 $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:234    .bss:00000004 InnerPWMCompare
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:239    .bss:00000008 PhaseState
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:244    .bss:00000009 motorState
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:254    .text.InitBlockCommutation:00000000 $t
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:259    .text.InitBlockCommutation:00000000 InitBlockCommutation
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:594    .text.InitBlockCommutation:00000238 $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:616    .text.CCU40_0_IRQHandler:00000000 $t
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:621    .text.CCU40_0_IRQHandler:00000000 CCU40_0_IRQHandler
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:677    .rodata:00000000 $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:994    .text.CCU40_0_IRQHandler:0000021c $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1265   .bss:0000000a cnt.5566
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1010   .text.GetPhaseState:00000000 $t
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1015   .text.GetPhaseState:00000000 GetPhaseState
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1040   .text.GetPhaseState:00000014 $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1045   .text.StartMotor:00000000 $t
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1050   .text.StartMotor:00000000 StartMotor
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1098   .text.StartMotor:00000038 $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1106   .text.StopMotor:00000000 $t
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1111   .text.StopMotor:00000000 StopMotor
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1193   .text.StopMotor:0000007c $d
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1206   .text.SetReferenceCurrent:00000000 $t
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1211   .text.SetReferenceCurrent:00000000 SetReferenceCurrent
C:\Users\SteurerE\AppData\Local\Temp\cc6bRegl.s:1258   .text.SetReferenceCurrent:00000030 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.665d63c3c957c91c5ed795826dcbc088
                           .group:00000000 wm4.XMC1300.h.45.4ee692c6c98aa9fc42e2abbc732052b9
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1300.h.126.871a37eeeb3f6a078f5ddf5efd64103f
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.1aa717522e337383e1234be386036b7c
                           .group:00000000 wm4.CLK002.h.56.d2936f957892acc36e594c5138aee657
                           .group:00000000 wm4.uc_id.h.35.f852fba3565a132d8ed947977fab9fbc
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.CCU8GLOBAL_Conf.h.82.76c6b1bf357180d1e8ea1f462a66deb8
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.f334402b2e237110b77f625dfc27af0e
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.00b91c10e79f81ab4aec2120d8519584
                           .group:00000000 wm4.BlockCommutation.h.13.594cee5d609b14f1ba29daedf754ef8b

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_ui2f
__aeabi_fmul
__aeabi_f2uiz
