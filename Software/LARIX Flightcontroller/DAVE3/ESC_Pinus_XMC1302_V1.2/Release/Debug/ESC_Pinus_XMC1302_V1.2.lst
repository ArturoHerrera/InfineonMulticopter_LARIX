
ESC_Pinus_XMC1302_V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000538c  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  1000638c  1000638c  0000638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       0000018c  1000639c  1000639c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000138  2000000c  10006530  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   0000000c  20000144  00000000  00000144  2**0
                  ALLOC
  5 Stack         00000800  20000150  00000000  00000150  2**0
                  ALLOC
  6 .bss          0000004c  20000950  20000950  00010950  2**2
                  ALLOC
  7 .data         0000001c  200009a0  10006668  000089a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 000005a0  00000000  00000000  000089c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008c39  00000000  00000000  00008f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001825  00000000  00000000  00011b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010895  00000000  00000000  000133be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fdc  00000000  00000000  00023c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003bd59  00000000  00000000  00024c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000012ee  00000000  00000000  00060989  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000388  00000000  00000000  00061c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 000008fa  00000000  00000000  00062000  2**0
                  CONTENTS, READONLY
 17 .debug_macro  0000d47d  00000000  00000000  000628fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1300_interrupt_vector_cortex_m>:
10001000:	50 09 00 20 19 10 00 10 d5 10 00 10 d7 10 00 10     P.. ............
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1300_reset_cortex_m>:
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1300_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0

    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1300_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader */
    B       __Xmc1300_Program_Loader 
10001020:	e012      	b.n	10001048 <__Xmc1300_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001024:	20000950 	.word	0x20000950
    MOV SP,R0

    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010d1 	.word	0x100010d1

1000102c <__COPY_FLASH2RAM>:
   to C land is given */
   .section .Xmc1300.postreset,"x",%progbits
__COPY_FLASH2RAM:
   .fnstart:
   /* Is there anything to be copied? */
   CMP R2,#0
1000102c:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000102e:	d00a      	beq.n	10001046 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
10001030:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001032:	d200      	bcs.n	10001036 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001034:	2204      	movs	r2, #4

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   BX LR
10001046:	4770      	bx	lr

10001048 <__Xmc1300_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001048:	4811      	ldr	r0, [pc, #68]	; (10001090 <SKIPCLEAR+0x14>)
   LDR R1, =__Xmc1300_sData
1000104a:	4912      	ldr	r1, [pc, #72]	; (10001094 <SKIPCLEAR+0x18>)
   LDR R2, =__Xmc1300_Data_Size
1000104c:	4a12      	ldr	r2, [pc, #72]	; (10001098 <SKIPCLEAR+0x1c>)
   BL __COPY_FLASH2RAM
1000104e:	f7ff ffed 	bl	1000102c <__COPY_FLASH2RAM>

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
10001052:	4812      	ldr	r0, [pc, #72]	; (1000109c <SKIPCLEAR+0x20>)
   LDR R1, =__ram_code_start
10001054:	4912      	ldr	r1, [pc, #72]	; (100010a0 <SKIPCLEAR+0x24>)
   LDR R2, =__ram_code_size
10001056:	4a13      	ldr	r2, [pc, #76]	; (100010a4 <SKIPCLEAR+0x28>)
   BL __COPY_FLASH2RAM
10001058:	f7ff ffe8 	bl	1000102c <__COPY_FLASH2RAM>

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	4812      	ldr	r0, [pc, #72]	; (100010a8 <SKIPCLEAR+0x2c>)
   LDR R1, =VeneerStart
1000105e:	4913      	ldr	r1, [pc, #76]	; (100010ac <SKIPCLEAR+0x30>)
   LDR R2, =VeneerSize
10001060:	4a13      	ldr	r2, [pc, #76]	; (100010b0 <SKIPCLEAR+0x34>)
   BL __COPY_FLASH2RAM
10001062:	f7ff ffe3 	bl	1000102c <__COPY_FLASH2RAM>

   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
10001066:	4813      	ldr	r0, [pc, #76]	; (100010b4 <SKIPCLEAR+0x38>)
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
10001068:	4913      	ldr	r1, [pc, #76]	; (100010b8 <SKIPCLEAR+0x3c>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000106a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000106c:	d006      	beq.n	1000107c <SKIPCLEAR>

1000106e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000106e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001070:	2200      	movs	r2, #0

10001072 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001072:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001074:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001076:	d001      	beq.n	1000107c <SKIPCLEAR>
   ADDS R0,#4
10001078:	3004      	adds	r0, #4
   B CLEARLOOP
1000107a:	e7fa      	b.n	10001072 <CLEARLOOP>

1000107c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
1000107c:	480f      	ldr	r0, [pc, #60]	; (100010bc <SKIPCLEAR+0x40>)
   MOV SP,R0
1000107e:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001080:	480f      	ldr	r0, [pc, #60]	; (100010c0 <SKIPCLEAR+0x44>)
   BLX R0
10001082:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
10001084:	480f      	ldr	r0, [pc, #60]	; (100010c4 <SKIPCLEAR+0x48>)
   BLX R0
10001086:	4780      	blx	r0

   MOVS R0,#0
10001088:	2000      	movs	r0, #0
   MOVS R1,#0
1000108a:	2100      	movs	r1, #0
   LDR R2, =main
1000108c:	4a0e      	ldr	r2, [pc, #56]	; (100010c8 <SKIPCLEAR+0x4c>)
   MOV PC,R2
1000108e:	4697      	mov	pc, r2
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001090:	10006668 	.word	0x10006668
   LDR R1, =__Xmc1300_sData
10001094:	200009a0 	.word	0x200009a0
   LDR R2, =__Xmc1300_Data_Size
10001098:	0000001c 	.word	0x0000001c
   BL __COPY_FLASH2RAM

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
1000109c:	10006684 	.word	0x10006684
   LDR R1, =__ram_code_start
100010a0:	200009bc 	.word	0x200009bc
   LDR R2, =__ram_code_size
100010a4:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010a8:	10006530 	.word	0x10006530
   LDR R1, =VeneerStart
100010ac:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b0:	00000138 	.word	0x00000138
   BL __COPY_FLASH2RAM

   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
100010b4:	20000950 	.word	0x20000950
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
100010b8:	0000004c 	.word	0x0000004c
   B CLEARLOOP
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
100010bc:	20000950 	.word	0x20000950
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010c0:	10001119 	.word	0x10001119
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010c4:	100010cd 	.word	0x100010cd
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c8:	10002045 	.word	0x10002045

100010cc <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010cc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ce:	4770      	bx	lr

100010d0 <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010d0:	46c0      	nop			; (mov r8, r8)
     BX LR
100010d2:	4770      	bx	lr

100010d4 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
100010d4:	e7fe      	b.n	100010d4 <NMI_Handler>

100010d6 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
100010d6:	e7fe      	b.n	100010d6 <HardFault_Handler>

100010d8 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
100010d8:	e7fe      	b.n	100010d8 <SVC_Handler>

100010da <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
100010da:	e7fe      	b.n	100010da <PendSV_Handler>

100010dc <SysTick_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
100010dc:	e7fe      	b.n	100010dc <SysTick_Handler>

100010de <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
100010de:	e7fe      	b.n	100010de <SCU_0_IRQHandler>

100010e0 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
100010e0:	e7fe      	b.n	100010e0 <SCU_1_IRQHandler>

100010e2 <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
100010e2:	e7fe      	b.n	100010e2 <SCU_2_IRQHandler>

100010e4 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
100010e4:	e7fe      	b.n	100010e4 <ERU0_0_IRQHandler>

100010e6 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
100010e6:	e7fe      	b.n	100010e6 <ERU0_1_IRQHandler>

100010e8 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
100010e8:	e7fe      	b.n	100010e8 <ERU0_2_IRQHandler>

100010ea <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
100010ea:	e7fe      	b.n	100010ea <ERU0_3_IRQHandler>

100010ec <MATH0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler MATH0_0_IRQHandler
100010ec:	e7fe      	b.n	100010ec <MATH0_0_IRQHandler>

100010ee <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
100010ee:	e7fe      	b.n	100010ee <VADC0_C0_0_IRQHandler>

100010f0 <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
100010f0:	e7fe      	b.n	100010f0 <VADC0_C0_1_IRQHandler>

100010f2 <VADC0_G0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_0_IRQHandler
100010f2:	e7fe      	b.n	100010f2 <VADC0_G0_0_IRQHandler>
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_1_IRQHandler
100010f4:	e7fe      	b.n	100010f4 <VADC0_G0_0_IRQHandler+0x2>

100010f6 <VADC0_G1_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_0_IRQHandler
100010f6:	e7fe      	b.n	100010f6 <VADC0_G1_0_IRQHandler>
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_1_IRQHandler
100010f8:	e7fe      	b.n	100010f8 <VADC0_G1_0_IRQHandler+0x2>
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
100010fa:	e7fe      	b.n	100010fa <VADC0_G1_0_IRQHandler+0x4>
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
100010fc:	e7fe      	b.n	100010fc <VADC0_G1_0_IRQHandler+0x6>

100010fe <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
100010fe:	e7fe      	b.n	100010fe <CCU40_2_IRQHandler>

10001100 <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
10001100:	e7fe      	b.n	10001100 <CCU40_3_IRQHandler>

10001102 <CCU80_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_0_IRQHandler
10001102:	e7fe      	b.n	10001102 <CCU80_0_IRQHandler>

10001104 <CCU80_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_1_IRQHandler
10001104:	e7fe      	b.n	10001104 <CCU80_1_IRQHandler>

10001106 <POSIF0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_0_IRQHandler
10001106:	e7fe      	b.n	10001106 <POSIF0_0_IRQHandler>

10001108 <POSIF0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_1_IRQHandler
10001108:	e7fe      	b.n	10001108 <POSIF0_1_IRQHandler>

1000110a <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
1000110a:	e7fe      	b.n	1000110a <USIC0_0_IRQHandler>

1000110c <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
1000110c:	e7fe      	b.n	1000110c <USIC0_1_IRQHandler>

1000110e <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
1000110e:	e7fe      	b.n	1000110e <USIC0_2_IRQHandler>

10001110 <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
10001110:	e7fe      	b.n	10001110 <USIC0_3_IRQHandler>

10001112 <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
10001112:	e7fe      	b.n	10001112 <USIC0_4_IRQHandler>

10001114 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
10001114:	e7fe      	b.n	10001114 <USIC0_5_IRQHandler>

10001116 <BCCU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler BCCU0_0_IRQHandler
10001116:	e7fe      	b.n	10001116 <BCCU0_0_IRQHandler>

10001118 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
10001118:	b580      	push	{r7, lr}
1000111a:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
1000111c:	f000 f802 	bl	10001124 <SystemCoreClockUpdate>
}
10001120:	46bd      	mov	sp, r7
10001122:	bd80      	pop	{r7, pc}

10001124 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10001124:	b580      	push	{r7, lr}
10001126:	b082      	sub	sp, #8
10001128:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000112a:	4b11      	ldr	r3, [pc, #68]	; (10001170 <SystemCoreClockUpdate+0x4c>)
1000112c:	681a      	ldr	r2, [r3, #0]
1000112e:	23ff      	movs	r3, #255	; 0xff
10001130:	021b      	lsls	r3, r3, #8
10001132:	4013      	ands	r3, r2
10001134:	0a1b      	lsrs	r3, r3, #8
10001136:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10001138:	4b0d      	ldr	r3, [pc, #52]	; (10001170 <SystemCoreClockUpdate+0x4c>)
1000113a:	681a      	ldr	r2, [r3, #0]
1000113c:	23ff      	movs	r3, #255	; 0xff
1000113e:	4013      	ands	r3, r2
10001140:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
10001142:	687b      	ldr	r3, [r7, #4]
10001144:	2b00      	cmp	r3, #0
10001146:	d00c      	beq.n	10001162 <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
10001148:	687b      	ldr	r3, [r7, #4]
1000114a:	021a      	lsls	r2, r3, #8
1000114c:	683b      	ldr	r3, [r7, #0]
1000114e:	18d3      	adds	r3, r2, r3
10001150:	4808      	ldr	r0, [pc, #32]	; (10001174 <SystemCoreClockUpdate+0x50>)
10001152:	1c19      	adds	r1, r3, #0
10001154:	f003 f814 	bl	10004180 <__aeabi_uidiv>
10001158:	1c03      	adds	r3, r0, #0
1000115a:	005a      	lsls	r2, r3, #1
1000115c:	4b06      	ldr	r3, [pc, #24]	; (10001178 <SystemCoreClockUpdate+0x54>)
1000115e:	601a      	str	r2, [r3, #0]
10001160:	e002      	b.n	10001168 <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
10001162:	4b05      	ldr	r3, [pc, #20]	; (10001178 <SystemCoreClockUpdate+0x54>)
10001164:	4a05      	ldr	r2, [pc, #20]	; (1000117c <SystemCoreClockUpdate+0x58>)
10001166:	601a      	str	r2, [r3, #0]
  }
}
10001168:	46bd      	mov	sp, r7
1000116a:	b002      	add	sp, #8
1000116c:	bd80      	pop	{r7, pc}
1000116e:	46c0      	nop			; (mov r8, r8)
10001170:	40010300 	.word	0x40010300
10001174:	f4240000 	.word	0xf4240000
10001178:	20000998 	.word	0x20000998
1000117c:	01e84800 	.word	0x01e84800

10001180 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001180:	b580      	push	{r7, lr}
10001182:	b082      	sub	sp, #8
10001184:	af00      	add	r7, sp, #0
10001186:	1c02      	adds	r2, r0, #0
10001188:	1dfb      	adds	r3, r7, #7
1000118a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000118c:	4b06      	ldr	r3, [pc, #24]	; (100011a8 <NVIC_EnableIRQ+0x28>)
1000118e:	1dfa      	adds	r2, r7, #7
10001190:	7812      	ldrb	r2, [r2, #0]
10001192:	1c11      	adds	r1, r2, #0
10001194:	221f      	movs	r2, #31
10001196:	400a      	ands	r2, r1
10001198:	2101      	movs	r1, #1
1000119a:	1c08      	adds	r0, r1, #0
1000119c:	4090      	lsls	r0, r2
1000119e:	1c02      	adds	r2, r0, #0
100011a0:	601a      	str	r2, [r3, #0]
}
100011a2:	46bd      	mov	sp, r7
100011a4:	b002      	add	sp, #8
100011a6:	bd80      	pop	{r7, pc}
100011a8:	e000e100 	.word	0xe000e100

100011ac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100011ac:	b5b0      	push	{r4, r5, r7, lr}
100011ae:	b082      	sub	sp, #8
100011b0:	af00      	add	r7, sp, #0
100011b2:	1c02      	adds	r2, r0, #0
100011b4:	6039      	str	r1, [r7, #0]
100011b6:	1dfb      	adds	r3, r7, #7
100011b8:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
100011ba:	1dfb      	adds	r3, r7, #7
100011bc:	781b      	ldrb	r3, [r3, #0]
100011be:	2b7f      	cmp	r3, #127	; 0x7f
100011c0:	d932      	bls.n	10001228 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
100011c2:	4930      	ldr	r1, [pc, #192]	; (10001284 <NVIC_SetPriority+0xd8>)
100011c4:	1dfb      	adds	r3, r7, #7
100011c6:	781b      	ldrb	r3, [r3, #0]
100011c8:	1c1a      	adds	r2, r3, #0
100011ca:	230f      	movs	r3, #15
100011cc:	4013      	ands	r3, r2
100011ce:	3b08      	subs	r3, #8
100011d0:	0898      	lsrs	r0, r3, #2
100011d2:	4a2c      	ldr	r2, [pc, #176]	; (10001284 <NVIC_SetPriority+0xd8>)
100011d4:	1dfb      	adds	r3, r7, #7
100011d6:	781b      	ldrb	r3, [r3, #0]
100011d8:	1c1c      	adds	r4, r3, #0
100011da:	230f      	movs	r3, #15
100011dc:	4023      	ands	r3, r4
100011de:	3b08      	subs	r3, #8
100011e0:	089b      	lsrs	r3, r3, #2
100011e2:	3306      	adds	r3, #6
100011e4:	009b      	lsls	r3, r3, #2
100011e6:	18d3      	adds	r3, r2, r3
100011e8:	685b      	ldr	r3, [r3, #4]
100011ea:	1dfa      	adds	r2, r7, #7
100011ec:	7812      	ldrb	r2, [r2, #0]
100011ee:	1c14      	adds	r4, r2, #0
100011f0:	2203      	movs	r2, #3
100011f2:	4022      	ands	r2, r4
100011f4:	00d2      	lsls	r2, r2, #3
100011f6:	24ff      	movs	r4, #255	; 0xff
100011f8:	1c25      	adds	r5, r4, #0
100011fa:	4095      	lsls	r5, r2
100011fc:	1c2a      	adds	r2, r5, #0
100011fe:	43d2      	mvns	r2, r2
10001200:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10001202:	683b      	ldr	r3, [r7, #0]
10001204:	019c      	lsls	r4, r3, #6
10001206:	23ff      	movs	r3, #255	; 0xff
10001208:	401c      	ands	r4, r3
1000120a:	1dfb      	adds	r3, r7, #7
1000120c:	781b      	ldrb	r3, [r3, #0]
1000120e:	1c1d      	adds	r5, r3, #0
10001210:	2303      	movs	r3, #3
10001212:	402b      	ands	r3, r5
10001214:	00db      	lsls	r3, r3, #3
10001216:	1c25      	adds	r5, r4, #0
10001218:	409d      	lsls	r5, r3
1000121a:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
1000121c:	431a      	orrs	r2, r3
1000121e:	1d83      	adds	r3, r0, #6
10001220:	009b      	lsls	r3, r3, #2
10001222:	18cb      	adds	r3, r1, r3
10001224:	605a      	str	r2, [r3, #4]
10001226:	e029      	b.n	1000127c <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001228:	4b17      	ldr	r3, [pc, #92]	; (10001288 <NVIC_SetPriority+0xdc>)
1000122a:	1dfa      	adds	r2, r7, #7
1000122c:	7812      	ldrb	r2, [r2, #0]
1000122e:	b252      	sxtb	r2, r2
10001230:	0892      	lsrs	r2, r2, #2
10001232:	4915      	ldr	r1, [pc, #84]	; (10001288 <NVIC_SetPriority+0xdc>)
10001234:	1df8      	adds	r0, r7, #7
10001236:	7800      	ldrb	r0, [r0, #0]
10001238:	b240      	sxtb	r0, r0
1000123a:	0880      	lsrs	r0, r0, #2
1000123c:	30c0      	adds	r0, #192	; 0xc0
1000123e:	0080      	lsls	r0, r0, #2
10001240:	5841      	ldr	r1, [r0, r1]
10001242:	1df8      	adds	r0, r7, #7
10001244:	7800      	ldrb	r0, [r0, #0]
10001246:	1c04      	adds	r4, r0, #0
10001248:	2003      	movs	r0, #3
1000124a:	4020      	ands	r0, r4
1000124c:	00c0      	lsls	r0, r0, #3
1000124e:	24ff      	movs	r4, #255	; 0xff
10001250:	1c25      	adds	r5, r4, #0
10001252:	4085      	lsls	r5, r0
10001254:	1c28      	adds	r0, r5, #0
10001256:	43c0      	mvns	r0, r0
10001258:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
1000125a:	6839      	ldr	r1, [r7, #0]
1000125c:	018c      	lsls	r4, r1, #6
1000125e:	21ff      	movs	r1, #255	; 0xff
10001260:	400c      	ands	r4, r1
10001262:	1df9      	adds	r1, r7, #7
10001264:	7809      	ldrb	r1, [r1, #0]
10001266:	1c0d      	adds	r5, r1, #0
10001268:	2103      	movs	r1, #3
1000126a:	4029      	ands	r1, r5
1000126c:	00c9      	lsls	r1, r1, #3
1000126e:	1c25      	adds	r5, r4, #0
10001270:	408d      	lsls	r5, r1
10001272:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001274:	4301      	orrs	r1, r0
10001276:	32c0      	adds	r2, #192	; 0xc0
10001278:	0092      	lsls	r2, r2, #2
1000127a:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
1000127c:	46bd      	mov	sp, r7
1000127e:	b002      	add	sp, #8
10001280:	bdb0      	pop	{r4, r5, r7, pc}
10001282:	46c0      	nop			; (mov r8, r8)
10001284:	e000ed00 	.word	0xe000ed00
10001288:	e000e100 	.word	0xe000e100

1000128c <InitADC>:
#include "ADC.h"

volatile uint16_t ADCReference=0;

void InitADC()
{
1000128c:	b580      	push	{r7, lr}
1000128e:	af00      	add	r7, sp, #0
	//Converter is permanently on
	VADC_G0->ARBCFG |= 0x83UL;
10001290:	4a8f      	ldr	r2, [pc, #572]	; (100014d0 <InitADC+0x244>)
10001292:	498f      	ldr	r1, [pc, #572]	; (100014d0 <InitADC+0x244>)
10001294:	2380      	movs	r3, #128	; 0x80
10001296:	58cb      	ldr	r3, [r1, r3]
10001298:	2183      	movs	r1, #131	; 0x83
1000129a:	4319      	orrs	r1, r3
1000129c:	2380      	movs	r3, #128	; 0x80
1000129e:	50d1      	str	r1, [r2, r3]
	VADC_G1->ARBCFG |= 0x83UL;
100012a0:	4a8c      	ldr	r2, [pc, #560]	; (100014d4 <InitADC+0x248>)
100012a2:	498c      	ldr	r1, [pc, #560]	; (100014d4 <InitADC+0x248>)
100012a4:	2380      	movs	r3, #128	; 0x80
100012a6:	58cb      	ldr	r3, [r1, r3]
100012a8:	2183      	movs	r1, #131	; 0x83
100012aa:	4319      	orrs	r1, r3
100012ac:	2380      	movs	r3, #128	; 0x80
100012ae:	50d1      	str	r1, [r2, r3]

	//Start-Up Calibration
	VADC->GLOBCFG |= 1UL << 31;
100012b0:	4a89      	ldr	r2, [pc, #548]	; (100014d8 <InitADC+0x24c>)
100012b2:	4989      	ldr	r1, [pc, #548]	; (100014d8 <InitADC+0x24c>)
100012b4:	2380      	movs	r3, #128	; 0x80
100012b6:	58cb      	ldr	r3, [r1, r3]
100012b8:	2180      	movs	r1, #128	; 0x80
100012ba:	0609      	lsls	r1, r1, #24
100012bc:	4319      	orrs	r1, r3
100012be:	2380      	movs	r3, #128	; 0x80
100012c0:	50d1      	str	r1, [r2, r3]
	VADC->GLOBCFG |= 1UL << 31;
100012c2:	4a85      	ldr	r2, [pc, #532]	; (100014d8 <InitADC+0x24c>)
100012c4:	4984      	ldr	r1, [pc, #528]	; (100014d8 <InitADC+0x24c>)
100012c6:	2380      	movs	r3, #128	; 0x80
100012c8:	58cb      	ldr	r3, [r1, r3]
100012ca:	2180      	movs	r1, #128	; 0x80
100012cc:	0609      	lsls	r1, r1, #24
100012ce:	4319      	orrs	r1, r3
100012d0:	2380      	movs	r3, #128	; 0x80
100012d2:	50d1      	str	r1, [r2, r3]
	while(VADC_G0->ARBCFG & (1UL<<28) || VADC_G1->ARBCFG & (1UL<<28));
100012d4:	46c0      	nop			; (mov r8, r8)
100012d6:	4a7e      	ldr	r2, [pc, #504]	; (100014d0 <InitADC+0x244>)
100012d8:	2380      	movs	r3, #128	; 0x80
100012da:	58d2      	ldr	r2, [r2, r3]
100012dc:	2380      	movs	r3, #128	; 0x80
100012de:	055b      	lsls	r3, r3, #21
100012e0:	4013      	ands	r3, r2
100012e2:	d1f8      	bne.n	100012d6 <InitADC+0x4a>
100012e4:	4a7b      	ldr	r2, [pc, #492]	; (100014d4 <InitADC+0x248>)
100012e6:	2380      	movs	r3, #128	; 0x80
100012e8:	58d2      	ldr	r2, [r2, r3]
100012ea:	2380      	movs	r3, #128	; 0x80
100012ec:	055b      	lsls	r3, r3, #21
100012ee:	4013      	ands	r3, r2
100012f0:	d1f1      	bne.n	100012d6 <InitADC+0x4a>

	//Priority Channel
	VADC_G0->CHASS |= 0x07UL;
100012f2:	4a77      	ldr	r2, [pc, #476]	; (100014d0 <InitADC+0x244>)
100012f4:	4976      	ldr	r1, [pc, #472]	; (100014d0 <InitADC+0x244>)
100012f6:	2388      	movs	r3, #136	; 0x88
100012f8:	58cb      	ldr	r3, [r1, r3]
100012fa:	2107      	movs	r1, #7
100012fc:	4319      	orrs	r1, r3
100012fe:	2388      	movs	r3, #136	; 0x88
10001300:	50d1      	str	r1, [r2, r3]
	VADC_G1->CHASS |= 0x02UL;
10001302:	4a74      	ldr	r2, [pc, #464]	; (100014d4 <InitADC+0x248>)
10001304:	4973      	ldr	r1, [pc, #460]	; (100014d4 <InitADC+0x248>)
10001306:	2388      	movs	r3, #136	; 0x88
10001308:	58cb      	ldr	r3, [r1, r3]
1000130a:	2102      	movs	r1, #2
1000130c:	4319      	orrs	r1, r3
1000130e:	2388      	movs	r3, #136	; 0x88
10001310:	50d1      	str	r1, [r2, r3]

	//Input class
	VADC_G0->CHCTR[0] |= 0x341UL;
10001312:	4a6f      	ldr	r2, [pc, #444]	; (100014d0 <InitADC+0x244>)
10001314:	496e      	ldr	r1, [pc, #440]	; (100014d0 <InitADC+0x244>)
10001316:	2380      	movs	r3, #128	; 0x80
10001318:	009b      	lsls	r3, r3, #2
1000131a:	58cb      	ldr	r3, [r1, r3]
1000131c:	496f      	ldr	r1, [pc, #444]	; (100014dc <InitADC+0x250>)
1000131e:	4319      	orrs	r1, r3
10001320:	2380      	movs	r3, #128	; 0x80
10001322:	009b      	lsls	r3, r3, #2
10001324:	50d1      	str	r1, [r2, r3]
	VADC_G0->CHCTR[1] |= 0x341UL;
10001326:	4a6a      	ldr	r2, [pc, #424]	; (100014d0 <InitADC+0x244>)
10001328:	4969      	ldr	r1, [pc, #420]	; (100014d0 <InitADC+0x244>)
1000132a:	2381      	movs	r3, #129	; 0x81
1000132c:	009b      	lsls	r3, r3, #2
1000132e:	58cb      	ldr	r3, [r1, r3]
10001330:	496a      	ldr	r1, [pc, #424]	; (100014dc <InitADC+0x250>)
10001332:	4319      	orrs	r1, r3
10001334:	2381      	movs	r3, #129	; 0x81
10001336:	009b      	lsls	r3, r3, #2
10001338:	50d1      	str	r1, [r2, r3]
	VADC_G0->CHCTR[2] |= 0x341UL;
1000133a:	4a65      	ldr	r2, [pc, #404]	; (100014d0 <InitADC+0x244>)
1000133c:	4964      	ldr	r1, [pc, #400]	; (100014d0 <InitADC+0x244>)
1000133e:	2382      	movs	r3, #130	; 0x82
10001340:	009b      	lsls	r3, r3, #2
10001342:	58cb      	ldr	r3, [r1, r3]
10001344:	4965      	ldr	r1, [pc, #404]	; (100014dc <InitADC+0x250>)
10001346:	4319      	orrs	r1, r3
10001348:	2382      	movs	r3, #130	; 0x82
1000134a:	009b      	lsls	r3, r3, #2
1000134c:	50d1      	str	r1, [r2, r3]
	VADC_G0->RCR[0] |= 1UL <<31;
1000134e:	4a60      	ldr	r2, [pc, #384]	; (100014d0 <InitADC+0x244>)
10001350:	495f      	ldr	r1, [pc, #380]	; (100014d0 <InitADC+0x244>)
10001352:	23a0      	movs	r3, #160	; 0xa0
10001354:	009b      	lsls	r3, r3, #2
10001356:	58cb      	ldr	r3, [r1, r3]
10001358:	2180      	movs	r1, #128	; 0x80
1000135a:	0609      	lsls	r1, r1, #24
1000135c:	4319      	orrs	r1, r3
1000135e:	23a0      	movs	r3, #160	; 0xa0
10001360:	009b      	lsls	r3, r3, #2
10001362:	50d1      	str	r1, [r2, r3]

	VADC_G1->CHCTR[1] |= 1UL;
10001364:	4a5b      	ldr	r2, [pc, #364]	; (100014d4 <InitADC+0x248>)
10001366:	495b      	ldr	r1, [pc, #364]	; (100014d4 <InitADC+0x248>)
10001368:	2381      	movs	r3, #129	; 0x81
1000136a:	009b      	lsls	r3, r3, #2
1000136c:	58cb      	ldr	r3, [r1, r3]
1000136e:	2101      	movs	r1, #1
10001370:	4319      	orrs	r1, r3
10001372:	2381      	movs	r3, #129	; 0x81
10001374:	009b      	lsls	r3, r3, #2
10001376:	50d1      	str	r1, [r2, r3]
	VADC_G1->CHCTR[1] |= 1UL << 16;
10001378:	4a56      	ldr	r2, [pc, #344]	; (100014d4 <InitADC+0x248>)
1000137a:	4956      	ldr	r1, [pc, #344]	; (100014d4 <InitADC+0x248>)
1000137c:	2381      	movs	r3, #129	; 0x81
1000137e:	009b      	lsls	r3, r3, #2
10001380:	58cb      	ldr	r3, [r1, r3]
10001382:	2180      	movs	r1, #128	; 0x80
10001384:	0249      	lsls	r1, r1, #9
10001386:	4319      	orrs	r1, r3
10001388:	2381      	movs	r3, #129	; 0x81
1000138a:	009b      	lsls	r3, r3, #2
1000138c:	50d1      	str	r1, [r2, r3]
	VADC_G1->RCR[1] |= 1UL <<31;
1000138e:	4a51      	ldr	r2, [pc, #324]	; (100014d4 <InitADC+0x248>)
10001390:	4950      	ldr	r1, [pc, #320]	; (100014d4 <InitADC+0x248>)
10001392:	23a1      	movs	r3, #161	; 0xa1
10001394:	009b      	lsls	r3, r3, #2
10001396:	58cb      	ldr	r3, [r1, r3]
10001398:	2180      	movs	r1, #128	; 0x80
1000139a:	0609      	lsls	r1, r1, #24
1000139c:	4319      	orrs	r1, r3
1000139e:	23a1      	movs	r3, #161	; 0xa1
100013a0:	009b      	lsls	r3, r3, #2
100013a2:	50d1      	str	r1, [r2, r3]

	//External Trigger
	VADC_G0->ASCTRL |= 0xC800UL;
100013a4:	4a4a      	ldr	r2, [pc, #296]	; (100014d0 <InitADC+0x244>)
100013a6:	494a      	ldr	r1, [pc, #296]	; (100014d0 <InitADC+0x244>)
100013a8:	2390      	movs	r3, #144	; 0x90
100013aa:	005b      	lsls	r3, r3, #1
100013ac:	58cb      	ldr	r3, [r1, r3]
100013ae:	21c8      	movs	r1, #200	; 0xc8
100013b0:	0209      	lsls	r1, r1, #8
100013b2:	4319      	orrs	r1, r3
100013b4:	2390      	movs	r3, #144	; 0x90
100013b6:	005b      	lsls	r3, r3, #1
100013b8:	50d1      	str	r1, [r2, r3]
	VADC_G1->ASCTRL |= 0xC800UL;
100013ba:	4a46      	ldr	r2, [pc, #280]	; (100014d4 <InitADC+0x248>)
100013bc:	4945      	ldr	r1, [pc, #276]	; (100014d4 <InitADC+0x248>)
100013be:	2390      	movs	r3, #144	; 0x90
100013c0:	005b      	lsls	r3, r3, #1
100013c2:	58cb      	ldr	r3, [r1, r3]
100013c4:	21c8      	movs	r1, #200	; 0xc8
100013c6:	0209      	lsls	r1, r1, #8
100013c8:	4319      	orrs	r1, r3
100013ca:	2390      	movs	r3, #144	; 0x90
100013cc:	005b      	lsls	r3, r3, #1
100013ce:	50d1      	str	r1, [r2, r3]

	//Gating mode
	VADC_G0->ASMR |= 0x05UL;
100013d0:	4a3f      	ldr	r2, [pc, #252]	; (100014d0 <InitADC+0x244>)
100013d2:	493f      	ldr	r1, [pc, #252]	; (100014d0 <InitADC+0x244>)
100013d4:	2392      	movs	r3, #146	; 0x92
100013d6:	005b      	lsls	r3, r3, #1
100013d8:	58cb      	ldr	r3, [r1, r3]
100013da:	2105      	movs	r1, #5
100013dc:	4319      	orrs	r1, r3
100013de:	2392      	movs	r3, #146	; 0x92
100013e0:	005b      	lsls	r3, r3, #1
100013e2:	50d1      	str	r1, [r2, r3]
	VADC_G1->ASMR |= 0x05UL;
100013e4:	4a3b      	ldr	r2, [pc, #236]	; (100014d4 <InitADC+0x248>)
100013e6:	493b      	ldr	r1, [pc, #236]	; (100014d4 <InitADC+0x248>)
100013e8:	2392      	movs	r3, #146	; 0x92
100013ea:	005b      	lsls	r3, r3, #1
100013ec:	58cb      	ldr	r3, [r1, r3]
100013ee:	2105      	movs	r1, #5
100013f0:	4319      	orrs	r1, r3
100013f2:	2392      	movs	r3, #146	; 0x92
100013f4:	005b      	lsls	r3, r3, #1
100013f6:	50d1      	str	r1, [r2, r3]

	//Channel Select
	VADC_G0->ASSEL = 0x04UL;
100013f8:	4a35      	ldr	r2, [pc, #212]	; (100014d0 <InitADC+0x244>)
100013fa:	2394      	movs	r3, #148	; 0x94
100013fc:	005b      	lsls	r3, r3, #1
100013fe:	2104      	movs	r1, #4
10001400:	50d1      	str	r1, [r2, r3]
	VADC_G1->ASSEL = 0x02UL;
10001402:	4a34      	ldr	r2, [pc, #208]	; (100014d4 <InitADC+0x248>)
10001404:	2394      	movs	r3, #148	; 0x94
10001406:	005b      	lsls	r3, r3, #1
10001408:	2102      	movs	r1, #2
1000140a:	50d1      	str	r1, [r2, r3]

	//Enable Arbitration slot
	VADC_G0->ARBPR |= 0x01UL << 25;
1000140c:	4a30      	ldr	r2, [pc, #192]	; (100014d0 <InitADC+0x244>)
1000140e:	4930      	ldr	r1, [pc, #192]	; (100014d0 <InitADC+0x244>)
10001410:	2384      	movs	r3, #132	; 0x84
10001412:	58cb      	ldr	r3, [r1, r3]
10001414:	2180      	movs	r1, #128	; 0x80
10001416:	0489      	lsls	r1, r1, #18
10001418:	4319      	orrs	r1, r3
1000141a:	2384      	movs	r3, #132	; 0x84
1000141c:	50d1      	str	r1, [r2, r3]
	VADC_G1->ARBPR |= 0x01UL << 25;
1000141e:	4a2d      	ldr	r2, [pc, #180]	; (100014d4 <InitADC+0x248>)
10001420:	492c      	ldr	r1, [pc, #176]	; (100014d4 <InitADC+0x248>)
10001422:	2384      	movs	r3, #132	; 0x84
10001424:	58cb      	ldr	r3, [r1, r3]
10001426:	2180      	movs	r1, #128	; 0x80
10001428:	0489      	lsls	r1, r1, #18
1000142a:	4319      	orrs	r1, r3
1000142c:	2384      	movs	r3, #132	; 0x84
1000142e:	50d1      	str	r1, [r2, r3]

	//Service Request Software Activation Trigger
	VADC_G0->SRACT |= 0x02UL;
10001430:	4a27      	ldr	r2, [pc, #156]	; (100014d0 <InitADC+0x244>)
10001432:	4927      	ldr	r1, [pc, #156]	; (100014d0 <InitADC+0x244>)
10001434:	23e4      	movs	r3, #228	; 0xe4
10001436:	005b      	lsls	r3, r3, #1
10001438:	58cb      	ldr	r3, [r1, r3]
1000143a:	2102      	movs	r1, #2
1000143c:	4319      	orrs	r1, r3
1000143e:	23e4      	movs	r3, #228	; 0xe4
10001440:	005b      	lsls	r3, r3, #1
10001442:	50d1      	str	r1, [r2, r3]
	VADC_G0->REVNP0 |= 1UL << 0;
10001444:	4a22      	ldr	r2, [pc, #136]	; (100014d0 <InitADC+0x244>)
10001446:	4922      	ldr	r1, [pc, #136]	; (100014d0 <InitADC+0x244>)
10001448:	23d8      	movs	r3, #216	; 0xd8
1000144a:	005b      	lsls	r3, r3, #1
1000144c:	58cb      	ldr	r3, [r1, r3]
1000144e:	2101      	movs	r1, #1
10001450:	4319      	orrs	r1, r3
10001452:	23d8      	movs	r3, #216	; 0xd8
10001454:	005b      	lsls	r3, r3, #1
10001456:	50d1      	str	r1, [r2, r3]
	NVIC_SetPriority((IRQn_Type)18, 0);
10001458:	2012      	movs	r0, #18
1000145a:	2100      	movs	r1, #0
1000145c:	f7ff fea6 	bl	100011ac <NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type)18);
10001460:	2012      	movs	r0, #18
10001462:	f7ff fe8d 	bl	10001180 <NVIC_EnableIRQ>
	VADC_G1->SRACT |= 0x02UL;
10001466:	4a1b      	ldr	r2, [pc, #108]	; (100014d4 <InitADC+0x248>)
10001468:	491a      	ldr	r1, [pc, #104]	; (100014d4 <InitADC+0x248>)
1000146a:	23e4      	movs	r3, #228	; 0xe4
1000146c:	005b      	lsls	r3, r3, #1
1000146e:	58cb      	ldr	r3, [r1, r3]
10001470:	2102      	movs	r1, #2
10001472:	4319      	orrs	r1, r3
10001474:	23e4      	movs	r3, #228	; 0xe4
10001476:	005b      	lsls	r3, r3, #1
10001478:	50d1      	str	r1, [r2, r3]
	VADC_G1->REVNP0 |= 1UL << 4;
1000147a:	4a16      	ldr	r2, [pc, #88]	; (100014d4 <InitADC+0x248>)
1000147c:	4915      	ldr	r1, [pc, #84]	; (100014d4 <InitADC+0x248>)
1000147e:	23d8      	movs	r3, #216	; 0xd8
10001480:	005b      	lsls	r3, r3, #1
10001482:	58cb      	ldr	r3, [r1, r3]
10001484:	2110      	movs	r1, #16
10001486:	4319      	orrs	r1, r3
10001488:	23d8      	movs	r3, #216	; 0xd8
1000148a:	005b      	lsls	r3, r3, #1
1000148c:	50d1      	str	r1, [r2, r3]
	NVIC_SetPriority((IRQn_Type)20, 2);
1000148e:	2014      	movs	r0, #20
10001490:	2102      	movs	r1, #2
10001492:	f7ff fe8b 	bl	100011ac <NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type)20);
10001496:	2014      	movs	r0, #20
10001498:	f7ff fe72 	bl	10001180 <NVIC_EnableIRQ>

	//IO enable
	PORT2->PDISC &= (~((uint32_t)0x1U << 6));		//Pin 2.6
1000149c:	4b10      	ldr	r3, [pc, #64]	; (100014e0 <InitADC+0x254>)
1000149e:	4a10      	ldr	r2, [pc, #64]	; (100014e0 <InitADC+0x254>)
100014a0:	6e12      	ldr	r2, [r2, #96]	; 0x60
100014a2:	2140      	movs	r1, #64	; 0x40
100014a4:	438a      	bics	r2, r1
100014a6:	661a      	str	r2, [r3, #96]	; 0x60
	PORT2->PDISC &= (~((uint32_t)0x1U << 8));		//Pin 2.8
100014a8:	4b0d      	ldr	r3, [pc, #52]	; (100014e0 <InitADC+0x254>)
100014aa:	4a0d      	ldr	r2, [pc, #52]	; (100014e0 <InitADC+0x254>)
100014ac:	6e11      	ldr	r1, [r2, #96]	; 0x60
100014ae:	4a0d      	ldr	r2, [pc, #52]	; (100014e4 <InitADC+0x258>)
100014b0:	400a      	ands	r2, r1
100014b2:	661a      	str	r2, [r3, #96]	; 0x60
	PORT2->PDISC &= (~((uint32_t)0x1U << 9));		//Pin 2.9
100014b4:	4b0a      	ldr	r3, [pc, #40]	; (100014e0 <InitADC+0x254>)
100014b6:	4a0a      	ldr	r2, [pc, #40]	; (100014e0 <InitADC+0x254>)
100014b8:	6e11      	ldr	r1, [r2, #96]	; 0x60
100014ba:	4a0b      	ldr	r2, [pc, #44]	; (100014e8 <InitADC+0x25c>)
100014bc:	400a      	ands	r2, r1
100014be:	661a      	str	r2, [r3, #96]	; 0x60

	PORT2->PDISC &= (~((uint32_t)0x1U << 7));		//Pin 2.7
100014c0:	4b07      	ldr	r3, [pc, #28]	; (100014e0 <InitADC+0x254>)
100014c2:	4a07      	ldr	r2, [pc, #28]	; (100014e0 <InitADC+0x254>)
100014c4:	6e12      	ldr	r2, [r2, #96]	; 0x60
100014c6:	2180      	movs	r1, #128	; 0x80
100014c8:	438a      	bics	r2, r1
100014ca:	661a      	str	r2, [r3, #96]	; 0x60
}
100014cc:	46bd      	mov	sp, r7
100014ce:	bd80      	pop	{r7, pc}
100014d0:	48030400 	.word	0x48030400
100014d4:	48030800 	.word	0x48030800
100014d8:	48030000 	.word	0x48030000
100014dc:	00000341 	.word	0x00000341
100014e0:	40040200 	.word	0x40040200
100014e4:	fffffeff 	.word	0xfffffeff
100014e8:	fffffdff 	.word	0xfffffdff

100014ec <VADC0_G0_1_IRQHandler>:

void ZeroCrossing_ISR()
{
100014ec:	b580      	push	{r7, lr}
100014ee:	af00      	add	r7, sp, #0
	if(VADC_G0->RES[0] & (1UL << 31))
100014f0:	4a23      	ldr	r2, [pc, #140]	; (10001580 <VADC0_G0_1_IRQHandler+0x94>)
100014f2:	23c0      	movs	r3, #192	; 0xc0
100014f4:	009b      	lsls	r3, r3, #2
100014f6:	58d3      	ldr	r3, [r2, r3]
100014f8:	2b00      	cmp	r3, #0
100014fa:	da3e      	bge.n	1000157a <VADC0_G0_1_IRQHandler+0x8e>
	{
		if((GetPhaseState() % 2 == 0 && ((uint16_t) VADC_G0->RES[0]) < ADCReference) ||
100014fc:	f000 fb4e 	bl	10001b9c <GetPhaseState>
10001500:	1c03      	adds	r3, r0, #0
10001502:	1c1a      	adds	r2, r3, #0
10001504:	2301      	movs	r3, #1
10001506:	4013      	ands	r3, r2
10001508:	b2db      	uxtb	r3, r3
1000150a:	2b00      	cmp	r3, #0
1000150c:	d109      	bne.n	10001522 <VADC0_G0_1_IRQHandler+0x36>
1000150e:	4a1c      	ldr	r2, [pc, #112]	; (10001580 <VADC0_G0_1_IRQHandler+0x94>)
10001510:	23c0      	movs	r3, #192	; 0xc0
10001512:	009b      	lsls	r3, r3, #2
10001514:	58d3      	ldr	r3, [r2, r3]
10001516:	b29a      	uxth	r2, r3
10001518:	4b1a      	ldr	r3, [pc, #104]	; (10001584 <VADC0_G0_1_IRQHandler+0x98>)
1000151a:	881b      	ldrh	r3, [r3, #0]
1000151c:	b29b      	uxth	r3, r3
1000151e:	429a      	cmp	r2, r3
10001520:	d312      	bcc.n	10001548 <VADC0_G0_1_IRQHandler+0x5c>
		   (GetPhaseState() % 2 != 0 && ((uint16_t) VADC_G0->RES[0]) > ADCReference))
10001522:	f000 fb3b 	bl	10001b9c <GetPhaseState>
10001526:	1c03      	adds	r3, r0, #0
10001528:	1c1a      	adds	r2, r3, #0
1000152a:	2301      	movs	r3, #1
1000152c:	4013      	ands	r3, r2
1000152e:	b2db      	uxtb	r3, r3

void ZeroCrossing_ISR()
{
	if(VADC_G0->RES[0] & (1UL << 31))
	{
		if((GetPhaseState() % 2 == 0 && ((uint16_t) VADC_G0->RES[0]) < ADCReference) ||
10001530:	2b00      	cmp	r3, #0
10001532:	d022      	beq.n	1000157a <VADC0_G0_1_IRQHandler+0x8e>
		   (GetPhaseState() % 2 != 0 && ((uint16_t) VADC_G0->RES[0]) > ADCReference))
10001534:	4a12      	ldr	r2, [pc, #72]	; (10001580 <VADC0_G0_1_IRQHandler+0x94>)
10001536:	23c0      	movs	r3, #192	; 0xc0
10001538:	009b      	lsls	r3, r3, #2
1000153a:	58d3      	ldr	r3, [r2, r3]
1000153c:	b29a      	uxth	r2, r3
1000153e:	4b11      	ldr	r3, [pc, #68]	; (10001584 <VADC0_G0_1_IRQHandler+0x98>)
10001540:	881b      	ldrh	r3, [r3, #0]
10001542:	b29b      	uxth	r3, r3
10001544:	429a      	cmp	r2, r3
10001546:	d918      	bls.n	1000157a <VADC0_G0_1_IRQHandler+0x8e>
		{
			CCU40_CC40->TCCLR|=0x02;
10001548:	4b0f      	ldr	r3, [pc, #60]	; (10001588 <VADC0_G0_1_IRQHandler+0x9c>)
1000154a:	4a0f      	ldr	r2, [pc, #60]	; (10001588 <VADC0_G0_1_IRQHandler+0x9c>)
1000154c:	6912      	ldr	r2, [r2, #16]
1000154e:	2102      	movs	r1, #2
10001550:	430a      	orrs	r2, r1
10001552:	611a      	str	r2, [r3, #16]
			CCU80_CC83->INTE &= ~(1UL<<4);
10001554:	4a0d      	ldr	r2, [pc, #52]	; (1000158c <VADC0_G0_1_IRQHandler+0xa0>)
10001556:	490d      	ldr	r1, [pc, #52]	; (1000158c <VADC0_G0_1_IRQHandler+0xa0>)
10001558:	23a4      	movs	r3, #164	; 0xa4
1000155a:	58cb      	ldr	r3, [r1, r3]
1000155c:	2110      	movs	r1, #16
1000155e:	1c18      	adds	r0, r3, #0
10001560:	4388      	bics	r0, r1
10001562:	1c01      	adds	r1, r0, #0
10001564:	23a4      	movs	r3, #164	; 0xa4
10001566:	50d1      	str	r1, [r2, r3]
			IO004_TogglePin(IO004_Handle0);
10001568:	4b09      	ldr	r3, [pc, #36]	; (10001590 <VADC0_G0_1_IRQHandler+0xa4>)
1000156a:	685b      	ldr	r3, [r3, #4]
1000156c:	4a08      	ldr	r2, [pc, #32]	; (10001590 <VADC0_G0_1_IRQHandler+0xa4>)
1000156e:	7852      	ldrb	r2, [r2, #1]
10001570:	4908      	ldr	r1, [pc, #32]	; (10001594 <VADC0_G0_1_IRQHandler+0xa8>)
10001572:	1c08      	adds	r0, r1, #0
10001574:	4090      	lsls	r0, r2
10001576:	1c02      	adds	r2, r0, #0
10001578:	605a      	str	r2, [r3, #4]
		}
	}
}
1000157a:	46bd      	mov	sp, r7
1000157c:	bd80      	pop	{r7, pc}
1000157e:	46c0      	nop			; (mov r8, r8)
10001580:	48030400 	.word	0x48030400
10001584:	20000950 	.word	0x20000950
10001588:	48040100 	.word	0x48040100
1000158c:	50000400 	.word	0x50000400
10001590:	100063ec 	.word	0x100063ec
10001594:	00010001 	.word	0x00010001

10001598 <VADC0_G1_1_IRQHandler>:

void ReferenceResult_ISR()
{
10001598:	b580      	push	{r7, lr}
1000159a:	af00      	add	r7, sp, #0
	if(VADC_G1->RES[1] & (1UL << 31))
1000159c:	4a07      	ldr	r2, [pc, #28]	; (100015bc <VADC0_G1_1_IRQHandler+0x24>)
1000159e:	23c1      	movs	r3, #193	; 0xc1
100015a0:	009b      	lsls	r3, r3, #2
100015a2:	58d3      	ldr	r3, [r2, r3]
100015a4:	2b00      	cmp	r3, #0
100015a6:	da06      	bge.n	100015b6 <VADC0_G1_1_IRQHandler+0x1e>
		ADCReference = VADC_G1->RES[1];
100015a8:	4a04      	ldr	r2, [pc, #16]	; (100015bc <VADC0_G1_1_IRQHandler+0x24>)
100015aa:	23c1      	movs	r3, #193	; 0xc1
100015ac:	009b      	lsls	r3, r3, #2
100015ae:	58d3      	ldr	r3, [r2, r3]
100015b0:	b29a      	uxth	r2, r3
100015b2:	4b03      	ldr	r3, [pc, #12]	; (100015c0 <VADC0_G1_1_IRQHandler+0x28>)
100015b4:	801a      	strh	r2, [r3, #0]
}
100015b6:	46bd      	mov	sp, r7
100015b8:	bd80      	pop	{r7, pc}
100015ba:	46c0      	nop			; (mov r8, r8)
100015bc:	48030800 	.word	0x48030800
100015c0:	20000950 	.word	0x20000950

100015c4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
100015c4:	b580      	push	{r7, lr}
100015c6:	b082      	sub	sp, #8
100015c8:	af00      	add	r7, sp, #0
100015ca:	1c02      	adds	r2, r0, #0
100015cc:	1dfb      	adds	r3, r7, #7
100015ce:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100015d0:	4b06      	ldr	r3, [pc, #24]	; (100015ec <NVIC_EnableIRQ+0x28>)
100015d2:	1dfa      	adds	r2, r7, #7
100015d4:	7812      	ldrb	r2, [r2, #0]
100015d6:	1c11      	adds	r1, r2, #0
100015d8:	221f      	movs	r2, #31
100015da:	400a      	ands	r2, r1
100015dc:	2101      	movs	r1, #1
100015de:	1c08      	adds	r0, r1, #0
100015e0:	4090      	lsls	r0, r2
100015e2:	1c02      	adds	r2, r0, #0
100015e4:	601a      	str	r2, [r3, #0]
}
100015e6:	46bd      	mov	sp, r7
100015e8:	b002      	add	sp, #8
100015ea:	bd80      	pop	{r7, pc}
100015ec:	e000e100 	.word	0xe000e100

100015f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100015f0:	b5b0      	push	{r4, r5, r7, lr}
100015f2:	b082      	sub	sp, #8
100015f4:	af00      	add	r7, sp, #0
100015f6:	1c02      	adds	r2, r0, #0
100015f8:	6039      	str	r1, [r7, #0]
100015fa:	1dfb      	adds	r3, r7, #7
100015fc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
100015fe:	1dfb      	adds	r3, r7, #7
10001600:	781b      	ldrb	r3, [r3, #0]
10001602:	2b7f      	cmp	r3, #127	; 0x7f
10001604:	d932      	bls.n	1000166c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001606:	4930      	ldr	r1, [pc, #192]	; (100016c8 <NVIC_SetPriority+0xd8>)
10001608:	1dfb      	adds	r3, r7, #7
1000160a:	781b      	ldrb	r3, [r3, #0]
1000160c:	1c1a      	adds	r2, r3, #0
1000160e:	230f      	movs	r3, #15
10001610:	4013      	ands	r3, r2
10001612:	3b08      	subs	r3, #8
10001614:	0898      	lsrs	r0, r3, #2
10001616:	4a2c      	ldr	r2, [pc, #176]	; (100016c8 <NVIC_SetPriority+0xd8>)
10001618:	1dfb      	adds	r3, r7, #7
1000161a:	781b      	ldrb	r3, [r3, #0]
1000161c:	1c1c      	adds	r4, r3, #0
1000161e:	230f      	movs	r3, #15
10001620:	4023      	ands	r3, r4
10001622:	3b08      	subs	r3, #8
10001624:	089b      	lsrs	r3, r3, #2
10001626:	3306      	adds	r3, #6
10001628:	009b      	lsls	r3, r3, #2
1000162a:	18d3      	adds	r3, r2, r3
1000162c:	685b      	ldr	r3, [r3, #4]
1000162e:	1dfa      	adds	r2, r7, #7
10001630:	7812      	ldrb	r2, [r2, #0]
10001632:	1c14      	adds	r4, r2, #0
10001634:	2203      	movs	r2, #3
10001636:	4022      	ands	r2, r4
10001638:	00d2      	lsls	r2, r2, #3
1000163a:	24ff      	movs	r4, #255	; 0xff
1000163c:	1c25      	adds	r5, r4, #0
1000163e:	4095      	lsls	r5, r2
10001640:	1c2a      	adds	r2, r5, #0
10001642:	43d2      	mvns	r2, r2
10001644:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10001646:	683b      	ldr	r3, [r7, #0]
10001648:	019c      	lsls	r4, r3, #6
1000164a:	23ff      	movs	r3, #255	; 0xff
1000164c:	401c      	ands	r4, r3
1000164e:	1dfb      	adds	r3, r7, #7
10001650:	781b      	ldrb	r3, [r3, #0]
10001652:	1c1d      	adds	r5, r3, #0
10001654:	2303      	movs	r3, #3
10001656:	402b      	ands	r3, r5
10001658:	00db      	lsls	r3, r3, #3
1000165a:	1c25      	adds	r5, r4, #0
1000165c:	409d      	lsls	r5, r3
1000165e:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001660:	431a      	orrs	r2, r3
10001662:	1d83      	adds	r3, r0, #6
10001664:	009b      	lsls	r3, r3, #2
10001666:	18cb      	adds	r3, r1, r3
10001668:	605a      	str	r2, [r3, #4]
1000166a:	e029      	b.n	100016c0 <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
1000166c:	4b17      	ldr	r3, [pc, #92]	; (100016cc <NVIC_SetPriority+0xdc>)
1000166e:	1dfa      	adds	r2, r7, #7
10001670:	7812      	ldrb	r2, [r2, #0]
10001672:	b252      	sxtb	r2, r2
10001674:	0892      	lsrs	r2, r2, #2
10001676:	4915      	ldr	r1, [pc, #84]	; (100016cc <NVIC_SetPriority+0xdc>)
10001678:	1df8      	adds	r0, r7, #7
1000167a:	7800      	ldrb	r0, [r0, #0]
1000167c:	b240      	sxtb	r0, r0
1000167e:	0880      	lsrs	r0, r0, #2
10001680:	30c0      	adds	r0, #192	; 0xc0
10001682:	0080      	lsls	r0, r0, #2
10001684:	5841      	ldr	r1, [r0, r1]
10001686:	1df8      	adds	r0, r7, #7
10001688:	7800      	ldrb	r0, [r0, #0]
1000168a:	1c04      	adds	r4, r0, #0
1000168c:	2003      	movs	r0, #3
1000168e:	4020      	ands	r0, r4
10001690:	00c0      	lsls	r0, r0, #3
10001692:	24ff      	movs	r4, #255	; 0xff
10001694:	1c25      	adds	r5, r4, #0
10001696:	4085      	lsls	r5, r0
10001698:	1c28      	adds	r0, r5, #0
1000169a:	43c0      	mvns	r0, r0
1000169c:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
1000169e:	6839      	ldr	r1, [r7, #0]
100016a0:	018c      	lsls	r4, r1, #6
100016a2:	21ff      	movs	r1, #255	; 0xff
100016a4:	400c      	ands	r4, r1
100016a6:	1df9      	adds	r1, r7, #7
100016a8:	7809      	ldrb	r1, [r1, #0]
100016aa:	1c0d      	adds	r5, r1, #0
100016ac:	2103      	movs	r1, #3
100016ae:	4029      	ands	r1, r5
100016b0:	00c9      	lsls	r1, r1, #3
100016b2:	1c25      	adds	r5, r4, #0
100016b4:	408d      	lsls	r5, r1
100016b6:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
100016b8:	4301      	orrs	r1, r0
100016ba:	32c0      	adds	r2, #192	; 0xc0
100016bc:	0092      	lsls	r2, r2, #2
100016be:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
100016c0:	46bd      	mov	sp, r7
100016c2:	b002      	add	sp, #8
100016c4:	bdb0      	pop	{r4, r5, r7, pc}
100016c6:	46c0      	nop			; (mov r8, r8)
100016c8:	e000ed00 	.word	0xe000ed00
100016cc:	e000e100 	.word	0xe000e100

100016d0 <InitBlockCommutation>:

volatile int8_t PhaseState=0;
volatile enum MotorState motorState = Stopped;

void InitBlockCommutation()
{
100016d0:	b598      	push	{r3, r4, r7, lr}
100016d2:	af00      	add	r7, sp, #0
	//Set Period and Compare for all slices
	InnerPWMPeriod=((uint32_t)(1000000000.0f/(InnerPWMFreq*31.25)))-(uint32_t)1;
100016d4:	4b90      	ldr	r3, [pc, #576]	; (10001918 <InitBlockCommutation+0x248>)
100016d6:	681b      	ldr	r3, [r3, #0]
100016d8:	1c18      	adds	r0, r3, #0
100016da:	f004 fc89 	bl	10005ff0 <__aeabi_f2d>
100016de:	1c03      	adds	r3, r0, #0
100016e0:	1c0c      	adds	r4, r1, #0
100016e2:	1c18      	adds	r0, r3, #0
100016e4:	1c21      	adds	r1, r4, #0
100016e6:	4b89      	ldr	r3, [pc, #548]	; (1000190c <InitBlockCommutation+0x23c>)
100016e8:	4a87      	ldr	r2, [pc, #540]	; (10001908 <InitBlockCommutation+0x238>)
100016ea:	f003 fe59 	bl	100053a0 <__aeabi_dmul>
100016ee:	1c03      	adds	r3, r0, #0
100016f0:	1c0c      	adds	r4, r1, #0
100016f2:	4887      	ldr	r0, [pc, #540]	; (10001910 <InitBlockCommutation+0x240>)
100016f4:	4987      	ldr	r1, [pc, #540]	; (10001914 <InitBlockCommutation+0x244>)
100016f6:	1c1a      	adds	r2, r3, #0
100016f8:	1c23      	adds	r3, r4, #0
100016fa:	f003 fb75 	bl	10004de8 <__aeabi_ddiv>
100016fe:	1c03      	adds	r3, r0, #0
10001700:	1c0c      	adds	r4, r1, #0
10001702:	1c18      	adds	r0, r3, #0
10001704:	1c21      	adds	r1, r4, #0
10001706:	f002 fddf 	bl	100042c8 <__aeabi_d2uiz>
1000170a:	1c03      	adds	r3, r0, #0
1000170c:	1e5a      	subs	r2, r3, #1
1000170e:	4b83      	ldr	r3, [pc, #524]	; (1000191c <InitBlockCommutation+0x24c>)
10001710:	601a      	str	r2, [r3, #0]
	InnerPWMCompare=InnerPWMPeriod*CurrentDutyCycleStart;
10001712:	4b82      	ldr	r3, [pc, #520]	; (1000191c <InitBlockCommutation+0x24c>)
10001714:	681b      	ldr	r3, [r3, #0]
10001716:	1c18      	adds	r0, r3, #0
10001718:	f003 fb12 	bl	10004d40 <__aeabi_ui2f>
1000171c:	1c02      	adds	r2, r0, #0
1000171e:	4b80      	ldr	r3, [pc, #512]	; (10001920 <InitBlockCommutation+0x250>)
10001720:	681b      	ldr	r3, [r3, #0]
10001722:	1c10      	adds	r0, r2, #0
10001724:	1c19      	adds	r1, r3, #0
10001726:	f002 ffe1 	bl	100046ec <__aeabi_fmul>
1000172a:	1c03      	adds	r3, r0, #0
1000172c:	1c18      	adds	r0, r3, #0
1000172e:	f002 fdb1 	bl	10004294 <__aeabi_f2uiz>
10001732:	1c02      	adds	r2, r0, #0
10001734:	4b7b      	ldr	r3, [pc, #492]	; (10001924 <InitBlockCommutation+0x254>)
10001736:	601a      	str	r2, [r3, #0]
	CCU80_CC80->PRS = CCU80_CC81->PRS = CCU80_CC82->PRS = CCU80_CC83->PRS = InnerPWMPeriod;
10001738:	4b7b      	ldr	r3, [pc, #492]	; (10001928 <InitBlockCommutation+0x258>)
1000173a:	497c      	ldr	r1, [pc, #496]	; (1000192c <InitBlockCommutation+0x25c>)
1000173c:	487c      	ldr	r0, [pc, #496]	; (10001930 <InitBlockCommutation+0x260>)
1000173e:	4c7d      	ldr	r4, [pc, #500]	; (10001934 <InitBlockCommutation+0x264>)
10001740:	4a76      	ldr	r2, [pc, #472]	; (1000191c <InitBlockCommutation+0x24c>)
10001742:	6812      	ldr	r2, [r2, #0]
10001744:	6362      	str	r2, [r4, #52]	; 0x34
10001746:	6342      	str	r2, [r0, #52]	; 0x34
10001748:	634a      	str	r2, [r1, #52]	; 0x34
1000174a:	635a      	str	r2, [r3, #52]	; 0x34
	CCU80_CC80->CR1S = InnerPWMCompare;
1000174c:	4b76      	ldr	r3, [pc, #472]	; (10001928 <InitBlockCommutation+0x258>)
1000174e:	4a75      	ldr	r2, [pc, #468]	; (10001924 <InitBlockCommutation+0x254>)
10001750:	6812      	ldr	r2, [r2, #0]
10001752:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU80_CC80->CR2S = InnerPWMPeriod+1;
10001754:	4b74      	ldr	r3, [pc, #464]	; (10001928 <InitBlockCommutation+0x258>)
10001756:	4a71      	ldr	r2, [pc, #452]	; (1000191c <InitBlockCommutation+0x24c>)
10001758:	6812      	ldr	r2, [r2, #0]
1000175a:	3201      	adds	r2, #1
1000175c:	645a      	str	r2, [r3, #68]	; 0x44
	CCU80_CC81->CR1S = 0;
1000175e:	4b73      	ldr	r3, [pc, #460]	; (1000192c <InitBlockCommutation+0x25c>)
10001760:	2200      	movs	r2, #0
10001762:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU80_CC81->CR2S = 0;
10001764:	4b71      	ldr	r3, [pc, #452]	; (1000192c <InitBlockCommutation+0x25c>)
10001766:	2200      	movs	r2, #0
10001768:	645a      	str	r2, [r3, #68]	; 0x44
	CCU80_CC82->CR1S = 0;
1000176a:	4b71      	ldr	r3, [pc, #452]	; (10001930 <InitBlockCommutation+0x260>)
1000176c:	2200      	movs	r2, #0
1000176e:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU80_CC82->CR2S = InnerPWMPeriod+1;
10001770:	4b6f      	ldr	r3, [pc, #444]	; (10001930 <InitBlockCommutation+0x260>)
10001772:	4a6a      	ldr	r2, [pc, #424]	; (1000191c <InitBlockCommutation+0x24c>)
10001774:	6812      	ldr	r2, [r2, #0]
10001776:	3201      	adds	r2, #1
10001778:	645a      	str	r2, [r3, #68]	; 0x44
	CCU80_CC83->CR1S = InnerPWMCompare-1;//>>1;
1000177a:	4b6e      	ldr	r3, [pc, #440]	; (10001934 <InitBlockCommutation+0x264>)
1000177c:	4a69      	ldr	r2, [pc, #420]	; (10001924 <InitBlockCommutation+0x254>)
1000177e:	6812      	ldr	r2, [r2, #0]
10001780:	3a01      	subs	r2, #1
10001782:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU80_CC83->CR2S = InnerPWMCompare-1;//>>1;
10001784:	4b6b      	ldr	r3, [pc, #428]	; (10001934 <InitBlockCommutation+0x264>)
10001786:	4a67      	ldr	r2, [pc, #412]	; (10001924 <InitBlockCommutation+0x254>)
10001788:	6812      	ldr	r2, [r2, #0]
1000178a:	3a01      	subs	r2, #1
1000178c:	645a      	str	r2, [r3, #68]	; 0x44
	CCU80->GCSS |= 0x1111UL;
1000178e:	23a0      	movs	r3, #160	; 0xa0
10001790:	05db      	lsls	r3, r3, #23
10001792:	22a0      	movs	r2, #160	; 0xa0
10001794:	05d2      	lsls	r2, r2, #23
10001796:	6912      	ldr	r2, [r2, #16]
10001798:	4967      	ldr	r1, [pc, #412]	; (10001938 <InitBlockCommutation+0x268>)
1000179a:	430a      	orrs	r2, r1
1000179c:	611a      	str	r2, [r3, #16]

	//Synchronos start
	CCU80_CC80->INS |= 0x10007UL;
1000179e:	4b62      	ldr	r3, [pc, #392]	; (10001928 <InitBlockCommutation+0x258>)
100017a0:	4a61      	ldr	r2, [pc, #388]	; (10001928 <InitBlockCommutation+0x258>)
100017a2:	6812      	ldr	r2, [r2, #0]
100017a4:	4965      	ldr	r1, [pc, #404]	; (1000193c <InitBlockCommutation+0x26c>)
100017a6:	430a      	orrs	r2, r1
100017a8:	601a      	str	r2, [r3, #0]
	CCU80_CC80->CMC |= 0x1UL;
100017aa:	4b5f      	ldr	r3, [pc, #380]	; (10001928 <InitBlockCommutation+0x258>)
100017ac:	4a5e      	ldr	r2, [pc, #376]	; (10001928 <InitBlockCommutation+0x258>)
100017ae:	6852      	ldr	r2, [r2, #4]
100017b0:	2101      	movs	r1, #1
100017b2:	430a      	orrs	r2, r1
100017b4:	605a      	str	r2, [r3, #4]
	CCU80_CC81->INS |= 0x10007UL;
100017b6:	4b5d      	ldr	r3, [pc, #372]	; (1000192c <InitBlockCommutation+0x25c>)
100017b8:	4a5c      	ldr	r2, [pc, #368]	; (1000192c <InitBlockCommutation+0x25c>)
100017ba:	6812      	ldr	r2, [r2, #0]
100017bc:	495f      	ldr	r1, [pc, #380]	; (1000193c <InitBlockCommutation+0x26c>)
100017be:	430a      	orrs	r2, r1
100017c0:	601a      	str	r2, [r3, #0]
	CCU80_CC81->CMC |= 0x1UL;
100017c2:	4b5a      	ldr	r3, [pc, #360]	; (1000192c <InitBlockCommutation+0x25c>)
100017c4:	4a59      	ldr	r2, [pc, #356]	; (1000192c <InitBlockCommutation+0x25c>)
100017c6:	6852      	ldr	r2, [r2, #4]
100017c8:	2101      	movs	r1, #1
100017ca:	430a      	orrs	r2, r1
100017cc:	605a      	str	r2, [r3, #4]
	CCU80_CC82->INS |= 0x10007UL;
100017ce:	4b58      	ldr	r3, [pc, #352]	; (10001930 <InitBlockCommutation+0x260>)
100017d0:	4a57      	ldr	r2, [pc, #348]	; (10001930 <InitBlockCommutation+0x260>)
100017d2:	6812      	ldr	r2, [r2, #0]
100017d4:	4959      	ldr	r1, [pc, #356]	; (1000193c <InitBlockCommutation+0x26c>)
100017d6:	430a      	orrs	r2, r1
100017d8:	601a      	str	r2, [r3, #0]
	CCU80_CC82->CMC |= 0x1UL;
100017da:	4b55      	ldr	r3, [pc, #340]	; (10001930 <InitBlockCommutation+0x260>)
100017dc:	4a54      	ldr	r2, [pc, #336]	; (10001930 <InitBlockCommutation+0x260>)
100017de:	6852      	ldr	r2, [r2, #4]
100017e0:	2101      	movs	r1, #1
100017e2:	430a      	orrs	r2, r1
100017e4:	605a      	str	r2, [r3, #4]
	CCU80_CC83->INS |= 0x10007UL;
100017e6:	4b53      	ldr	r3, [pc, #332]	; (10001934 <InitBlockCommutation+0x264>)
100017e8:	4a52      	ldr	r2, [pc, #328]	; (10001934 <InitBlockCommutation+0x264>)
100017ea:	6812      	ldr	r2, [r2, #0]
100017ec:	4953      	ldr	r1, [pc, #332]	; (1000193c <InitBlockCommutation+0x26c>)
100017ee:	430a      	orrs	r2, r1
100017f0:	601a      	str	r2, [r3, #0]
	CCU80_CC83->CMC |= 0x1UL;
100017f2:	4b50      	ldr	r3, [pc, #320]	; (10001934 <InitBlockCommutation+0x264>)
100017f4:	4a4f      	ldr	r2, [pc, #316]	; (10001934 <InitBlockCommutation+0x264>)
100017f6:	6852      	ldr	r2, [r2, #4]
100017f8:	2101      	movs	r1, #1
100017fa:	430a      	orrs	r2, r1
100017fc:	605a      	str	r2, [r3, #4]

	//Enable slices
	CCU80->GIDLC |= 0xFUL;
100017fe:	23a0      	movs	r3, #160	; 0xa0
10001800:	05db      	lsls	r3, r3, #23
10001802:	22a0      	movs	r2, #160	; 0xa0
10001804:	05d2      	lsls	r2, r2, #23
10001806:	68d2      	ldr	r2, [r2, #12]
10001808:	210f      	movs	r1, #15
1000180a:	430a      	orrs	r2, r1
1000180c:	60da      	str	r2, [r3, #12]

	//CCU8 Channel Selection
	CCU80_CC80->CHC |= 0x1E;
1000180e:	4b46      	ldr	r3, [pc, #280]	; (10001928 <InitBlockCommutation+0x258>)
10001810:	4a45      	ldr	r2, [pc, #276]	; (10001928 <InitBlockCommutation+0x258>)
10001812:	6c92      	ldr	r2, [r2, #72]	; 0x48
10001814:	211e      	movs	r1, #30
10001816:	430a      	orrs	r2, r1
10001818:	649a      	str	r2, [r3, #72]	; 0x48
	CCU80_CC81->CHC |= 0x1E;
1000181a:	4b44      	ldr	r3, [pc, #272]	; (1000192c <InitBlockCommutation+0x25c>)
1000181c:	4a43      	ldr	r2, [pc, #268]	; (1000192c <InitBlockCommutation+0x25c>)
1000181e:	6c92      	ldr	r2, [r2, #72]	; 0x48
10001820:	211e      	movs	r1, #30
10001822:	430a      	orrs	r2, r1
10001824:	649a      	str	r2, [r3, #72]	; 0x48
	CCU80_CC82->CHC |= 0x1E;
10001826:	4b42      	ldr	r3, [pc, #264]	; (10001930 <InitBlockCommutation+0x260>)
10001828:	4a41      	ldr	r2, [pc, #260]	; (10001930 <InitBlockCommutation+0x260>)
1000182a:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000182c:	211e      	movs	r1, #30
1000182e:	430a      	orrs	r2, r1
10001830:	649a      	str	r2, [r3, #72]	; 0x48

	//IO CCU8
	PORT0->IOCR0  |= 0x15UL << 3;		//P0.0  UH
10001832:	4b43      	ldr	r3, [pc, #268]	; (10001940 <InitBlockCommutation+0x270>)
10001834:	4a42      	ldr	r2, [pc, #264]	; (10001940 <InitBlockCommutation+0x270>)
10001836:	6912      	ldr	r2, [r2, #16]
10001838:	21a8      	movs	r1, #168	; 0xa8
1000183a:	430a      	orrs	r2, r1
1000183c:	611a      	str	r2, [r3, #16]
	PORT0->IOCR0  |= 0x15UL << 27;		//P0.3  UL
1000183e:	4b40      	ldr	r3, [pc, #256]	; (10001940 <InitBlockCommutation+0x270>)
10001840:	4a3f      	ldr	r2, [pc, #252]	; (10001940 <InitBlockCommutation+0x270>)
10001842:	6912      	ldr	r2, [r2, #16]
10001844:	21a8      	movs	r1, #168	; 0xa8
10001846:	0609      	lsls	r1, r1, #24
10001848:	430a      	orrs	r2, r1
1000184a:	611a      	str	r2, [r3, #16]
	PORT0->IOCR4  |= 0x15UL << 27;		//P0.7  VH
1000184c:	4b3c      	ldr	r3, [pc, #240]	; (10001940 <InitBlockCommutation+0x270>)
1000184e:	4a3c      	ldr	r2, [pc, #240]	; (10001940 <InitBlockCommutation+0x270>)
10001850:	6952      	ldr	r2, [r2, #20]
10001852:	21a8      	movs	r1, #168	; 0xa8
10001854:	0609      	lsls	r1, r1, #24
10001856:	430a      	orrs	r2, r1
10001858:	615a      	str	r2, [r3, #20]
	PORT0->IOCR4  |= 0x15UL << 3;		//P0.4  VL
1000185a:	4b39      	ldr	r3, [pc, #228]	; (10001940 <InitBlockCommutation+0x270>)
1000185c:	4a38      	ldr	r2, [pc, #224]	; (10001940 <InitBlockCommutation+0x270>)
1000185e:	6952      	ldr	r2, [r2, #20]
10001860:	21a8      	movs	r1, #168	; 0xa8
10001862:	430a      	orrs	r2, r1
10001864:	615a      	str	r2, [r3, #20]
	//The startup software (SSW) will change the PC8 value to input pull-up device active, 00010b.
	PORT0->IOCR8 = 0x00UL;
10001866:	4b36      	ldr	r3, [pc, #216]	; (10001940 <InitBlockCommutation+0x270>)
10001868:	2200      	movs	r2, #0
1000186a:	619a      	str	r2, [r3, #24]
	PORT0->IOCR8  |= 0x15UL << 3;		//P0.8  WH
1000186c:	4b34      	ldr	r3, [pc, #208]	; (10001940 <InitBlockCommutation+0x270>)
1000186e:	4a34      	ldr	r2, [pc, #208]	; (10001940 <InitBlockCommutation+0x270>)
10001870:	6992      	ldr	r2, [r2, #24]
10001872:	21a8      	movs	r1, #168	; 0xa8
10001874:	430a      	orrs	r2, r1
10001876:	619a      	str	r2, [r3, #24]
	PORT0->IOCR8  |= 0x15UL << 27;		//P0.11 WL
10001878:	4b31      	ldr	r3, [pc, #196]	; (10001940 <InitBlockCommutation+0x270>)
1000187a:	4a31      	ldr	r2, [pc, #196]	; (10001940 <InitBlockCommutation+0x270>)
1000187c:	6992      	ldr	r2, [r2, #24]
1000187e:	21a8      	movs	r1, #168	; 0xa8
10001880:	0609      	lsls	r1, r1, #24
10001882:	430a      	orrs	r2, r1
10001884:	619a      	str	r2, [r3, #24]

	//Blockcommutation
	CCU40_CC40->PSC |= 0x08;
10001886:	4b2f      	ldr	r3, [pc, #188]	; (10001944 <InitBlockCommutation+0x274>)
10001888:	4a2e      	ldr	r2, [pc, #184]	; (10001944 <InitBlockCommutation+0x274>)
1000188a:	6a52      	ldr	r2, [r2, #36]	; 0x24
1000188c:	2108      	movs	r1, #8
1000188e:	430a      	orrs	r2, r1
10001890:	625a      	str	r2, [r3, #36]	; 0x24
	CCU40_CC40->PRS = 0xFFFF;
10001892:	4b2c      	ldr	r3, [pc, #176]	; (10001944 <InitBlockCommutation+0x274>)
10001894:	4a2c      	ldr	r2, [pc, #176]	; (10001948 <InitBlockCommutation+0x278>)
10001896:	635a      	str	r2, [r3, #52]	; 0x34
	CCU40_CC40->CRS = 0;
10001898:	4b2a      	ldr	r3, [pc, #168]	; (10001944 <InitBlockCommutation+0x274>)
1000189a:	2200      	movs	r2, #0
1000189c:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS |= (0x01UL << 0);
1000189e:	4b2b      	ldr	r3, [pc, #172]	; (1000194c <InitBlockCommutation+0x27c>)
100018a0:	4a2a      	ldr	r2, [pc, #168]	; (1000194c <InitBlockCommutation+0x27c>)
100018a2:	6912      	ldr	r2, [r2, #16]
100018a4:	2101      	movs	r1, #1
100018a6:	430a      	orrs	r2, r1
100018a8:	611a      	str	r2, [r3, #16]

	//Interrupt Compare Match Slice 0
	CCU40_CC40->INTE |= 0x04UL;
100018aa:	4a26      	ldr	r2, [pc, #152]	; (10001944 <InitBlockCommutation+0x274>)
100018ac:	4925      	ldr	r1, [pc, #148]	; (10001944 <InitBlockCommutation+0x274>)
100018ae:	23a4      	movs	r3, #164	; 0xa4
100018b0:	58cb      	ldr	r3, [r1, r3]
100018b2:	2104      	movs	r1, #4
100018b4:	4319      	orrs	r1, r3
100018b6:	23a4      	movs	r3, #164	; 0xa4
100018b8:	50d1      	str	r1, [r2, r3]
	NVIC_SetPriority((IRQn_Type)21, 0);
100018ba:	2015      	movs	r0, #21
100018bc:	2100      	movs	r1, #0
100018be:	f7ff fe97 	bl	100015f0 <NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type)21);
100018c2:	2015      	movs	r0, #21
100018c4:	f7ff fe7e 	bl	100015c4 <NVIC_EnableIRQ>

	//Enable slice
	CCU40->GIDLC |= 0x01UL;
100018c8:	4b20      	ldr	r3, [pc, #128]	; (1000194c <InitBlockCommutation+0x27c>)
100018ca:	4a20      	ldr	r2, [pc, #128]	; (1000194c <InitBlockCommutation+0x27c>)
100018cc:	68d2      	ldr	r2, [r2, #12]
100018ce:	2101      	movs	r1, #1
100018d0:	430a      	orrs	r2, r1
100018d2:	60da      	str	r2, [r3, #12]

	//ADC Trigger
	CCU80_CC83->SRS |= 2UL<<4;
100018d4:	4a17      	ldr	r2, [pc, #92]	; (10001934 <InitBlockCommutation+0x264>)
100018d6:	4917      	ldr	r1, [pc, #92]	; (10001934 <InitBlockCommutation+0x264>)
100018d8:	23a8      	movs	r3, #168	; 0xa8
100018da:	58cb      	ldr	r3, [r1, r3]
100018dc:	2120      	movs	r1, #32
100018de:	4319      	orrs	r1, r3
100018e0:	23a8      	movs	r3, #168	; 0xa8
100018e2:	50d1      	str	r1, [r2, r3]
	CCU80_CC83->SRS |= 1UL<<2;
100018e4:	4a13      	ldr	r2, [pc, #76]	; (10001934 <InitBlockCommutation+0x264>)
100018e6:	4913      	ldr	r1, [pc, #76]	; (10001934 <InitBlockCommutation+0x264>)
100018e8:	23a8      	movs	r3, #168	; 0xa8
100018ea:	58cb      	ldr	r3, [r1, r3]
100018ec:	2104      	movs	r1, #4
100018ee:	4319      	orrs	r1, r3
100018f0:	23a8      	movs	r3, #168	; 0xa8
100018f2:	50d1      	str	r1, [r2, r3]
	CCU80_CC83->INTE |= 1UL<<2;
100018f4:	4a0f      	ldr	r2, [pc, #60]	; (10001934 <InitBlockCommutation+0x264>)
100018f6:	490f      	ldr	r1, [pc, #60]	; (10001934 <InitBlockCommutation+0x264>)
100018f8:	23a4      	movs	r3, #164	; 0xa4
100018fa:	58cb      	ldr	r3, [r1, r3]
100018fc:	2104      	movs	r1, #4
100018fe:	4319      	orrs	r1, r3
10001900:	23a4      	movs	r3, #164	; 0xa4
10001902:	50d1      	str	r1, [r2, r3]
}
10001904:	46bd      	mov	sp, r7
10001906:	bd98      	pop	{r3, r4, r7, pc}
10001908:	00000000 	.word	0x00000000
1000190c:	403f4000 	.word	0x403f4000
10001910:	00000000 	.word	0x00000000
10001914:	41cdcd65 	.word	0x41cdcd65
10001918:	200009a0 	.word	0x200009a0
1000191c:	20000954 	.word	0x20000954
10001920:	200009a4 	.word	0x200009a4
10001924:	20000958 	.word	0x20000958
10001928:	50000100 	.word	0x50000100
1000192c:	50000200 	.word	0x50000200
10001930:	50000300 	.word	0x50000300
10001934:	50000400 	.word	0x50000400
10001938:	00001111 	.word	0x00001111
1000193c:	00010007 	.word	0x00010007
10001940:	40040000 	.word	0x40040000
10001944:	48040100 	.word	0x48040100
10001948:	0000ffff 	.word	0x0000ffff
1000194c:	48040000 	.word	0x48040000

10001950 <CCU40_0_IRQHandler>:

void BlockCommutation_ISR()
{
10001950:	b580      	push	{r7, lr}
10001952:	af00      	add	r7, sp, #0
	if (motorState > Stopped)
10001954:	4b85      	ldr	r3, [pc, #532]	; (10001b6c <CCU40_0_IRQHandler+0x21c>)
10001956:	781b      	ldrb	r3, [r3, #0]
10001958:	b2db      	uxtb	r3, r3
1000195a:	2b00      	cmp	r3, #0
1000195c:	d100      	bne.n	10001960 <CCU40_0_IRQHandler+0x10>
1000195e:	e0ff      	b.n	10001b60 <CCU40_0_IRQHandler+0x210>
	{
		PhaseState++;
10001960:	4b83      	ldr	r3, [pc, #524]	; (10001b70 <CCU40_0_IRQHandler+0x220>)
10001962:	781b      	ldrb	r3, [r3, #0]
10001964:	b2db      	uxtb	r3, r3
10001966:	3301      	adds	r3, #1
10001968:	b2da      	uxtb	r2, r3
1000196a:	4b81      	ldr	r3, [pc, #516]	; (10001b70 <CCU40_0_IRQHandler+0x220>)
1000196c:	701a      	strb	r2, [r3, #0]

		if (PhaseState > 5)
1000196e:	4b80      	ldr	r3, [pc, #512]	; (10001b70 <CCU40_0_IRQHandler+0x220>)
10001970:	781b      	ldrb	r3, [r3, #0]
10001972:	b2db      	uxtb	r3, r3
10001974:	b25b      	sxtb	r3, r3
10001976:	2b05      	cmp	r3, #5
10001978:	dd02      	ble.n	10001980 <CCU40_0_IRQHandler+0x30>
			PhaseState = 0;
1000197a:	4b7d      	ldr	r3, [pc, #500]	; (10001b70 <CCU40_0_IRQHandler+0x220>)
1000197c:	2200      	movs	r2, #0
1000197e:	701a      	strb	r2, [r3, #0]

		switch (PhaseState)
10001980:	4b7b      	ldr	r3, [pc, #492]	; (10001b70 <CCU40_0_IRQHandler+0x220>)
10001982:	781b      	ldrb	r3, [r3, #0]
10001984:	b2db      	uxtb	r3, r3
10001986:	b25b      	sxtb	r3, r3
10001988:	2b05      	cmp	r3, #5
1000198a:	d900      	bls.n	1000198e <CCU40_0_IRQHandler+0x3e>
1000198c:	e0b2      	b.n	10001af4 <CCU40_0_IRQHandler+0x1a4>
1000198e:	009a      	lsls	r2, r3, #2
10001990:	4b78      	ldr	r3, [pc, #480]	; (10001b74 <CCU40_0_IRQHandler+0x224>)
10001992:	18d3      	adds	r3, r2, r3
10001994:	681b      	ldr	r3, [r3, #0]
10001996:	469f      	mov	pc, r3
		{
			case 0:
				VADC_G0->ASSEL = 0x04UL;
10001998:	4a77      	ldr	r2, [pc, #476]	; (10001b78 <CCU40_0_IRQHandler+0x228>)
1000199a:	2394      	movs	r3, #148	; 0x94
1000199c:	005b      	lsls	r3, r3, #1
1000199e:	2104      	movs	r1, #4
100019a0:	50d1      	str	r1, [r2, r3]
				CCU80_CC80->CR1S = InnerPWMCompare;
100019a2:	4b76      	ldr	r3, [pc, #472]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
100019a4:	4a76      	ldr	r2, [pc, #472]	; (10001b80 <CCU40_0_IRQHandler+0x230>)
100019a6:	6812      	ldr	r2, [r2, #0]
100019a8:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC80->CR2S = InnerPWMPeriod+1;
100019aa:	4b74      	ldr	r3, [pc, #464]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
100019ac:	4a75      	ldr	r2, [pc, #468]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
100019ae:	6812      	ldr	r2, [r2, #0]
100019b0:	3201      	adds	r2, #1
100019b2:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC81->CR1S = 0;
100019b4:	4b74      	ldr	r3, [pc, #464]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
100019b6:	2200      	movs	r2, #0
100019b8:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC81->CR2S = 0;
100019ba:	4b73      	ldr	r3, [pc, #460]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
100019bc:	2200      	movs	r2, #0
100019be:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC82->CR1S = 0;
100019c0:	4b72      	ldr	r3, [pc, #456]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
100019c2:	2200      	movs	r2, #0
100019c4:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC82->CR2S = InnerPWMPeriod+1;
100019c6:	4b71      	ldr	r3, [pc, #452]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
100019c8:	4a6e      	ldr	r2, [pc, #440]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
100019ca:	6812      	ldr	r2, [r2, #0]
100019cc:	3201      	adds	r2, #1
100019ce:	645a      	str	r2, [r3, #68]	; 0x44
				break;
100019d0:	e090      	b.n	10001af4 <CCU40_0_IRQHandler+0x1a4>
			case 1:
				VADC_G0->ASSEL = 0x02UL;
100019d2:	4a69      	ldr	r2, [pc, #420]	; (10001b78 <CCU40_0_IRQHandler+0x228>)
100019d4:	2394      	movs	r3, #148	; 0x94
100019d6:	005b      	lsls	r3, r3, #1
100019d8:	2102      	movs	r1, #2
100019da:	50d1      	str	r1, [r2, r3]
				CCU80_CC80->CR1S = InnerPWMCompare;
100019dc:	4b67      	ldr	r3, [pc, #412]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
100019de:	4a68      	ldr	r2, [pc, #416]	; (10001b80 <CCU40_0_IRQHandler+0x230>)
100019e0:	6812      	ldr	r2, [r2, #0]
100019e2:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC80->CR2S = InnerPWMPeriod+1;
100019e4:	4b65      	ldr	r3, [pc, #404]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
100019e6:	4a67      	ldr	r2, [pc, #412]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
100019e8:	6812      	ldr	r2, [r2, #0]
100019ea:	3201      	adds	r2, #1
100019ec:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC81->CR1S = 0;
100019ee:	4b66      	ldr	r3, [pc, #408]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
100019f0:	2200      	movs	r2, #0
100019f2:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC81->CR2S = InnerPWMPeriod+1;
100019f4:	4b64      	ldr	r3, [pc, #400]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
100019f6:	4a63      	ldr	r2, [pc, #396]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
100019f8:	6812      	ldr	r2, [r2, #0]
100019fa:	3201      	adds	r2, #1
100019fc:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC82->CR1S = 0;
100019fe:	4b63      	ldr	r3, [pc, #396]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001a00:	2200      	movs	r2, #0
10001a02:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC82->CR2S = 0;
10001a04:	4b61      	ldr	r3, [pc, #388]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001a06:	2200      	movs	r2, #0
10001a08:	645a      	str	r2, [r3, #68]	; 0x44
				break;
10001a0a:	e073      	b.n	10001af4 <CCU40_0_IRQHandler+0x1a4>
			case 2:
				VADC_G0->ASSEL = 0x01UL;
10001a0c:	4a5a      	ldr	r2, [pc, #360]	; (10001b78 <CCU40_0_IRQHandler+0x228>)
10001a0e:	2394      	movs	r3, #148	; 0x94
10001a10:	005b      	lsls	r3, r3, #1
10001a12:	2101      	movs	r1, #1
10001a14:	50d1      	str	r1, [r2, r3]
				CCU80_CC80->CR1S = 0;
10001a16:	4b59      	ldr	r3, [pc, #356]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
10001a18:	2200      	movs	r2, #0
10001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC80->CR2S = InnerPWMPeriod+1;
10001a1c:	4b57      	ldr	r3, [pc, #348]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
10001a1e:	4a59      	ldr	r2, [pc, #356]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
10001a20:	6812      	ldr	r2, [r2, #0]
10001a22:	3201      	adds	r2, #1
10001a24:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC81->CR1S = InnerPWMCompare;
10001a26:	4b58      	ldr	r3, [pc, #352]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
10001a28:	4a55      	ldr	r2, [pc, #340]	; (10001b80 <CCU40_0_IRQHandler+0x230>)
10001a2a:	6812      	ldr	r2, [r2, #0]
10001a2c:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC81->CR2S = InnerPWMPeriod+1;
10001a2e:	4b56      	ldr	r3, [pc, #344]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
10001a30:	4a54      	ldr	r2, [pc, #336]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
10001a32:	6812      	ldr	r2, [r2, #0]
10001a34:	3201      	adds	r2, #1
10001a36:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC82->CR1S = 0;
10001a38:	4b54      	ldr	r3, [pc, #336]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001a3a:	2200      	movs	r2, #0
10001a3c:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC82->CR2S = 0;
10001a3e:	4b53      	ldr	r3, [pc, #332]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001a40:	2200      	movs	r2, #0
10001a42:	645a      	str	r2, [r3, #68]	; 0x44
				break;
10001a44:	e056      	b.n	10001af4 <CCU40_0_IRQHandler+0x1a4>
			case 3:
				VADC_G0->ASSEL = 0x04UL;
10001a46:	4a4c      	ldr	r2, [pc, #304]	; (10001b78 <CCU40_0_IRQHandler+0x228>)
10001a48:	2394      	movs	r3, #148	; 0x94
10001a4a:	005b      	lsls	r3, r3, #1
10001a4c:	2104      	movs	r1, #4
10001a4e:	50d1      	str	r1, [r2, r3]
				CCU80_CC80->CR1S = 0;
10001a50:	4b4a      	ldr	r3, [pc, #296]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
10001a52:	2200      	movs	r2, #0
10001a54:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC80->CR2S = 0;
10001a56:	4b49      	ldr	r3, [pc, #292]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
10001a58:	2200      	movs	r2, #0
10001a5a:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC81->CR1S = InnerPWMCompare;
10001a5c:	4b4a      	ldr	r3, [pc, #296]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
10001a5e:	4a48      	ldr	r2, [pc, #288]	; (10001b80 <CCU40_0_IRQHandler+0x230>)
10001a60:	6812      	ldr	r2, [r2, #0]
10001a62:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC81->CR2S = InnerPWMPeriod+1;
10001a64:	4b48      	ldr	r3, [pc, #288]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
10001a66:	4a47      	ldr	r2, [pc, #284]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
10001a68:	6812      	ldr	r2, [r2, #0]
10001a6a:	3201      	adds	r2, #1
10001a6c:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC82->CR1S = 0;
10001a6e:	4b47      	ldr	r3, [pc, #284]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001a70:	2200      	movs	r2, #0
10001a72:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC82->CR2S = InnerPWMPeriod+1;
10001a74:	4b45      	ldr	r3, [pc, #276]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001a76:	4a43      	ldr	r2, [pc, #268]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
10001a78:	6812      	ldr	r2, [r2, #0]
10001a7a:	3201      	adds	r2, #1
10001a7c:	645a      	str	r2, [r3, #68]	; 0x44
				break;
10001a7e:	e039      	b.n	10001af4 <CCU40_0_IRQHandler+0x1a4>
			case 4:
				VADC_G0->ASSEL = 0x02UL;
10001a80:	4a3d      	ldr	r2, [pc, #244]	; (10001b78 <CCU40_0_IRQHandler+0x228>)
10001a82:	2394      	movs	r3, #148	; 0x94
10001a84:	005b      	lsls	r3, r3, #1
10001a86:	2102      	movs	r1, #2
10001a88:	50d1      	str	r1, [r2, r3]
				CCU80_CC80->CR1S = 0;
10001a8a:	4b3c      	ldr	r3, [pc, #240]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
10001a8c:	2200      	movs	r2, #0
10001a8e:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC80->CR2S = 0;
10001a90:	4b3a      	ldr	r3, [pc, #232]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
10001a92:	2200      	movs	r2, #0
10001a94:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC81->CR1S = 0;
10001a96:	4b3c      	ldr	r3, [pc, #240]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
10001a98:	2200      	movs	r2, #0
10001a9a:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC81->CR2S = InnerPWMPeriod+1;
10001a9c:	4b3a      	ldr	r3, [pc, #232]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
10001a9e:	4a39      	ldr	r2, [pc, #228]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
10001aa0:	6812      	ldr	r2, [r2, #0]
10001aa2:	3201      	adds	r2, #1
10001aa4:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC82->CR1S = InnerPWMCompare;
10001aa6:	4b39      	ldr	r3, [pc, #228]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001aa8:	4a35      	ldr	r2, [pc, #212]	; (10001b80 <CCU40_0_IRQHandler+0x230>)
10001aaa:	6812      	ldr	r2, [r2, #0]
10001aac:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC82->CR2S = InnerPWMPeriod+1;
10001aae:	4b37      	ldr	r3, [pc, #220]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001ab0:	4a34      	ldr	r2, [pc, #208]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
10001ab2:	6812      	ldr	r2, [r2, #0]
10001ab4:	3201      	adds	r2, #1
10001ab6:	645a      	str	r2, [r3, #68]	; 0x44
				break;
10001ab8:	e01c      	b.n	10001af4 <CCU40_0_IRQHandler+0x1a4>
			case 5:
				VADC_G0->ASSEL = 0x01UL;
10001aba:	4a2f      	ldr	r2, [pc, #188]	; (10001b78 <CCU40_0_IRQHandler+0x228>)
10001abc:	2394      	movs	r3, #148	; 0x94
10001abe:	005b      	lsls	r3, r3, #1
10001ac0:	2101      	movs	r1, #1
10001ac2:	50d1      	str	r1, [r2, r3]
				CCU80_CC80->CR1S = 0;
10001ac4:	4b2d      	ldr	r3, [pc, #180]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
10001ac6:	2200      	movs	r2, #0
10001ac8:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC80->CR2S = InnerPWMPeriod+1;
10001aca:	4b2c      	ldr	r3, [pc, #176]	; (10001b7c <CCU40_0_IRQHandler+0x22c>)
10001acc:	4a2d      	ldr	r2, [pc, #180]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
10001ace:	6812      	ldr	r2, [r2, #0]
10001ad0:	3201      	adds	r2, #1
10001ad2:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC81->CR1S = 0;
10001ad4:	4b2c      	ldr	r3, [pc, #176]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
10001ad6:	2200      	movs	r2, #0
10001ad8:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC81->CR2S = 0;
10001ada:	4b2b      	ldr	r3, [pc, #172]	; (10001b88 <CCU40_0_IRQHandler+0x238>)
10001adc:	2200      	movs	r2, #0
10001ade:	645a      	str	r2, [r3, #68]	; 0x44
				CCU80_CC82->CR1S = InnerPWMCompare;
10001ae0:	4b2a      	ldr	r3, [pc, #168]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001ae2:	4a27      	ldr	r2, [pc, #156]	; (10001b80 <CCU40_0_IRQHandler+0x230>)
10001ae4:	6812      	ldr	r2, [r2, #0]
10001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
				CCU80_CC82->CR2S = InnerPWMPeriod+1;
10001ae8:	4b28      	ldr	r3, [pc, #160]	; (10001b8c <CCU40_0_IRQHandler+0x23c>)
10001aea:	4a26      	ldr	r2, [pc, #152]	; (10001b84 <CCU40_0_IRQHandler+0x234>)
10001aec:	6812      	ldr	r2, [r2, #0]
10001aee:	3201      	adds	r2, #1
10001af0:	645a      	str	r2, [r3, #68]	; 0x44
				break;
10001af2:	46c0      	nop			; (mov r8, r8)
		}
		CCU80_CC83->CR1S = InnerPWMCompare-1;//>>1;
10001af4:	4b26      	ldr	r3, [pc, #152]	; (10001b90 <CCU40_0_IRQHandler+0x240>)
10001af6:	4a22      	ldr	r2, [pc, #136]	; (10001b80 <CCU40_0_IRQHandler+0x230>)
10001af8:	6812      	ldr	r2, [r2, #0]
10001afa:	3a01      	subs	r2, #1
10001afc:	63da      	str	r2, [r3, #60]	; 0x3c
		CCU80_CC83->CR2S = InnerPWMCompare-1;//>>1;
10001afe:	4b24      	ldr	r3, [pc, #144]	; (10001b90 <CCU40_0_IRQHandler+0x240>)
10001b00:	4a1f      	ldr	r2, [pc, #124]	; (10001b80 <CCU40_0_IRQHandler+0x230>)
10001b02:	6812      	ldr	r2, [r2, #0]
10001b04:	3a01      	subs	r2, #1
10001b06:	645a      	str	r2, [r3, #68]	; 0x44
		CCU80->GCSS |= 0x1111;
10001b08:	23a0      	movs	r3, #160	; 0xa0
10001b0a:	05db      	lsls	r3, r3, #23
10001b0c:	22a0      	movs	r2, #160	; 0xa0
10001b0e:	05d2      	lsls	r2, r2, #23
10001b10:	6912      	ldr	r2, [r2, #16]
10001b12:	4920      	ldr	r1, [pc, #128]	; (10001b94 <CCU40_0_IRQHandler+0x244>)
10001b14:	430a      	orrs	r2, r1
10001b16:	611a      	str	r2, [r3, #16]

		// --- all shadow registers set?
		while ((CCU80->GCST & 0x1111) != 0);
10001b18:	46c0      	nop			; (mov r8, r8)
10001b1a:	23a0      	movs	r3, #160	; 0xa0
10001b1c:	05db      	lsls	r3, r3, #23
10001b1e:	699a      	ldr	r2, [r3, #24]
10001b20:	4b1c      	ldr	r3, [pc, #112]	; (10001b94 <CCU40_0_IRQHandler+0x244>)
10001b22:	4013      	ands	r3, r2
10001b24:	d1f9      	bne.n	10001b1a <CCU40_0_IRQHandler+0x1ca>

		CCU80_CC83->INTE |= 1UL<<4;
10001b26:	4a1a      	ldr	r2, [pc, #104]	; (10001b90 <CCU40_0_IRQHandler+0x240>)
10001b28:	4919      	ldr	r1, [pc, #100]	; (10001b90 <CCU40_0_IRQHandler+0x240>)
10001b2a:	23a4      	movs	r3, #164	; 0xa4
10001b2c:	58cb      	ldr	r3, [r1, r3]
10001b2e:	2110      	movs	r1, #16
10001b30:	4319      	orrs	r1, r3
10001b32:	23a4      	movs	r3, #164	; 0xa4
10001b34:	50d1      	str	r1, [r2, r3]

		static uint16_t cnt=0;

		if (motorState==StartUp)
10001b36:	4b0d      	ldr	r3, [pc, #52]	; (10001b6c <CCU40_0_IRQHandler+0x21c>)
10001b38:	781b      	ldrb	r3, [r3, #0]
10001b3a:	b2db      	uxtb	r3, r3
10001b3c:	2b01      	cmp	r3, #1
10001b3e:	d112      	bne.n	10001b66 <CCU40_0_IRQHandler+0x216>
		{
			cnt++;
10001b40:	4b15      	ldr	r3, [pc, #84]	; (10001b98 <CCU40_0_IRQHandler+0x248>)
10001b42:	881b      	ldrh	r3, [r3, #0]
10001b44:	3301      	adds	r3, #1
10001b46:	b29a      	uxth	r2, r3
10001b48:	4b13      	ldr	r3, [pc, #76]	; (10001b98 <CCU40_0_IRQHandler+0x248>)
10001b4a:	801a      	strh	r2, [r3, #0]
			if (cnt > 720)
10001b4c:	4b12      	ldr	r3, [pc, #72]	; (10001b98 <CCU40_0_IRQHandler+0x248>)
10001b4e:	881a      	ldrh	r2, [r3, #0]
10001b50:	23b4      	movs	r3, #180	; 0xb4
10001b52:	009b      	lsls	r3, r3, #2
10001b54:	429a      	cmp	r2, r3
10001b56:	d906      	bls.n	10001b66 <CCU40_0_IRQHandler+0x216>
				motorState=Running;
10001b58:	4b04      	ldr	r3, [pc, #16]	; (10001b6c <CCU40_0_IRQHandler+0x21c>)
10001b5a:	2202      	movs	r2, #2
10001b5c:	701a      	strb	r2, [r3, #0]
10001b5e:	e002      	b.n	10001b66 <CCU40_0_IRQHandler+0x216>
		}
	}
	else
		motorState=StartUp;
10001b60:	4b02      	ldr	r3, [pc, #8]	; (10001b6c <CCU40_0_IRQHandler+0x21c>)
10001b62:	2201      	movs	r2, #1
10001b64:	701a      	strb	r2, [r3, #0]
}
10001b66:	46bd      	mov	sp, r7
10001b68:	bd80      	pop	{r7, pc}
10001b6a:	46c0      	nop			; (mov r8, r8)
10001b6c:	2000095d 	.word	0x2000095d
10001b70:	2000095c 	.word	0x2000095c
10001b74:	1000639c 	.word	0x1000639c
10001b78:	48030400 	.word	0x48030400
10001b7c:	50000100 	.word	0x50000100
10001b80:	20000958 	.word	0x20000958
10001b84:	20000954 	.word	0x20000954
10001b88:	50000200 	.word	0x50000200
10001b8c:	50000300 	.word	0x50000300
10001b90:	50000400 	.word	0x50000400
10001b94:	00001111 	.word	0x00001111
10001b98:	2000095e 	.word	0x2000095e

10001b9c <GetPhaseState>:

uint8_t GetPhaseState()
{
10001b9c:	b580      	push	{r7, lr}
10001b9e:	af00      	add	r7, sp, #0
	return PhaseState;
10001ba0:	4b03      	ldr	r3, [pc, #12]	; (10001bb0 <GetPhaseState+0x14>)
10001ba2:	781b      	ldrb	r3, [r3, #0]
10001ba4:	b2db      	uxtb	r3, r3
10001ba6:	b2db      	uxtb	r3, r3
}
10001ba8:	1c18      	adds	r0, r3, #0
10001baa:	46bd      	mov	sp, r7
10001bac:	bd80      	pop	{r7, pc}
10001bae:	46c0      	nop			; (mov r8, r8)
10001bb0:	2000095c 	.word	0x2000095c

10001bb4 <StartMotor>:

void StartMotor()
{
10001bb4:	b580      	push	{r7, lr}
10001bb6:	af00      	add	r7, sp, #0
	if (motorState==Stopped)
10001bb8:	4b0c      	ldr	r3, [pc, #48]	; (10001bec <StartMotor+0x38>)
10001bba:	781b      	ldrb	r3, [r3, #0]
10001bbc:	b2db      	uxtb	r3, r3
10001bbe:	2b00      	cmp	r3, #0
10001bc0:	d112      	bne.n	10001be8 <StartMotor+0x34>
	{
		//Start slices
		SCU_GENERAL->CCUCON |= 0x100UL;
10001bc2:	4b0b      	ldr	r3, [pc, #44]	; (10001bf0 <StartMotor+0x3c>)
10001bc4:	4a0a      	ldr	r2, [pc, #40]	; (10001bf0 <StartMotor+0x3c>)
10001bc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
10001bc8:	2180      	movs	r1, #128	; 0x80
10001bca:	0049      	lsls	r1, r1, #1
10001bcc:	430a      	orrs	r2, r1
10001bce:	631a      	str	r2, [r3, #48]	; 0x30
		SCU_GENERAL->CCUCON &= ~(0x100UL);
10001bd0:	4b07      	ldr	r3, [pc, #28]	; (10001bf0 <StartMotor+0x3c>)
10001bd2:	4a07      	ldr	r2, [pc, #28]	; (10001bf0 <StartMotor+0x3c>)
10001bd4:	6b11      	ldr	r1, [r2, #48]	; 0x30
10001bd6:	4a07      	ldr	r2, [pc, #28]	; (10001bf4 <StartMotor+0x40>)
10001bd8:	400a      	ands	r2, r1
10001bda:	631a      	str	r2, [r3, #48]	; 0x30

		//Start slices
		CCU40_CC40->TCSET |= 0x01UL;
10001bdc:	4b06      	ldr	r3, [pc, #24]	; (10001bf8 <StartMotor+0x44>)
10001bde:	4a06      	ldr	r2, [pc, #24]	; (10001bf8 <StartMotor+0x44>)
10001be0:	68d2      	ldr	r2, [r2, #12]
10001be2:	2101      	movs	r1, #1
10001be4:	430a      	orrs	r2, r1
10001be6:	60da      	str	r2, [r3, #12]
	}
}
10001be8:	46bd      	mov	sp, r7
10001bea:	bd80      	pop	{r7, pc}
10001bec:	2000095d 	.word	0x2000095d
10001bf0:	40010000 	.word	0x40010000
10001bf4:	fffffeff 	.word	0xfffffeff
10001bf8:	48040100 	.word	0x48040100

10001bfc <StopMotor>:

void StopMotor()
{
10001bfc:	b580      	push	{r7, lr}
10001bfe:	af00      	add	r7, sp, #0
	if (motorState != Stopped)
10001c00:	4b1d      	ldr	r3, [pc, #116]	; (10001c78 <StopMotor+0x7c>)
10001c02:	781b      	ldrb	r3, [r3, #0]
10001c04:	b2db      	uxtb	r3, r3
10001c06:	2b00      	cmp	r3, #0
10001c08:	d033      	beq.n	10001c72 <StopMotor+0x76>
	{
		InnerPWMCompare=InnerPWMPeriod*CurrentDutyCycleStart;
10001c0a:	4b1c      	ldr	r3, [pc, #112]	; (10001c7c <StopMotor+0x80>)
10001c0c:	681b      	ldr	r3, [r3, #0]
10001c0e:	1c18      	adds	r0, r3, #0
10001c10:	f003 f896 	bl	10004d40 <__aeabi_ui2f>
10001c14:	1c02      	adds	r2, r0, #0
10001c16:	4b1a      	ldr	r3, [pc, #104]	; (10001c80 <StopMotor+0x84>)
10001c18:	681b      	ldr	r3, [r3, #0]
10001c1a:	1c10      	adds	r0, r2, #0
10001c1c:	1c19      	adds	r1, r3, #0
10001c1e:	f002 fd65 	bl	100046ec <__aeabi_fmul>
10001c22:	1c03      	adds	r3, r0, #0
10001c24:	1c18      	adds	r0, r3, #0
10001c26:	f002 fb35 	bl	10004294 <__aeabi_f2uiz>
10001c2a:	1c02      	adds	r2, r0, #0
10001c2c:	4b15      	ldr	r3, [pc, #84]	; (10001c84 <StopMotor+0x88>)
10001c2e:	601a      	str	r2, [r3, #0]

		//Stop slices CCU4
		CCU40_CC40->TCCLR |= 3UL;
10001c30:	4b15      	ldr	r3, [pc, #84]	; (10001c88 <StopMotor+0x8c>)
10001c32:	4a15      	ldr	r2, [pc, #84]	; (10001c88 <StopMotor+0x8c>)
10001c34:	6912      	ldr	r2, [r2, #16]
10001c36:	2103      	movs	r1, #3
10001c38:	430a      	orrs	r2, r1
10001c3a:	611a      	str	r2, [r3, #16]

		//Stop slices CCU8
		CCU80_CC80->TCCLR |= 3UL;
10001c3c:	4b13      	ldr	r3, [pc, #76]	; (10001c8c <StopMotor+0x90>)
10001c3e:	4a13      	ldr	r2, [pc, #76]	; (10001c8c <StopMotor+0x90>)
10001c40:	6912      	ldr	r2, [r2, #16]
10001c42:	2103      	movs	r1, #3
10001c44:	430a      	orrs	r2, r1
10001c46:	611a      	str	r2, [r3, #16]
		CCU80_CC81->TCCLR |= 3UL;
10001c48:	4b11      	ldr	r3, [pc, #68]	; (10001c90 <StopMotor+0x94>)
10001c4a:	4a11      	ldr	r2, [pc, #68]	; (10001c90 <StopMotor+0x94>)
10001c4c:	6912      	ldr	r2, [r2, #16]
10001c4e:	2103      	movs	r1, #3
10001c50:	430a      	orrs	r2, r1
10001c52:	611a      	str	r2, [r3, #16]
		CCU80_CC82->TCCLR |= 3UL;
10001c54:	4b0f      	ldr	r3, [pc, #60]	; (10001c94 <StopMotor+0x98>)
10001c56:	4a0f      	ldr	r2, [pc, #60]	; (10001c94 <StopMotor+0x98>)
10001c58:	6912      	ldr	r2, [r2, #16]
10001c5a:	2103      	movs	r1, #3
10001c5c:	430a      	orrs	r2, r1
10001c5e:	611a      	str	r2, [r3, #16]
		CCU80_CC83->TCCLR |= 3UL;
10001c60:	4b0d      	ldr	r3, [pc, #52]	; (10001c98 <StopMotor+0x9c>)
10001c62:	4a0d      	ldr	r2, [pc, #52]	; (10001c98 <StopMotor+0x9c>)
10001c64:	6912      	ldr	r2, [r2, #16]
10001c66:	2103      	movs	r1, #3
10001c68:	430a      	orrs	r2, r1
10001c6a:	611a      	str	r2, [r3, #16]

		motorState=Stopped;
10001c6c:	4b02      	ldr	r3, [pc, #8]	; (10001c78 <StopMotor+0x7c>)
10001c6e:	2200      	movs	r2, #0
10001c70:	701a      	strb	r2, [r3, #0]
	}
}
10001c72:	46bd      	mov	sp, r7
10001c74:	bd80      	pop	{r7, pc}
10001c76:	46c0      	nop			; (mov r8, r8)
10001c78:	2000095d 	.word	0x2000095d
10001c7c:	20000954 	.word	0x20000954
10001c80:	200009a4 	.word	0x200009a4
10001c84:	20000958 	.word	0x20000958
10001c88:	48040100 	.word	0x48040100
10001c8c:	50000100 	.word	0x50000100
10001c90:	50000200 	.word	0x50000200
10001c94:	50000300 	.word	0x50000300
10001c98:	50000400 	.word	0x50000400

10001c9c <SetReferenceCurrent>:

uint8_t SetReferenceCurrent(uint16_t ref)
{
10001c9c:	b580      	push	{r7, lr}
10001c9e:	b082      	sub	sp, #8
10001ca0:	af00      	add	r7, sp, #0
10001ca2:	1c02      	adds	r2, r0, #0
10001ca4:	1dbb      	adds	r3, r7, #6
10001ca6:	801a      	strh	r2, [r3, #0]
	StartMotor();
10001ca8:	f7ff ff84 	bl	10001bb4 <StartMotor>

	if (motorState == Running)
10001cac:	4b07      	ldr	r3, [pc, #28]	; (10001ccc <SetReferenceCurrent+0x30>)
10001cae:	781b      	ldrb	r3, [r3, #0]
10001cb0:	b2db      	uxtb	r3, r3
10001cb2:	2b02      	cmp	r3, #2
10001cb4:	d105      	bne.n	10001cc2 <SetReferenceCurrent+0x26>
	{
		InnerPWMCompare=ref;
10001cb6:	1dbb      	adds	r3, r7, #6
10001cb8:	881a      	ldrh	r2, [r3, #0]
10001cba:	4b05      	ldr	r3, [pc, #20]	; (10001cd0 <SetReferenceCurrent+0x34>)
10001cbc:	601a      	str	r2, [r3, #0]
		return 1;
10001cbe:	2301      	movs	r3, #1
10001cc0:	e000      	b.n	10001cc4 <SetReferenceCurrent+0x28>
	}
	else
		return 0;
10001cc2:	2300      	movs	r3, #0
}
10001cc4:	1c18      	adds	r0, r3, #0
10001cc6:	46bd      	mov	sp, r7
10001cc8:	b002      	add	sp, #8
10001cca:	bd80      	pop	{r7, pc}
10001ccc:	2000095d 	.word	0x2000095d
10001cd0:	20000958 	.word	0x20000958

10001cd4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001cd4:	b580      	push	{r7, lr}
10001cd6:	b082      	sub	sp, #8
10001cd8:	af00      	add	r7, sp, #0
10001cda:	1c02      	adds	r2, r0, #0
10001cdc:	1dfb      	adds	r3, r7, #7
10001cde:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10001ce0:	4b06      	ldr	r3, [pc, #24]	; (10001cfc <NVIC_EnableIRQ+0x28>)
10001ce2:	1dfa      	adds	r2, r7, #7
10001ce4:	7812      	ldrb	r2, [r2, #0]
10001ce6:	1c11      	adds	r1, r2, #0
10001ce8:	221f      	movs	r2, #31
10001cea:	400a      	ands	r2, r1
10001cec:	2101      	movs	r1, #1
10001cee:	1c08      	adds	r0, r1, #0
10001cf0:	4090      	lsls	r0, r2
10001cf2:	1c02      	adds	r2, r0, #0
10001cf4:	601a      	str	r2, [r3, #0]
}
10001cf6:	46bd      	mov	sp, r7
10001cf8:	b002      	add	sp, #8
10001cfa:	bd80      	pop	{r7, pc}
10001cfc:	e000e100 	.word	0xe000e100

10001d00 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10001d00:	b5b0      	push	{r4, r5, r7, lr}
10001d02:	b082      	sub	sp, #8
10001d04:	af00      	add	r7, sp, #0
10001d06:	1c02      	adds	r2, r0, #0
10001d08:	6039      	str	r1, [r7, #0]
10001d0a:	1dfb      	adds	r3, r7, #7
10001d0c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
10001d0e:	1dfb      	adds	r3, r7, #7
10001d10:	781b      	ldrb	r3, [r3, #0]
10001d12:	2b7f      	cmp	r3, #127	; 0x7f
10001d14:	d932      	bls.n	10001d7c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001d16:	4930      	ldr	r1, [pc, #192]	; (10001dd8 <NVIC_SetPriority+0xd8>)
10001d18:	1dfb      	adds	r3, r7, #7
10001d1a:	781b      	ldrb	r3, [r3, #0]
10001d1c:	1c1a      	adds	r2, r3, #0
10001d1e:	230f      	movs	r3, #15
10001d20:	4013      	ands	r3, r2
10001d22:	3b08      	subs	r3, #8
10001d24:	0898      	lsrs	r0, r3, #2
10001d26:	4a2c      	ldr	r2, [pc, #176]	; (10001dd8 <NVIC_SetPriority+0xd8>)
10001d28:	1dfb      	adds	r3, r7, #7
10001d2a:	781b      	ldrb	r3, [r3, #0]
10001d2c:	1c1c      	adds	r4, r3, #0
10001d2e:	230f      	movs	r3, #15
10001d30:	4023      	ands	r3, r4
10001d32:	3b08      	subs	r3, #8
10001d34:	089b      	lsrs	r3, r3, #2
10001d36:	3306      	adds	r3, #6
10001d38:	009b      	lsls	r3, r3, #2
10001d3a:	18d3      	adds	r3, r2, r3
10001d3c:	685b      	ldr	r3, [r3, #4]
10001d3e:	1dfa      	adds	r2, r7, #7
10001d40:	7812      	ldrb	r2, [r2, #0]
10001d42:	1c14      	adds	r4, r2, #0
10001d44:	2203      	movs	r2, #3
10001d46:	4022      	ands	r2, r4
10001d48:	00d2      	lsls	r2, r2, #3
10001d4a:	24ff      	movs	r4, #255	; 0xff
10001d4c:	1c25      	adds	r5, r4, #0
10001d4e:	4095      	lsls	r5, r2
10001d50:	1c2a      	adds	r2, r5, #0
10001d52:	43d2      	mvns	r2, r2
10001d54:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10001d56:	683b      	ldr	r3, [r7, #0]
10001d58:	019c      	lsls	r4, r3, #6
10001d5a:	23ff      	movs	r3, #255	; 0xff
10001d5c:	401c      	ands	r4, r3
10001d5e:	1dfb      	adds	r3, r7, #7
10001d60:	781b      	ldrb	r3, [r3, #0]
10001d62:	1c1d      	adds	r5, r3, #0
10001d64:	2303      	movs	r3, #3
10001d66:	402b      	ands	r3, r5
10001d68:	00db      	lsls	r3, r3, #3
10001d6a:	1c25      	adds	r5, r4, #0
10001d6c:	409d      	lsls	r5, r3
10001d6e:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001d70:	431a      	orrs	r2, r3
10001d72:	1d83      	adds	r3, r0, #6
10001d74:	009b      	lsls	r3, r3, #2
10001d76:	18cb      	adds	r3, r1, r3
10001d78:	605a      	str	r2, [r3, #4]
10001d7a:	e029      	b.n	10001dd0 <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001d7c:	4b17      	ldr	r3, [pc, #92]	; (10001ddc <NVIC_SetPriority+0xdc>)
10001d7e:	1dfa      	adds	r2, r7, #7
10001d80:	7812      	ldrb	r2, [r2, #0]
10001d82:	b252      	sxtb	r2, r2
10001d84:	0892      	lsrs	r2, r2, #2
10001d86:	4915      	ldr	r1, [pc, #84]	; (10001ddc <NVIC_SetPriority+0xdc>)
10001d88:	1df8      	adds	r0, r7, #7
10001d8a:	7800      	ldrb	r0, [r0, #0]
10001d8c:	b240      	sxtb	r0, r0
10001d8e:	0880      	lsrs	r0, r0, #2
10001d90:	30c0      	adds	r0, #192	; 0xc0
10001d92:	0080      	lsls	r0, r0, #2
10001d94:	5841      	ldr	r1, [r0, r1]
10001d96:	1df8      	adds	r0, r7, #7
10001d98:	7800      	ldrb	r0, [r0, #0]
10001d9a:	1c04      	adds	r4, r0, #0
10001d9c:	2003      	movs	r0, #3
10001d9e:	4020      	ands	r0, r4
10001da0:	00c0      	lsls	r0, r0, #3
10001da2:	24ff      	movs	r4, #255	; 0xff
10001da4:	1c25      	adds	r5, r4, #0
10001da6:	4085      	lsls	r5, r0
10001da8:	1c28      	adds	r0, r5, #0
10001daa:	43c0      	mvns	r0, r0
10001dac:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10001dae:	6839      	ldr	r1, [r7, #0]
10001db0:	018c      	lsls	r4, r1, #6
10001db2:	21ff      	movs	r1, #255	; 0xff
10001db4:	400c      	ands	r4, r1
10001db6:	1df9      	adds	r1, r7, #7
10001db8:	7809      	ldrb	r1, [r1, #0]
10001dba:	1c0d      	adds	r5, r1, #0
10001dbc:	2103      	movs	r1, #3
10001dbe:	4029      	ands	r1, r5
10001dc0:	00c9      	lsls	r1, r1, #3
10001dc2:	1c25      	adds	r5, r4, #0
10001dc4:	408d      	lsls	r5, r1
10001dc6:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001dc8:	4301      	orrs	r1, r0
10001dca:	32c0      	adds	r2, #192	; 0xc0
10001dcc:	0092      	lsls	r2, r2, #2
10001dce:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
10001dd0:	46bd      	mov	sp, r7
10001dd2:	b002      	add	sp, #8
10001dd4:	bdb0      	pop	{r4, r5, r7, pc}
10001dd6:	46c0      	nop			; (mov r8, r8)
10001dd8:	e000ed00 	.word	0xe000ed00
10001ddc:	e000e100 	.word	0xe000e100

10001de0 <DaisyChain>:

uint8_t DaisyTimeOut = 1;
uint8_t DaisyCount = 0;

void DaisyChain(void)
{
10001de0:	b580      	push	{r7, lr}
10001de2:	b084      	sub	sp, #16
10001de4:	af00      	add	r7, sp, #0
	uint8_t i=0;
10001de6:	1c3b      	adds	r3, r7, #0
10001de8:	330f      	adds	r3, #15
10001dea:	2200      	movs	r2, #0
10001dec:	701a      	strb	r2, [r3, #0]
	status_t status=0;
10001dee:	2300      	movs	r3, #0
10001df0:	60bb      	str	r3, [r7, #8]
	uint32_t data=0;
10001df2:	2300      	movs	r3, #0
10001df4:	607b      	str	r3, [r7, #4]

	if (DaisyTimeOut)
10001df6:	4b5e      	ldr	r3, [pc, #376]	; (10001f70 <DaisyChain+0x190>)
10001df8:	781b      	ldrb	r3, [r3, #0]
10001dfa:	2b00      	cmp	r3, #0
10001dfc:	d001      	beq.n	10001e02 <DaisyChain+0x22>
		StopMotor();
10001dfe:	f7ff fefd 	bl	10001bfc <StopMotor>

	if(USIC_GetRxFIFOFillingLevel(UART001_Handle0.UartRegs) >= DAISY_BUFFER_SIZE)
10001e02:	4b5c      	ldr	r3, [pc, #368]	; (10001f74 <DaisyChain+0x194>)
10001e04:	681a      	ldr	r2, [r3, #0]
10001e06:	238a      	movs	r3, #138	; 0x8a
10001e08:	005b      	lsls	r3, r3, #1
10001e0a:	58d2      	ldr	r2, [r2, r3]
10001e0c:	23fe      	movs	r3, #254	; 0xfe
10001e0e:	03db      	lsls	r3, r3, #15
10001e10:	4013      	ands	r3, r2
10001e12:	0c1b      	lsrs	r3, r3, #16
10001e14:	2b0c      	cmp	r3, #12
10001e16:	d800      	bhi.n	10001e1a <DaisyChain+0x3a>
10001e18:	e0a6      	b.n	10001f68 <DaisyChain+0x188>
	{
		//Read data from UART buffer
		UART001_ReadDataBytes(&UART001_Handle0,FifoRecBuffer,DAISY_BUFFER_SIZE);
10001e1a:	4a56      	ldr	r2, [pc, #344]	; (10001f74 <DaisyChain+0x194>)
10001e1c:	4b56      	ldr	r3, [pc, #344]	; (10001f78 <DaisyChain+0x198>)
10001e1e:	1c10      	adds	r0, r2, #0
10001e20:	1c19      	adds	r1, r3, #0
10001e22:	220d      	movs	r2, #13
10001e24:	f000 fefc 	bl	10002c20 <UART001_ReadDataBytes>

		//Assumption that communication is lost --> emtpy Receive Buffer
		if (FifoRecBuffer[DAISY_BUFFER_SIZE-1] != DAISY_STOP_BYTE)
10001e28:	4b53      	ldr	r3, [pc, #332]	; (10001f78 <DaisyChain+0x198>)
10001e2a:	7b1b      	ldrb	r3, [r3, #12]
10001e2c:	2b04      	cmp	r3, #4
10001e2e:	d016      	beq.n	10001e5e <DaisyChain+0x7e>
		{
			IO004_TogglePin(IO004_Handle1);
10001e30:	4b52      	ldr	r3, [pc, #328]	; (10001f7c <DaisyChain+0x19c>)
10001e32:	685b      	ldr	r3, [r3, #4]
10001e34:	4a51      	ldr	r2, [pc, #324]	; (10001f7c <DaisyChain+0x19c>)
10001e36:	7852      	ldrb	r2, [r2, #1]
10001e38:	4951      	ldr	r1, [pc, #324]	; (10001f80 <DaisyChain+0x1a0>)
10001e3a:	1c08      	adds	r0, r1, #0
10001e3c:	4090      	lsls	r0, r2
10001e3e:	1c02      	adds	r2, r0, #0
10001e40:	605a      	str	r2, [r3, #4]
			USIC_FlushRxFIFO(UART001_Handle0.UartRegs);
10001e42:	4b4c      	ldr	r3, [pc, #304]	; (10001f74 <DaisyChain+0x194>)
10001e44:	681a      	ldr	r2, [r3, #0]
10001e46:	4b4b      	ldr	r3, [pc, #300]	; (10001f74 <DaisyChain+0x194>)
10001e48:	6819      	ldr	r1, [r3, #0]
10001e4a:	238c      	movs	r3, #140	; 0x8c
10001e4c:	005b      	lsls	r3, r3, #1
10001e4e:	58cb      	ldr	r3, [r1, r3]
10001e50:	2180      	movs	r1, #128	; 0x80
10001e52:	01c9      	lsls	r1, r1, #7
10001e54:	4319      	orrs	r1, r3
10001e56:	238c      	movs	r3, #140	; 0x8c
10001e58:	005b      	lsls	r3, r3, #1
10001e5a:	50d1      	str	r1, [r2, r3]
			return;
10001e5c:	e084      	b.n	10001f68 <DaisyChain+0x188>
		}

		uint8_t cmd = FifoRecBuffer[0];
10001e5e:	1cfb      	adds	r3, r7, #3
10001e60:	4a45      	ldr	r2, [pc, #276]	; (10001f78 <DaisyChain+0x198>)
10001e62:	7812      	ldrb	r2, [r2, #0]
10001e64:	701a      	strb	r2, [r3, #0]
		uint16_t params =  (FifoRecBuffer[1] << 8 | FifoRecBuffer[2]);
10001e66:	4b44      	ldr	r3, [pc, #272]	; (10001f78 <DaisyChain+0x198>)
10001e68:	785b      	ldrb	r3, [r3, #1]
10001e6a:	021b      	lsls	r3, r3, #8
10001e6c:	b29a      	uxth	r2, r3
10001e6e:	4b42      	ldr	r3, [pc, #264]	; (10001f78 <DaisyChain+0x198>)
10001e70:	789b      	ldrb	r3, [r3, #2]
10001e72:	4313      	orrs	r3, r2
10001e74:	b29a      	uxth	r2, r3
10001e76:	1c3b      	adds	r3, r7, #0
10001e78:	801a      	strh	r2, [r3, #0]

		switch (cmd)
10001e7a:	1cfb      	adds	r3, r7, #3
10001e7c:	781b      	ldrb	r3, [r3, #0]
10001e7e:	2b22      	cmp	r3, #34	; 0x22
10001e80:	d00b      	beq.n	10001e9a <DaisyChain+0xba>
10001e82:	dc10      	bgt.n	10001ea6 <DaisyChain+0xc6>
10001e84:	2b0a      	cmp	r3, #10
10001e86:	d002      	beq.n	10001e8e <DaisyChain+0xae>
10001e88:	2b0b      	cmp	r3, #11
10001e8a:	d003      	beq.n	10001e94 <DaisyChain+0xb4>
10001e8c:	e00b      	b.n	10001ea6 <DaisyChain+0xc6>
		{
			case START_MOTOR:
				StartMotor();
10001e8e:	f7ff fe91 	bl	10001bb4 <StartMotor>
				break;
10001e92:	e008      	b.n	10001ea6 <DaisyChain+0xc6>
			case STOP_MOTOR:
				StopMotor();
10001e94:	f7ff feb2 	bl	10001bfc <StopMotor>
				break;
10001e98:	e005      	b.n	10001ea6 <DaisyChain+0xc6>
			case SET_REF_CURRENT:
				SetReferenceCurrent(params);
10001e9a:	1c3b      	adds	r3, r7, #0
10001e9c:	881b      	ldrh	r3, [r3, #0]
10001e9e:	1c18      	adds	r0, r3, #0
10001ea0:	f7ff fefc 	bl	10001c9c <SetReferenceCurrent>
				break;
10001ea4:	46c0      	nop			; (mov r8, r8)
		}

		for(i=DAISY_MESSAGE_LENGTH; i<DAISY_BUFFER_SIZE-1; i++)
10001ea6:	1c3b      	adds	r3, r7, #0
10001ea8:	330f      	adds	r3, #15
10001eaa:	2203      	movs	r2, #3
10001eac:	701a      	strb	r2, [r3, #0]
10001eae:	e011      	b.n	10001ed4 <DaisyChain+0xf4>
			FifoTransBuffer[i-DAISY_MESSAGE_LENGTH]=FifoRecBuffer[i];
10001eb0:	1c3b      	adds	r3, r7, #0
10001eb2:	330f      	adds	r3, #15
10001eb4:	781b      	ldrb	r3, [r3, #0]
10001eb6:	3b03      	subs	r3, #3
10001eb8:	1c3a      	adds	r2, r7, #0
10001eba:	320f      	adds	r2, #15
10001ebc:	7812      	ldrb	r2, [r2, #0]
10001ebe:	492e      	ldr	r1, [pc, #184]	; (10001f78 <DaisyChain+0x198>)
10001ec0:	5c89      	ldrb	r1, [r1, r2]
10001ec2:	4a30      	ldr	r2, [pc, #192]	; (10001f84 <DaisyChain+0x1a4>)
10001ec4:	54d1      	strb	r1, [r2, r3]
			case SET_REF_CURRENT:
				SetReferenceCurrent(params);
				break;
		}

		for(i=DAISY_MESSAGE_LENGTH; i<DAISY_BUFFER_SIZE-1; i++)
10001ec6:	1c3b      	adds	r3, r7, #0
10001ec8:	330f      	adds	r3, #15
10001eca:	1c3a      	adds	r2, r7, #0
10001ecc:	320f      	adds	r2, #15
10001ece:	7812      	ldrb	r2, [r2, #0]
10001ed0:	3201      	adds	r2, #1
10001ed2:	701a      	strb	r2, [r3, #0]
10001ed4:	1c3b      	adds	r3, r7, #0
10001ed6:	330f      	adds	r3, #15
10001ed8:	781b      	ldrb	r3, [r3, #0]
10001eda:	2b0b      	cmp	r3, #11
10001edc:	d9e8      	bls.n	10001eb0 <DaisyChain+0xd0>
			FifoTransBuffer[i-DAISY_MESSAGE_LENGTH]=FifoRecBuffer[i];

		//Status-Code
		FifoTransBuffer[i-DAISY_MESSAGE_LENGTH]=status;
10001ede:	1c3b      	adds	r3, r7, #0
10001ee0:	330f      	adds	r3, #15
10001ee2:	781b      	ldrb	r3, [r3, #0]
10001ee4:	3b03      	subs	r3, #3
10001ee6:	68ba      	ldr	r2, [r7, #8]
10001ee8:	b2d1      	uxtb	r1, r2
10001eea:	4a26      	ldr	r2, [pc, #152]	; (10001f84 <DaisyChain+0x1a4>)
10001eec:	54d1      	strb	r1, [r2, r3]
		i++;
10001eee:	1c3b      	adds	r3, r7, #0
10001ef0:	330f      	adds	r3, #15
10001ef2:	1c3a      	adds	r2, r7, #0
10001ef4:	320f      	adds	r2, #15
10001ef6:	7812      	ldrb	r2, [r2, #0]
10001ef8:	3201      	adds	r2, #1
10001efa:	701a      	strb	r2, [r3, #0]
		//Data
		FifoTransBuffer[i-DAISY_MESSAGE_LENGTH]=(uint8_t)(data >> 8);
10001efc:	1c3b      	adds	r3, r7, #0
10001efe:	330f      	adds	r3, #15
10001f00:	781b      	ldrb	r3, [r3, #0]
10001f02:	3b03      	subs	r3, #3
10001f04:	687a      	ldr	r2, [r7, #4]
10001f06:	0a12      	lsrs	r2, r2, #8
10001f08:	b2d1      	uxtb	r1, r2
10001f0a:	4a1e      	ldr	r2, [pc, #120]	; (10001f84 <DaisyChain+0x1a4>)
10001f0c:	54d1      	strb	r1, [r2, r3]
		i++;
10001f0e:	1c3b      	adds	r3, r7, #0
10001f10:	330f      	adds	r3, #15
10001f12:	1c3a      	adds	r2, r7, #0
10001f14:	320f      	adds	r2, #15
10001f16:	7812      	ldrb	r2, [r2, #0]
10001f18:	3201      	adds	r2, #1
10001f1a:	701a      	strb	r2, [r3, #0]
		FifoTransBuffer[i-DAISY_MESSAGE_LENGTH]=(uint8_t)data;
10001f1c:	1c3b      	adds	r3, r7, #0
10001f1e:	330f      	adds	r3, #15
10001f20:	781b      	ldrb	r3, [r3, #0]
10001f22:	3b03      	subs	r3, #3
10001f24:	687a      	ldr	r2, [r7, #4]
10001f26:	b2d1      	uxtb	r1, r2
10001f28:	4a16      	ldr	r2, [pc, #88]	; (10001f84 <DaisyChain+0x1a4>)
10001f2a:	54d1      	strb	r1, [r2, r3]
		i++;
10001f2c:	1c3b      	adds	r3, r7, #0
10001f2e:	330f      	adds	r3, #15
10001f30:	1c3a      	adds	r2, r7, #0
10001f32:	320f      	adds	r2, #15
10001f34:	7812      	ldrb	r2, [r2, #0]
10001f36:	3201      	adds	r2, #1
10001f38:	701a      	strb	r2, [r3, #0]
		FifoTransBuffer[i-DAISY_MESSAGE_LENGTH]=DAISY_STOP_BYTE;
10001f3a:	1c3b      	adds	r3, r7, #0
10001f3c:	330f      	adds	r3, #15
10001f3e:	781b      	ldrb	r3, [r3, #0]
10001f40:	3b03      	subs	r3, #3
10001f42:	4a10      	ldr	r2, [pc, #64]	; (10001f84 <DaisyChain+0x1a4>)
10001f44:	2104      	movs	r1, #4
10001f46:	54d1      	strb	r1, [r2, r3]

		UART001_WriteDataBytes(&UART001_Handle0, FifoTransBuffer, DAISY_BUFFER_SIZE);
10001f48:	4a0a      	ldr	r2, [pc, #40]	; (10001f74 <DaisyChain+0x194>)
10001f4a:	4b0e      	ldr	r3, [pc, #56]	; (10001f84 <DaisyChain+0x1a4>)
10001f4c:	1c10      	adds	r0, r2, #0
10001f4e:	1c19      	adds	r1, r3, #0
10001f50:	220d      	movs	r2, #13
10001f52:	f000 fedf 	bl	10002d14 <UART001_WriteDataBytes>

		DaisyTimeOut = 0;
10001f56:	4b06      	ldr	r3, [pc, #24]	; (10001f70 <DaisyChain+0x190>)
10001f58:	2200      	movs	r2, #0
10001f5a:	701a      	strb	r2, [r3, #0]
		DaisyCount++;
10001f5c:	4b0a      	ldr	r3, [pc, #40]	; (10001f88 <DaisyChain+0x1a8>)
10001f5e:	781b      	ldrb	r3, [r3, #0]
10001f60:	3301      	adds	r3, #1
10001f62:	b2da      	uxtb	r2, r3
10001f64:	4b08      	ldr	r3, [pc, #32]	; (10001f88 <DaisyChain+0x1a8>)
10001f66:	701a      	strb	r2, [r3, #0]
	}
}
10001f68:	46bd      	mov	sp, r7
10001f6a:	b004      	add	sp, #16
10001f6c:	bd80      	pop	{r7, pc}
10001f6e:	46c0      	nop			; (mov r8, r8)
10001f70:	200009a8 	.word	0x200009a8
10001f74:	100063b4 	.word	0x100063b4
10001f78:	20000960 	.word	0x20000960
10001f7c:	100063f4 	.word	0x100063f4
10001f80:	00010001 	.word	0x00010001
10001f84:	20000970 	.word	0x20000970
10001f88:	2000097d 	.word	0x2000097d

10001f8c <InitDaisyWatchDog>:

void InitDaisyWatchDog()
{
10001f8c:	b580      	push	{r7, lr}
10001f8e:	af00      	add	r7, sp, #0
	//Watchdog
	CCU40_CC41->PSC |= 0x03;
10001f90:	4b1b      	ldr	r3, [pc, #108]	; (10002000 <InitDaisyWatchDog+0x74>)
10001f92:	4a1b      	ldr	r2, [pc, #108]	; (10002000 <InitDaisyWatchDog+0x74>)
10001f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
10001f96:	2103      	movs	r1, #3
10001f98:	430a      	orrs	r2, r1
10001f9a:	625a      	str	r2, [r3, #36]	; 0x24
	CCU40_CC41->PRS = 0xFFFF;
10001f9c:	4b18      	ldr	r3, [pc, #96]	; (10002000 <InitDaisyWatchDog+0x74>)
10001f9e:	4a19      	ldr	r2, [pc, #100]	; (10002004 <InitDaisyWatchDog+0x78>)
10001fa0:	635a      	str	r2, [r3, #52]	; 0x34
	CCU40_CC41->CRS = 0;
10001fa2:	4b17      	ldr	r3, [pc, #92]	; (10002000 <InitDaisyWatchDog+0x74>)
10001fa4:	2200      	movs	r2, #0
10001fa6:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40->GCSS |= (0x01UL << 4);
10001fa8:	4b17      	ldr	r3, [pc, #92]	; (10002008 <InitDaisyWatchDog+0x7c>)
10001faa:	4a17      	ldr	r2, [pc, #92]	; (10002008 <InitDaisyWatchDog+0x7c>)
10001fac:	6912      	ldr	r2, [r2, #16]
10001fae:	2110      	movs	r1, #16
10001fb0:	430a      	orrs	r2, r1
10001fb2:	611a      	str	r2, [r3, #16]

	//Interrupt Compare Match Slice 1
	CCU40_CC41->INTE |= 0x04UL;
10001fb4:	4a12      	ldr	r2, [pc, #72]	; (10002000 <InitDaisyWatchDog+0x74>)
10001fb6:	4912      	ldr	r1, [pc, #72]	; (10002000 <InitDaisyWatchDog+0x74>)
10001fb8:	23a4      	movs	r3, #164	; 0xa4
10001fba:	58cb      	ldr	r3, [r1, r3]
10001fbc:	2104      	movs	r1, #4
10001fbe:	4319      	orrs	r1, r3
10001fc0:	23a4      	movs	r3, #164	; 0xa4
10001fc2:	50d1      	str	r1, [r2, r3]
	CCU40_CC41->SRS |= 0x04UL;
10001fc4:	4a0e      	ldr	r2, [pc, #56]	; (10002000 <InitDaisyWatchDog+0x74>)
10001fc6:	490e      	ldr	r1, [pc, #56]	; (10002000 <InitDaisyWatchDog+0x74>)
10001fc8:	23a8      	movs	r3, #168	; 0xa8
10001fca:	58cb      	ldr	r3, [r1, r3]
10001fcc:	2104      	movs	r1, #4
10001fce:	4319      	orrs	r1, r3
10001fd0:	23a8      	movs	r3, #168	; 0xa8
10001fd2:	50d1      	str	r1, [r2, r3]
	NVIC_SetPriority((IRQn_Type)22, 1);
10001fd4:	2016      	movs	r0, #22
10001fd6:	2101      	movs	r1, #1
10001fd8:	f7ff fe92 	bl	10001d00 <NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type)22);
10001fdc:	2016      	movs	r0, #22
10001fde:	f7ff fe79 	bl	10001cd4 <NVIC_EnableIRQ>

	//Enable slice
	CCU40->GIDLC |= 0x01UL << 1;
10001fe2:	4b09      	ldr	r3, [pc, #36]	; (10002008 <InitDaisyWatchDog+0x7c>)
10001fe4:	4a08      	ldr	r2, [pc, #32]	; (10002008 <InitDaisyWatchDog+0x7c>)
10001fe6:	68d2      	ldr	r2, [r2, #12]
10001fe8:	2102      	movs	r1, #2
10001fea:	430a      	orrs	r2, r1
10001fec:	60da      	str	r2, [r3, #12]
	CCU40_CC41->TCSET |= 0x01UL;
10001fee:	4b04      	ldr	r3, [pc, #16]	; (10002000 <InitDaisyWatchDog+0x74>)
10001ff0:	4a03      	ldr	r2, [pc, #12]	; (10002000 <InitDaisyWatchDog+0x74>)
10001ff2:	68d2      	ldr	r2, [r2, #12]
10001ff4:	2101      	movs	r1, #1
10001ff6:	430a      	orrs	r2, r1
10001ff8:	60da      	str	r2, [r3, #12]
}
10001ffa:	46bd      	mov	sp, r7
10001ffc:	bd80      	pop	{r7, pc}
10001ffe:	46c0      	nop			; (mov r8, r8)
10002000:	48040200 	.word	0x48040200
10002004:	0000ffff 	.word	0x0000ffff
10002008:	48040000 	.word	0x48040000

1000200c <CCU40_1_IRQHandler>:

void DaisyWatchDog_ISR()
{
1000200c:	b580      	push	{r7, lr}
1000200e:	af00      	add	r7, sp, #0
	static uint8_t lastCount;

	if (lastCount == DaisyCount)
10002010:	4b09      	ldr	r3, [pc, #36]	; (10002038 <CCU40_1_IRQHandler+0x2c>)
10002012:	781a      	ldrb	r2, [r3, #0]
10002014:	4b09      	ldr	r3, [pc, #36]	; (1000203c <CCU40_1_IRQHandler+0x30>)
10002016:	781b      	ldrb	r3, [r3, #0]
10002018:	429a      	cmp	r2, r3
1000201a:	d103      	bne.n	10002024 <CCU40_1_IRQHandler+0x18>
	{
		DaisyTimeOut = 1;
1000201c:	4b08      	ldr	r3, [pc, #32]	; (10002040 <CCU40_1_IRQHandler+0x34>)
1000201e:	2201      	movs	r2, #1
10002020:	701a      	strb	r2, [r3, #0]
10002022:	e002      	b.n	1000202a <CCU40_1_IRQHandler+0x1e>
	}else{
		DaisyTimeOut=0;
10002024:	4b06      	ldr	r3, [pc, #24]	; (10002040 <CCU40_1_IRQHandler+0x34>)
10002026:	2200      	movs	r2, #0
10002028:	701a      	strb	r2, [r3, #0]
	}
	lastCount = DaisyCount;
1000202a:	4b04      	ldr	r3, [pc, #16]	; (1000203c <CCU40_1_IRQHandler+0x30>)
1000202c:	781a      	ldrb	r2, [r3, #0]
1000202e:	4b02      	ldr	r3, [pc, #8]	; (10002038 <CCU40_1_IRQHandler+0x2c>)
10002030:	701a      	strb	r2, [r3, #0]
}
10002032:	46bd      	mov	sp, r7
10002034:	bd80      	pop	{r7, pc}
10002036:	46c0      	nop			; (mov r8, r8)
10002038:	2000097e 	.word	0x2000097e
1000203c:	2000097d 	.word	0x2000097d
10002040:	200009a8 	.word	0x200009a8

10002044 <main>:
#include "BlockCommutation.h"
#include "ADC.h"
#include "DaisyChain.h"

int main(void)
{
10002044:	b580      	push	{r7, lr}
10002046:	af00      	add	r7, sp, #0
//	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)


	DAVE_Init();			// Initialization of DAVE Apps
10002048:	f001 f9c4 	bl	100033d4 <DAVE_Init>

	InitBlockCommutation();
1000204c:	f7ff fb40 	bl	100016d0 <InitBlockCommutation>
	InitADC();
10002050:	f7ff f91c 	bl	1000128c <InitADC>
	InitDaisyWatchDog();
10002054:	f7ff ff9a 	bl	10001f8c <InitDaisyWatchDog>
			for (int i=0; i<1000; i++);
			if (cnt < 500)
				cnt++;
		}*/

		DaisyChain();
10002058:	f7ff fec2 	bl	10001de0 <DaisyChain>
	}
1000205c:	e7fc      	b.n	10002058 <main+0x14>
1000205e:	46c0      	nop			; (mov r8, r8)

10002060 <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
10002060:	b580      	push	{r7, lr}
10002062:	b084      	sub	sp, #16
10002064:	af00      	add	r7, sp, #0
10002066:	60f8      	str	r0, [r7, #12]
10002068:	60b9      	str	r1, [r7, #8]
1000206a:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
1000206c:	2301      	movs	r3, #1
1000206e:	425b      	negs	r3, r3
}
10002070:	1c18      	adds	r0, r3, #0
10002072:	46bd      	mov	sp, r7
10002074:	b004      	add	sp, #16
10002076:	bd80      	pop	{r7, pc}

10002078 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
10002078:	b580      	push	{r7, lr}
1000207a:	b084      	sub	sp, #16
1000207c:	af00      	add	r7, sp, #0
1000207e:	60f8      	str	r0, [r7, #12]
10002080:	60b9      	str	r1, [r7, #8]
10002082:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
10002084:	2301      	movs	r3, #1
10002086:	425b      	negs	r3, r3
}
10002088:	1c18      	adds	r0, r3, #0
1000208a:	46bd      	mov	sp, r7
1000208c:	b004      	add	sp, #16
1000208e:	bd80      	pop	{r7, pc}

10002090 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10002090:	b580      	push	{r7, lr}
10002092:	b084      	sub	sp, #16
10002094:	af00      	add	r7, sp, #0
10002096:	60f8      	str	r0, [r7, #12]
10002098:	60b9      	str	r1, [r7, #8]
1000209a:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
1000209c:	2300      	movs	r3, #0
}
1000209e:	1c18      	adds	r0, r3, #0
100020a0:	46bd      	mov	sp, r7
100020a2:	b004      	add	sp, #16
100020a4:	bd80      	pop	{r7, pc}
100020a6:	46c0      	nop			; (mov r8, r8)

100020a8 <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
100020a8:	b580      	push	{r7, lr}
100020aa:	b084      	sub	sp, #16
100020ac:	af00      	add	r7, sp, #0
100020ae:	60f8      	str	r0, [r7, #12]
100020b0:	60b9      	str	r1, [r7, #8]
100020b2:	607a      	str	r2, [r7, #4]
 return -1;
100020b4:	2301      	movs	r3, #1
100020b6:	425b      	negs	r3, r3
}
100020b8:	1c18      	adds	r0, r3, #0
100020ba:	46bd      	mov	sp, r7
100020bc:	b004      	add	sp, #16
100020be:	bd80      	pop	{r7, pc}

100020c0 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
100020c0:	b580      	push	{r7, lr}
100020c2:	af00      	add	r7, sp, #0
 return -1;
100020c4:	2301      	movs	r3, #1
100020c6:	425b      	negs	r3, r3
}
100020c8:	1c18      	adds	r0, r3, #0
100020ca:	46bd      	mov	sp, r7
100020cc:	bd80      	pop	{r7, pc}
100020ce:	46c0      	nop			; (mov r8, r8)

100020d0 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
100020d0:	b580      	push	{r7, lr}
100020d2:	b082      	sub	sp, #8
100020d4:	af00      	add	r7, sp, #0
100020d6:	6078      	str	r0, [r7, #4]
100020d8:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
100020da:	683b      	ldr	r3, [r7, #0]
100020dc:	2b00      	cmp	r3, #0
100020de:	d002      	beq.n	100020e6 <_fstat+0x16>
  return -1;
100020e0:	2301      	movs	r3, #1
100020e2:	425b      	negs	r3, r3
100020e4:	e001      	b.n	100020ea <_fstat+0x1a>
 else
  return -2;
100020e6:	2302      	movs	r3, #2
100020e8:	425b      	negs	r3, r3
}
100020ea:	1c18      	adds	r0, r3, #0
100020ec:	46bd      	mov	sp, r7
100020ee:	b002      	add	sp, #8
100020f0:	bd80      	pop	{r7, pc}
100020f2:	46c0      	nop			; (mov r8, r8)

100020f4 <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
100020f4:	b580      	push	{r7, lr}
100020f6:	b082      	sub	sp, #8
100020f8:	af00      	add	r7, sp, #0
100020fa:	6078      	str	r0, [r7, #4]
100020fc:	6039      	str	r1, [r7, #0]
 if (old == new)
100020fe:	687a      	ldr	r2, [r7, #4]
10002100:	683b      	ldr	r3, [r7, #0]
10002102:	429a      	cmp	r2, r3
10002104:	d102      	bne.n	1000210c <_link+0x18>
  return -1;
10002106:	2301      	movs	r3, #1
10002108:	425b      	negs	r3, r3
1000210a:	e001      	b.n	10002110 <_link+0x1c>
 else
  return -2;
1000210c:	2302      	movs	r3, #2
1000210e:	425b      	negs	r3, r3
}
10002110:	1c18      	adds	r0, r3, #0
10002112:	46bd      	mov	sp, r7
10002114:	b002      	add	sp, #8
10002116:	bd80      	pop	{r7, pc}

10002118 <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
10002118:	b580      	push	{r7, lr}
1000211a:	b082      	sub	sp, #8
1000211c:	af00      	add	r7, sp, #0
1000211e:	6078      	str	r0, [r7, #4]
 return -1;
10002120:	2301      	movs	r3, #1
10002122:	425b      	negs	r3, r3
}
10002124:	1c18      	adds	r0, r3, #0
10002126:	46bd      	mov	sp, r7
10002128:	b002      	add	sp, #8
1000212a:	bd80      	pop	{r7, pc}

1000212c <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
1000212c:	b580      	push	{r7, lr}
1000212e:	b086      	sub	sp, #24
10002130:	af00      	add	r7, sp, #0
10002132:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
10002134:	4b14      	ldr	r3, [pc, #80]	; (10002188 <_sbrk+0x5c>)
10002136:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
10002138:	4b14      	ldr	r3, [pc, #80]	; (1000218c <_sbrk+0x60>)
1000213a:	681b      	ldr	r3, [r3, #0]
1000213c:	2b00      	cmp	r3, #0
1000213e:	d108      	bne.n	10002152 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
10002140:	4b12      	ldr	r3, [pc, #72]	; (1000218c <_sbrk+0x60>)
10002142:	4a13      	ldr	r2, [pc, #76]	; (10002190 <_sbrk+0x64>)
10002144:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
10002146:	4b11      	ldr	r3, [pc, #68]	; (1000218c <_sbrk+0x60>)
10002148:	681a      	ldr	r2, [r3, #0]
1000214a:	697b      	ldr	r3, [r7, #20]
1000214c:	18d2      	adds	r2, r2, r3
1000214e:	4b11      	ldr	r3, [pc, #68]	; (10002194 <_sbrk+0x68>)
10002150:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
10002152:	4b0e      	ldr	r3, [pc, #56]	; (1000218c <_sbrk+0x60>)
10002154:	681b      	ldr	r3, [r3, #0]
10002156:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10002158:	4b0c      	ldr	r3, [pc, #48]	; (1000218c <_sbrk+0x60>)
1000215a:	681b      	ldr	r3, [r3, #0]
1000215c:	1c1a      	adds	r2, r3, #0
1000215e:	687b      	ldr	r3, [r7, #4]
10002160:	18d3      	adds	r3, r2, r3
10002162:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
10002164:	2207      	movs	r2, #7
10002166:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10002168:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
1000216a:	4b0a      	ldr	r3, [pc, #40]	; (10002194 <_sbrk+0x68>)
1000216c:	681b      	ldr	r3, [r3, #0]
1000216e:	68fa      	ldr	r2, [r7, #12]
10002170:	429a      	cmp	r2, r3
10002172:	d301      	bcc.n	10002178 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
10002174:	2300      	movs	r3, #0
10002176:	e003      	b.n	10002180 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
10002178:	4b04      	ldr	r3, [pc, #16]	; (1000218c <_sbrk+0x60>)
1000217a:	68fa      	ldr	r2, [r7, #12]
1000217c:	601a      	str	r2, [r3, #0]
  return CurrBreak;
1000217e:	693b      	ldr	r3, [r7, #16]
 }
}
10002180:	1c18      	adds	r0, r3, #0
10002182:	46bd      	mov	sp, r7
10002184:	b006      	add	sp, #24
10002186:	bd80      	pop	{r7, pc}
10002188:	00003640 	.word	0x00003640
1000218c:	20000984 	.word	0x20000984
10002190:	200009c0 	.word	0x200009c0
10002194:	20000988 	.word	0x20000988

10002198 <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
10002198:	b580      	push	{r7, lr}
1000219a:	b082      	sub	sp, #8
1000219c:	af00      	add	r7, sp, #0
1000219e:	6078      	str	r0, [r7, #4]
 return -1;
100021a0:	2301      	movs	r3, #1
100021a2:	425b      	negs	r3, r3
}
100021a4:	1c18      	adds	r0, r3, #0
100021a6:	46bd      	mov	sp, r7
100021a8:	b002      	add	sp, #8
100021aa:	bd80      	pop	{r7, pc}

100021ac <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
100021ac:	b580      	push	{r7, lr}
100021ae:	b082      	sub	sp, #8
100021b0:	af00      	add	r7, sp, #0
100021b2:	6078      	str	r0, [r7, #4]
 return -1;
100021b4:	2301      	movs	r3, #1
100021b6:	425b      	negs	r3, r3
}
100021b8:	1c18      	adds	r0, r3, #0
100021ba:	46bd      	mov	sp, r7
100021bc:	b002      	add	sp, #8
100021be:	bd80      	pop	{r7, pc}

100021c0 <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
100021c0:	b580      	push	{r7, lr}
100021c2:	b082      	sub	sp, #8
100021c4:	af00      	add	r7, sp, #0
100021c6:	6078      	str	r0, [r7, #4]
100021c8:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
100021ca:	2301      	movs	r3, #1
100021cc:	425b      	negs	r3, r3
}
100021ce:	1c18      	adds	r0, r3, #0
100021d0:	46bd      	mov	sp, r7
100021d2:	b002      	add	sp, #8
100021d4:	bd80      	pop	{r7, pc}
100021d6:	46c0      	nop			; (mov r8, r8)

100021d8 <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
100021d8:	b580      	push	{r7, lr}
100021da:	af00      	add	r7, sp, #0
 return -1;
100021dc:	2301      	movs	r3, #1
100021de:	425b      	negs	r3, r3
}
100021e0:	1c18      	adds	r0, r3, #0
100021e2:	46bd      	mov	sp, r7
100021e4:	bd80      	pop	{r7, pc}
100021e6:	46c0      	nop			; (mov r8, r8)

100021e8 <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
100021e8:	b580      	push	{r7, lr}
100021ea:	af00      	add	r7, sp, #0
 return -1;
100021ec:	2301      	movs	r3, #1
100021ee:	425b      	negs	r3, r3
}
100021f0:	1c18      	adds	r0, r3, #0
100021f2:	46bd      	mov	sp, r7
100021f4:	bd80      	pop	{r7, pc}
100021f6:	46c0      	nop			; (mov r8, r8)

100021f8 <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
100021f8:	b580      	push	{r7, lr}
100021fa:	b082      	sub	sp, #8
100021fc:	af00      	add	r7, sp, #0
100021fe:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
10002200:	e7fe      	b.n	10002200 <_exit+0x8>
10002202:	46c0      	nop			; (mov r8, r8)

10002204 <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
10002204:	b580      	push	{r7, lr}
10002206:	af00      	add	r7, sp, #0
10002208:	46bd      	mov	sp, r7
1000220a:	bd80      	pop	{r7, pc}

1000220c <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
1000220c:	b580      	push	{r7, lr}
1000220e:	b082      	sub	sp, #8
10002210:	af00      	add	r7, sp, #0
10002212:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
10002214:	2301      	movs	r3, #1
10002216:	425b      	negs	r3, r3
}
10002218:	1c18      	adds	r0, r3, #0
1000221a:	46bd      	mov	sp, r7
1000221c:	b002      	add	sp, #8
1000221e:	bd80      	pop	{r7, pc}

10002220 <UART001_lInit>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lInit (const UART001_HandleType* Handle)
{
10002220:	b580      	push	{r7, lr}
10002222:	b084      	sub	sp, #16
10002224:	af00      	add	r7, sp, #0
10002226:	6078      	str	r0, [r7, #4]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10002228:	687b      	ldr	r3, [r7, #4]
1000222a:	681b      	ldr	r3, [r3, #0]
1000222c:	60fb      	str	r3, [r7, #12]
 
  /** UART initialisation  */

  /* Disable UART mode before configuring all USIC registers to avoid 
   * unintended edges */ 
  UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk))); 
1000222e:	68fb      	ldr	r3, [r7, #12]
10002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002232:	2202      	movs	r2, #2
10002234:	1c19      	adds	r1, r3, #0
10002236:	4391      	bics	r1, r2
10002238:	1c0a      	adds	r2, r1, #0
1000223a:	68fb      	ldr	r3, [r7, #12]
1000223c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the USIC Channel */
  UartRegs->KSCFG |= ((((uint32_t)MASK_ONE  & USIC_CH_KSCFG_MODEN_Msk)) | \
1000223e:	68fb      	ldr	r3, [r7, #12]
10002240:	68db      	ldr	r3, [r3, #12]
10002242:	2203      	movs	r2, #3
10002244:	431a      	orrs	r2, r3
10002246:	68fb      	ldr	r3, [r7, #12]
10002248:	60da      	str	r2, [r3, #12]
                         USIC_CH_KSCFG_BPMODEN_Msk)); 
   
  /* Configuration of USIC Channel Fractional Divider */

  /* Fractional divider mode selected */
  UartRegs->FDR |= (((uint32_t)SHIFT_TWO << USIC_CH_FDR_DM_Pos) \
1000224a:	68fb      	ldr	r3, [r7, #12]
1000224c:	691b      	ldr	r3, [r3, #16]
1000224e:	2280      	movs	r2, #128	; 0x80
10002250:	0212      	lsls	r2, r2, #8
10002252:	431a      	orrs	r2, r3
10002254:	68fb      	ldr	r3, [r7, #12]
10002256:	611a      	str	r2, [r3, #16]
                                                     & USIC_CH_FDR_DM_Msk);
  
  /* Step value */
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
10002258:	68fb      	ldr	r3, [r7, #12]
1000225a:	691a      	ldr	r2, [r3, #16]
1000225c:	687b      	ldr	r3, [r7, #4]
1000225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10002260:	059b      	lsls	r3, r3, #22
10002262:	0d9b      	lsrs	r3, r3, #22
10002264:	431a      	orrs	r2, r3
10002266:	68fb      	ldr	r3, [r7, #12]
10002268:	611a      	str	r2, [r3, #16]
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
1000226a:	68fb      	ldr	r3, [r7, #12]
1000226c:	695a      	ldr	r2, [r3, #20]
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
1000226e:	6879      	ldr	r1, [r7, #4]
10002270:	2330      	movs	r3, #48	; 0x30
10002272:	5ccb      	ldrb	r3, [r1, r3]
10002274:	0219      	lsls	r1, r3, #8
10002276:	23c0      	movs	r3, #192	; 0xc0
10002278:	009b      	lsls	r3, r3, #2
1000227a:	4019      	ands	r1, r3
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
1000227c:	687b      	ldr	r3, [r7, #4]
1000227e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
10002280:	0298      	lsls	r0, r3, #10
10002282:	23f8      	movs	r3, #248	; 0xf8
10002284:	01db      	lsls	r3, r3, #7
10002286:	4003      	ands	r3, r0
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
10002288:	4319      	orrs	r1, r3
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_PDIV) << USIC_CH_BRG_PDIV_Pos) &  \
1000228a:	687b      	ldr	r3, [r7, #4]
1000228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
1000228e:	0418      	lsls	r0, r3, #16
10002290:	4b4f      	ldr	r3, [pc, #316]	; (100023d0 <UART001_lInit+0x1b0>)
10002292:	4003      	ands	r3, r0
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
10002294:	430b      	orrs	r3, r1
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
10002296:	431a      	orrs	r2, r3
10002298:	68fb      	ldr	r3, [r7, #12]
1000229a:	615a      	str	r2, [r3, #20]
  /* Configuration of USIC Shift Control */
  
  /* Transmit/Receive LSB first is selected  */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
1000229c:	68fb      	ldr	r3, [r7, #12]
1000229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100022a0:	2281      	movs	r2, #129	; 0x81
100022a2:	0052      	lsls	r2, r2, #1
100022a4:	431a      	orrs	r2, r3
100022a6:	68fb      	ldr	r3, [r7, #12]
100022a8:	635a      	str	r2, [r3, #52]	; 0x34
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
100022aa:	68fb      	ldr	r3, [r7, #12]
100022ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100022ae:	687b      	ldr	r3, [r7, #4]
100022b0:	8b9b      	ldrh	r3, [r3, #28]
100022b2:	0419      	lsls	r1, r3, #16
100022b4:	23fc      	movs	r3, #252	; 0xfc
100022b6:	039b      	lsls	r3, r3, #14
100022b8:	4019      	ands	r1, r3
                      USIC_CH_SCTR_FLE_Msk ) | \
                     (((uint32_t)Handle->DataBits  << USIC_CH_SCTR_WLE_Pos) & \
100022ba:	687b      	ldr	r3, [r7, #4]
100022bc:	8b9b      	ldrh	r3, [r3, #28]
100022be:	0618      	lsls	r0, r3, #24
100022c0:	23f0      	movs	r3, #240	; 0xf0
100022c2:	051b      	lsls	r3, r3, #20
100022c4:	4003      	ands	r3, r0
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
                      USIC_CH_SCTR_FLE_Msk ) | \
100022c6:	430b      	orrs	r3, r1
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
100022c8:	431a      	orrs	r2, r3
100022ca:	68fb      	ldr	r3, [r7, #12]
100022cc:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Configuration of USIC Transmit Control/Status Register */ 
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
	
  UartRegs->TCSR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_TCSR_TDEN_Pos) & \
100022ce:	68fb      	ldr	r3, [r7, #12]
100022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100022d2:	22a0      	movs	r2, #160	; 0xa0
100022d4:	00d2      	lsls	r2, r2, #3
100022d6:	431a      	orrs	r2, r3
100022d8:	68fb      	ldr	r3, [r7, #12]
100022da:	639a      	str	r2, [r3, #56]	; 0x38
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
100022dc:	68fb      	ldr	r3, [r7, #12]
100022de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
100022e0:	687b      	ldr	r3, [r7, #4]
100022e2:	7d5b      	ldrb	r3, [r3, #21]
100022e4:	0059      	lsls	r1, r3, #1
100022e6:	2302      	movs	r3, #2
100022e8:	4019      	ands	r1, r3
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
100022ea:	687b      	ldr	r3, [r7, #4]
100022ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
100022ee:	0218      	lsls	r0, r3, #8
100022f0:	23f8      	movs	r3, #248	; 0xf8
100022f2:	015b      	lsls	r3, r3, #5
100022f4:	4003      	ands	r3, r0
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
100022f6:	430b      	orrs	r3, r1
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
100022f8:	4313      	orrs	r3, r2
100022fa:	2201      	movs	r2, #1
100022fc:	431a      	orrs	r2, r3
100022fe:	68fb      	ldr	r3, [r7, #12]
10002300:	63da      	str	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
    USIC_CH_PCR_ASCMode_SP_Msk));
      
  if(Handle->RecvNoiseEn)
10002302:	687a      	ldr	r2, [r7, #4]
10002304:	2324      	movs	r3, #36	; 0x24
10002306:	5cd3      	ldrb	r3, [r2, r3]
10002308:	2b00      	cmp	r3, #0
1000230a:	d005      	beq.n	10002318 <UART001_lInit+0xf8>
  {
   	/* Enable Receiver Noise Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR5_Pos) & \
1000230c:	68fb      	ldr	r3, [r7, #12]
1000230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002310:	2220      	movs	r2, #32
10002312:	431a      	orrs	r2, r3
10002314:	68fb      	ldr	r3, [r7, #12]
10002316:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	  USIC_CH_PCR_CTR5_Msk); 
  }
  
  if(Handle->FormatErrEn)
10002318:	687a      	ldr	r2, [r7, #4]
1000231a:	2325      	movs	r3, #37	; 0x25
1000231c:	5cd3      	ldrb	r3, [r2, r3]
1000231e:	2b00      	cmp	r3, #0
10002320:	d005      	beq.n	1000232e <UART001_lInit+0x10e>
  {
   	/* Enable Format Error Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR6_Pos) & \
10002322:	68fb      	ldr	r3, [r7, #12]
10002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002326:	2240      	movs	r2, #64	; 0x40
10002328:	431a      	orrs	r2, r3
1000232a:	68fb      	ldr	r3, [r7, #12]
1000232c:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	                             USIC_CH_PCR_CTR6_Msk); 
  }
  
  if(Handle->FrameFinEn)
1000232e:	687a      	ldr	r2, [r7, #4]
10002330:	2326      	movs	r3, #38	; 0x26
10002332:	5cd3      	ldrb	r3, [r2, r3]
10002334:	2b00      	cmp	r3, #0
10002336:	d005      	beq.n	10002344 <UART001_lInit+0x124>
  {
   	/* Enable Frame Finished Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR7_Pos) & \
10002338:	68fb      	ldr	r3, [r7, #12]
1000233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000233c:	2280      	movs	r2, #128	; 0x80
1000233e:	431a      	orrs	r2, r3
10002340:	68fb      	ldr	r3, [r7, #12]
10002342:	63da      	str	r2, [r3, #60]	; 0x3c
		  	                                   	  	 USIC_CH_PCR_CTR7_Msk); 
  } 
  
  if (Handle->TxFifoEn)
10002344:	687b      	ldr	r3, [r7, #4]
10002346:	7f9b      	ldrb	r3, [r3, #30]
10002348:	2b00      	cmp	r3, #0
1000234a:	d011      	beq.n	10002370 <UART001_lInit+0x150>
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
1000234c:	68fa      	ldr	r2, [r7, #12]
1000234e:	2384      	movs	r3, #132	; 0x84
10002350:	005b      	lsls	r3, r3, #1
10002352:	58d2      	ldr	r2, [r2, r3]
10002354:	6879      	ldr	r1, [r7, #4]
10002356:	2320      	movs	r3, #32
10002358:	5ccb      	ldrb	r3, [r1, r3]
1000235a:	0219      	lsls	r1, r3, #8
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
1000235c:	23fc      	movs	r3, #252	; 0xfc
1000235e:	019b      	lsls	r3, r3, #6
10002360:	400b      	ands	r3, r1
  } 
  
  if (Handle->TxFifoEn)
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
10002362:	1c11      	adds	r1, r2, #0
10002364:	4319      	orrs	r1, r3
10002366:	68fa      	ldr	r2, [r7, #12]
10002368:	2384      	movs	r3, #132	; 0x84
1000236a:	005b      	lsls	r3, r3, #1
1000236c:	50d1      	str	r1, [r2, r3]
1000236e:	e006      	b.n	1000237e <UART001_lInit+0x15e>
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
  }
  else
  {
	  /* TBIF is set to simplify polling*/
	  UartRegs->PSR_ASCMode |= (((uint32_t)SHIFT_ONE  << USIC_CH_PSR_TBIF_Pos) & \
10002370:	68fb      	ldr	r3, [r7, #12]
10002372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002374:	2280      	movs	r2, #128	; 0x80
10002376:	0192      	lsls	r2, r2, #6
10002378:	431a      	orrs	r2, r3
1000237a:	68fb      	ldr	r3, [r7, #12]
1000237c:	649a      	str	r2, [r3, #72]	; 0x48
	 		  (uint32_t)USIC_CH_PSR_TBIF_Msk);
  }
  
  if (Handle->RxFifoEn)
1000237e:	687b      	ldr	r3, [r7, #4]
10002380:	7fdb      	ldrb	r3, [r3, #31]
10002382:	2b00      	cmp	r3, #0
10002384:	d013      	beq.n	100023ae <UART001_lInit+0x18e>
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
10002386:	68fa      	ldr	r2, [r7, #12]
10002388:	2386      	movs	r3, #134	; 0x86
1000238a:	005b      	lsls	r3, r3, #1
1000238c:	58d2      	ldr	r2, [r2, r3]
1000238e:	6879      	ldr	r1, [r7, #4]
10002390:	2321      	movs	r3, #33	; 0x21
10002392:	5ccb      	ldrb	r3, [r1, r3]
10002394:	0219      	lsls	r1, r3, #8
						   USIC_CH_RBCTR_LIMIT_Pos) & USIC_CH_RBCTR_LIMIT_Msk) | \
10002396:	23fc      	movs	r3, #252	; 0xfc
10002398:	019b      	lsls	r3, r3, #6
1000239a:	400b      	ands	r3, r1
  }
  
  if (Handle->RxFifoEn)
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
1000239c:	4313      	orrs	r3, r2
1000239e:	2280      	movs	r2, #128	; 0x80
100023a0:	0552      	lsls	r2, r2, #21
100023a2:	1c11      	adds	r1, r2, #0
100023a4:	4319      	orrs	r1, r3
100023a6:	68fa      	ldr	r2, [r7, #12]
100023a8:	2386      	movs	r3, #134	; 0x86
100023aa:	005b      	lsls	r3, r3, #1
100023ac:	50d1      	str	r1, [r2, r3]
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
100023ae:	68fb      	ldr	r3, [r7, #12]
100023b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
100023b2:	687b      	ldr	r3, [r7, #4]
100023b4:	7d9b      	ldrb	r3, [r3, #22]
100023b6:	0219      	lsls	r1, r3, #8
100023b8:	23c0      	movs	r3, #192	; 0xc0
100023ba:	009b      	lsls	r3, r3, #2
100023bc:	400b      	ands	r3, r1
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
100023be:	4313      	orrs	r3, r2
100023c0:	2202      	movs	r2, #2
100023c2:	431a      	orrs	r2, r3
100023c4:	68fb      	ldr	r3, [r7, #12]
100023c6:	641a      	str	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
                     USIC_CH_CCR_PM_Msk));

}
100023c8:	46bd      	mov	sp, r7
100023ca:	b004      	add	sp, #16
100023cc:	bd80      	pop	{r7, pc}
100023ce:	46c0      	nop			; (mov r8, r8)
100023d0:	03ff0000 	.word	0x03ff0000

100023d4 <UART001_lConfigTXPin>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
100023d4:	b590      	push	{r4, r7, lr}
100023d6:	b085      	sub	sp, #20
100023d8:	af00      	add	r7, sp, #0
100023da:	6078      	str	r0, [r7, #4]
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
100023dc:	687b      	ldr	r3, [r7, #4]
100023de:	685b      	ldr	r3, [r3, #4]
100023e0:	687a      	ldr	r2, [r7, #4]
100023e2:	6852      	ldr	r2, [r2, #4]
100023e4:	6851      	ldr	r1, [r2, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
100023e6:	687a      	ldr	r2, [r7, #4]
100023e8:	7a12      	ldrb	r2, [r2, #8]
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
100023ea:	2001      	movs	r0, #1
100023ec:	1c04      	adds	r4, r0, #0
100023ee:	4094      	lsls	r4, r2
100023f0:	1c22      	adds	r2, r4, #0
100023f2:	430a      	orrs	r2, r1
100023f4:	605a      	str	r2, [r3, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
     
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;
100023f6:	687b      	ldr	r3, [r7, #4]
100023f8:	7a1b      	ldrb	r3, [r3, #8]
100023fa:	60fb      	str	r3, [r7, #12]

    if (FIRST_NIBBLE > TempPortPin)
100023fc:	68fb      	ldr	r3, [r7, #12]
100023fe:	2b03      	cmp	r3, #3
10002400:	d80e      	bhi.n	10002420 <UART001_lConfigTXPin+0x4c>
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
10002402:	687b      	ldr	r3, [r7, #4]
10002404:	685b      	ldr	r3, [r3, #4]
10002406:	687a      	ldr	r2, [r7, #4]
10002408:	6852      	ldr	r2, [r2, #4]
1000240a:	6911      	ldr	r1, [r2, #16]
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
1000240c:	68fa      	ldr	r2, [r7, #12]
1000240e:	00d2      	lsls	r2, r2, #3
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10002410:	3203      	adds	r2, #3
10002412:	2018      	movs	r0, #24
10002414:	1c04      	adds	r4, r0, #0
10002416:	4094      	lsls	r4, r2
10002418:	1c22      	adds	r2, r4, #0
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
1000241a:	430a      	orrs	r2, r1
1000241c:	611a      	str	r2, [r3, #16]
1000241e:	e046      	b.n	100024ae <UART001_lConfigTXPin+0xda>
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
10002420:	68fb      	ldr	r3, [r7, #12]
10002422:	2b03      	cmp	r3, #3
10002424:	d914      	bls.n	10002450 <UART001_lConfigTXPin+0x7c>
10002426:	68fb      	ldr	r3, [r7, #12]
10002428:	2b07      	cmp	r3, #7
1000242a:	d811      	bhi.n	10002450 <UART001_lConfigTXPin+0x7c>
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
1000242c:	68fb      	ldr	r3, [r7, #12]
1000242e:	3b04      	subs	r3, #4
10002430:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
10002432:	687b      	ldr	r3, [r7, #4]
10002434:	685b      	ldr	r3, [r3, #4]
10002436:	687a      	ldr	r2, [r7, #4]
10002438:	6852      	ldr	r2, [r2, #4]
1000243a:	6951      	ldr	r1, [r2, #20]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
1000243c:	68fa      	ldr	r2, [r7, #12]
1000243e:	00d2      	lsls	r2, r2, #3
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10002440:	3203      	adds	r2, #3
10002442:	2018      	movs	r0, #24
10002444:	1c04      	adds	r4, r0, #0
10002446:	4094      	lsls	r4, r2
10002448:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
1000244a:	430a      	orrs	r2, r1
1000244c:	615a      	str	r2, [r3, #20]
1000244e:	e02e      	b.n	100024ae <UART001_lConfigTXPin+0xda>
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
10002450:	68fb      	ldr	r3, [r7, #12]
10002452:	2b07      	cmp	r3, #7
10002454:	d914      	bls.n	10002480 <UART001_lConfigTXPin+0xac>
10002456:	68fb      	ldr	r3, [r7, #12]
10002458:	2b0b      	cmp	r3, #11
1000245a:	d811      	bhi.n	10002480 <UART001_lConfigTXPin+0xac>
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
1000245c:	68fb      	ldr	r3, [r7, #12]
1000245e:	3b08      	subs	r3, #8
10002460:	60fb      	str	r3, [r7, #12]
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
10002462:	687b      	ldr	r3, [r7, #4]
10002464:	685b      	ldr	r3, [r3, #4]
10002466:	687a      	ldr	r2, [r7, #4]
10002468:	6852      	ldr	r2, [r2, #4]
1000246a:	6991      	ldr	r1, [r2, #24]
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
1000246c:	68fa      	ldr	r2, [r7, #12]
1000246e:	00d2      	lsls	r2, r2, #3
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10002470:	3203      	adds	r2, #3
10002472:	2018      	movs	r0, #24
10002474:	1c04      	adds	r4, r0, #0
10002476:	4094      	lsls	r4, r2
10002478:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
1000247a:	430a      	orrs	r2, r1
1000247c:	619a      	str	r2, [r3, #24]
1000247e:	e016      	b.n	100024ae <UART001_lConfigTXPin+0xda>
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
10002480:	68fb      	ldr	r3, [r7, #12]
10002482:	2b0b      	cmp	r3, #11
10002484:	d913      	bls.n	100024ae <UART001_lConfigTXPin+0xda>
10002486:	68fb      	ldr	r3, [r7, #12]
10002488:	2b0f      	cmp	r3, #15
1000248a:	d810      	bhi.n	100024ae <UART001_lConfigTXPin+0xda>
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
1000248c:	68fb      	ldr	r3, [r7, #12]
1000248e:	3b0c      	subs	r3, #12
10002490:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
10002492:	687b      	ldr	r3, [r7, #4]
10002494:	685b      	ldr	r3, [r3, #4]
10002496:	687a      	ldr	r2, [r7, #4]
10002498:	6852      	ldr	r2, [r2, #4]
1000249a:	69d1      	ldr	r1, [r2, #28]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
1000249c:	68fa      	ldr	r2, [r7, #12]
1000249e:	00d2      	lsls	r2, r2, #3
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
100024a0:	3203      	adds	r2, #3
100024a2:	2018      	movs	r0, #24
100024a4:	1c04      	adds	r4, r0, #0
100024a6:	4094      	lsls	r4, r2
100024a8:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
100024aa:	430a      	orrs	r2, r1
100024ac:	61da      	str	r2, [r3, #28]
							(TempPortPin * 8U)));
    }
	else
	{}

}
100024ae:	46bd      	mov	sp, r7
100024b0:	b005      	add	sp, #20
100024b2:	bd90      	pop	{r4, r7, pc}

100024b4 <UART001_labsRealType>:
 * 				 -ve float value if Number is >= 0.0 <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
float UART001_labsRealType(float Number)
{
100024b4:	b580      	push	{r7, lr}
100024b6:	b084      	sub	sp, #16
100024b8:	af00      	add	r7, sp, #0
100024ba:	6078      	str	r0, [r7, #4]
   float return_value;
	if (Number < 0.0F){
100024bc:	6878      	ldr	r0, [r7, #4]
100024be:	2100      	movs	r1, #0
100024c0:	f001 fec0 	bl	10004244 <__aeabi_fcmplt>
100024c4:	1c03      	adds	r3, r0, #0
100024c6:	2b00      	cmp	r3, #0
100024c8:	d005      	beq.n	100024d6 <UART001_labsRealType+0x22>
		return_value = -Number;
100024ca:	687b      	ldr	r3, [r7, #4]
100024cc:	2280      	movs	r2, #128	; 0x80
100024ce:	0612      	lsls	r2, r2, #24
100024d0:	4053      	eors	r3, r2
100024d2:	60fb      	str	r3, [r7, #12]
100024d4:	e001      	b.n	100024da <UART001_labsRealType+0x26>
	}
	else{
		return_value = Number;
100024d6:	687b      	ldr	r3, [r7, #4]
100024d8:	60fb      	str	r3, [r7, #12]
	}
	return return_value;
100024da:	68fb      	ldr	r3, [r7, #12]
}
100024dc:	1c18      	adds	r0, r3, #0
100024de:	46bd      	mov	sp, r7
100024e0:	b004      	add	sp, #16
100024e2:	bd80      	pop	{r7, pc}

100024e4 <UART001_lConfigureBaudRate>:
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
void UART001_lConfigureBaudRate\
                              (uint32_t BaudRate,uint32_t* Pdiv,uint32_t* Step)
{
100024e4:	b5b0      	push	{r4, r5, r7, lr}
100024e6:	b0ae      	sub	sp, #184	; 0xb8
100024e8:	af00      	add	r7, sp, #0
100024ea:	60f8      	str	r0, [r7, #12]
100024ec:	60b9      	str	r1, [r7, #8]
100024ee:	607a      	str	r2, [r7, #4]
	uint32_t fdr_step = 0x00U;
100024f0:	2300      	movs	r3, #0
100024f2:	20b4      	movs	r0, #180	; 0xb4
100024f4:	19c0      	adds	r0, r0, r7
100024f6:	6003      	str	r3, [r0, #0]
	uint32_t brg_pdiv = 0x00U;
100024f8:	2300      	movs	r3, #0
100024fa:	21b0      	movs	r1, #176	; 0xb0
100024fc:	19c9      	adds	r1, r1, r7
100024fe:	600b      	str	r3, [r1, #0]
	uint32_t divisor_in = BaudRate ;
10002500:	68fb      	ldr	r3, [r7, #12]
10002502:	22ac      	movs	r2, #172	; 0xac
10002504:	19d2      	adds	r2, r2, r7
10002506:	6013      	str	r3, [r2, #0]
	/* fPB / 1024 * (Brg_dctq + 1) */
	uint32_t dividend_in = 0U;
10002508:	2300      	movs	r3, #0
1000250a:	20a8      	movs	r0, #168	; 0xa8
1000250c:	19c0      	adds	r0, r0, r7
1000250e:	6003      	str	r3, [r0, #0]
	uint32_t divisor_array[4];
	uint32_t dividend_array[4];
	uint32_t div_array[4];
	uint32_t max, frac,divisor1,divisor2,dividend1,dividend2;
	uint32_t array_count,array_count_1,array_count_2;
	uint32_t do_while_break = 0U;
10002510:	2300      	movs	r3, #0
10002512:	2188      	movs	r1, #136	; 0x88
10002514:	19c9      	adds	r1, r1, r7
10002516:	600b      	str	r3, [r1, #0]
	uint32_t temp = 0U;
10002518:	2300      	movs	r3, #0
1000251a:	67fb      	str	r3, [r7, #124]	; 0x7c
	float div_factor;
	uint32_t loop_cnt;
	bool swapped;
	dividend_in = (uint32_t)((uint32_t)(UART001_CLOCK * 1000000)/ \
1000251c:	4be0      	ldr	r3, [pc, #896]	; (100028a0 <UART001_lConfigureBaudRate+0x3bc>)
1000251e:	22a8      	movs	r2, #168	; 0xa8
10002520:	19d2      	adds	r2, r2, r7
10002522:	6013      	str	r3, [r2, #0]
                    	(UART001_MAX_VALUE * UART001_DCTQ_VALUE)); 
	/* swap if divisor_in/dividend_in > max_divisor/max_dividend */
	div_factor = (float) divisor_in/(float) dividend_in;
10002524:	23ac      	movs	r3, #172	; 0xac
10002526:	19db      	adds	r3, r3, r7
10002528:	6818      	ldr	r0, [r3, #0]
1000252a:	f002 fc09 	bl	10004d40 <__aeabi_ui2f>
1000252e:	1c04      	adds	r4, r0, #0
10002530:	21a8      	movs	r1, #168	; 0xa8
10002532:	19c9      	adds	r1, r1, r7
10002534:	6808      	ldr	r0, [r1, #0]
10002536:	f002 fc03 	bl	10004d40 <__aeabi_ui2f>
1000253a:	1c03      	adds	r3, r0, #0
1000253c:	1c20      	adds	r0, r4, #0
1000253e:	1c19      	adds	r1, r3, #0
10002540:	f001 fee2 	bl	10004308 <__aeabi_fdiv>
10002544:	1c03      	adds	r3, r0, #0
10002546:	67bb      	str	r3, [r7, #120]	; 0x78
	if ( div_factor > 1.0F)
10002548:	6fb8      	ldr	r0, [r7, #120]	; 0x78
1000254a:	21fe      	movs	r1, #254	; 0xfe
1000254c:	0589      	lsls	r1, r1, #22
1000254e:	f001 fe8d 	bl	1000426c <__aeabi_fcmpgt>
10002552:	1c03      	adds	r3, r0, #0
10002554:	2b00      	cmp	r3, #0
10002556:	d017      	beq.n	10002588 <UART001_lConfigureBaudRate+0xa4>
	{
		max = UART001_MAX_VALUE;
10002558:	2380      	movs	r3, #128	; 0x80
1000255a:	00db      	lsls	r3, r3, #3
1000255c:	22a4      	movs	r2, #164	; 0xa4
1000255e:	19d2      	adds	r2, r2, r7
10002560:	6013      	str	r3, [r2, #0]
		swapped = 1U;
10002562:	1c3b      	adds	r3, r7, #0
10002564:	3383      	adds	r3, #131	; 0x83
10002566:	2201      	movs	r2, #1
10002568:	701a      	strb	r2, [r3, #0]
		temp = divisor_in;
1000256a:	20ac      	movs	r0, #172	; 0xac
1000256c:	19c0      	adds	r0, r0, r7
1000256e:	6803      	ldr	r3, [r0, #0]
10002570:	67fb      	str	r3, [r7, #124]	; 0x7c
		divisor_in = dividend_in;
10002572:	21a8      	movs	r1, #168	; 0xa8
10002574:	19c9      	adds	r1, r1, r7
10002576:	680b      	ldr	r3, [r1, #0]
10002578:	22ac      	movs	r2, #172	; 0xac
1000257a:	19d2      	adds	r2, r2, r7
1000257c:	6013      	str	r3, [r2, #0]
		dividend_in = temp;
1000257e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10002580:	20a8      	movs	r0, #168	; 0xa8
10002582:	19c0      	adds	r0, r0, r7
10002584:	6003      	str	r3, [r0, #0]
10002586:	e008      	b.n	1000259a <UART001_lConfigureBaudRate+0xb6>
	}
	else
	{
		swapped = 0U;
10002588:	1c3b      	adds	r3, r7, #0
1000258a:	3383      	adds	r3, #131	; 0x83
1000258c:	2200      	movs	r2, #0
1000258e:	701a      	strb	r2, [r3, #0]
		max = UART001_MAX_VALUE;
10002590:	2380      	movs	r3, #128	; 0x80
10002592:	00db      	lsls	r3, r3, #3
10002594:	21a4      	movs	r1, #164	; 0xa4
10002596:	19c9      	adds	r1, r1, r7
10002598:	600b      	str	r3, [r1, #0]
	}
	/*Init parameters*/
	loop_cnt = 0U;
1000259a:	2300      	movs	r3, #0
1000259c:	2284      	movs	r2, #132	; 0x84
1000259e:	19d2      	adds	r2, r2, r7
100025a0:	6013      	str	r3, [r2, #0]
	array_count = 0U;
100025a2:	2300      	movs	r3, #0
100025a4:	2090      	movs	r0, #144	; 0x90
100025a6:	19c0      	adds	r0, r0, r7
100025a8:	6003      	str	r3, [r0, #0]
	array_count_1 = 0U;
100025aa:	2300      	movs	r3, #0
100025ac:	218c      	movs	r1, #140	; 0x8c
100025ae:	19c9      	adds	r1, r1, r7
100025b0:	600b      	str	r3, [r1, #0]
	divisor[0] = divisor_in;
100025b2:	1c3b      	adds	r3, r7, #0
100025b4:	3360      	adds	r3, #96	; 0x60
100025b6:	20ac      	movs	r0, #172	; 0xac
100025b8:	19c0      	adds	r0, r0, r7
100025ba:	6802      	ldr	r2, [r0, #0]
100025bc:	601a      	str	r2, [r3, #0]
	remainder[0] = dividend_in;
100025be:	1c3b      	adds	r3, r7, #0
100025c0:	3340      	adds	r3, #64	; 0x40
100025c2:	21a8      	movs	r1, #168	; 0xa8
100025c4:	19c9      	adds	r1, r1, r7
100025c6:	680a      	ldr	r2, [r1, #0]
100025c8:	601a      	str	r2, [r3, #0]
	divisor_array[0] = 1U;
100025ca:	1c3b      	adds	r3, r7, #0
100025cc:	3330      	adds	r3, #48	; 0x30
100025ce:	2201      	movs	r2, #1
100025d0:	601a      	str	r2, [r3, #0]
	dividend_array[0] = 0U;
100025d2:	1c3b      	adds	r3, r7, #0
100025d4:	3320      	adds	r3, #32
100025d6:	2200      	movs	r2, #0
100025d8:	601a      	str	r2, [r3, #0]
	do {
			++loop_cnt;
100025da:	2284      	movs	r2, #132	; 0x84
100025dc:	19d2      	adds	r2, r2, r7
100025de:	6813      	ldr	r3, [r2, #0]
100025e0:	3301      	adds	r3, #1
100025e2:	2084      	movs	r0, #132	; 0x84
100025e4:	19c0      	adds	r0, r0, r7
100025e6:	6003      	str	r3, [r0, #0]
			array_count_2 = array_count_1; /* on first loop is not used */
100025e8:	218c      	movs	r1, #140	; 0x8c
100025ea:	19c9      	adds	r1, r1, r7
100025ec:	680b      	ldr	r3, [r1, #0]
100025ee:	677b      	str	r3, [r7, #116]	; 0x74
			array_count_1 = array_count;
100025f0:	2290      	movs	r2, #144	; 0x90
100025f2:	19d2      	adds	r2, r2, r7
100025f4:	6813      	ldr	r3, [r2, #0]
100025f6:	208c      	movs	r0, #140	; 0x8c
100025f8:	19c0      	adds	r0, r0, r7
100025fa:	6003      	str	r3, [r0, #0]
			array_count = loop_cnt % 4U;
100025fc:	2184      	movs	r1, #132	; 0x84
100025fe:	19c9      	adds	r1, r1, r7
10002600:	680a      	ldr	r2, [r1, #0]
10002602:	2303      	movs	r3, #3
10002604:	4013      	ands	r3, r2
10002606:	2290      	movs	r2, #144	; 0x90
10002608:	19d2      	adds	r2, r2, r7
1000260a:	6013      	str	r3, [r2, #0]
			dividend[array_count] = divisor[array_count_1];
1000260c:	1c3b      	adds	r3, r7, #0
1000260e:	3360      	adds	r3, #96	; 0x60
10002610:	208c      	movs	r0, #140	; 0x8c
10002612:	19c0      	adds	r0, r0, r7
10002614:	6802      	ldr	r2, [r0, #0]
10002616:	0092      	lsls	r2, r2, #2
10002618:	58d1      	ldr	r1, [r2, r3]
1000261a:	1c3b      	adds	r3, r7, #0
1000261c:	3350      	adds	r3, #80	; 0x50
1000261e:	2090      	movs	r0, #144	; 0x90
10002620:	19c0      	adds	r0, r0, r7
10002622:	6802      	ldr	r2, [r0, #0]
10002624:	0092      	lsls	r2, r2, #2
10002626:	50d1      	str	r1, [r2, r3]
			
			divisor[array_count] = remainder[array_count_1];
10002628:	1c3b      	adds	r3, r7, #0
1000262a:	3340      	adds	r3, #64	; 0x40
1000262c:	218c      	movs	r1, #140	; 0x8c
1000262e:	19c9      	adds	r1, r1, r7
10002630:	680a      	ldr	r2, [r1, #0]
10002632:	0092      	lsls	r2, r2, #2
10002634:	58d1      	ldr	r1, [r2, r3]
10002636:	1c3b      	adds	r3, r7, #0
10002638:	3360      	adds	r3, #96	; 0x60
1000263a:	2090      	movs	r0, #144	; 0x90
1000263c:	19c0      	adds	r0, r0, r7
1000263e:	6802      	ldr	r2, [r0, #0]
10002640:	0092      	lsls	r2, r2, #2
10002642:	50d1      	str	r1, [r2, r3]
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
10002644:	1c3b      	adds	r3, r7, #0
10002646:	3350      	adds	r3, #80	; 0x50
10002648:	2190      	movs	r1, #144	; 0x90
1000264a:	19c9      	adds	r1, r1, r7
1000264c:	680a      	ldr	r2, [r1, #0]
1000264e:	0092      	lsls	r2, r2, #2
10002650:	58d2      	ldr	r2, [r2, r3]
10002652:	1c3b      	adds	r3, r7, #0
10002654:	3360      	adds	r3, #96	; 0x60
10002656:	2090      	movs	r0, #144	; 0x90
10002658:	19c0      	adds	r0, r0, r7
1000265a:	6801      	ldr	r1, [r0, #0]
1000265c:	0089      	lsls	r1, r1, #2
1000265e:	58cb      	ldr	r3, [r1, r3]
10002660:	1c10      	adds	r0, r2, #0
10002662:	1c19      	adds	r1, r3, #0
10002664:	f001 fd8c 	bl	10004180 <__aeabi_uidiv>
10002668:	1c03      	adds	r3, r0, #0
1000266a:	1c19      	adds	r1, r3, #0
			array_count = loop_cnt % 4U;
			dividend[array_count] = divisor[array_count_1];
			
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
1000266c:	1c3b      	adds	r3, r7, #0
1000266e:	3310      	adds	r3, #16
10002670:	2090      	movs	r0, #144	; 0x90
10002672:	19c0      	adds	r0, r0, r7
10002674:	6802      	ldr	r2, [r0, #0]
10002676:	0092      	lsls	r2, r2, #2
10002678:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
			                       dividend[array_count] % divisor[array_count];
1000267a:	1c3b      	adds	r3, r7, #0
1000267c:	3350      	adds	r3, #80	; 0x50
1000267e:	2190      	movs	r1, #144	; 0x90
10002680:	19c9      	adds	r1, r1, r7
10002682:	680a      	ldr	r2, [r1, #0]
10002684:	0092      	lsls	r2, r2, #2
10002686:	58d2      	ldr	r2, [r2, r3]
10002688:	1c3b      	adds	r3, r7, #0
1000268a:	3360      	adds	r3, #96	; 0x60
1000268c:	2090      	movs	r0, #144	; 0x90
1000268e:	19c0      	adds	r0, r0, r7
10002690:	6801      	ldr	r1, [r0, #0]
10002692:	0089      	lsls	r1, r1, #2
10002694:	58cb      	ldr	r3, [r1, r3]
10002696:	1c10      	adds	r0, r2, #0
10002698:	1c19      	adds	r1, r3, #0
1000269a:	f001 fdb5 	bl	10004208 <__aeabi_uidivmod>
1000269e:	1c0b      	adds	r3, r1, #0
100026a0:	1c19      	adds	r1, r3, #0
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
100026a2:	1c3b      	adds	r3, r7, #0
100026a4:	3340      	adds	r3, #64	; 0x40
100026a6:	2090      	movs	r0, #144	; 0x90
100026a8:	19c0      	adds	r0, r0, r7
100026aa:	6802      	ldr	r2, [r0, #0]
100026ac:	0092      	lsls	r2, r2, #2
100026ae:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] % divisor[array_count];
			
			/* This executed only on first loop */
			if (loop_cnt == 1U)
100026b0:	2184      	movs	r1, #132	; 0x84
100026b2:	19c9      	adds	r1, r1, r7
100026b4:	680b      	ldr	r3, [r1, #0]
100026b6:	2b01      	cmp	r3, #1
100026b8:	d10a      	bne.n	100026d0 <UART001_lConfigureBaudRate+0x1ec>
			{ 
				divisor_array[1] = div_array[1];
100026ba:	1c3b      	adds	r3, r7, #0
100026bc:	3310      	adds	r3, #16
100026be:	685a      	ldr	r2, [r3, #4]
100026c0:	1c3b      	adds	r3, r7, #0
100026c2:	3330      	adds	r3, #48	; 0x30
100026c4:	605a      	str	r2, [r3, #4]
				dividend_array[1] = 1U;
100026c6:	1c3b      	adds	r3, r7, #0
100026c8:	3320      	adds	r3, #32
100026ca:	2201      	movs	r2, #1
100026cc:	605a      	str	r2, [r3, #4]
100026ce:	e037      	b.n	10002740 <UART001_lConfigureBaudRate+0x25c>
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
100026d0:	1c3b      	adds	r3, r7, #0
100026d2:	3310      	adds	r3, #16
100026d4:	2090      	movs	r0, #144	; 0x90
100026d6:	19c0      	adds	r0, r0, r7
100026d8:	6802      	ldr	r2, [r0, #0]
100026da:	0092      	lsls	r2, r2, #2
100026dc:	58d3      	ldr	r3, [r2, r3]
100026de:	1c3a      	adds	r2, r7, #0
100026e0:	3230      	adds	r2, #48	; 0x30
100026e2:	208c      	movs	r0, #140	; 0x8c
100026e4:	19c0      	adds	r0, r0, r7
100026e6:	6801      	ldr	r1, [r0, #0]
100026e8:	0089      	lsls	r1, r1, #2
100026ea:	588a      	ldr	r2, [r1, r2]
100026ec:	435a      	muls	r2, r3
				       divisor_array[array_count_2];
100026ee:	1c3b      	adds	r3, r7, #0
100026f0:	3330      	adds	r3, #48	; 0x30
100026f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
100026f4:	0089      	lsls	r1, r1, #2
100026f6:	58cb      	ldr	r3, [r1, r3]
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
100026f8:	18d1      	adds	r1, r2, r3
				divisor_array[1] = div_array[1];
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
100026fa:	1c3b      	adds	r3, r7, #0
100026fc:	3330      	adds	r3, #48	; 0x30
100026fe:	2090      	movs	r0, #144	; 0x90
10002700:	19c0      	adds	r0, r0, r7
10002702:	6802      	ldr	r2, [r0, #0]
10002704:	0092      	lsls	r2, r2, #2
10002706:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10002708:	1c3b      	adds	r3, r7, #0
1000270a:	3310      	adds	r3, #16
1000270c:	2190      	movs	r1, #144	; 0x90
1000270e:	19c9      	adds	r1, r1, r7
10002710:	680a      	ldr	r2, [r1, #0]
10002712:	0092      	lsls	r2, r2, #2
10002714:	58d3      	ldr	r3, [r2, r3]
10002716:	1c3a      	adds	r2, r7, #0
10002718:	3220      	adds	r2, #32
1000271a:	208c      	movs	r0, #140	; 0x8c
1000271c:	19c0      	adds	r0, r0, r7
1000271e:	6801      	ldr	r1, [r0, #0]
10002720:	0089      	lsls	r1, r1, #2
10002722:	588a      	ldr	r2, [r1, r2]
10002724:	435a      	muls	r2, r3
				       dividend_array[array_count_2];
10002726:	1c3b      	adds	r3, r7, #0
10002728:	3320      	adds	r3, #32
1000272a:	6f79      	ldr	r1, [r7, #116]	; 0x74
1000272c:	0089      	lsls	r1, r1, #2
1000272e:	58cb      	ldr	r3, [r1, r3]
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10002730:	18d1      	adds	r1, r2, r3
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
10002732:	1c3b      	adds	r3, r7, #0
10002734:	3320      	adds	r3, #32
10002736:	2090      	movs	r0, #144	; 0x90
10002738:	19c0      	adds	r0, r0, r7
1000273a:	6802      	ldr	r2, [r0, #0]
1000273c:	0092      	lsls	r2, r2, #2
1000273e:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * dividend_array[array_count_1]) + \
				       dividend_array[array_count_2];
			}
			if (dividend_array[array_count] > max) 
10002740:	1c3b      	adds	r3, r7, #0
10002742:	3320      	adds	r3, #32
10002744:	2190      	movs	r1, #144	; 0x90
10002746:	19c9      	adds	r1, r1, r7
10002748:	680a      	ldr	r2, [r1, #0]
1000274a:	0092      	lsls	r2, r2, #2
1000274c:	58d2      	ldr	r2, [r2, r3]
1000274e:	20a4      	movs	r0, #164	; 0xa4
10002750:	19c0      	adds	r0, r0, r7
10002752:	6803      	ldr	r3, [r0, #0]
10002754:	429a      	cmp	r2, r3
10002756:	d800      	bhi.n	1000275a <UART001_lConfigureBaudRate+0x276>
10002758:	e0fd      	b.n	10002956 <UART001_lConfigureBaudRate+0x472>
			{
				divisor1 = divisor_array[array_count_1];
1000275a:	1c3b      	adds	r3, r7, #0
1000275c:	3330      	adds	r3, #48	; 0x30
1000275e:	218c      	movs	r1, #140	; 0x8c
10002760:	19c9      	adds	r1, r1, r7
10002762:	680a      	ldr	r2, [r1, #0]
10002764:	0092      	lsls	r2, r2, #2
10002766:	58d3      	ldr	r3, [r2, r3]
10002768:	22a0      	movs	r2, #160	; 0xa0
1000276a:	19d2      	adds	r2, r2, r7
1000276c:	6013      	str	r3, [r2, #0]
				dividend1 = dividend_array[array_count_1];
1000276e:	1c3b      	adds	r3, r7, #0
10002770:	3320      	adds	r3, #32
10002772:	208c      	movs	r0, #140	; 0x8c
10002774:	19c0      	adds	r0, r0, r7
10002776:	6802      	ldr	r2, [r0, #0]
10002778:	0092      	lsls	r2, r2, #2
1000277a:	58d3      	ldr	r3, [r2, r3]
1000277c:	2198      	movs	r1, #152	; 0x98
1000277e:	19c9      	adds	r1, r1, r7
10002780:	600b      	str	r3, [r1, #0]
				frac = (max - dividend_array[array_count_2]) / \
10002782:	1c3b      	adds	r3, r7, #0
10002784:	3320      	adds	r3, #32
10002786:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10002788:	0092      	lsls	r2, r2, #2
1000278a:	58d3      	ldr	r3, [r2, r3]
1000278c:	20a4      	movs	r0, #164	; 0xa4
1000278e:	19c0      	adds	r0, r0, r7
10002790:	6802      	ldr	r2, [r0, #0]
10002792:	1ad2      	subs	r2, r2, r3
				                               dividend_array[array_count_1];
10002794:	1c3b      	adds	r3, r7, #0
10002796:	3320      	adds	r3, #32
10002798:	208c      	movs	r0, #140	; 0x8c
1000279a:	19c0      	adds	r0, r0, r7
1000279c:	6801      	ldr	r1, [r0, #0]
1000279e:	0089      	lsls	r1, r1, #2
100027a0:	58cb      	ldr	r3, [r1, r3]
			}
			if (dividend_array[array_count] > max) 
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
100027a2:	1c10      	adds	r0, r2, #0
100027a4:	1c19      	adds	r1, r3, #0
100027a6:	f001 fceb 	bl	10004180 <__aeabi_uidiv>
100027aa:	1c03      	adds	r3, r0, #0
100027ac:	673b      	str	r3, [r7, #112]	; 0x70
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
100027ae:	2190      	movs	r1, #144	; 0x90
100027b0:	19c9      	adds	r1, r1, r7
100027b2:	680b      	ldr	r3, [r1, #0]
100027b4:	1e5a      	subs	r2, r3, #1
100027b6:	1c3b      	adds	r3, r7, #0
100027b8:	3330      	adds	r3, #48	; 0x30
100027ba:	0092      	lsls	r2, r2, #2
100027bc:	58d3      	ldr	r3, [r2, r3]
100027be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
100027c0:	435a      	muls	r2, r3
				                                divisor_array[array_count-2U];
100027c2:	2090      	movs	r0, #144	; 0x90
100027c4:	19c0      	adds	r0, r0, r7
100027c6:	6803      	ldr	r3, [r0, #0]
100027c8:	1e99      	subs	r1, r3, #2
100027ca:	1c3b      	adds	r3, r7, #0
100027cc:	3330      	adds	r3, #48	; 0x30
100027ce:	0089      	lsls	r1, r1, #2
100027d0:	58cb      	ldr	r3, [r1, r3]
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
100027d2:	18d3      	adds	r3, r2, r3
100027d4:	219c      	movs	r1, #156	; 0x9c
100027d6:	19c9      	adds	r1, r1, r7
100027d8:	600b      	str	r3, [r1, #0]
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
100027da:	2290      	movs	r2, #144	; 0x90
100027dc:	19d2      	adds	r2, r2, r7
100027de:	6813      	ldr	r3, [r2, #0]
100027e0:	1e5a      	subs	r2, r3, #1
100027e2:	1c3b      	adds	r3, r7, #0
100027e4:	3320      	adds	r3, #32
100027e6:	0092      	lsls	r2, r2, #2
100027e8:	58d3      	ldr	r3, [r2, r3]
100027ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
100027ec:	435a      	muls	r2, r3
				                               dividend_array[array_count_2];
100027ee:	1c3b      	adds	r3, r7, #0
100027f0:	3320      	adds	r3, #32
100027f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
100027f4:	0089      	lsls	r1, r1, #2
100027f6:	58cb      	ldr	r3, [r1, r3]
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
100027f8:	18d3      	adds	r3, r2, r3
100027fa:	2094      	movs	r0, #148	; 0x94
100027fc:	19c0      	adds	r0, r0, r7
100027fe:	6003      	str	r3, [r0, #0]
				                               dividend_array[array_count_2];
				/* Swap if required */
				if (swapped) {
10002800:	1c3b      	adds	r3, r7, #0
10002802:	3383      	adds	r3, #131	; 0x83
10002804:	781b      	ldrb	r3, [r3, #0]
10002806:	2b00      	cmp	r3, #0
10002808:	d01b      	beq.n	10002842 <UART001_lConfigureBaudRate+0x35e>
						/* Swap divisor1 and dividend1 */
						temp = divisor1;
1000280a:	21a0      	movs	r1, #160	; 0xa0
1000280c:	19c9      	adds	r1, r1, r7
1000280e:	680b      	ldr	r3, [r1, #0]
10002810:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor1 = dividend1;
10002812:	2298      	movs	r2, #152	; 0x98
10002814:	19d2      	adds	r2, r2, r7
10002816:	6813      	ldr	r3, [r2, #0]
10002818:	20a0      	movs	r0, #160	; 0xa0
1000281a:	19c0      	adds	r0, r0, r7
1000281c:	6003      	str	r3, [r0, #0]
						dividend1 = temp;
1000281e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10002820:	2198      	movs	r1, #152	; 0x98
10002822:	19c9      	adds	r1, r1, r7
10002824:	600b      	str	r3, [r1, #0]
						/* Swap divisor2 and dividend2 */
						temp = divisor2;
10002826:	229c      	movs	r2, #156	; 0x9c
10002828:	19d2      	adds	r2, r2, r7
1000282a:	6813      	ldr	r3, [r2, #0]
1000282c:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor2 = dividend2;
1000282e:	2094      	movs	r0, #148	; 0x94
10002830:	19c0      	adds	r0, r0, r7
10002832:	6803      	ldr	r3, [r0, #0]
10002834:	219c      	movs	r1, #156	; 0x9c
10002836:	19c9      	adds	r1, r1, r7
10002838:	600b      	str	r3, [r1, #0]
						dividend2 = temp;
1000283a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000283c:	2294      	movs	r2, #148	; 0x94
1000283e:	19d2      	adds	r2, r2, r7
10002840:	6013      	str	r3, [r2, #0]
					}
				/* Remove if one of has divisor 0 */
				if ((dividend1 == 0U) || (divisor1 == 0U)) {
10002842:	2098      	movs	r0, #152	; 0x98
10002844:	19c0      	adds	r0, r0, r7
10002846:	6803      	ldr	r3, [r0, #0]
10002848:	2b00      	cmp	r3, #0
1000284a:	d004      	beq.n	10002856 <UART001_lConfigureBaudRate+0x372>
1000284c:	21a0      	movs	r1, #160	; 0xa0
1000284e:	19c9      	adds	r1, r1, r7
10002850:	680b      	ldr	r3, [r1, #0]
10002852:	2b00      	cmp	r3, #0
10002854:	d10c      	bne.n	10002870 <UART001_lConfigureBaudRate+0x38c>
					fdr_step = divisor2;
10002856:	229c      	movs	r2, #156	; 0x9c
10002858:	19d2      	adds	r2, r2, r7
1000285a:	6813      	ldr	r3, [r2, #0]
1000285c:	20b4      	movs	r0, #180	; 0xb4
1000285e:	19c0      	adds	r0, r0, r7
10002860:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend2;
10002862:	2194      	movs	r1, #148	; 0x94
10002864:	19c9      	adds	r1, r1, r7
10002866:	680b      	ldr	r3, [r1, #0]
10002868:	22b0      	movs	r2, #176	; 0xb0
1000286a:	19d2      	adds	r2, r2, r7
1000286c:	6013      	str	r3, [r2, #0]
1000286e:	e06d      	b.n	1000294c <UART001_lConfigureBaudRate+0x468>
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
10002870:	2094      	movs	r0, #148	; 0x94
10002872:	19c0      	adds	r0, r0, r7
10002874:	6803      	ldr	r3, [r0, #0]
10002876:	2b00      	cmp	r3, #0
10002878:	d004      	beq.n	10002884 <UART001_lConfigureBaudRate+0x3a0>
1000287a:	219c      	movs	r1, #156	; 0x9c
1000287c:	19c9      	adds	r1, r1, r7
1000287e:	680b      	ldr	r3, [r1, #0]
10002880:	2b00      	cmp	r3, #0
10002882:	d10f      	bne.n	100028a4 <UART001_lConfigureBaudRate+0x3c0>
					fdr_step = divisor1;
10002884:	22a0      	movs	r2, #160	; 0xa0
10002886:	19d2      	adds	r2, r2, r7
10002888:	6813      	ldr	r3, [r2, #0]
1000288a:	20b4      	movs	r0, #180	; 0xb4
1000288c:	19c0      	adds	r0, r0, r7
1000288e:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend1;
10002890:	2198      	movs	r1, #152	; 0x98
10002892:	19c9      	adds	r1, r1, r7
10002894:	680b      	ldr	r3, [r1, #0]
10002896:	22b0      	movs	r2, #176	; 0xb0
10002898:	19d2      	adds	r2, r2, r7
1000289a:	6013      	str	r3, [r2, #0]
1000289c:	e056      	b.n	1000294c <UART001_lConfigureBaudRate+0x468>
1000289e:	46c0      	nop			; (mov r8, r8)
100028a0:	00000c35 	.word	0x00000c35
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
100028a4:	23a0      	movs	r3, #160	; 0xa0
100028a6:	19db      	adds	r3, r3, r7
100028a8:	6818      	ldr	r0, [r3, #0]
100028aa:	f002 fa49 	bl	10004d40 <__aeabi_ui2f>
100028ae:	1c04      	adds	r4, r0, #0
100028b0:	2198      	movs	r1, #152	; 0x98
100028b2:	19c9      	adds	r1, r1, r7
100028b4:	6808      	ldr	r0, [r1, #0]
100028b6:	f002 fa43 	bl	10004d40 <__aeabi_ui2f>
100028ba:	1c03      	adds	r3, r0, #0
100028bc:	1c20      	adds	r0, r4, #0
100028be:	1c19      	adds	r1, r3, #0
100028c0:	f001 fd22 	bl	10004308 <__aeabi_fdiv>
100028c4:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
100028c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
100028c8:	1c19      	adds	r1, r3, #0
100028ca:	f002 f83f 	bl	1000494c <__aeabi_fsub>
100028ce:	1c03      	adds	r3, r0, #0
100028d0:	1c18      	adds	r0, r3, #0
100028d2:	f7ff fdef 	bl	100024b4 <UART001_labsRealType>
100028d6:	1c04      	adds	r4, r0, #0
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
100028d8:	229c      	movs	r2, #156	; 0x9c
100028da:	19d2      	adds	r2, r2, r7
100028dc:	6810      	ldr	r0, [r2, #0]
100028de:	f002 fa2f 	bl	10004d40 <__aeabi_ui2f>
100028e2:	1c05      	adds	r5, r0, #0
100028e4:	2394      	movs	r3, #148	; 0x94
100028e6:	19db      	adds	r3, r3, r7
100028e8:	6818      	ldr	r0, [r3, #0]
100028ea:	f002 fa29 	bl	10004d40 <__aeabi_ui2f>
100028ee:	1c03      	adds	r3, r0, #0
100028f0:	1c28      	adds	r0, r5, #0
100028f2:	1c19      	adds	r1, r3, #0
100028f4:	f001 fd08 	bl	10004308 <__aeabi_fdiv>
100028f8:	1c03      	adds	r3, r0, #0
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
100028fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
100028fc:	1c19      	adds	r1, r3, #0
100028fe:	f002 f825 	bl	1000494c <__aeabi_fsub>
10002902:	1c03      	adds	r3, r0, #0
10002904:	1c18      	adds	r0, r3, #0
10002906:	f7ff fdd5 	bl	100024b4 <UART001_labsRealType>
1000290a:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
1000290c:	1c20      	adds	r0, r4, #0
1000290e:	1c19      	adds	r1, r3, #0
10002910:	f001 fcac 	bl	1000426c <__aeabi_fcmpgt>
10002914:	1c03      	adds	r3, r0, #0
10002916:	2b00      	cmp	r3, #0
10002918:	d00c      	beq.n	10002934 <UART001_lConfigureBaudRate+0x450>
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
					{
						fdr_step = divisor2;
1000291a:	209c      	movs	r0, #156	; 0x9c
1000291c:	19c0      	adds	r0, r0, r7
1000291e:	6803      	ldr	r3, [r0, #0]
10002920:	21b4      	movs	r1, #180	; 0xb4
10002922:	19c9      	adds	r1, r1, r7
10002924:	600b      	str	r3, [r1, #0]
						brg_pdiv = dividend2;
10002926:	2294      	movs	r2, #148	; 0x94
10002928:	19d2      	adds	r2, r2, r7
1000292a:	6813      	ldr	r3, [r2, #0]
1000292c:	20b0      	movs	r0, #176	; 0xb0
1000292e:	19c0      	adds	r0, r0, r7
10002930:	6003      	str	r3, [r0, #0]
10002932:	e00b      	b.n	1000294c <UART001_lConfigureBaudRate+0x468>
					}else {
						fdr_step = divisor1;
10002934:	21a0      	movs	r1, #160	; 0xa0
10002936:	19c9      	adds	r1, r1, r7
10002938:	680b      	ldr	r3, [r1, #0]
1000293a:	22b4      	movs	r2, #180	; 0xb4
1000293c:	19d2      	adds	r2, r2, r7
1000293e:	6013      	str	r3, [r2, #0]
						brg_pdiv = dividend1;
10002940:	2098      	movs	r0, #152	; 0x98
10002942:	19c0      	adds	r0, r0, r7
10002944:	6803      	ldr	r3, [r0, #0]
10002946:	21b0      	movs	r1, #176	; 0xb0
10002948:	19c9      	adds	r1, r1, r7
1000294a:	600b      	str	r3, [r1, #0]
					}
				}
				do_while_break = 0x05U;
1000294c:	2305      	movs	r3, #5
1000294e:	2288      	movs	r2, #136	; 0x88
10002950:	19d2      	adds	r2, r2, r7
10002952:	6013      	str	r3, [r2, #0]
10002954:	e033      	b.n	100029be <UART001_lConfigureBaudRate+0x4da>
			}
			else if (remainder[array_count]== 0U) 
10002956:	1c3b      	adds	r3, r7, #0
10002958:	3340      	adds	r3, #64	; 0x40
1000295a:	2090      	movs	r0, #144	; 0x90
1000295c:	19c0      	adds	r0, r0, r7
1000295e:	6802      	ldr	r2, [r0, #0]
10002960:	0092      	lsls	r2, r2, #2
10002962:	58d3      	ldr	r3, [r2, r3]
10002964:	2b00      	cmp	r3, #0
10002966:	d12a      	bne.n	100029be <UART001_lConfigureBaudRate+0x4da>
			{
				fdr_step = divisor_array[array_count];
10002968:	1c3b      	adds	r3, r7, #0
1000296a:	3330      	adds	r3, #48	; 0x30
1000296c:	2190      	movs	r1, #144	; 0x90
1000296e:	19c9      	adds	r1, r1, r7
10002970:	680a      	ldr	r2, [r1, #0]
10002972:	0092      	lsls	r2, r2, #2
10002974:	58d3      	ldr	r3, [r2, r3]
10002976:	22b4      	movs	r2, #180	; 0xb4
10002978:	19d2      	adds	r2, r2, r7
1000297a:	6013      	str	r3, [r2, #0]
				brg_pdiv = dividend_array[array_count];
1000297c:	1c3b      	adds	r3, r7, #0
1000297e:	3320      	adds	r3, #32
10002980:	2090      	movs	r0, #144	; 0x90
10002982:	19c0      	adds	r0, r0, r7
10002984:	6802      	ldr	r2, [r0, #0]
10002986:	0092      	lsls	r2, r2, #2
10002988:	58d3      	ldr	r3, [r2, r3]
1000298a:	21b0      	movs	r1, #176	; 0xb0
1000298c:	19c9      	adds	r1, r1, r7
1000298e:	600b      	str	r3, [r1, #0]
				if (swapped)
10002990:	1c3b      	adds	r3, r7, #0
10002992:	3383      	adds	r3, #131	; 0x83
10002994:	781b      	ldrb	r3, [r3, #0]
10002996:	2b00      	cmp	r3, #0
10002998:	d00d      	beq.n	100029b6 <UART001_lConfigureBaudRate+0x4d2>
				{
					/* Swap fdr_step and brg_pdiv */
					temp = fdr_step;
1000299a:	22b4      	movs	r2, #180	; 0xb4
1000299c:	19d2      	adds	r2, r2, r7
1000299e:	6813      	ldr	r3, [r2, #0]
100029a0:	67fb      	str	r3, [r7, #124]	; 0x7c
					fdr_step = brg_pdiv;
100029a2:	20b0      	movs	r0, #176	; 0xb0
100029a4:	19c0      	adds	r0, r0, r7
100029a6:	6803      	ldr	r3, [r0, #0]
100029a8:	21b4      	movs	r1, #180	; 0xb4
100029aa:	19c9      	adds	r1, r1, r7
100029ac:	600b      	str	r3, [r1, #0]
					brg_pdiv = temp;
100029ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
100029b0:	22b0      	movs	r2, #176	; 0xb0
100029b2:	19d2      	adds	r2, r2, r7
100029b4:	6013      	str	r3, [r2, #0]
				}
				do_while_break = 0x05U;
100029b6:	2305      	movs	r3, #5
100029b8:	2088      	movs	r0, #136	; 0x88
100029ba:	19c0      	adds	r0, r0, r7
100029bc:	6003      	str	r3, [r0, #0]
			}
			else {
			  /* Do Nothing */
			}
		} while (do_while_break != 0x05U);
100029be:	2188      	movs	r1, #136	; 0x88
100029c0:	19c9      	adds	r1, r1, r7
100029c2:	680b      	ldr	r3, [r1, #0]
100029c4:	2b05      	cmp	r3, #5
100029c6:	d000      	beq.n	100029ca <UART001_lConfigureBaudRate+0x4e6>
100029c8:	e607      	b.n	100025da <UART001_lConfigureBaudRate+0xf6>

	if(fdr_step >= UART001_MAX_VALUE)
100029ca:	23b4      	movs	r3, #180	; 0xb4
100029cc:	19db      	adds	r3, r3, r7
100029ce:	681a      	ldr	r2, [r3, #0]
100029d0:	4b0a      	ldr	r3, [pc, #40]	; (100029fc <UART001_lConfigureBaudRate+0x518>)
100029d2:	429a      	cmp	r2, r3
100029d4:	d903      	bls.n	100029de <UART001_lConfigureBaudRate+0x4fa>
	{
	   fdr_step = 1023U;
100029d6:	4b09      	ldr	r3, [pc, #36]	; (100029fc <UART001_lConfigureBaudRate+0x518>)
100029d8:	20b4      	movs	r0, #180	; 0xb4
100029da:	19c0      	adds	r0, r0, r7
100029dc:	6003      	str	r3, [r0, #0]
	}

	*Step = fdr_step;
100029de:	687b      	ldr	r3, [r7, #4]
100029e0:	21b4      	movs	r1, #180	; 0xb4
100029e2:	19c9      	adds	r1, r1, r7
100029e4:	680a      	ldr	r2, [r1, #0]
100029e6:	601a      	str	r2, [r3, #0]

	*Pdiv = brg_pdiv - 1U;
100029e8:	22b0      	movs	r2, #176	; 0xb0
100029ea:	19d2      	adds	r2, r2, r7
100029ec:	6813      	ldr	r3, [r2, #0]
100029ee:	1e5a      	subs	r2, r3, #1
100029f0:	68bb      	ldr	r3, [r7, #8]
100029f2:	601a      	str	r2, [r3, #0]
}
100029f4:	46bd      	mov	sp, r7
100029f6:	b02e      	add	sp, #184	; 0xb8
100029f8:	bdb0      	pop	{r4, r5, r7, pc}
100029fa:	46c0      	nop			; (mov r8, r8)
100029fc:	000003ff 	.word	0x000003ff

10002a00 <UART001_Init>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
void UART001_Init(void)
{
10002a00:	b580      	push	{r7, lr}
10002a02:	b082      	sub	sp, #8
10002a04:	af00      	add	r7, sp, #0
    #if (__TARGET_DEVICE__ != XMC45)
	#if ((__TARGET_DEVICE__ == XMC13) || \
	     (__TARGET_DEVICE__ == XMC12) || \
	     (__TARGET_DEVICE__ == XMC11))
	  /* Disable the USIC0/USIC1 clock gating for XMC1000 devices */	     
	  SCU_GENERAL->PASSWD = 0x000000C0UL;
10002a06:	4b1d      	ldr	r3, [pc, #116]	; (10002a7c <UART001_Init+0x7c>)
10002a08:	22c0      	movs	r2, #192	; 0xc0
10002a0a:	625a      	str	r2, [r3, #36]	; 0x24
	  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, \
10002a0c:	4b1c      	ldr	r3, [pc, #112]	; (10002a80 <UART001_Init+0x80>)
10002a0e:	4a1c      	ldr	r2, [pc, #112]	; (10002a80 <UART001_Init+0x80>)
10002a10:	6812      	ldr	r2, [r2, #0]
10002a12:	491c      	ldr	r1, [pc, #112]	; (10002a84 <UART001_Init+0x84>)
10002a14:	430a      	orrs	r2, r1
10002a16:	601a      	str	r2, [r3, #0]
	                                SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);

	  #if defined(UART001_PER0_USIC0_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_USIC0_Pos);
10002a18:	4b19      	ldr	r3, [pc, #100]	; (10002a80 <UART001_Init+0x80>)
10002a1a:	4a19      	ldr	r2, [pc, #100]	; (10002a80 <UART001_Init+0x80>)
10002a1c:	6912      	ldr	r2, [r2, #16]
10002a1e:	2108      	movs	r1, #8
10002a20:	430a      	orrs	r2, r1
10002a22:	611a      	str	r2, [r3, #16]
      #endif
      #if defined(UART001_PER1_USIC1_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR1, SCU_CLK_CGATCLR1_USIC1_Pos);
	  #endif
	  while ((SCU_CLK->CLKCR)&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002a24:	46c0      	nop			; (mov r8, r8)
10002a26:	4b16      	ldr	r3, [pc, #88]	; (10002a80 <UART001_Init+0x80>)
10002a28:	681a      	ldr	r2, [r3, #0]
10002a2a:	2380      	movs	r3, #128	; 0x80
10002a2c:	05db      	lsls	r3, r3, #23
10002a2e:	4013      	ands	r3, r2
10002a30:	d1f9      	bne.n	10002a26 <UART001_Init+0x26>
	  {
	  	;
	  }
	  SCU_GENERAL->PASSWD = 0x000000C3UL;
10002a32:	4b12      	ldr	r3, [pc, #72]	; (10002a7c <UART001_Init+0x7c>)
10002a34:	22c3      	movs	r2, #195	; 0xc3
10002a36:	625a      	str	r2, [r3, #36]	; 0x24
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10002a38:	2300      	movs	r3, #0
10002a3a:	607b      	str	r3, [r7, #4]
10002a3c:	e017      	b.n	10002a6e <UART001_Init+0x6e>
	                           LoopIndex++)
   {
	  if (UART001_HandleArray[LoopIndex]->Mode == UART_HALFDUPLEX)
10002a3e:	4b12      	ldr	r3, [pc, #72]	; (10002a88 <UART001_Init+0x88>)
10002a40:	687a      	ldr	r2, [r7, #4]
10002a42:	0092      	lsls	r2, r2, #2
10002a44:	58d3      	ldr	r3, [r2, r3]
10002a46:	7d1b      	ldrb	r3, [r3, #20]
10002a48:	2b01      	cmp	r3, #1
10002a4a:	d106      	bne.n	10002a5a <UART001_Init+0x5a>
	  {
	   /*Configure TX Pin in Open-drain mode to allow the Wired-AND connection*/
		UART001_lConfigTXPin(UART001_HandleArray[LoopIndex]);
10002a4c:	4b0e      	ldr	r3, [pc, #56]	; (10002a88 <UART001_Init+0x88>)
10002a4e:	687a      	ldr	r2, [r7, #4]
10002a50:	0092      	lsls	r2, r2, #2
10002a52:	58d3      	ldr	r3, [r2, r3]
10002a54:	1c18      	adds	r0, r3, #0
10002a56:	f7ff fcbd 	bl	100023d4 <UART001_lConfigTXPin>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
10002a5a:	4b0b      	ldr	r3, [pc, #44]	; (10002a88 <UART001_Init+0x88>)
10002a5c:	687a      	ldr	r2, [r7, #4]
10002a5e:	0092      	lsls	r2, r2, #2
10002a60:	58d3      	ldr	r3, [r2, r3]
10002a62:	1c18      	adds	r0, r3, #0
10002a64:	f7ff fbdc 	bl	10002220 <UART001_lInit>
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
	                           LoopIndex++)
10002a68:	687b      	ldr	r3, [r7, #4]
10002a6a:	3301      	adds	r3, #1
10002a6c:	607b      	str	r3, [r7, #4]
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10002a6e:	687b      	ldr	r3, [r7, #4]
10002a70:	2b00      	cmp	r3, #0
10002a72:	d0e4      	beq.n	10002a3e <UART001_Init+0x3e>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
   }
   
}
10002a74:	46bd      	mov	sp, r7
10002a76:	b002      	add	sp, #8
10002a78:	bd80      	pop	{r7, pc}
10002a7a:	46c0      	nop			; (mov r8, r8)
10002a7c:	40010000 	.word	0x40010000
10002a80:	40010300 	.word	0x40010300
10002a84:	3ff00000 	.word	0x3ff00000
10002a88:	200009ac 	.word	0x200009ac

10002a8c <UART001_DeInit>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
 void  UART001_DeInit (const UART001_HandleType* Handle)
{
10002a8c:	b580      	push	{r7, lr}
10002a8e:	b082      	sub	sp, #8
10002a90:	af00      	add	r7, sp, #0
10002a92:	6078      	str	r0, [r7, #4]
  /* <<<DD_UART001_API_2>>> */
  /* Place holder function */      
}
10002a94:	46bd      	mov	sp, r7
10002a96:	b002      	add	sp, #8
10002a98:	bd80      	pop	{r7, pc}
10002a9a:	46c0      	nop			; (mov r8, r8)

10002a9c <UART001_Configure>:
  const UART001_HandleType* Handle,
  uint32_t BaudRate,
  UART_ParityType Parity,
  UART_StopBitType Stopbit
)
{
10002a9c:	b580      	push	{r7, lr}
10002a9e:	b08a      	sub	sp, #40	; 0x28
10002aa0:	af00      	add	r7, sp, #0
10002aa2:	60f8      	str	r0, [r7, #12]
10002aa4:	60b9      	str	r1, [r7, #8]
10002aa6:	1c11      	adds	r1, r2, #0
10002aa8:	1c1a      	adds	r2, r3, #0
10002aaa:	1dfb      	adds	r3, r7, #7
10002aac:	7019      	strb	r1, [r3, #0]
10002aae:	1dbb      	adds	r3, r7, #6
10002ab0:	701a      	strb	r2, [r3, #0]
   uint32_t Brg_Pdiv = 0x00U;
10002ab2:	2300      	movs	r3, #0
10002ab4:	617b      	str	r3, [r7, #20]
   uint32_t Fdr_Step = 0x00U;
10002ab6:	2300      	movs	r3, #0
10002ab8:	613b      	str	r3, [r7, #16]
   uint32_t TXIDLE_status;
   uint32_t RXIDLE_status;
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10002aba:	68fb      	ldr	r3, [r7, #12]
10002abc:	681b      	ldr	r3, [r3, #0]
10002abe:	623b      	str	r3, [r7, #32]
   status_t Status = (status_t)UART001_ERROR;
10002ac0:	2305      	movs	r3, #5
10002ac2:	627b      	str	r3, [r7, #36]	; 0x24
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
10002ac4:	6a3b      	ldr	r3, [r7, #32]
10002ac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
   status_t Status = (status_t)UART001_ERROR;
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
10002ac8:	2301      	movs	r3, #1
10002aca:	4013      	ands	r3, r2
10002acc:	61fb      	str	r3, [r7, #28]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
10002ace:	6a3b      	ldr	r3, [r7, #32]
10002ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10002ad2:	2302      	movs	r3, #2
10002ad4:	4013      	ands	r3, r2

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
10002ad6:	085b      	lsrs	r3, r3, #1
10002ad8:	61bb      	str	r3, [r7, #24]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_RXIDLE_Pos);
   if(( TXIDLE_status & RXIDLE_status) == 0x01U)
10002ada:	69fb      	ldr	r3, [r7, #28]
10002adc:	69ba      	ldr	r2, [r7, #24]
10002ade:	4013      	ands	r3, r2
10002ae0:	2b01      	cmp	r3, #1
10002ae2:	d156      	bne.n	10002b92 <UART001_Configure+0xf6>
    {
      /* Disable UART mode before configuring all USIC registers to avoid 
       * unintended edges */ 
      UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)));  
10002ae4:	6a3b      	ldr	r3, [r7, #32]
10002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002ae8:	2202      	movs	r2, #2
10002aea:	1c19      	adds	r1, r3, #0
10002aec:	4391      	bics	r1, r2
10002aee:	1c0a      	adds	r2, r1, #0
10002af0:	6a3b      	ldr	r3, [r7, #32]
10002af2:	641a      	str	r2, [r3, #64]	; 0x40
	  
      /* Configuration of USIC Channel Fractional Divider */
      UART001_lConfigureBaudRate(BaudRate,&Brg_Pdiv,&Fdr_Step);
10002af4:	68b9      	ldr	r1, [r7, #8]
10002af6:	1c3a      	adds	r2, r7, #0
10002af8:	3214      	adds	r2, #20
10002afa:	1c3b      	adds	r3, r7, #0
10002afc:	3310      	adds	r3, #16
10002afe:	1c08      	adds	r0, r1, #0
10002b00:	1c11      	adds	r1, r2, #0
10002b02:	1c1a      	adds	r2, r3, #0
10002b04:	f7ff fcee 	bl	100024e4 <UART001_lConfigureBaudRate>

      /* Step value: 0x3FF */
      UartRegs->FDR &= ~(USIC_CH_FDR_STEP_Msk);
10002b08:	6a3b      	ldr	r3, [r7, #32]
10002b0a:	691b      	ldr	r3, [r3, #16]
10002b0c:	0a9b      	lsrs	r3, r3, #10
10002b0e:	029a      	lsls	r2, r3, #10
10002b10:	6a3b      	ldr	r3, [r7, #32]
10002b12:	611a      	str	r2, [r3, #16]
      UartRegs->FDR |= ( Fdr_Step & USIC_CH_FDR_STEP_Msk);
10002b14:	6a3b      	ldr	r3, [r7, #32]
10002b16:	691a      	ldr	r2, [r3, #16]
10002b18:	693b      	ldr	r3, [r7, #16]
10002b1a:	059b      	lsls	r3, r3, #22
10002b1c:	0d9b      	lsrs	r3, r3, #22
10002b1e:	431a      	orrs	r2, r3
10002b20:	6a3b      	ldr	r3, [r7, #32]
10002b22:	611a      	str	r2, [r3, #16]
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
10002b24:	6a3b      	ldr	r3, [r7, #32]
10002b26:	695a      	ldr	r2, [r3, #20]
10002b28:	4b1d      	ldr	r3, [pc, #116]	; (10002ba0 <UART001_Configure+0x104>)
10002b2a:	401a      	ands	r2, r3
10002b2c:	6a3b      	ldr	r3, [r7, #32]
10002b2e:	615a      	str	r2, [r3, #20]
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10002b30:	6a3b      	ldr	r3, [r7, #32]
10002b32:	695a      	ldr	r2, [r3, #20]
10002b34:	697b      	ldr	r3, [r7, #20]
10002b36:	0419      	lsls	r1, r3, #16
    		                                          &  USIC_CH_BRG_PDIV_Msk));
10002b38:	4b1a      	ldr	r3, [pc, #104]	; (10002ba4 <UART001_Configure+0x108>)
10002b3a:	400b      	ands	r3, r1
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10002b3c:	431a      	orrs	r2, r3
10002b3e:	6a3b      	ldr	r3, [r7, #32]
10002b40:	615a      	str	r2, [r3, #20]
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
10002b42:	6a3b      	ldr	r3, [r7, #32]
10002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002b46:	2202      	movs	r2, #2
10002b48:	1c19      	adds	r1, r3, #0
10002b4a:	4391      	bics	r1, r2
10002b4c:	1c0a      	adds	r2, r1, #0
10002b4e:	6a3b      	ldr	r3, [r7, #32]
10002b50:	63da      	str	r2, [r3, #60]	; 0x3c
      UartRegs->PCR_ASCMode |= \
10002b52:	6a3b      	ldr	r3, [r7, #32]
10002b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
10002b56:	1dbb      	adds	r3, r7, #6
10002b58:	781b      	ldrb	r3, [r3, #0]
10002b5a:	0059      	lsls	r1, r3, #1
10002b5c:	2302      	movs	r3, #2
10002b5e:	400b      	ands	r3, r1
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
      UartRegs->PCR_ASCMode |= \
10002b60:	431a      	orrs	r2, r3
10002b62:	6a3b      	ldr	r3, [r7, #32]
10002b64:	63da      	str	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
10002b66:	6a3b      	ldr	r3, [r7, #32]
10002b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10002b6a:	4b0f      	ldr	r3, [pc, #60]	; (10002ba8 <UART001_Configure+0x10c>)
10002b6c:	401a      	ands	r2, r3
10002b6e:	6a3b      	ldr	r3, [r7, #32]
10002b70:	641a      	str	r2, [r3, #64]	; 0x40
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10002b72:	6a3b      	ldr	r3, [r7, #32]
10002b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
10002b76:	1dfb      	adds	r3, r7, #7
10002b78:	781b      	ldrb	r3, [r3, #0]
10002b7a:	0219      	lsls	r1, r3, #8
10002b7c:	23c0      	movs	r3, #192	; 0xc0
10002b7e:	009b      	lsls	r3, r3, #2
10002b80:	400b      	ands	r3, r1
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10002b82:	4313      	orrs	r3, r2
10002b84:	2202      	movs	r2, #2
10002b86:	431a      	orrs	r2, r3
10002b88:	6a3b      	ldr	r3, [r7, #32]
10002b8a:	641a      	str	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
                                                       USIC_CH_CCR_PM_Msk));

      Status = (status_t)DAVEApp_SUCCESS;
10002b8c:	2300      	movs	r3, #0
10002b8e:	627b      	str	r3, [r7, #36]	; 0x24
10002b90:	e001      	b.n	10002b96 <UART001_Configure+0xfa>
    }
    else
    {
      Status = (status_t)UART001_BUSY;
10002b92:	2303      	movs	r3, #3
10002b94:	627b      	str	r3, [r7, #36]	; 0x24
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
    }
  
  return Status;
10002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
10002b98:	1c18      	adds	r0, r3, #0
10002b9a:	46bd      	mov	sp, r7
10002b9c:	b00a      	add	sp, #40	; 0x28
10002b9e:	bd80      	pop	{r7, pc}
10002ba0:	fc00ffff 	.word	0xfc00ffff
10002ba4:	03ff0000 	.word	0x03ff0000
10002ba8:	fffffcff 	.word	0xfffffcff

10002bac <UART001_ReadDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{ 
10002bac:	b580      	push	{r7, lr}
10002bae:	b086      	sub	sp, #24
10002bb0:	af00      	add	r7, sp, #0
10002bb2:	60f8      	str	r0, [r7, #12]
10002bb4:	60b9      	str	r1, [r7, #8]
10002bb6:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10002bb8:	2300      	movs	r3, #0
10002bba:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10002bbc:	68fb      	ldr	r3, [r7, #12]
10002bbe:	681b      	ldr	r3, [r3, #0]
10002bc0:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
10002bc2:	68fb      	ldr	r3, [r7, #12]
10002bc4:	7fdb      	ldrb	r3, [r3, #31]
10002bc6:	2b00      	cmp	r3, #0
10002bc8:	d01c      	beq.n	10002c04 <UART001_ReadDataMultiple+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10002bca:	e00f      	b.n	10002bec <UART001_ReadDataMultiple+0x40>
	  {
		*DataPtr = (uint16_t)UartRegs->OUTR;
10002bcc:	693a      	ldr	r2, [r7, #16]
10002bce:	238e      	movs	r3, #142	; 0x8e
10002bd0:	005b      	lsls	r3, r3, #1
10002bd2:	58d3      	ldr	r3, [r2, r3]
10002bd4:	b29a      	uxth	r2, r3
10002bd6:	68bb      	ldr	r3, [r7, #8]
10002bd8:	801a      	strh	r2, [r3, #0]
		Count--;
10002bda:	687b      	ldr	r3, [r7, #4]
10002bdc:	3b01      	subs	r3, #1
10002bde:	607b      	str	r3, [r7, #4]
		ReadCount++;
10002be0:	697b      	ldr	r3, [r7, #20]
10002be2:	3301      	adds	r3, #1
10002be4:	617b      	str	r3, [r7, #20]
		DataPtr++;
10002be6:	68bb      	ldr	r3, [r7, #8]
10002be8:	3302      	adds	r3, #2
10002bea:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10002bec:	693a      	ldr	r2, [r7, #16]
10002bee:	238a      	movs	r3, #138	; 0x8a
10002bf0:	005b      	lsls	r3, r3, #1
10002bf2:	58d2      	ldr	r2, [r2, r3]
10002bf4:	2308      	movs	r3, #8
10002bf6:	4013      	ands	r3, r2
10002bf8:	08db      	lsrs	r3, r3, #3
10002bfa:	d10b      	bne.n	10002c14 <UART001_ReadDataMultiple+0x68>
10002bfc:	687b      	ldr	r3, [r7, #4]
10002bfe:	2b00      	cmp	r3, #0
10002c00:	d1e4      	bne.n	10002bcc <UART001_ReadDataMultiple+0x20>
10002c02:	e007      	b.n	10002c14 <UART001_ReadDataMultiple+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint16_t)UartRegs->RBUF;
10002c04:	693b      	ldr	r3, [r7, #16]
10002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002c08:	b29a      	uxth	r2, r3
10002c0a:	68bb      	ldr	r3, [r7, #8]
10002c0c:	801a      	strh	r2, [r3, #0]
	  ReadCount++;
10002c0e:	697b      	ldr	r3, [r7, #20]
10002c10:	3301      	adds	r3, #1
10002c12:	617b      	str	r3, [r7, #20]
  }
  return ReadCount;
10002c14:	697b      	ldr	r3, [r7, #20]
}
10002c16:	1c18      	adds	r0, r3, #0
10002c18:	46bd      	mov	sp, r7
10002c1a:	b006      	add	sp, #24
10002c1c:	bd80      	pop	{r7, pc}
10002c1e:	46c0      	nop			; (mov r8, r8)

10002c20 <UART001_ReadDataBytes>:
(
  const UART001_HandleType* Handle,
  uint8_t* DataPtr,
  uint32_t Count
)
{ 
10002c20:	b580      	push	{r7, lr}
10002c22:	b086      	sub	sp, #24
10002c24:	af00      	add	r7, sp, #0
10002c26:	60f8      	str	r0, [r7, #12]
10002c28:	60b9      	str	r1, [r7, #8]
10002c2a:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10002c2c:	2300      	movs	r3, #0
10002c2e:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10002c30:	68fb      	ldr	r3, [r7, #12]
10002c32:	681b      	ldr	r3, [r3, #0]
10002c34:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
10002c36:	68fb      	ldr	r3, [r7, #12]
10002c38:	7fdb      	ldrb	r3, [r3, #31]
10002c3a:	2b00      	cmp	r3, #0
10002c3c:	d01c      	beq.n	10002c78 <UART001_ReadDataBytes+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10002c3e:	e00f      	b.n	10002c60 <UART001_ReadDataBytes+0x40>
	  {
		*DataPtr = (uint8_t)UartRegs->OUTR;
10002c40:	693a      	ldr	r2, [r7, #16]
10002c42:	238e      	movs	r3, #142	; 0x8e
10002c44:	005b      	lsls	r3, r3, #1
10002c46:	58d3      	ldr	r3, [r2, r3]
10002c48:	b2da      	uxtb	r2, r3
10002c4a:	68bb      	ldr	r3, [r7, #8]
10002c4c:	701a      	strb	r2, [r3, #0]
		Count--;
10002c4e:	687b      	ldr	r3, [r7, #4]
10002c50:	3b01      	subs	r3, #1
10002c52:	607b      	str	r3, [r7, #4]
		ReadCount++;
10002c54:	697b      	ldr	r3, [r7, #20]
10002c56:	3301      	adds	r3, #1
10002c58:	617b      	str	r3, [r7, #20]
		DataPtr++;
10002c5a:	68bb      	ldr	r3, [r7, #8]
10002c5c:	3301      	adds	r3, #1
10002c5e:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10002c60:	693a      	ldr	r2, [r7, #16]
10002c62:	238a      	movs	r3, #138	; 0x8a
10002c64:	005b      	lsls	r3, r3, #1
10002c66:	58d2      	ldr	r2, [r2, r3]
10002c68:	2308      	movs	r3, #8
10002c6a:	4013      	ands	r3, r2
10002c6c:	08db      	lsrs	r3, r3, #3
10002c6e:	d10b      	bne.n	10002c88 <UART001_ReadDataBytes+0x68>
10002c70:	687b      	ldr	r3, [r7, #4]
10002c72:	2b00      	cmp	r3, #0
10002c74:	d1e4      	bne.n	10002c40 <UART001_ReadDataBytes+0x20>
10002c76:	e007      	b.n	10002c88 <UART001_ReadDataBytes+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint8_t)UartRegs->RBUF;
10002c78:	693b      	ldr	r3, [r7, #16]
10002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002c7c:	b2da      	uxtb	r2, r3
10002c7e:	68bb      	ldr	r3, [r7, #8]
10002c80:	701a      	strb	r2, [r3, #0]
	  ReadCount++;
10002c82:	697b      	ldr	r3, [r7, #20]
10002c84:	3301      	adds	r3, #1
10002c86:	617b      	str	r3, [r7, #20]
  }  
  return ReadCount;
10002c88:	697b      	ldr	r3, [r7, #20]
}
10002c8a:	1c18      	adds	r0, r3, #0
10002c8c:	46bd      	mov	sp, r7
10002c8e:	b006      	add	sp, #24
10002c90:	bd80      	pop	{r7, pc}
10002c92:	46c0      	nop			; (mov r8, r8)

10002c94 <UART001_WriteDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{
10002c94:	b580      	push	{r7, lr}
10002c96:	b086      	sub	sp, #24
10002c98:	af00      	add	r7, sp, #0
10002c9a:	60f8      	str	r0, [r7, #12]
10002c9c:	60b9      	str	r1, [r7, #8]
10002c9e:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10002ca0:	2300      	movs	r3, #0
10002ca2:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10002ca4:	68fb      	ldr	r3, [r7, #12]
10002ca6:	681b      	ldr	r3, [r3, #0]
10002ca8:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
10002caa:	68fb      	ldr	r3, [r7, #12]
10002cac:	7f9b      	ldrb	r3, [r3, #30]
10002cae:	2b00      	cmp	r3, #0
10002cb0:	d01d      	beq.n	10002cee <UART001_WriteDataMultiple+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10002cb2:	e00f      	b.n	10002cd4 <UART001_WriteDataMultiple+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10002cb4:	68bb      	ldr	r3, [r7, #8]
10002cb6:	881b      	ldrh	r3, [r3, #0]
10002cb8:	1c19      	adds	r1, r3, #0
10002cba:	693a      	ldr	r2, [r7, #16]
10002cbc:	23c0      	movs	r3, #192	; 0xc0
10002cbe:	005b      	lsls	r3, r3, #1
10002cc0:	50d1      	str	r1, [r2, r3]
		Count--;
10002cc2:	687b      	ldr	r3, [r7, #4]
10002cc4:	3b01      	subs	r3, #1
10002cc6:	607b      	str	r3, [r7, #4]
		WriteCount++;
10002cc8:	697b      	ldr	r3, [r7, #20]
10002cca:	3301      	adds	r3, #1
10002ccc:	617b      	str	r3, [r7, #20]
		DataPtr++;
10002cce:	68bb      	ldr	r3, [r7, #8]
10002cd0:	3302      	adds	r3, #2
10002cd2:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10002cd4:	693a      	ldr	r2, [r7, #16]
10002cd6:	238a      	movs	r3, #138	; 0x8a
10002cd8:	005b      	lsls	r3, r3, #1
10002cda:	58d2      	ldr	r2, [r2, r3]
10002cdc:	2380      	movs	r3, #128	; 0x80
10002cde:	015b      	lsls	r3, r3, #5
10002ce0:	4013      	ands	r3, r2
10002ce2:	0b1b      	lsrs	r3, r3, #12
10002ce4:	d111      	bne.n	10002d0a <UART001_WriteDataMultiple+0x76>
10002ce6:	687b      	ldr	r3, [r7, #4]
10002ce8:	2b00      	cmp	r3, #0
10002cea:	d1e3      	bne.n	10002cb4 <UART001_WriteDataMultiple+0x20>
10002cec:	e00d      	b.n	10002d0a <UART001_WriteDataMultiple+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
10002cee:	693b      	ldr	r3, [r7, #16]
10002cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10002cf2:	2380      	movs	r3, #128	; 0x80
10002cf4:	4013      	ands	r3, r2
10002cf6:	d108      	bne.n	10002d0a <UART001_WriteDataMultiple+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
10002cf8:	68bb      	ldr	r3, [r7, #8]
10002cfa:	881b      	ldrh	r3, [r3, #0]
10002cfc:	1c19      	adds	r1, r3, #0
10002cfe:	693a      	ldr	r2, [r7, #16]
10002d00:	2380      	movs	r3, #128	; 0x80
10002d02:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
10002d04:	697b      	ldr	r3, [r7, #20]
10002d06:	3301      	adds	r3, #1
10002d08:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
10002d0a:	697b      	ldr	r3, [r7, #20]
}
10002d0c:	1c18      	adds	r0, r3, #0
10002d0e:	46bd      	mov	sp, r7
10002d10:	b006      	add	sp, #24
10002d12:	bd80      	pop	{r7, pc}

10002d14 <UART001_WriteDataBytes>:
(
  const UART001_HandleType* Handle,
  const uint8_t* DataPtr,
  uint32_t Count
)
{
10002d14:	b580      	push	{r7, lr}
10002d16:	b086      	sub	sp, #24
10002d18:	af00      	add	r7, sp, #0
10002d1a:	60f8      	str	r0, [r7, #12]
10002d1c:	60b9      	str	r1, [r7, #8]
10002d1e:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10002d20:	2300      	movs	r3, #0
10002d22:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10002d24:	68fb      	ldr	r3, [r7, #12]
10002d26:	681b      	ldr	r3, [r3, #0]
10002d28:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
10002d2a:	68fb      	ldr	r3, [r7, #12]
10002d2c:	7f9b      	ldrb	r3, [r3, #30]
10002d2e:	2b00      	cmp	r3, #0
10002d30:	d01d      	beq.n	10002d6e <UART001_WriteDataBytes+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10002d32:	e00f      	b.n	10002d54 <UART001_WriteDataBytes+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10002d34:	68bb      	ldr	r3, [r7, #8]
10002d36:	781b      	ldrb	r3, [r3, #0]
10002d38:	1c19      	adds	r1, r3, #0
10002d3a:	693a      	ldr	r2, [r7, #16]
10002d3c:	23c0      	movs	r3, #192	; 0xc0
10002d3e:	005b      	lsls	r3, r3, #1
10002d40:	50d1      	str	r1, [r2, r3]
		Count--;
10002d42:	687b      	ldr	r3, [r7, #4]
10002d44:	3b01      	subs	r3, #1
10002d46:	607b      	str	r3, [r7, #4]
		WriteCount++;
10002d48:	697b      	ldr	r3, [r7, #20]
10002d4a:	3301      	adds	r3, #1
10002d4c:	617b      	str	r3, [r7, #20]
		DataPtr++;
10002d4e:	68bb      	ldr	r3, [r7, #8]
10002d50:	3301      	adds	r3, #1
10002d52:	60bb      	str	r3, [r7, #8]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10002d54:	693a      	ldr	r2, [r7, #16]
10002d56:	238a      	movs	r3, #138	; 0x8a
10002d58:	005b      	lsls	r3, r3, #1
10002d5a:	58d2      	ldr	r2, [r2, r3]
10002d5c:	2380      	movs	r3, #128	; 0x80
10002d5e:	015b      	lsls	r3, r3, #5
10002d60:	4013      	ands	r3, r2
10002d62:	0b1b      	lsrs	r3, r3, #12
10002d64:	d111      	bne.n	10002d8a <UART001_WriteDataBytes+0x76>
10002d66:	687b      	ldr	r3, [r7, #4]
10002d68:	2b00      	cmp	r3, #0
10002d6a:	d1e3      	bne.n	10002d34 <UART001_WriteDataBytes+0x20>
10002d6c:	e00d      	b.n	10002d8a <UART001_WriteDataBytes+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */  
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
10002d6e:	693b      	ldr	r3, [r7, #16]
10002d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10002d72:	2380      	movs	r3, #128	; 0x80
10002d74:	4013      	ands	r3, r2
10002d76:	d108      	bne.n	10002d8a <UART001_WriteDataBytes+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
10002d78:	68bb      	ldr	r3, [r7, #8]
10002d7a:	781b      	ldrb	r3, [r3, #0]
10002d7c:	1c19      	adds	r1, r3, #0
10002d7e:	693a      	ldr	r2, [r7, #16]
10002d80:	2380      	movs	r3, #128	; 0x80
10002d82:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
10002d84:	697b      	ldr	r3, [r7, #20]
10002d86:	3301      	adds	r3, #1
10002d88:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
10002d8a:	697b      	ldr	r3, [r7, #20]
}
10002d8c:	1c18      	adds	r0, r3, #0
10002d8e:	46bd      	mov	sp, r7
10002d90:	b006      	add	sp, #24
10002d92:	bd80      	pop	{r7, pc}

10002d94 <UART001_GetFlagStatus>:
status_t UART001_GetFlagStatus 
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10002d94:	b580      	push	{r7, lr}
10002d96:	b086      	sub	sp, #24
10002d98:	af00      	add	r7, sp, #0
10002d9a:	6078      	str	r0, [r7, #4]
10002d9c:	1c0a      	adds	r2, r1, #0
10002d9e:	1cfb      	adds	r3, r7, #3
10002da0:	701a      	strb	r2, [r3, #0]
  status_t Status = (status_t)UART001_RESET;
10002da2:	2301      	movs	r3, #1
10002da4:	617b      	str	r3, [r7, #20]
  uint32_t TempValue = 0x00U;
10002da6:	2300      	movs	r3, #0
10002da8:	613b      	str	r3, [r7, #16]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10002daa:	687b      	ldr	r3, [r7, #4]
10002dac:	681b      	ldr	r3, [r3, #0]
10002dae:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_7>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10002db0:	1cfb      	adds	r3, r7, #3
10002db2:	781b      	ldrb	r3, [r3, #0]
10002db4:	2b0f      	cmp	r3, #15
10002db6:	d80a      	bhi.n	10002dce <UART001_GetFlagStatus+0x3a>
  {
    TempValue = UartRegs->PSR_ASCMode;
10002db8:	68fb      	ldr	r3, [r7, #12]
10002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002dbc:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10002dbe:	1cfb      	adds	r3, r7, #3
10002dc0:	781b      	ldrb	r3, [r3, #0]
10002dc2:	2201      	movs	r2, #1
10002dc4:	409a      	lsls	r2, r3
10002dc6:	693b      	ldr	r3, [r7, #16]
10002dc8:	4013      	ands	r3, r2
10002dca:	613b      	str	r3, [r7, #16]
10002dcc:	e01e      	b.n	10002e0c <UART001_GetFlagStatus+0x78>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
10002dce:	1cfb      	adds	r3, r7, #3
10002dd0:	781b      	ldrb	r3, [r3, #0]
10002dd2:	2b12      	cmp	r3, #18
10002dd4:	d80d      	bhi.n	10002df2 <UART001_GetFlagStatus+0x5e>
  {
    TempValue = UartRegs->TRBSR;
10002dd6:	68fa      	ldr	r2, [r7, #12]
10002dd8:	238a      	movs	r3, #138	; 0x8a
10002dda:	005b      	lsls	r3, r3, #1
10002ddc:	58d3      	ldr	r3, [r2, r3]
10002dde:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
10002de0:	1cfb      	adds	r3, r7, #3
10002de2:	781b      	ldrb	r3, [r3, #0]
10002de4:	3b10      	subs	r3, #16
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
10002de6:	2201      	movs	r2, #1
10002de8:	409a      	lsls	r2, r3
10002dea:	693b      	ldr	r3, [r7, #16]
10002dec:	4013      	ands	r3, r2
10002dee:	613b      	str	r3, [r7, #16]
10002df0:	e00c      	b.n	10002e0c <UART001_GetFlagStatus+0x78>
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
10002df2:	68fa      	ldr	r2, [r7, #12]
10002df4:	238a      	movs	r3, #138	; 0x8a
10002df6:	005b      	lsls	r3, r3, #1
10002df8:	58d3      	ldr	r3, [r2, r3]
10002dfa:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
10002dfc:	1cfb      	adds	r3, r7, #3
10002dfe:	781b      	ldrb	r3, [r3, #0]
10002e00:	3b0b      	subs	r3, #11
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
10002e02:	2201      	movs	r2, #1
10002e04:	409a      	lsls	r2, r3
10002e06:	693b      	ldr	r3, [r7, #16]
10002e08:	4013      	ands	r3, r2
10002e0a:	613b      	str	r3, [r7, #16]
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
  } 

  if(TempValue)
10002e0c:	693b      	ldr	r3, [r7, #16]
10002e0e:	2b00      	cmp	r3, #0
10002e10:	d001      	beq.n	10002e16 <UART001_GetFlagStatus+0x82>
  {
    Status = (status_t)UART001_SET;
10002e12:	2302      	movs	r3, #2
10002e14:	617b      	str	r3, [r7, #20]
  }
  return Status;
10002e16:	697b      	ldr	r3, [r7, #20]
}
10002e18:	1c18      	adds	r0, r3, #0
10002e1a:	46bd      	mov	sp, r7
10002e1c:	b006      	add	sp, #24
10002e1e:	bd80      	pop	{r7, pc}

10002e20 <UART001_ClearFlag>:
void UART001_ClearFlag
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10002e20:	b580      	push	{r7, lr}
10002e22:	b084      	sub	sp, #16
10002e24:	af00      	add	r7, sp, #0
10002e26:	6078      	str	r0, [r7, #4]
10002e28:	1c0a      	adds	r2, r1, #0
10002e2a:	1cfb      	adds	r3, r7, #3
10002e2c:	701a      	strb	r2, [r3, #0]

  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10002e2e:	687b      	ldr	r3, [r7, #4]
10002e30:	681b      	ldr	r3, [r3, #0]
10002e32:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_8>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10002e34:	1cfb      	adds	r3, r7, #3
10002e36:	781b      	ldrb	r3, [r3, #0]
10002e38:	2b0f      	cmp	r3, #15
10002e3a:	d80b      	bhi.n	10002e54 <UART001_ClearFlag+0x34>
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10002e3c:	68fb      	ldr	r3, [r7, #12]
10002e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10002e40:	1cfb      	adds	r3, r7, #3
10002e42:	781b      	ldrb	r3, [r3, #0]
10002e44:	2101      	movs	r1, #1
10002e46:	1c08      	adds	r0, r1, #0
10002e48:	4098      	lsls	r0, r3
10002e4a:	1c03      	adds	r3, r0, #0
10002e4c:	431a      	orrs	r2, r3
10002e4e:	68fb      	ldr	r3, [r7, #12]
10002e50:	64da      	str	r2, [r3, #76]	; 0x4c
10002e52:	e026      	b.n	10002ea2 <UART001_ClearFlag+0x82>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
10002e54:	1cfb      	adds	r3, r7, #3
10002e56:	781b      	ldrb	r3, [r3, #0]
10002e58:	2b12      	cmp	r3, #18
10002e5a:	d811      	bhi.n	10002e80 <UART001_ClearFlag+0x60>
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002e5c:	68fa      	ldr	r2, [r7, #12]
10002e5e:	238c      	movs	r3, #140	; 0x8c
10002e60:	005b      	lsls	r3, r3, #1
10002e62:	58d2      	ldr	r2, [r2, r3]
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
10002e64:	1cfb      	adds	r3, r7, #3
10002e66:	781b      	ldrb	r3, [r3, #0]
10002e68:	3b10      	subs	r3, #16
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002e6a:	2101      	movs	r1, #1
10002e6c:	1c08      	adds	r0, r1, #0
10002e6e:	4098      	lsls	r0, r3
10002e70:	1c03      	adds	r3, r0, #0
10002e72:	1c11      	adds	r1, r2, #0
10002e74:	4319      	orrs	r1, r3
10002e76:	68fa      	ldr	r2, [r7, #12]
10002e78:	238c      	movs	r3, #140	; 0x8c
10002e7a:	005b      	lsls	r3, r3, #1
10002e7c:	50d1      	str	r1, [r2, r3]
10002e7e:	e010      	b.n	10002ea2 <UART001_ClearFlag+0x82>
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002e80:	68fa      	ldr	r2, [r7, #12]
10002e82:	238c      	movs	r3, #140	; 0x8c
10002e84:	005b      	lsls	r3, r3, #1
10002e86:	58d2      	ldr	r2, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
10002e88:	1cfb      	adds	r3, r7, #3
10002e8a:	781b      	ldrb	r3, [r3, #0]
10002e8c:	3b0b      	subs	r3, #11
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002e8e:	2101      	movs	r1, #1
10002e90:	1c08      	adds	r0, r1, #0
10002e92:	4098      	lsls	r0, r3
10002e94:	1c03      	adds	r3, r0, #0
10002e96:	1c11      	adds	r1, r2, #0
10002e98:	4319      	orrs	r1, r3
10002e9a:	68fa      	ldr	r2, [r7, #12]
10002e9c:	238c      	movs	r3, #140	; 0x8c
10002e9e:	005b      	lsls	r3, r3, #1
10002ea0:	50d1      	str	r1, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
                                                       UART001_FLAG_OFFSET ));
  }  
  
}
10002ea2:	46bd      	mov	sp, r7
10002ea4:	b004      	add	sp, #16
10002ea6:	bd80      	pop	{r7, pc}

10002ea8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002ea8:	b580      	push	{r7, lr}
10002eaa:	b082      	sub	sp, #8
10002eac:	af00      	add	r7, sp, #0
10002eae:	1c02      	adds	r2, r0, #0
10002eb0:	1dfb      	adds	r3, r7, #7
10002eb2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10002eb4:	4b06      	ldr	r3, [pc, #24]	; (10002ed0 <NVIC_EnableIRQ+0x28>)
10002eb6:	1dfa      	adds	r2, r7, #7
10002eb8:	7812      	ldrb	r2, [r2, #0]
10002eba:	1c11      	adds	r1, r2, #0
10002ebc:	221f      	movs	r2, #31
10002ebe:	400a      	ands	r2, r1
10002ec0:	2101      	movs	r1, #1
10002ec2:	1c08      	adds	r0, r1, #0
10002ec4:	4090      	lsls	r0, r2
10002ec6:	1c02      	adds	r2, r0, #0
10002ec8:	601a      	str	r2, [r3, #0]
}
10002eca:	46bd      	mov	sp, r7
10002ecc:	b002      	add	sp, #8
10002ece:	bd80      	pop	{r7, pc}
10002ed0:	e000e100 	.word	0xe000e100

10002ed4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002ed4:	b5b0      	push	{r4, r5, r7, lr}
10002ed6:	b082      	sub	sp, #8
10002ed8:	af00      	add	r7, sp, #0
10002eda:	1c02      	adds	r2, r0, #0
10002edc:	6039      	str	r1, [r7, #0]
10002ede:	1dfb      	adds	r3, r7, #7
10002ee0:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
10002ee2:	1dfb      	adds	r3, r7, #7
10002ee4:	781b      	ldrb	r3, [r3, #0]
10002ee6:	2b7f      	cmp	r3, #127	; 0x7f
10002ee8:	d932      	bls.n	10002f50 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002eea:	4930      	ldr	r1, [pc, #192]	; (10002fac <NVIC_SetPriority+0xd8>)
10002eec:	1dfb      	adds	r3, r7, #7
10002eee:	781b      	ldrb	r3, [r3, #0]
10002ef0:	1c1a      	adds	r2, r3, #0
10002ef2:	230f      	movs	r3, #15
10002ef4:	4013      	ands	r3, r2
10002ef6:	3b08      	subs	r3, #8
10002ef8:	0898      	lsrs	r0, r3, #2
10002efa:	4a2c      	ldr	r2, [pc, #176]	; (10002fac <NVIC_SetPriority+0xd8>)
10002efc:	1dfb      	adds	r3, r7, #7
10002efe:	781b      	ldrb	r3, [r3, #0]
10002f00:	1c1c      	adds	r4, r3, #0
10002f02:	230f      	movs	r3, #15
10002f04:	4023      	ands	r3, r4
10002f06:	3b08      	subs	r3, #8
10002f08:	089b      	lsrs	r3, r3, #2
10002f0a:	3306      	adds	r3, #6
10002f0c:	009b      	lsls	r3, r3, #2
10002f0e:	18d3      	adds	r3, r2, r3
10002f10:	685b      	ldr	r3, [r3, #4]
10002f12:	1dfa      	adds	r2, r7, #7
10002f14:	7812      	ldrb	r2, [r2, #0]
10002f16:	1c14      	adds	r4, r2, #0
10002f18:	2203      	movs	r2, #3
10002f1a:	4022      	ands	r2, r4
10002f1c:	00d2      	lsls	r2, r2, #3
10002f1e:	24ff      	movs	r4, #255	; 0xff
10002f20:	1c25      	adds	r5, r4, #0
10002f22:	4095      	lsls	r5, r2
10002f24:	1c2a      	adds	r2, r5, #0
10002f26:	43d2      	mvns	r2, r2
10002f28:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10002f2a:	683b      	ldr	r3, [r7, #0]
10002f2c:	019c      	lsls	r4, r3, #6
10002f2e:	23ff      	movs	r3, #255	; 0xff
10002f30:	401c      	ands	r4, r3
10002f32:	1dfb      	adds	r3, r7, #7
10002f34:	781b      	ldrb	r3, [r3, #0]
10002f36:	1c1d      	adds	r5, r3, #0
10002f38:	2303      	movs	r3, #3
10002f3a:	402b      	ands	r3, r5
10002f3c:	00db      	lsls	r3, r3, #3
10002f3e:	1c25      	adds	r5, r4, #0
10002f40:	409d      	lsls	r5, r3
10002f42:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002f44:	431a      	orrs	r2, r3
10002f46:	1d83      	adds	r3, r0, #6
10002f48:	009b      	lsls	r3, r3, #2
10002f4a:	18cb      	adds	r3, r1, r3
10002f4c:	605a      	str	r2, [r3, #4]
10002f4e:	e029      	b.n	10002fa4 <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002f50:	4b17      	ldr	r3, [pc, #92]	; (10002fb0 <NVIC_SetPriority+0xdc>)
10002f52:	1dfa      	adds	r2, r7, #7
10002f54:	7812      	ldrb	r2, [r2, #0]
10002f56:	b252      	sxtb	r2, r2
10002f58:	0892      	lsrs	r2, r2, #2
10002f5a:	4915      	ldr	r1, [pc, #84]	; (10002fb0 <NVIC_SetPriority+0xdc>)
10002f5c:	1df8      	adds	r0, r7, #7
10002f5e:	7800      	ldrb	r0, [r0, #0]
10002f60:	b240      	sxtb	r0, r0
10002f62:	0880      	lsrs	r0, r0, #2
10002f64:	30c0      	adds	r0, #192	; 0xc0
10002f66:	0080      	lsls	r0, r0, #2
10002f68:	5841      	ldr	r1, [r0, r1]
10002f6a:	1df8      	adds	r0, r7, #7
10002f6c:	7800      	ldrb	r0, [r0, #0]
10002f6e:	1c04      	adds	r4, r0, #0
10002f70:	2003      	movs	r0, #3
10002f72:	4020      	ands	r0, r4
10002f74:	00c0      	lsls	r0, r0, #3
10002f76:	24ff      	movs	r4, #255	; 0xff
10002f78:	1c25      	adds	r5, r4, #0
10002f7a:	4085      	lsls	r5, r0
10002f7c:	1c28      	adds	r0, r5, #0
10002f7e:	43c0      	mvns	r0, r0
10002f80:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10002f82:	6839      	ldr	r1, [r7, #0]
10002f84:	018c      	lsls	r4, r1, #6
10002f86:	21ff      	movs	r1, #255	; 0xff
10002f88:	400c      	ands	r4, r1
10002f8a:	1df9      	adds	r1, r7, #7
10002f8c:	7809      	ldrb	r1, [r1, #0]
10002f8e:	1c0d      	adds	r5, r1, #0
10002f90:	2103      	movs	r1, #3
10002f92:	4029      	ands	r1, r5
10002f94:	00c9      	lsls	r1, r1, #3
10002f96:	1c25      	adds	r5, r4, #0
10002f98:	408d      	lsls	r5, r1
10002f9a:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002f9c:	4301      	orrs	r1, r0
10002f9e:	32c0      	adds	r2, #192	; 0xc0
10002fa0:	0092      	lsls	r2, r2, #2
10002fa2:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
10002fa4:	46bd      	mov	sp, r7
10002fa6:	b002      	add	sp, #8
10002fa8:	bdb0      	pop	{r4, r5, r7, pc}
10002faa:	46c0      	nop			; (mov r8, r8)
10002fac:	e000ed00 	.word	0xe000ed00
10002fb0:	e000e100 	.word	0xe000e100

10002fb4 <NVIC002_EnableIRQ>:
 *    NVIC002_EnableIRQ(&NVIC002_Handle0);
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void NVIC002_EnableIRQ (const NVIC002_HandleType *const Handle) {
10002fb4:	b580      	push	{r7, lr}
10002fb6:	b082      	sub	sp, #8
10002fb8:	af00      	add	r7, sp, #0
10002fba:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ((IRQn_Type)(Handle->NodeID));
10002fbc:	687b      	ldr	r3, [r7, #4]
10002fbe:	781b      	ldrb	r3, [r3, #0]
10002fc0:	b2db      	uxtb	r3, r3
10002fc2:	b25b      	sxtb	r3, r3
10002fc4:	1c18      	adds	r0, r3, #0
10002fc6:	f7ff ff6f 	bl	10002ea8 <NVIC_EnableIRQ>
}
10002fca:	46bd      	mov	sp, r7
10002fcc:	b002      	add	sp, #8
10002fce:	bd80      	pop	{r7, pc}

10002fd0 <NVIC002_Init>:

/**  Function to initialize the NVIC node parameters based on 
 *  UI configuration.
 */
void NVIC002_Init(void)
{
10002fd0:	b580      	push	{r7, lr}
10002fd2:	b082      	sub	sp, #8
10002fd4:	af00      	add	r7, sp, #0
  uint32_t Count;
  for (Count = 0U; Count<(uint32_t)NVIC002_NUM_INSTANCES; Count++)
10002fd6:	2300      	movs	r3, #0
10002fd8:	607b      	str	r3, [r7, #4]
10002fda:	e009      	b.n	10002ff0 <NVIC002_Init+0x20>
  {
	  NVIC002_lInit(NVIC002_HandleArray[Count]);
10002fdc:	4b07      	ldr	r3, [pc, #28]	; (10002ffc <NVIC002_Init+0x2c>)
10002fde:	687a      	ldr	r2, [r7, #4]
10002fe0:	0092      	lsls	r2, r2, #2
10002fe2:	58d3      	ldr	r3, [r2, r3]
10002fe4:	1c18      	adds	r0, r3, #0
10002fe6:	f000 f80b 	bl	10003000 <NVIC002_lInit>
 *  UI configuration.
 */
void NVIC002_Init(void)
{
  uint32_t Count;
  for (Count = 0U; Count<(uint32_t)NVIC002_NUM_INSTANCES; Count++)
10002fea:	687b      	ldr	r3, [r7, #4]
10002fec:	3301      	adds	r3, #1
10002fee:	607b      	str	r3, [r7, #4]
10002ff0:	687b      	ldr	r3, [r7, #4]
10002ff2:	2b00      	cmp	r3, #0
10002ff4:	d0f2      	beq.n	10002fdc <NVIC002_Init+0xc>
  {
	  NVIC002_lInit(NVIC002_HandleArray[Count]);
  }
}
10002ff6:	46bd      	mov	sp, r7
10002ff8:	b002      	add	sp, #8
10002ffa:	bd80      	pop	{r7, pc}
10002ffc:	200009b0 	.word	0x200009b0

10003000 <NVIC002_lInit>:

static void NVIC002_lInit(const NVIC002_HandleType * Handle)
{
10003000:	b580      	push	{r7, lr}
10003002:	b082      	sub	sp, #8
10003004:	af00      	add	r7, sp, #0
10003006:	6078      	str	r0, [r7, #4]
   /* Set Interrupt Priority for NVIC <%=NodeID%> 
      Node App Instance <%=appInst%>  */
	#if (UC_FAMILY == XMC1) 
	   NVIC_SetPriority((IRQn_Type)Handle->NodeID, 
10003008:	687b      	ldr	r3, [r7, #4]
1000300a:	781b      	ldrb	r3, [r3, #0]
1000300c:	b2da      	uxtb	r2, r3
			             Handle->Priority);
1000300e:	687b      	ldr	r3, [r7, #4]
10003010:	785b      	ldrb	r3, [r3, #1]
static void NVIC002_lInit(const NVIC002_HandleType * Handle)
{
   /* Set Interrupt Priority for NVIC <%=NodeID%> 
      Node App Instance <%=appInst%>  */
	#if (UC_FAMILY == XMC1) 
	   NVIC_SetPriority((IRQn_Type)Handle->NodeID, 
10003012:	b252      	sxtb	r2, r2
10003014:	1c10      	adds	r0, r2, #0
10003016:	1c19      	adds	r1, r3, #0
10003018:	f7ff ff5c 	bl	10002ed4 <NVIC_SetPriority>
	   NVIC_SetPriority((IRQn_Type)Handle->NodeID, 
			   	   	     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
			   	   	     Handle->Priority,
			   	   	     Handle->SubPriority));
	#endif
	if(Handle->InterruptEnable == 1)
1000301c:	687b      	ldr	r3, [r7, #4]
1000301e:	78db      	ldrb	r3, [r3, #3]
10003020:	2b01      	cmp	r3, #1
10003022:	d103      	bne.n	1000302c <NVIC002_lInit+0x2c>
	{
	   /* Enable Interrupt */
		NVIC002_EnableIRQ(Handle);
10003024:	687b      	ldr	r3, [r7, #4]
10003026:	1c18      	adds	r0, r3, #0
10003028:	f7ff ffc4 	bl	10002fb4 <NVIC002_EnableIRQ>
	}
   
}
1000302c:	46bd      	mov	sp, r7
1000302e:	b002      	add	sp, #8
10003030:	bd80      	pop	{r7, pc}
10003032:	46c0      	nop			; (mov r8, r8)

10003034 <IO004_Init>:
/** @ingroup IO004_Func
 * @{
 */

void IO004_Init(void)
{
10003034:	b580      	push	{r7, lr}
10003036:	af00      	add	r7, sp, #0
   /* <<<DD_IO004_API_1>>> */

	   

  /* Configuration of 1 Port 0 based on User configuration */
  IO004_Handle0.PortRegs->OMR = 0U<< 0;
10003038:	4b0a      	ldr	r3, [pc, #40]	; (10003064 <IO004_Init+0x30>)
1000303a:	685b      	ldr	r3, [r3, #4]
1000303c:	2200      	movs	r2, #0
1000303e:	605a      	str	r2, [r3, #4]
  
  IO004_Handle0.PortRegs->IOCR0 |= (0U << 3);   
10003040:	4b08      	ldr	r3, [pc, #32]	; (10003064 <IO004_Init+0x30>)
10003042:	685b      	ldr	r3, [r3, #4]
10003044:	4a07      	ldr	r2, [pc, #28]	; (10003064 <IO004_Init+0x30>)
10003046:	6852      	ldr	r2, [r2, #4]
10003048:	6912      	ldr	r2, [r2, #16]
1000304a:	611a      	str	r2, [r3, #16]

  /* Configuration of 1 Port 1 based on User configuration */
  IO004_Handle1.PortRegs->OMR = 0U<< 1;
1000304c:	4b06      	ldr	r3, [pc, #24]	; (10003068 <IO004_Init+0x34>)
1000304e:	685b      	ldr	r3, [r3, #4]
10003050:	2200      	movs	r2, #0
10003052:	605a      	str	r2, [r3, #4]
  
  IO004_Handle1.PortRegs->IOCR0 |= (0U << 11);
10003054:	4b04      	ldr	r3, [pc, #16]	; (10003068 <IO004_Init+0x34>)
10003056:	685b      	ldr	r3, [r3, #4]
10003058:	4a03      	ldr	r2, [pc, #12]	; (10003068 <IO004_Init+0x34>)
1000305a:	6852      	ldr	r2, [r2, #4]
1000305c:	6912      	ldr	r2, [r2, #16]
1000305e:	611a      	str	r2, [r3, #16]
}
10003060:	46bd      	mov	sp, r7
10003062:	bd80      	pop	{r7, pc}
10003064:	100063ec 	.word	0x100063ec
10003068:	100063f4 	.word	0x100063f4

1000306c <IO004_DisableOutputDriver>:

void IO004_DisableOutputDriver(const IO004_HandleType* Handle,IO004_InputModeType Mode)
{
1000306c:	b590      	push	{r4, r7, lr}
1000306e:	b085      	sub	sp, #20
10003070:	af00      	add	r7, sp, #0
10003072:	6078      	str	r0, [r7, #4]
10003074:	1c0a      	adds	r2, r1, #0
10003076:	1cfb      	adds	r3, r7, #3
10003078:	701a      	strb	r2, [r3, #0]
  uint8_t Pin = Handle->PortPin;
1000307a:	1c3b      	adds	r3, r7, #0
1000307c:	330f      	adds	r3, #15
1000307e:	687a      	ldr	r2, [r7, #4]
10003080:	7852      	ldrb	r2, [r2, #1]
10003082:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10003084:	1c3b      	adds	r3, r7, #0
10003086:	330f      	adds	r3, #15
10003088:	781b      	ldrb	r3, [r3, #0]
1000308a:	2b03      	cmp	r3, #3
1000308c:	d824      	bhi.n	100030d8 <IO004_DisableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000308e:	687b      	ldr	r3, [r7, #4]
10003090:	685b      	ldr	r3, [r3, #4]
10003092:	687a      	ldr	r2, [r7, #4]
10003094:	6852      	ldr	r2, [r2, #4]
10003096:	6912      	ldr	r2, [r2, #16]
10003098:	1c39      	adds	r1, r7, #0
1000309a:	310f      	adds	r1, #15
1000309c:	7809      	ldrb	r1, [r1, #0]
1000309e:	00c9      	lsls	r1, r1, #3
100030a0:	3103      	adds	r1, #3
100030a2:	201f      	movs	r0, #31
100030a4:	1c04      	adds	r4, r0, #0
100030a6:	408c      	lsls	r4, r1
100030a8:	1c21      	adds	r1, r4, #0
100030aa:	43c9      	mvns	r1, r1
100030ac:	400a      	ands	r2, r1
100030ae:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |= (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100030b0:	687b      	ldr	r3, [r7, #4]
100030b2:	685b      	ldr	r3, [r3, #4]
100030b4:	687a      	ldr	r2, [r7, #4]
100030b6:	6852      	ldr	r2, [r2, #4]
100030b8:	6911      	ldr	r1, [r2, #16]
100030ba:	1cfa      	adds	r2, r7, #3
100030bc:	7810      	ldrb	r0, [r2, #0]
100030be:	221f      	movs	r2, #31
100030c0:	4010      	ands	r0, r2
100030c2:	1c3a      	adds	r2, r7, #0
100030c4:	320f      	adds	r2, #15
100030c6:	7812      	ldrb	r2, [r2, #0]
100030c8:	00d2      	lsls	r2, r2, #3
100030ca:	3203      	adds	r2, #3
100030cc:	1c04      	adds	r4, r0, #0
100030ce:	4094      	lsls	r4, r2
100030d0:	1c22      	adds	r2, r4, #0
100030d2:	430a      	orrs	r2, r1
100030d4:	611a      	str	r2, [r3, #16]
100030d6:	e0a0      	b.n	1000321a <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
100030d8:	1c3b      	adds	r3, r7, #0
100030da:	330f      	adds	r3, #15
100030dc:	781b      	ldrb	r3, [r3, #0]
100030de:	2b03      	cmp	r3, #3
100030e0:	d930      	bls.n	10003144 <IO004_DisableOutputDriver+0xd8>
100030e2:	1c3b      	adds	r3, r7, #0
100030e4:	330f      	adds	r3, #15
100030e6:	781b      	ldrb	r3, [r3, #0]
100030e8:	2b07      	cmp	r3, #7
100030ea:	d82b      	bhi.n	10003144 <IO004_DisableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
100030ec:	1c3b      	adds	r3, r7, #0
100030ee:	330f      	adds	r3, #15
100030f0:	1c3a      	adds	r2, r7, #0
100030f2:	320f      	adds	r2, #15
100030f4:	7812      	ldrb	r2, [r2, #0]
100030f6:	3a04      	subs	r2, #4
100030f8:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
100030fa:	687b      	ldr	r3, [r7, #4]
100030fc:	685b      	ldr	r3, [r3, #4]
100030fe:	687a      	ldr	r2, [r7, #4]
10003100:	6852      	ldr	r2, [r2, #4]
10003102:	6952      	ldr	r2, [r2, #20]
10003104:	1c39      	adds	r1, r7, #0
10003106:	310f      	adds	r1, #15
10003108:	7809      	ldrb	r1, [r1, #0]
1000310a:	00c9      	lsls	r1, r1, #3
1000310c:	3103      	adds	r1, #3
1000310e:	201f      	movs	r0, #31
10003110:	1c04      	adds	r4, r0, #0
10003112:	408c      	lsls	r4, r1
10003114:	1c21      	adds	r1, r4, #0
10003116:	43c9      	mvns	r1, r1
10003118:	400a      	ands	r2, r1
1000311a:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
1000311c:	687b      	ldr	r3, [r7, #4]
1000311e:	685b      	ldr	r3, [r3, #4]
10003120:	687a      	ldr	r2, [r7, #4]
10003122:	6852      	ldr	r2, [r2, #4]
10003124:	6951      	ldr	r1, [r2, #20]
10003126:	1cfa      	adds	r2, r7, #3
10003128:	7810      	ldrb	r0, [r2, #0]
1000312a:	221f      	movs	r2, #31
1000312c:	4010      	ands	r0, r2
1000312e:	1c3a      	adds	r2, r7, #0
10003130:	320f      	adds	r2, #15
10003132:	7812      	ldrb	r2, [r2, #0]
10003134:	00d2      	lsls	r2, r2, #3
10003136:	3203      	adds	r2, #3
10003138:	1c04      	adds	r4, r0, #0
1000313a:	4094      	lsls	r4, r2
1000313c:	1c22      	adds	r2, r4, #0
1000313e:	430a      	orrs	r2, r1
10003140:	615a      	str	r2, [r3, #20]
10003142:	e06a      	b.n	1000321a <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10003144:	1c3b      	adds	r3, r7, #0
10003146:	330f      	adds	r3, #15
10003148:	781b      	ldrb	r3, [r3, #0]
1000314a:	2b07      	cmp	r3, #7
1000314c:	d930      	bls.n	100031b0 <IO004_DisableOutputDriver+0x144>
1000314e:	1c3b      	adds	r3, r7, #0
10003150:	330f      	adds	r3, #15
10003152:	781b      	ldrb	r3, [r3, #0]
10003154:	2b0b      	cmp	r3, #11
10003156:	d82b      	bhi.n	100031b0 <IO004_DisableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10003158:	1c3b      	adds	r3, r7, #0
1000315a:	330f      	adds	r3, #15
1000315c:	1c3a      	adds	r2, r7, #0
1000315e:	320f      	adds	r2, #15
10003160:	7812      	ldrb	r2, [r2, #0]
10003162:	3a08      	subs	r2, #8
10003164:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10003166:	687b      	ldr	r3, [r7, #4]
10003168:	685b      	ldr	r3, [r3, #4]
1000316a:	687a      	ldr	r2, [r7, #4]
1000316c:	6852      	ldr	r2, [r2, #4]
1000316e:	6992      	ldr	r2, [r2, #24]
10003170:	1c39      	adds	r1, r7, #0
10003172:	310f      	adds	r1, #15
10003174:	7809      	ldrb	r1, [r1, #0]
10003176:	00c9      	lsls	r1, r1, #3
10003178:	3103      	adds	r1, #3
1000317a:	201f      	movs	r0, #31
1000317c:	1c04      	adds	r4, r0, #0
1000317e:	408c      	lsls	r4, r1
10003180:	1c21      	adds	r1, r4, #0
10003182:	43c9      	mvns	r1, r1
10003184:	400a      	ands	r2, r1
10003186:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10003188:	687b      	ldr	r3, [r7, #4]
1000318a:	685b      	ldr	r3, [r3, #4]
1000318c:	687a      	ldr	r2, [r7, #4]
1000318e:	6852      	ldr	r2, [r2, #4]
10003190:	6991      	ldr	r1, [r2, #24]
10003192:	1cfa      	adds	r2, r7, #3
10003194:	7810      	ldrb	r0, [r2, #0]
10003196:	221f      	movs	r2, #31
10003198:	4010      	ands	r0, r2
1000319a:	1c3a      	adds	r2, r7, #0
1000319c:	320f      	adds	r2, #15
1000319e:	7812      	ldrb	r2, [r2, #0]
100031a0:	00d2      	lsls	r2, r2, #3
100031a2:	3203      	adds	r2, #3
100031a4:	1c04      	adds	r4, r0, #0
100031a6:	4094      	lsls	r4, r2
100031a8:	1c22      	adds	r2, r4, #0
100031aa:	430a      	orrs	r2, r1
100031ac:	619a      	str	r2, [r3, #24]
100031ae:	e034      	b.n	1000321a <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
100031b0:	1c3b      	adds	r3, r7, #0
100031b2:	330f      	adds	r3, #15
100031b4:	781b      	ldrb	r3, [r3, #0]
100031b6:	2b0b      	cmp	r3, #11
100031b8:	d92f      	bls.n	1000321a <IO004_DisableOutputDriver+0x1ae>
100031ba:	1c3b      	adds	r3, r7, #0
100031bc:	330f      	adds	r3, #15
100031be:	781b      	ldrb	r3, [r3, #0]
100031c0:	2b0f      	cmp	r3, #15
100031c2:	d82a      	bhi.n	1000321a <IO004_DisableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
100031c4:	1c3b      	adds	r3, r7, #0
100031c6:	330f      	adds	r3, #15
100031c8:	1c3a      	adds	r2, r7, #0
100031ca:	320f      	adds	r2, #15
100031cc:	7812      	ldrb	r2, [r2, #0]
100031ce:	3a0c      	subs	r2, #12
100031d0:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
100031d2:	687b      	ldr	r3, [r7, #4]
100031d4:	685b      	ldr	r3, [r3, #4]
100031d6:	687a      	ldr	r2, [r7, #4]
100031d8:	6852      	ldr	r2, [r2, #4]
100031da:	69d2      	ldr	r2, [r2, #28]
100031dc:	1c39      	adds	r1, r7, #0
100031de:	310f      	adds	r1, #15
100031e0:	7809      	ldrb	r1, [r1, #0]
100031e2:	00c9      	lsls	r1, r1, #3
100031e4:	3103      	adds	r1, #3
100031e6:	201f      	movs	r0, #31
100031e8:	1c04      	adds	r4, r0, #0
100031ea:	408c      	lsls	r4, r1
100031ec:	1c21      	adds	r1, r4, #0
100031ee:	43c9      	mvns	r1, r1
100031f0:	400a      	ands	r2, r1
100031f2:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100031f4:	687b      	ldr	r3, [r7, #4]
100031f6:	685b      	ldr	r3, [r3, #4]
100031f8:	687a      	ldr	r2, [r7, #4]
100031fa:	6852      	ldr	r2, [r2, #4]
100031fc:	69d1      	ldr	r1, [r2, #28]
100031fe:	1cfa      	adds	r2, r7, #3
10003200:	7810      	ldrb	r0, [r2, #0]
10003202:	221f      	movs	r2, #31
10003204:	4010      	ands	r0, r2
10003206:	1c3a      	adds	r2, r7, #0
10003208:	320f      	adds	r2, #15
1000320a:	7812      	ldrb	r2, [r2, #0]
1000320c:	00d2      	lsls	r2, r2, #3
1000320e:	3203      	adds	r2, #3
10003210:	1c04      	adds	r4, r0, #0
10003212:	4094      	lsls	r4, r2
10003214:	1c22      	adds	r2, r4, #0
10003216:	430a      	orrs	r2, r1
10003218:	61da      	str	r2, [r3, #28]
  else
  {
	  /*Not supposed to be here */
  }

}
1000321a:	46bd      	mov	sp, r7
1000321c:	b005      	add	sp, #20
1000321e:	bd90      	pop	{r4, r7, pc}

10003220 <IO004_EnableOutputDriver>:

void IO004_EnableOutputDriver(const IO004_HandleType* Handle,IO004_OutputModeType Mode)
{
10003220:	b590      	push	{r4, r7, lr}
10003222:	b085      	sub	sp, #20
10003224:	af00      	add	r7, sp, #0
10003226:	6078      	str	r0, [r7, #4]
10003228:	1c0a      	adds	r2, r1, #0
1000322a:	1cfb      	adds	r3, r7, #3
1000322c:	701a      	strb	r2, [r3, #0]

  uint8_t Pin = Handle->PortPin;
1000322e:	1c3b      	adds	r3, r7, #0
10003230:	330f      	adds	r3, #15
10003232:	687a      	ldr	r2, [r7, #4]
10003234:	7852      	ldrb	r2, [r2, #1]
10003236:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10003238:	1c3b      	adds	r3, r7, #0
1000323a:	330f      	adds	r3, #15
1000323c:	781b      	ldrb	r3, [r3, #0]
1000323e:	2b03      	cmp	r3, #3
10003240:	d824      	bhi.n	1000328c <IO004_EnableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10003242:	687b      	ldr	r3, [r7, #4]
10003244:	685b      	ldr	r3, [r3, #4]
10003246:	687a      	ldr	r2, [r7, #4]
10003248:	6852      	ldr	r2, [r2, #4]
1000324a:	6912      	ldr	r2, [r2, #16]
1000324c:	1c39      	adds	r1, r7, #0
1000324e:	310f      	adds	r1, #15
10003250:	7809      	ldrb	r1, [r1, #0]
10003252:	00c9      	lsls	r1, r1, #3
10003254:	3103      	adds	r1, #3
10003256:	201f      	movs	r0, #31
10003258:	1c04      	adds	r4, r0, #0
1000325a:	408c      	lsls	r4, r1
1000325c:	1c21      	adds	r1, r4, #0
1000325e:	43c9      	mvns	r1, r1
10003260:	400a      	ands	r2, r1
10003262:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10003264:	687b      	ldr	r3, [r7, #4]
10003266:	685b      	ldr	r3, [r3, #4]
10003268:	687a      	ldr	r2, [r7, #4]
1000326a:	6852      	ldr	r2, [r2, #4]
1000326c:	6911      	ldr	r1, [r2, #16]
1000326e:	1cfa      	adds	r2, r7, #3
10003270:	7810      	ldrb	r0, [r2, #0]
10003272:	221f      	movs	r2, #31
10003274:	4010      	ands	r0, r2
10003276:	1c3a      	adds	r2, r7, #0
10003278:	320f      	adds	r2, #15
1000327a:	7812      	ldrb	r2, [r2, #0]
1000327c:	00d2      	lsls	r2, r2, #3
1000327e:	3203      	adds	r2, #3
10003280:	1c04      	adds	r4, r0, #0
10003282:	4094      	lsls	r4, r2
10003284:	1c22      	adds	r2, r4, #0
10003286:	430a      	orrs	r2, r1
10003288:	611a      	str	r2, [r3, #16]
1000328a:	e0a0      	b.n	100033ce <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
1000328c:	1c3b      	adds	r3, r7, #0
1000328e:	330f      	adds	r3, #15
10003290:	781b      	ldrb	r3, [r3, #0]
10003292:	2b03      	cmp	r3, #3
10003294:	d930      	bls.n	100032f8 <IO004_EnableOutputDriver+0xd8>
10003296:	1c3b      	adds	r3, r7, #0
10003298:	330f      	adds	r3, #15
1000329a:	781b      	ldrb	r3, [r3, #0]
1000329c:	2b07      	cmp	r3, #7
1000329e:	d82b      	bhi.n	100032f8 <IO004_EnableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
100032a0:	1c3b      	adds	r3, r7, #0
100032a2:	330f      	adds	r3, #15
100032a4:	1c3a      	adds	r2, r7, #0
100032a6:	320f      	adds	r2, #15
100032a8:	7812      	ldrb	r2, [r2, #0]
100032aa:	3a04      	subs	r2, #4
100032ac:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
100032ae:	687b      	ldr	r3, [r7, #4]
100032b0:	685b      	ldr	r3, [r3, #4]
100032b2:	687a      	ldr	r2, [r7, #4]
100032b4:	6852      	ldr	r2, [r2, #4]
100032b6:	6952      	ldr	r2, [r2, #20]
100032b8:	1c39      	adds	r1, r7, #0
100032ba:	310f      	adds	r1, #15
100032bc:	7809      	ldrb	r1, [r1, #0]
100032be:	00c9      	lsls	r1, r1, #3
100032c0:	3103      	adds	r1, #3
100032c2:	201f      	movs	r0, #31
100032c4:	1c04      	adds	r4, r0, #0
100032c6:	408c      	lsls	r4, r1
100032c8:	1c21      	adds	r1, r4, #0
100032ca:	43c9      	mvns	r1, r1
100032cc:	400a      	ands	r2, r1
100032ce:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100032d0:	687b      	ldr	r3, [r7, #4]
100032d2:	685b      	ldr	r3, [r3, #4]
100032d4:	687a      	ldr	r2, [r7, #4]
100032d6:	6852      	ldr	r2, [r2, #4]
100032d8:	6951      	ldr	r1, [r2, #20]
100032da:	1cfa      	adds	r2, r7, #3
100032dc:	7810      	ldrb	r0, [r2, #0]
100032de:	221f      	movs	r2, #31
100032e0:	4010      	ands	r0, r2
100032e2:	1c3a      	adds	r2, r7, #0
100032e4:	320f      	adds	r2, #15
100032e6:	7812      	ldrb	r2, [r2, #0]
100032e8:	00d2      	lsls	r2, r2, #3
100032ea:	3203      	adds	r2, #3
100032ec:	1c04      	adds	r4, r0, #0
100032ee:	4094      	lsls	r4, r2
100032f0:	1c22      	adds	r2, r4, #0
100032f2:	430a      	orrs	r2, r1
100032f4:	615a      	str	r2, [r3, #20]
100032f6:	e06a      	b.n	100033ce <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
100032f8:	1c3b      	adds	r3, r7, #0
100032fa:	330f      	adds	r3, #15
100032fc:	781b      	ldrb	r3, [r3, #0]
100032fe:	2b07      	cmp	r3, #7
10003300:	d930      	bls.n	10003364 <IO004_EnableOutputDriver+0x144>
10003302:	1c3b      	adds	r3, r7, #0
10003304:	330f      	adds	r3, #15
10003306:	781b      	ldrb	r3, [r3, #0]
10003308:	2b0b      	cmp	r3, #11
1000330a:	d82b      	bhi.n	10003364 <IO004_EnableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
1000330c:	1c3b      	adds	r3, r7, #0
1000330e:	330f      	adds	r3, #15
10003310:	1c3a      	adds	r2, r7, #0
10003312:	320f      	adds	r2, #15
10003314:	7812      	ldrb	r2, [r2, #0]
10003316:	3a08      	subs	r2, #8
10003318:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
1000331a:	687b      	ldr	r3, [r7, #4]
1000331c:	685b      	ldr	r3, [r3, #4]
1000331e:	687a      	ldr	r2, [r7, #4]
10003320:	6852      	ldr	r2, [r2, #4]
10003322:	6992      	ldr	r2, [r2, #24]
10003324:	1c39      	adds	r1, r7, #0
10003326:	310f      	adds	r1, #15
10003328:	7809      	ldrb	r1, [r1, #0]
1000332a:	00c9      	lsls	r1, r1, #3
1000332c:	3103      	adds	r1, #3
1000332e:	201f      	movs	r0, #31
10003330:	1c04      	adds	r4, r0, #0
10003332:	408c      	lsls	r4, r1
10003334:	1c21      	adds	r1, r4, #0
10003336:	43c9      	mvns	r1, r1
10003338:	400a      	ands	r2, r1
1000333a:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
1000333c:	687b      	ldr	r3, [r7, #4]
1000333e:	685b      	ldr	r3, [r3, #4]
10003340:	687a      	ldr	r2, [r7, #4]
10003342:	6852      	ldr	r2, [r2, #4]
10003344:	6991      	ldr	r1, [r2, #24]
10003346:	1cfa      	adds	r2, r7, #3
10003348:	7810      	ldrb	r0, [r2, #0]
1000334a:	221f      	movs	r2, #31
1000334c:	4010      	ands	r0, r2
1000334e:	1c3a      	adds	r2, r7, #0
10003350:	320f      	adds	r2, #15
10003352:	7812      	ldrb	r2, [r2, #0]
10003354:	00d2      	lsls	r2, r2, #3
10003356:	3203      	adds	r2, #3
10003358:	1c04      	adds	r4, r0, #0
1000335a:	4094      	lsls	r4, r2
1000335c:	1c22      	adds	r2, r4, #0
1000335e:	430a      	orrs	r2, r1
10003360:	619a      	str	r2, [r3, #24]
10003362:	e034      	b.n	100033ce <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10003364:	1c3b      	adds	r3, r7, #0
10003366:	330f      	adds	r3, #15
10003368:	781b      	ldrb	r3, [r3, #0]
1000336a:	2b0b      	cmp	r3, #11
1000336c:	d92f      	bls.n	100033ce <IO004_EnableOutputDriver+0x1ae>
1000336e:	1c3b      	adds	r3, r7, #0
10003370:	330f      	adds	r3, #15
10003372:	781b      	ldrb	r3, [r3, #0]
10003374:	2b0f      	cmp	r3, #15
10003376:	d82a      	bhi.n	100033ce <IO004_EnableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10003378:	1c3b      	adds	r3, r7, #0
1000337a:	330f      	adds	r3, #15
1000337c:	1c3a      	adds	r2, r7, #0
1000337e:	320f      	adds	r2, #15
10003380:	7812      	ldrb	r2, [r2, #0]
10003382:	3a0c      	subs	r2, #12
10003384:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10003386:	687b      	ldr	r3, [r7, #4]
10003388:	685b      	ldr	r3, [r3, #4]
1000338a:	687a      	ldr	r2, [r7, #4]
1000338c:	6852      	ldr	r2, [r2, #4]
1000338e:	69d2      	ldr	r2, [r2, #28]
10003390:	1c39      	adds	r1, r7, #0
10003392:	310f      	adds	r1, #15
10003394:	7809      	ldrb	r1, [r1, #0]
10003396:	00c9      	lsls	r1, r1, #3
10003398:	3103      	adds	r1, #3
1000339a:	201f      	movs	r0, #31
1000339c:	1c04      	adds	r4, r0, #0
1000339e:	408c      	lsls	r4, r1
100033a0:	1c21      	adds	r1, r4, #0
100033a2:	43c9      	mvns	r1, r1
100033a4:	400a      	ands	r2, r1
100033a6:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
100033a8:	687b      	ldr	r3, [r7, #4]
100033aa:	685b      	ldr	r3, [r3, #4]
100033ac:	687a      	ldr	r2, [r7, #4]
100033ae:	6852      	ldr	r2, [r2, #4]
100033b0:	69d1      	ldr	r1, [r2, #28]
100033b2:	1cfa      	adds	r2, r7, #3
100033b4:	7810      	ldrb	r0, [r2, #0]
100033b6:	221f      	movs	r2, #31
100033b8:	4010      	ands	r0, r2
100033ba:	1c3a      	adds	r2, r7, #0
100033bc:	320f      	adds	r2, #15
100033be:	7812      	ldrb	r2, [r2, #0]
100033c0:	00d2      	lsls	r2, r2, #3
100033c2:	3203      	adds	r2, #3
100033c4:	1c04      	adds	r4, r0, #0
100033c6:	4094      	lsls	r4, r2
100033c8:	1c22      	adds	r2, r4, #0
100033ca:	430a      	orrs	r2, r1
100033cc:	61da      	str	r2, [r3, #28]
  }
  else
  {
	  /*Not supposed to be here */
  }
}
100033ce:	46bd      	mov	sp, r7
100033d0:	b005      	add	sp, #20
100033d2:	bd90      	pop	{r4, r7, pc}

100033d4 <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
100033d4:	b580      	push	{r7, lr}
100033d6:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
100033d8:	f000 f8b0 	bl	1000353c <DAVE_MUX_PreInit>
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
100033dc:	f000 f8b2 	bl	10003544 <CLK002_Init>
	 
	//  Initialization of app 'CCU4GLOBAL'		     
	CCU4GLOBAL_Init();
100033e0:	f000 fa20 	bl	10003824 <CCU4GLOBAL_Init>
	 
	//  Initialization of app 'CCU8GLOBAL'		     
	CCU8GLOBAL_Init();
100033e4:	f000 f9c2 	bl	1000376c <CCU8GLOBAL_Init>
	 
	//  Initialization of app 'IO004'		     
	IO004_Init();
100033e8:	f7ff fe24 	bl	10003034 <IO004_Init>
	 
	//  Initialization of app 'UART001'		     
	UART001_Init();
100033ec:	f7ff fb08 	bl	10002a00 <UART001_Init>
	 
	//  Initialization of app 'NVIC002'		     
	NVIC002_Init();
100033f0:	f7ff fdee 	bl	10002fd0 <NVIC002_Init>
	 
	//  Initialization of app 'ADCGLOB001'		     
	ADCGLOB001_Init();
100033f4:	f000 fa78 	bl	100038e8 <ADCGLOB001_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
100033f8:	f000 f802 	bl	10003400 <DAVE_MUX_Init>
} //  End of function DAVE_Init
100033fc:	46bd      	mov	sp, r7
100033fe:	bd80      	pop	{r7, pc}

10003400 <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
10003400:	b580      	push	{r7, lr}
10003402:	b086      	sub	sp, #24
10003404:	af00      	add	r7, sp, #0
//********* MODULE USIC CONFIGURATIONS *************************	        
        
           
   /* Disable mode before configuring all USIC registers to avoid unintended edges */   
      /* Variable to store the CCR_MODE values for various USIC channels */ 
      uint32_t UsicCcrMode[6] = {0};
10003406:	1c3b      	adds	r3, r7, #0
10003408:	2200      	movs	r2, #0
1000340a:	601a      	str	r2, [r3, #0]
1000340c:	3304      	adds	r3, #4
1000340e:	2200      	movs	r2, #0
10003410:	601a      	str	r2, [r3, #0]
10003412:	3304      	adds	r3, #4
10003414:	2200      	movs	r2, #0
10003416:	601a      	str	r2, [r3, #0]
10003418:	3304      	adds	r3, #4
1000341a:	2200      	movs	r2, #0
1000341c:	601a      	str	r2, [r3, #0]
1000341e:	3304      	adds	r3, #4
10003420:	2200      	movs	r2, #0
10003422:	601a      	str	r2, [r3, #0]
10003424:	3304      	adds	r3, #4
10003426:	2200      	movs	r2, #0
10003428:	601a      	str	r2, [r3, #0]
1000342a:	3304      	adds	r3, #4
           
    UsicCcrMode[0] |= (uint32_t) RD_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos);
1000342c:	1c3b      	adds	r3, r7, #0
1000342e:	681a      	ldr	r2, [r3, #0]
10003430:	2390      	movs	r3, #144	; 0x90
10003432:	05db      	lsls	r3, r3, #23
10003434:	6c19      	ldr	r1, [r3, #64]	; 0x40
10003436:	230f      	movs	r3, #15
10003438:	400b      	ands	r3, r1
1000343a:	431a      	orrs	r2, r3
1000343c:	1c3b      	adds	r3, r7, #0
1000343e:	601a      	str	r2, [r3, #0]
    WR_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,0);  
10003440:	2390      	movs	r3, #144	; 0x90
10003442:	05db      	lsls	r3, r3, #23
10003444:	2290      	movs	r2, #144	; 0x90
10003446:	05d2      	lsls	r2, r2, #23
10003448:	6c12      	ldr	r2, [r2, #64]	; 0x40
1000344a:	210f      	movs	r1, #15
1000344c:	438a      	bics	r2, r1
1000344e:	641a      	str	r2, [r3, #64]	; 0x40
                        
      
    						
   /*USIC 0 Channel 0 Mux Related SFR/Bitfields Configurations*/ 						         
 WR_REG(USIC0_CH0->DX0CR, USIC_CH_DX0CR_DSEL_Msk, USIC_CH_DX0CR_DSEL_Pos,6); 
10003450:	2390      	movs	r3, #144	; 0x90
10003452:	05db      	lsls	r3, r3, #23
10003454:	2290      	movs	r2, #144	; 0x90
10003456:	05d2      	lsls	r2, r2, #23
10003458:	69d2      	ldr	r2, [r2, #28]
1000345a:	2107      	movs	r1, #7
1000345c:	438a      	bics	r2, r1
1000345e:	2106      	movs	r1, #6
10003460:	430a      	orrs	r2, r1
10003462:	61da      	str	r2, [r3, #28]
  			  					 				   
 WR_REG(USIC0_CH0->DX3CR, USIC_CH_DX3CR_DSEL_Msk, USIC_CH_DX3CR_DSEL_Pos,5);
10003464:	2390      	movs	r3, #144	; 0x90
10003466:	05db      	lsls	r3, r3, #23
10003468:	2290      	movs	r2, #144	; 0x90
1000346a:	05d2      	lsls	r2, r2, #23
1000346c:	6a92      	ldr	r2, [r2, #40]	; 0x28
1000346e:	2107      	movs	r1, #7
10003470:	438a      	bics	r2, r1
10003472:	2105      	movs	r1, #5
10003474:	430a      	orrs	r2, r1
10003476:	629a      	str	r2, [r3, #40]	; 0x28
    				 		         
 WR_REG(USIC0_CH0->DX5CR, USIC_CH_DX5CR_DSEL_Msk, USIC_CH_DX5CR_DSEL_Pos,4);  
10003478:	2390      	movs	r3, #144	; 0x90
1000347a:	05db      	lsls	r3, r3, #23
1000347c:	2290      	movs	r2, #144	; 0x90
1000347e:	05d2      	lsls	r2, r2, #23
10003480:	6b12      	ldr	r2, [r2, #48]	; 0x30
10003482:	2107      	movs	r1, #7
10003484:	438a      	bics	r2, r1
10003486:	2104      	movs	r1, #4
10003488:	430a      	orrs	r2, r1
1000348a:	631a      	str	r2, [r3, #48]	; 0x30
  				              				  					    					 					   				  					 				 				       				  					    
 //Standard receive buffer event is enabled.                 
 WR_REG(USIC0_CH0->RBCTR, USIC_CH_RBCTR_SRBIEN_Msk, USIC_CH_RBCTR_SRBIEN_Pos,1);  
1000348c:	2390      	movs	r3, #144	; 0x90
1000348e:	05da      	lsls	r2, r3, #23
10003490:	2390      	movs	r3, #144	; 0x90
10003492:	05d9      	lsls	r1, r3, #23
10003494:	2386      	movs	r3, #134	; 0x86
10003496:	005b      	lsls	r3, r3, #1
10003498:	58cb      	ldr	r3, [r1, r3]
1000349a:	2180      	movs	r1, #128	; 0x80
1000349c:	05c9      	lsls	r1, r1, #23
1000349e:	4319      	orrs	r1, r3
100034a0:	2386      	movs	r3, #134	; 0x86
100034a2:	005b      	lsls	r3, r3, #1
100034a4:	50d1      	str	r1, [r2, r3]
 					 									 					 					  									      					              					  						    					      
                 
   // Data Pointer & Buffer Size for Transmitter Buffer Control  
 WR_REG(USIC0_CH0->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos,0x05000020);		/*    DPTR = 32,  SIZE = 5 */ 
100034a6:	2390      	movs	r3, #144	; 0x90
100034a8:	05da      	lsls	r2, r3, #23
100034aa:	2390      	movs	r3, #144	; 0x90
100034ac:	05d9      	lsls	r1, r3, #23
100034ae:	2384      	movs	r3, #132	; 0x84
100034b0:	005b      	lsls	r3, r3, #1
100034b2:	58c9      	ldr	r1, [r1, r3]
100034b4:	4b1d      	ldr	r3, [pc, #116]	; (1000352c <DAVE_MUX_Init+0x12c>)
100034b6:	400b      	ands	r3, r1
100034b8:	491d      	ldr	r1, [pc, #116]	; (10003530 <DAVE_MUX_Init+0x130>)
100034ba:	4319      	orrs	r1, r3
100034bc:	2384      	movs	r3, #132	; 0x84
100034be:	005b      	lsls	r3, r3, #1
100034c0:	50d1      	str	r1, [r2, r3]
         
  // Data Pointer & Buffer Size for Receiver Buffer Control  
 WR_REG(USIC0_CH0->RBCTR, USIC_CH_RBCTR_DPTRSIZE_Msk, USIC_CH_RBCTR_DPTRSIZE_Pos,0x05000000);		/*    DPTR = 0,  SIZE = 5 */ 
100034c2:	2390      	movs	r3, #144	; 0x90
100034c4:	05da      	lsls	r2, r3, #23
100034c6:	2390      	movs	r3, #144	; 0x90
100034c8:	05d9      	lsls	r1, r3, #23
100034ca:	2386      	movs	r3, #134	; 0x86
100034cc:	005b      	lsls	r3, r3, #1
100034ce:	58c9      	ldr	r1, [r1, r3]
100034d0:	4b16      	ldr	r3, [pc, #88]	; (1000352c <DAVE_MUX_Init+0x12c>)
100034d2:	400b      	ands	r3, r1
100034d4:	21a0      	movs	r1, #160	; 0xa0
100034d6:	04c9      	lsls	r1, r1, #19
100034d8:	4319      	orrs	r1, r3
100034da:	2386      	movs	r3, #134	; 0x86
100034dc:	005b      	lsls	r3, r3, #1
100034de:	50d1      	str	r1, [r2, r3]
   /*USIC 2 Channel 1 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
         
  
  /* Enable mode after configuring all USIC registers to avoid unintended edges */  
            
   WR_REG(USIC0_CH0->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,UsicCcrMode[0]); 
100034e0:	2390      	movs	r3, #144	; 0x90
100034e2:	05db      	lsls	r3, r3, #23
100034e4:	1c3a      	adds	r2, r7, #0
100034e6:	6811      	ldr	r1, [r2, #0]
100034e8:	220f      	movs	r2, #15
100034ea:	4011      	ands	r1, r2
100034ec:	2290      	movs	r2, #144	; 0x90
100034ee:	05d2      	lsls	r2, r2, #23
100034f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
100034f2:	200f      	movs	r0, #15
100034f4:	4382      	bics	r2, r0
100034f6:	430a      	orrs	r2, r1
100034f8:	641a      	str	r2, [r3, #64]	; 0x40
   	 
            	         
                                                 

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                                      
  WR_REG(PORT1->IOCR0, PORT_IOCR_PC0_OE_Msk, PORT_IOCR_PC0_OE_Pos, PORT_IOCR_OE1);                /*    P1.0 : PORT1_IOCR0_PC0_OE */					   
100034fa:	4b0e      	ldr	r3, [pc, #56]	; (10003534 <DAVE_MUX_Init+0x134>)
100034fc:	4a0d      	ldr	r2, [pc, #52]	; (10003534 <DAVE_MUX_Init+0x134>)
100034fe:	6912      	ldr	r2, [r2, #16]
10003500:	2180      	movs	r1, #128	; 0x80
10003502:	430a      	orrs	r2, r1
10003504:	611a      	str	r2, [r3, #16]
					                         
  WR_REG(PORT1->IOCR0, PORT_IOCR_PC1_OE_Msk, PORT_IOCR_PC1_OE_Pos, PORT_IOCR_OE1);                /*    P1.1 : PORT1_IOCR0_PC1_OE */					   
10003506:	4b0b      	ldr	r3, [pc, #44]	; (10003534 <DAVE_MUX_Init+0x134>)
10003508:	4a0a      	ldr	r2, [pc, #40]	; (10003534 <DAVE_MUX_Init+0x134>)
1000350a:	6912      	ldr	r2, [r2, #16]
1000350c:	2180      	movs	r1, #128	; 0x80
1000350e:	0209      	lsls	r1, r1, #8
10003510:	430a      	orrs	r2, r1
10003512:	611a      	str	r2, [r3, #16]
					                         
  WR_REG(PORT1->IOCR4, 0xb800U, PORT_IOCR_PC1_PCR_Pos, 0x12U);                /*P1.5 : PORT1_IOCR4_PC5_PCR and PORT1_IOCR4_PC5_OE */					   
10003514:	4b07      	ldr	r3, [pc, #28]	; (10003534 <DAVE_MUX_Init+0x134>)
10003516:	4a07      	ldr	r2, [pc, #28]	; (10003534 <DAVE_MUX_Init+0x134>)
10003518:	6951      	ldr	r1, [r2, #20]
1000351a:	4a07      	ldr	r2, [pc, #28]	; (10003538 <DAVE_MUX_Init+0x138>)
1000351c:	400a      	ands	r2, r1
1000351e:	2190      	movs	r1, #144	; 0x90
10003520:	0209      	lsls	r1, r1, #8
10003522:	430a      	orrs	r2, r1
10003524:	615a      	str	r2, [r3, #20]

					 						          						          						          						          						          						          						          						                
                                                                                                                						                            						                          						                            						                             						                          						                             						                           						                          						                            						                    						                         						                         						                       						                       						                          						                          						                                         						                             						                        						                            						                     						                         						                       						                                 
               /*VADC GLOBAL RESULT Mux Related SFR/Bitfields Configurations*/  						                       						                     						                                 
               /*VADC BACKGROUND Source Mux Related SFR/Bitfields Configurations*/  						                  						                						                                                                                 
}
10003526:	46bd      	mov	sp, r7
10003528:	b006      	add	sp, #24
1000352a:	bd80      	pop	{r7, pc}
1000352c:	f8ffffc0 	.word	0xf8ffffc0
10003530:	05000020 	.word	0x05000020
10003534:	40040100 	.word	0x40040100
10003538:	ffff47ff 	.word	0xffff47ff

1000353c <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{                
1000353c:	b580      	push	{r7, lr}
1000353e:	af00      	add	r7, sp, #0

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                           
}
10003540:	46bd      	mov	sp, r7
10003542:	bd80      	pop	{r7, pc}

10003544 <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
10003544:	b580      	push	{r7, lr}
10003546:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
10003548:	4b0a      	ldr	r3, [pc, #40]	; (10003574 <CLK002_Init+0x30>)
1000354a:	22c0      	movs	r2, #192	; 0xc0
1000354c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
1000354e:	46c0      	nop			; (mov r8, r8)
10003550:	4b08      	ldr	r3, [pc, #32]	; (10003574 <CLK002_Init+0x30>)
10003552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10003554:	2304      	movs	r3, #4
10003556:	4013      	ands	r3, r2
10003558:	d1fa      	bne.n	10003550 <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
1000355a:	4b07      	ldr	r3, [pc, #28]	; (10003578 <CLK002_Init+0x34>)
1000355c:	4a06      	ldr	r2, [pc, #24]	; (10003578 <CLK002_Init+0x34>)
1000355e:	6812      	ldr	r2, [r2, #0]
10003560:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
10003562:	f000 f811 	bl	10003588 <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
10003566:	4b03      	ldr	r3, [pc, #12]	; (10003574 <CLK002_Init+0x30>)
10003568:	22c3      	movs	r2, #195	; 0xc3
1000356a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
1000356c:	f7fd fdda 	bl	10001124 <SystemCoreClockUpdate>
}
10003570:	46bd      	mov	sp, r7
10003572:	bd80      	pop	{r7, pc}
10003574:	40010000 	.word	0x40010000
10003578:	40010300 	.word	0x40010300

1000357c <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
1000357c:	b580      	push	{r7, lr}
1000357e:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
10003580:	2300      	movs	r3, #0
}
10003582:	1c18      	adds	r0, r3, #0
10003584:	46bd      	mov	sp, r7
10003586:	bd80      	pop	{r7, pc}

10003588 <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
10003588:	b580      	push	{r7, lr}
1000358a:	b084      	sub	sp, #16
1000358c:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
1000358e:	2300      	movs	r3, #0
10003590:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
10003592:	2300      	movs	r3, #0
10003594:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10003596:	4b18      	ldr	r3, [pc, #96]	; (100035f8 <CLK002_lDivUpdate+0x70>)
10003598:	681a      	ldr	r2, [r3, #0]
1000359a:	23ff      	movs	r3, #255	; 0xff
1000359c:	021b      	lsls	r3, r3, #8
1000359e:	4013      	ands	r3, r2
100035a0:	0a1b      	lsrs	r3, r3, #8
100035a2:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
100035a4:	2301      	movs	r3, #1
100035a6:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
100035a8:	4b13      	ldr	r3, [pc, #76]	; (100035f8 <CLK002_lDivUpdate+0x70>)
100035aa:	681b      	ldr	r3, [r3, #0]
100035ac:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
100035ae:	687b      	ldr	r3, [r7, #4]
100035b0:	22ff      	movs	r2, #255	; 0xff
100035b2:	4393      	bics	r3, r2
100035b4:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
100035b6:	4b10      	ldr	r3, [pc, #64]	; (100035f8 <CLK002_lDivUpdate+0x70>)
100035b8:	687a      	ldr	r2, [r7, #4]
100035ba:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100035bc:	4b0e      	ldr	r3, [pc, #56]	; (100035f8 <CLK002_lDivUpdate+0x70>)
100035be:	4a0e      	ldr	r2, [pc, #56]	; (100035f8 <CLK002_lDivUpdate+0x70>)
100035c0:	6812      	ldr	r2, [r2, #0]
100035c2:	490e      	ldr	r1, [pc, #56]	; (100035fc <CLK002_lDivUpdate+0x74>)
100035c4:	430a      	orrs	r2, r1
100035c6:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100035c8:	46c0      	nop			; (mov r8, r8)
100035ca:	4b0b      	ldr	r3, [pc, #44]	; (100035f8 <CLK002_lDivUpdate+0x70>)
100035cc:	681a      	ldr	r2, [r3, #0]
100035ce:	2380      	movs	r3, #128	; 0x80
100035d0:	05db      	lsls	r3, r3, #23
100035d2:	4013      	ands	r3, r2
100035d4:	d1f9      	bne.n	100035ca <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
100035d6:	68fa      	ldr	r2, [r7, #12]
100035d8:	68bb      	ldr	r3, [r7, #8]
100035da:	429a      	cmp	r2, r3
100035dc:	d008      	beq.n	100035f0 <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
100035de:	68fa      	ldr	r2, [r7, #12]
100035e0:	68bb      	ldr	r3, [r7, #8]
100035e2:	429a      	cmp	r2, r3
100035e4:	d202      	bcs.n	100035ec <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
100035e6:	f000 f869 	bl	100036bc <CLK002_lFrequencyDownScaling>
100035ea:	e001      	b.n	100035f0 <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
100035ec:	f000 f808 	bl	10003600 <CLK002_lFrequencyUpScaling>
   }

}
100035f0:	46bd      	mov	sp, r7
100035f2:	b004      	add	sp, #16
100035f4:	bd80      	pop	{r7, pc}
100035f6:	46c0      	nop			; (mov r8, r8)
100035f8:	40010300 	.word	0x40010300
100035fc:	3ff00000 	.word	0x3ff00000

10003600 <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
10003600:	b580      	push	{r7, lr}
10003602:	b084      	sub	sp, #16
10003604:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10003606:	4b2a      	ldr	r3, [pc, #168]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
10003608:	681a      	ldr	r2, [r3, #0]
1000360a:	23ff      	movs	r3, #255	; 0xff
1000360c:	021b      	lsls	r3, r3, #8
1000360e:	4013      	ands	r3, r2
10003610:	0a1b      	lsrs	r3, r3, #8
10003612:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
10003614:	2301      	movs	r3, #1
10003616:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
10003618:	68bb      	ldr	r3, [r7, #8]
1000361a:	009a      	lsls	r2, r3, #2
1000361c:	68fb      	ldr	r3, [r7, #12]
1000361e:	429a      	cmp	r2, r3
10003620:	d224      	bcs.n	1000366c <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
10003622:	68fb      	ldr	r3, [r7, #12]
10003624:	2203      	movs	r2, #3
10003626:	4393      	bics	r3, r2
10003628:	3304      	adds	r3, #4
1000362a:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
1000362c:	68fb      	ldr	r3, [r7, #12]
1000362e:	089b      	lsrs	r3, r3, #2
10003630:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
10003632:	4b1f      	ldr	r3, [pc, #124]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
10003634:	681b      	ldr	r3, [r3, #0]
10003636:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10003638:	68fb      	ldr	r3, [r7, #12]
1000363a:	021b      	lsls	r3, r3, #8
1000363c:	041b      	lsls	r3, r3, #16
1000363e:	0c1a      	lsrs	r2, r3, #16
10003640:	6879      	ldr	r1, [r7, #4]
10003642:	4b1c      	ldr	r3, [pc, #112]	; (100036b4 <CLK002_lFrequencyUpScaling+0xb4>)
10003644:	400b      	ands	r3, r1
10003646:	4313      	orrs	r3, r2
10003648:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
1000364a:	4b19      	ldr	r3, [pc, #100]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
1000364c:	687a      	ldr	r2, [r7, #4]
1000364e:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003650:	4b17      	ldr	r3, [pc, #92]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
10003652:	4a17      	ldr	r2, [pc, #92]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
10003654:	6812      	ldr	r2, [r2, #0]
10003656:	4918      	ldr	r1, [pc, #96]	; (100036b8 <CLK002_lFrequencyUpScaling+0xb8>)
10003658:	430a      	orrs	r2, r1
1000365a:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
1000365c:	46c0      	nop			; (mov r8, r8)
1000365e:	4b14      	ldr	r3, [pc, #80]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
10003660:	681a      	ldr	r2, [r3, #0]
10003662:	2380      	movs	r3, #128	; 0x80
10003664:	05db      	lsls	r3, r3, #23
10003666:	4013      	ands	r3, r2
10003668:	d1f9      	bne.n	1000365e <CLK002_lFrequencyUpScaling+0x5e>
1000366a:	e01c      	b.n	100036a6 <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
1000366c:	4b10      	ldr	r3, [pc, #64]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
1000366e:	681b      	ldr	r3, [r3, #0]
10003670:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10003672:	68bb      	ldr	r3, [r7, #8]
10003674:	021b      	lsls	r3, r3, #8
10003676:	041b      	lsls	r3, r3, #16
10003678:	0c1a      	lsrs	r2, r3, #16
1000367a:	6879      	ldr	r1, [r7, #4]
1000367c:	4b0d      	ldr	r3, [pc, #52]	; (100036b4 <CLK002_lFrequencyUpScaling+0xb4>)
1000367e:	400b      	ands	r3, r1
10003680:	4313      	orrs	r3, r2
10003682:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10003684:	4b0a      	ldr	r3, [pc, #40]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
10003686:	687a      	ldr	r2, [r7, #4]
10003688:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
1000368a:	4b09      	ldr	r3, [pc, #36]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
1000368c:	4a08      	ldr	r2, [pc, #32]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
1000368e:	6812      	ldr	r2, [r2, #0]
10003690:	4909      	ldr	r1, [pc, #36]	; (100036b8 <CLK002_lFrequencyUpScaling+0xb8>)
10003692:	430a      	orrs	r2, r1
10003694:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003696:	46c0      	nop			; (mov r8, r8)
10003698:	4b05      	ldr	r3, [pc, #20]	; (100036b0 <CLK002_lFrequencyUpScaling+0xb0>)
1000369a:	681a      	ldr	r2, [r3, #0]
1000369c:	2380      	movs	r3, #128	; 0x80
1000369e:	05db      	lsls	r3, r3, #23
100036a0:	4013      	ands	r3, r2
100036a2:	d1f9      	bne.n	10003698 <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
100036a4:	e000      	b.n	100036a8 <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
100036a6:	e7b7      	b.n	10003618 <CLK002_lFrequencyUpScaling+0x18>

}
100036a8:	46bd      	mov	sp, r7
100036aa:	b004      	add	sp, #16
100036ac:	bd80      	pop	{r7, pc}
100036ae:	46c0      	nop			; (mov r8, r8)
100036b0:	40010300 	.word	0x40010300
100036b4:	ffff00ff 	.word	0xffff00ff
100036b8:	3ff00000 	.word	0x3ff00000

100036bc <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
100036bc:	b580      	push	{r7, lr}
100036be:	b084      	sub	sp, #16
100036c0:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
100036c2:	4b27      	ldr	r3, [pc, #156]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
100036c4:	681a      	ldr	r2, [r3, #0]
100036c6:	23ff      	movs	r3, #255	; 0xff
100036c8:	021b      	lsls	r3, r3, #8
100036ca:	4013      	ands	r3, r2
100036cc:	0a1b      	lsrs	r3, r3, #8
100036ce:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
100036d0:	2301      	movs	r3, #1
100036d2:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
100036d4:	68fb      	ldr	r3, [r7, #12]
100036d6:	009a      	lsls	r2, r3, #2
100036d8:	68bb      	ldr	r3, [r7, #8]
100036da:	429a      	cmp	r2, r3
100036dc:	d21f      	bcs.n	1000371e <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
100036de:	68fb      	ldr	r3, [r7, #12]
100036e0:	009b      	lsls	r3, r3, #2
100036e2:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
100036e4:	4b1e      	ldr	r3, [pc, #120]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
100036e6:	681b      	ldr	r3, [r3, #0]
100036e8:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
100036ea:	68fb      	ldr	r3, [r7, #12]
100036ec:	021b      	lsls	r3, r3, #8
100036ee:	041b      	lsls	r3, r3, #16
100036f0:	0c1a      	lsrs	r2, r3, #16
100036f2:	6879      	ldr	r1, [r7, #4]
100036f4:	4b1b      	ldr	r3, [pc, #108]	; (10003764 <CLK002_lFrequencyDownScaling+0xa8>)
100036f6:	400b      	ands	r3, r1
100036f8:	4313      	orrs	r3, r2
100036fa:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
100036fc:	4b18      	ldr	r3, [pc, #96]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
100036fe:	687a      	ldr	r2, [r7, #4]
10003700:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003702:	4b17      	ldr	r3, [pc, #92]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
10003704:	4a16      	ldr	r2, [pc, #88]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
10003706:	6812      	ldr	r2, [r2, #0]
10003708:	4917      	ldr	r1, [pc, #92]	; (10003768 <CLK002_lFrequencyDownScaling+0xac>)
1000370a:	430a      	orrs	r2, r1
1000370c:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
1000370e:	46c0      	nop			; (mov r8, r8)
10003710:	4b13      	ldr	r3, [pc, #76]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
10003712:	681a      	ldr	r2, [r3, #0]
10003714:	2380      	movs	r3, #128	; 0x80
10003716:	05db      	lsls	r3, r3, #23
10003718:	4013      	ands	r3, r2
1000371a:	d1f9      	bne.n	10003710 <CLK002_lFrequencyDownScaling+0x54>
1000371c:	e01c      	b.n	10003758 <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
1000371e:	4b10      	ldr	r3, [pc, #64]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
10003720:	681b      	ldr	r3, [r3, #0]
10003722:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10003724:	68bb      	ldr	r3, [r7, #8]
10003726:	021b      	lsls	r3, r3, #8
10003728:	041b      	lsls	r3, r3, #16
1000372a:	0c1a      	lsrs	r2, r3, #16
1000372c:	6879      	ldr	r1, [r7, #4]
1000372e:	4b0d      	ldr	r3, [pc, #52]	; (10003764 <CLK002_lFrequencyDownScaling+0xa8>)
10003730:	400b      	ands	r3, r1
10003732:	4313      	orrs	r3, r2
10003734:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10003736:	4b0a      	ldr	r3, [pc, #40]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
10003738:	687a      	ldr	r2, [r7, #4]
1000373a:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
1000373c:	4b08      	ldr	r3, [pc, #32]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
1000373e:	4a08      	ldr	r2, [pc, #32]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
10003740:	6812      	ldr	r2, [r2, #0]
10003742:	4909      	ldr	r1, [pc, #36]	; (10003768 <CLK002_lFrequencyDownScaling+0xac>)
10003744:	430a      	orrs	r2, r1
10003746:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003748:	46c0      	nop			; (mov r8, r8)
1000374a:	4b05      	ldr	r3, [pc, #20]	; (10003760 <CLK002_lFrequencyDownScaling+0xa4>)
1000374c:	681a      	ldr	r2, [r3, #0]
1000374e:	2380      	movs	r3, #128	; 0x80
10003750:	05db      	lsls	r3, r3, #23
10003752:	4013      	ands	r3, r2
10003754:	d1f9      	bne.n	1000374a <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
10003756:	e000      	b.n	1000375a <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
10003758:	e7bc      	b.n	100036d4 <CLK002_lFrequencyDownScaling+0x18>
}
1000375a:	46bd      	mov	sp, r7
1000375c:	b004      	add	sp, #16
1000375e:	bd80      	pop	{r7, pc}
10003760:	40010300 	.word	0x40010300
10003764:	ffff00ff 	.word	0xffff00ff
10003768:	3ff00000 	.word	0x3ff00000

1000376c <CCU8GLOBAL_Init>:
** Description     : Driver Module Initialization function                    **
**                   This service shall initialize the configured CCU slice   **
**                   and provide the clock signal for the upper layer apps.   **
*******************************************************************************/
void CCU8GLOBAL_Init(void)
{
1000376c:	b580      	push	{r7, lr}
1000376e:	b082      	sub	sp, #8
10003770:	af00      	add	r7, sp, #0
  uint32_t Inst;
  static uint32_t isInitialized = (uint32_t)0U;
    
  if(!isInitialized)
10003772:	4b0d      	ldr	r3, [pc, #52]	; (100037a8 <CCU8GLOBAL_Init+0x3c>)
10003774:	681b      	ldr	r3, [r3, #0]
10003776:	2b00      	cmp	r3, #0
10003778:	d112      	bne.n	100037a0 <CCU8GLOBAL_Init+0x34>
  {   
	for(Inst = 0U; Inst < CCU8GLOBAL_INSTANCES; Inst++)
1000377a:	2300      	movs	r3, #0
1000377c:	607b      	str	r3, [r7, #4]
1000377e:	e009      	b.n	10003794 <CCU8GLOBAL_Init+0x28>
    {
	    /* Call CCU8 local Init function with all handles configured*/
	    CCU8GLOBAL_lInit(CCU8GLOBAL_HandleArray[Inst]);
10003780:	4b0a      	ldr	r3, [pc, #40]	; (100037ac <CCU8GLOBAL_Init+0x40>)
10003782:	687a      	ldr	r2, [r7, #4]
10003784:	0092      	lsls	r2, r2, #2
10003786:	58d3      	ldr	r3, [r2, r3]
10003788:	1c18      	adds	r0, r3, #0
1000378a:	f000 f811 	bl	100037b0 <CCU8GLOBAL_lInit>
  uint32_t Inst;
  static uint32_t isInitialized = (uint32_t)0U;
    
  if(!isInitialized)
  {   
	for(Inst = 0U; Inst < CCU8GLOBAL_INSTANCES; Inst++)
1000378e:	687b      	ldr	r3, [r7, #4]
10003790:	3301      	adds	r3, #1
10003792:	607b      	str	r3, [r7, #4]
10003794:	687b      	ldr	r3, [r7, #4]
10003796:	2b00      	cmp	r3, #0
10003798:	d0f2      	beq.n	10003780 <CCU8GLOBAL_Init+0x14>
	    CCU8GLOBAL_lInit(CCU8GLOBAL_HandleArray[Inst]);
    }
     
    /* Update the initialization count variable for restricting multiple
     * initialization by the user*/ 
	isInitialized = (uint32_t)1U;  
1000379a:	4b03      	ldr	r3, [pc, #12]	; (100037a8 <CCU8GLOBAL_Init+0x3c>)
1000379c:	2201      	movs	r2, #1
1000379e:	601a      	str	r2, [r3, #0]
  }  
}
100037a0:	46bd      	mov	sp, r7
100037a2:	b002      	add	sp, #8
100037a4:	bd80      	pop	{r7, pc}
100037a6:	46c0      	nop			; (mov r8, r8)
100037a8:	2000098c 	.word	0x2000098c
100037ac:	200009b4 	.word	0x200009b4

100037b0 <CCU8GLOBAL_lInit>:
** Return value    : None                                                     **
**                                                                            **
** Description     : Local function which does the actual intialization       **
*******************************************************************************/
static void CCU8GLOBAL_lInit(const CCU8GLOBAL_HandleType* Handle)
{   
100037b0:	b590      	push	{r4, r7, lr}
100037b2:	b083      	sub	sp, #12
100037b4:	af00      	add	r7, sp, #0
100037b6:	6078      	str	r0, [r7, #4]
    #endif
    
    
    #if ( __TARGET_DEVICE__ == XMC13 )
    /* Wait until the clock gating is not set*/
    if(!( (uint32_t)SCU_CLK->CGATCLR0 & 
100037b8:	4b17      	ldr	r3, [pc, #92]	; (10003818 <CCU8GLOBAL_lInit+0x68>)
100037ba:	691a      	ldr	r2, [r3, #16]
    	   (uint32_t)Handle->ClockGating_Pos))
100037bc:	687b      	ldr	r3, [r7, #4]
100037be:	685b      	ldr	r3, [r3, #4]
    #endif
    
    
    #if ( __TARGET_DEVICE__ == XMC13 )
    /* Wait until the clock gating is not set*/
    if(!( (uint32_t)SCU_CLK->CGATCLR0 & 
100037c0:	4013      	ands	r3, r2
100037c2:	d11d      	bne.n	10003800 <CCU8GLOBAL_lInit+0x50>
    	   (uint32_t)Handle->ClockGating_Pos))
    { 
       /* Set mode field in Password register to remove bit protection*/
       SCU_GENERAL->PASSWD = (uint32_t)CCU8GLOBAL_PASSWORD1;
100037c4:	4b15      	ldr	r3, [pc, #84]	; (1000381c <CCU8GLOBAL_lInit+0x6c>)
100037c6:	22c0      	movs	r2, #192	; 0xc0
100037c8:	625a      	str	r2, [r3, #36]	; 0x24
       /* */
       WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, 
100037ca:	4b13      	ldr	r3, [pc, #76]	; (10003818 <CCU8GLOBAL_lInit+0x68>)
100037cc:	4a12      	ldr	r2, [pc, #72]	; (10003818 <CCU8GLOBAL_lInit+0x68>)
100037ce:	6812      	ldr	r2, [r2, #0]
100037d0:	4913      	ldr	r1, [pc, #76]	; (10003820 <CCU8GLOBAL_lInit+0x70>)
100037d2:	430a      	orrs	r2, r1
100037d4:	601a      	str	r2, [r3, #0]
			                   SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
       /* Enable clock gating for XMC13 based devices */
       SET_BIT(SCU_CLK->CGATCLR0, Handle->ClockGating_Pos);
100037d6:	4b10      	ldr	r3, [pc, #64]	; (10003818 <CCU8GLOBAL_lInit+0x68>)
100037d8:	4a0f      	ldr	r2, [pc, #60]	; (10003818 <CCU8GLOBAL_lInit+0x68>)
100037da:	6911      	ldr	r1, [r2, #16]
100037dc:	687a      	ldr	r2, [r7, #4]
100037de:	6852      	ldr	r2, [r2, #4]
100037e0:	2001      	movs	r0, #1
100037e2:	1c04      	adds	r4, r0, #0
100037e4:	4094      	lsls	r4, r2
100037e6:	1c22      	adds	r2, r4, #0
100037e8:	430a      	orrs	r2, r1
100037ea:	611a      	str	r2, [r3, #16]
       /* Wait until VDDC is not too low and the fractional divider
         input clock is running at the targeted frequency */
       while ((uint32_t)SCU_CLK->CLKCR & (uint32_t)SCU_CLK_CLKCR_VDDC2LOW_Msk)
100037ec:	46c0      	nop			; (mov r8, r8)
100037ee:	4b0a      	ldr	r3, [pc, #40]	; (10003818 <CCU8GLOBAL_lInit+0x68>)
100037f0:	681a      	ldr	r2, [r3, #0]
100037f2:	2380      	movs	r3, #128	; 0x80
100037f4:	05db      	lsls	r3, r3, #23
100037f6:	4013      	ands	r3, r2
100037f8:	d1f9      	bne.n	100037ee <CCU8GLOBAL_lInit+0x3e>
	   {}
       /* Set mode field in Password register to disable protected access*/
	   SCU_GENERAL->PASSWD = (uint32_t)CCU8GLOBAL_PASSWORD2;
100037fa:	4b08      	ldr	r3, [pc, #32]	; (1000381c <CCU8GLOBAL_lInit+0x6c>)
100037fc:	22c3      	movs	r2, #195	; 0xc3
100037fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
    /* */
    #endif
    
    /* Set the Pre-scalar run bit */
    SET_BIT(Handle->CC8yKernRegsPtr->GIDLC,CCU8_GIDLC_SPRB_Pos);
10003800:	687b      	ldr	r3, [r7, #4]
10003802:	681b      	ldr	r3, [r3, #0]
10003804:	687a      	ldr	r2, [r7, #4]
10003806:	6812      	ldr	r2, [r2, #0]
10003808:	68d2      	ldr	r2, [r2, #12]
1000380a:	2180      	movs	r1, #128	; 0x80
1000380c:	0049      	lsls	r1, r1, #1
1000380e:	430a      	orrs	r2, r1
10003810:	60da      	str	r2, [r3, #12]
}
10003812:	46bd      	mov	sp, r7
10003814:	b003      	add	sp, #12
10003816:	bd90      	pop	{r4, r7, pc}
10003818:	40010300 	.word	0x40010300
1000381c:	40010000 	.word	0x40010000
10003820:	3ff00000 	.word	0x3ff00000

10003824 <CCU4GLOBAL_Init>:
/**
 * @cond INTERNAL_DOCS
 */

void CCU4GLOBAL_Init(void)
{
10003824:	b580      	push	{r7, lr}
10003826:	b082      	sub	sp, #8
10003828:	af00      	add	r7, sp, #0
  static uint32_t CCU4InitCalled = (uint32_t)0U;
  uint32_t Count = 0U;
1000382a:	2300      	movs	r3, #0
1000382c:	607b      	str	r3, [r7, #4]
  
  if(CCU4InitCalled == (uint32_t)0U)
1000382e:	4b0d      	ldr	r3, [pc, #52]	; (10003864 <CCU4GLOBAL_Init+0x40>)
10003830:	681b      	ldr	r3, [r3, #0]
10003832:	2b00      	cmp	r3, #0
10003834:	d112      	bne.n	1000385c <CCU4GLOBAL_Init+0x38>
  {
    /*
     * Each instance of the App brings the module out of reset and enable 
     * the prescalar clock
     */
    for (Count = 0U; Count<(uint32_t)CCU4GLOBAL_NUM_INSTANCES; Count++)
10003836:	2300      	movs	r3, #0
10003838:	607b      	str	r3, [r7, #4]
1000383a:	e009      	b.n	10003850 <CCU4GLOBAL_Init+0x2c>
    {
  	  CCU4Global_lInit(CCU4Global_HandleArray[Count]);
1000383c:	4b0a      	ldr	r3, [pc, #40]	; (10003868 <CCU4GLOBAL_Init+0x44>)
1000383e:	687a      	ldr	r2, [r7, #4]
10003840:	0092      	lsls	r2, r2, #2
10003842:	58d3      	ldr	r3, [r2, r3]
10003844:	1c18      	adds	r0, r3, #0
10003846:	f000 f811 	bl	1000386c <CCU4Global_lInit>
  {
    /*
     * Each instance of the App brings the module out of reset and enable 
     * the prescalar clock
     */
    for (Count = 0U; Count<(uint32_t)CCU4GLOBAL_NUM_INSTANCES; Count++)
1000384a:	687b      	ldr	r3, [r7, #4]
1000384c:	3301      	adds	r3, #1
1000384e:	607b      	str	r3, [r7, #4]
10003850:	687b      	ldr	r3, [r7, #4]
10003852:	2b00      	cmp	r3, #0
10003854:	d0f2      	beq.n	1000383c <CCU4GLOBAL_Init+0x18>
    {
  	  CCU4Global_lInit(CCU4Global_HandleArray[Count]);
    }

    CCU4InitCalled = (uint32_t)1;
10003856:	4b03      	ldr	r3, [pc, #12]	; (10003864 <CCU4GLOBAL_Init+0x40>)
10003858:	2201      	movs	r2, #1
1000385a:	601a      	str	r2, [r3, #0]
  }
}
1000385c:	46bd      	mov	sp, r7
1000385e:	b002      	add	sp, #8
10003860:	bd80      	pop	{r7, pc}
10003862:	46c0      	nop			; (mov r8, r8)
10003864:	20000990 	.word	0x20000990
10003868:	200009b8 	.word	0x200009b8

1000386c <CCU4Global_lInit>:

static void CCU4Global_lInit(const CCU4Global_HandleType * Handle)
{
1000386c:	b590      	push	{r4, r7, lr}
1000386e:	b083      	sub	sp, #12
10003870:	af00      	add	r7, sp, #0
10003872:	6078      	str	r0, [r7, #4]
    if( Handle->KernelNumber <= 2 )
10003874:	687b      	ldr	r3, [r7, #4]
10003876:	685b      	ldr	r3, [r3, #4]
10003878:	2b02      	cmp	r3, #2
1000387a:	d823      	bhi.n	100038c4 <CCU4Global_lInit+0x58>
	{
		/* Disables the gating for CCU4 kernel */      
		/*This is applicable for XMC4400,XMC4200 and XMC1xxx Devices*/
		#if (UC_FAMILY == XMC1 )
			if (!((uint32_t)SCU_CLK->CGATCLR0 & Handle->ClockGating))
1000387c:	4b17      	ldr	r3, [pc, #92]	; (100038dc <CCU4Global_lInit+0x70>)
1000387e:	691a      	ldr	r2, [r3, #16]
10003880:	687b      	ldr	r3, [r7, #4]
10003882:	689b      	ldr	r3, [r3, #8]
10003884:	4013      	ands	r3, r2
10003886:	d11d      	bne.n	100038c4 <CCU4Global_lInit+0x58>
			{ 
				SCU_GENERAL->PASSWD = 0x000000C0UL;
10003888:	4b15      	ldr	r3, [pc, #84]	; (100038e0 <CCU4Global_lInit+0x74>)
1000388a:	22c0      	movs	r2, #192	; 0xc0
1000388c:	625a      	str	r2, [r3, #36]	; 0x24
				WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, 
1000388e:	4b13      	ldr	r3, [pc, #76]	; (100038dc <CCU4Global_lInit+0x70>)
10003890:	4a12      	ldr	r2, [pc, #72]	; (100038dc <CCU4Global_lInit+0x70>)
10003892:	6812      	ldr	r2, [r2, #0]
10003894:	4913      	ldr	r1, [pc, #76]	; (100038e4 <CCU4Global_lInit+0x78>)
10003896:	430a      	orrs	r2, r1
10003898:	601a      	str	r2, [r3, #0]
					   SCU_CLK_CLKCR_CNTADJ_Pos,CCU4GLOBAL_DELAYCNT);
				
				SET_BIT(SCU_CLK->CGATCLR0, Handle->ClockGating);
1000389a:	4b10      	ldr	r3, [pc, #64]	; (100038dc <CCU4Global_lInit+0x70>)
1000389c:	4a0f      	ldr	r2, [pc, #60]	; (100038dc <CCU4Global_lInit+0x70>)
1000389e:	6911      	ldr	r1, [r2, #16]
100038a0:	687a      	ldr	r2, [r7, #4]
100038a2:	6892      	ldr	r2, [r2, #8]
100038a4:	2001      	movs	r0, #1
100038a6:	1c04      	adds	r4, r0, #0
100038a8:	4094      	lsls	r4, r2
100038aa:	1c22      	adds	r2, r4, #0
100038ac:	430a      	orrs	r2, r1
100038ae:	611a      	str	r2, [r3, #16]
				while ((uint32_t)SCU_CLK->CLKCR & 
100038b0:	46c0      	nop			; (mov r8, r8)
100038b2:	4b0a      	ldr	r3, [pc, #40]	; (100038dc <CCU4Global_lInit+0x70>)
100038b4:	681a      	ldr	r2, [r3, #0]
100038b6:	2380      	movs	r3, #128	; 0x80
100038b8:	05db      	lsls	r3, r3, #23
100038ba:	4013      	ands	r3, r2
100038bc:	d1f9      	bne.n	100038b2 <CCU4Global_lInit+0x46>
					   (uint32_t)SCU_CLK_CLKCR_VDDC2LOW_Msk)
				{
					;
				}
				SCU_GENERAL->PASSWD = 0x000000C3UL;
100038be:	4b08      	ldr	r3, [pc, #32]	; (100038e0 <CCU4Global_lInit+0x74>)
100038c0:	22c3      	movs	r2, #195	; 0xc3
100038c2:	625a      	str	r2, [r3, #36]	; 0x24
		RESET001_DeassertReset(Handle->PeripheralReset);
	#endif    

		
    /* Sets Run bit of the Prescalar */
    SET_BIT(Handle->CC4yKernRegsPtr->GIDLC,CCU4_GIDLC_SPRB_Pos);
100038c4:	687b      	ldr	r3, [r7, #4]
100038c6:	681b      	ldr	r3, [r3, #0]
100038c8:	687a      	ldr	r2, [r7, #4]
100038ca:	6812      	ldr	r2, [r2, #0]
100038cc:	68d2      	ldr	r2, [r2, #12]
100038ce:	2180      	movs	r1, #128	; 0x80
100038d0:	0049      	lsls	r1, r1, #1
100038d2:	430a      	orrs	r2, r1
100038d4:	60da      	str	r2, [r3, #12]

}
100038d6:	46bd      	mov	sp, r7
100038d8:	b003      	add	sp, #12
100038da:	bd90      	pop	{r4, r7, pc}
100038dc:	40010300 	.word	0x40010300
100038e0:	40010000 	.word	0x40010000
100038e4:	3ff00000 	.word	0x3ff00000

100038e8 <ADCGLOB001_Init>:

/**
 *This function initialize all VADC Global registers based on GUI configuration.
 */
void ADCGLOB001_Init(void)
{
100038e8:	b580      	push	{r7, lr}
100038ea:	b082      	sub	sp, #8
100038ec:	af00      	add	r7, sp, #0
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
100038ee:	2301      	movs	r3, #1
100038f0:	607b      	str	r3, [r7, #4]

    if(ADCGLOB001_Handle0.kDynamicDataPtr->StateType == ADCGLOB001_UNINITIALIZED )
100038f2:	4b50      	ldr	r3, [pc, #320]	; (10003a34 <ADCGLOB001_Init+0x14c>)
100038f4:	685b      	ldr	r3, [r3, #4]
100038f6:	781b      	ldrb	r3, [r3, #0]
100038f8:	2b00      	cmp	r3, #0
100038fa:	d000      	beq.n	100038fe <ADCGLOB001_Init+0x16>
100038fc:	e096      	b.n	10003a2c <ADCGLOB001_Init+0x144>
    {    
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100038fe:	4b4e      	ldr	r3, [pc, #312]	; (10003a38 <ADCGLOB001_Init+0x150>)
10003900:	4a4d      	ldr	r2, [pc, #308]	; (10003a38 <ADCGLOB001_Init+0x150>)
10003902:	6812      	ldr	r2, [r2, #0]
10003904:	494d      	ldr	r1, [pc, #308]	; (10003a3c <ADCGLOB001_Init+0x154>)
10003906:	430a      	orrs	r2, r1
10003908:	601a      	str	r2, [r3, #0]
        SCU_GENERAL->PASSWD = 0x000000C0U;
1000390a:	4b4d      	ldr	r3, [pc, #308]	; (10003a40 <ADCGLOB001_Init+0x158>)
1000390c:	22c0      	movs	r2, #192	; 0xc0
1000390e:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disables the gating for VADC kernel This line of code is not applicable for XMC4500. */
        SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_VADC_Pos);
10003910:	4b49      	ldr	r3, [pc, #292]	; (10003a38 <ADCGLOB001_Init+0x150>)
10003912:	4a49      	ldr	r2, [pc, #292]	; (10003a38 <ADCGLOB001_Init+0x150>)
10003914:	6912      	ldr	r2, [r2, #16]
10003916:	2101      	movs	r1, #1
10003918:	430a      	orrs	r2, r1
1000391a:	611a      	str	r2, [r3, #16]
        SCU_GENERAL->PASSWD = 0x000000C3UL;
1000391c:	4b48      	ldr	r3, [pc, #288]	; (10003a40 <ADCGLOB001_Init+0x158>)
1000391e:	22c3      	movs	r2, #195	; 0xc3
10003920:	625a      	str	r2, [r3, #36]	; 0x24
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003922:	46c0      	nop			; (mov r8, r8)
10003924:	4b44      	ldr	r3, [pc, #272]	; (10003a38 <ADCGLOB001_Init+0x150>)
10003926:	681a      	ldr	r2, [r3, #0]
10003928:	2380      	movs	r3, #128	; 0x80
1000392a:	05db      	lsls	r3, r3, #23
1000392c:	4013      	ands	r3, r2
1000392e:	d1f9      	bne.n	10003924 <ADCGLOB001_Init+0x3c>
        {};     
        /* Enable Out of range Comparator for ADC channels pins P2.2to P2.9,
         * this code is applicable only for XMC1xxx devices  */
            COMPARATOR->ORCCTRL = 0XFFU;
10003930:	4b44      	ldr	r3, [pc, #272]	; (10003a44 <ADCGLOB001_Init+0x15c>)
10003932:	22ff      	movs	r2, #255	; 0xff
10003934:	601a      	str	r2, [r3, #0]
        /* Bring the module out of disabled state.*/
        CLR_BIT( ADCGLOB001_Handle0.kGlobalPtr->CLC, VADC_CLC_DISR_Pos);
10003936:	4b3f      	ldr	r3, [pc, #252]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003938:	681b      	ldr	r3, [r3, #0]
1000393a:	4a3e      	ldr	r2, [pc, #248]	; (10003a34 <ADCGLOB001_Init+0x14c>)
1000393c:	6812      	ldr	r2, [r2, #0]
1000393e:	6812      	ldr	r2, [r2, #0]
10003940:	2101      	movs	r1, #1
10003942:	438a      	bics	r2, r1
10003944:	601a      	str	r2, [r3, #0]
         * Make divider bit fields writable.
         * Configure Divider Factor for the Analog Internal Clock.
         * Configure Divider Factor for the Arbiter Clock.
         * Configure Double Clock for the MSB Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG = \
10003946:	4b3b      	ldr	r3, [pc, #236]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003948:	681a      	ldr	r2, [r3, #0]
                (uint32_t)(((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)| \
                        (((uint32_t)ADCGLOB001_Handle0.kArbiterClkDivider <<VADC_GLOBCFG_DIVD_Pos) & VADC_GLOBCFG_DIVD_Msk)| \
1000394a:	4b3a      	ldr	r3, [pc, #232]	; (10003a34 <ADCGLOB001_Init+0x14c>)
1000394c:	7b5b      	ldrb	r3, [r3, #13]
1000394e:	0219      	lsls	r1, r3, #8
10003950:	23c0      	movs	r3, #192	; 0xc0
10003952:	009b      	lsls	r3, r3, #2
10003954:	4019      	ands	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.keDoubleClkMSBConver <<VADC_GLOBCFG_DCMSB_Pos)&VADC_GLOBCFG_DCMSB_Msk)| \
10003956:	4b37      	ldr	r3, [pc, #220]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003958:	7ddb      	ldrb	r3, [r3, #23]
1000395a:	01d8      	lsls	r0, r3, #7
1000395c:	23ff      	movs	r3, #255	; 0xff
1000395e:	4003      	ands	r3, r0
         * Configure Divider Factor for the Arbiter Clock.
         * Configure Double Clock for the MSB Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG = \
                (uint32_t)(((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)| \
                        (((uint32_t)ADCGLOB001_Handle0.kArbiterClkDivider <<VADC_GLOBCFG_DIVD_Pos) & VADC_GLOBCFG_DIVD_Msk)| \
10003960:	4319      	orrs	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.keDoubleClkMSBConver <<VADC_GLOBCFG_DCMSB_Pos)&VADC_GLOBCFG_DCMSB_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kAnalogClkDivider <<VADC_GLOBCFG_DIVA_Pos)&VADC_GLOBCFG_DIVA_Msk));
10003962:	4b34      	ldr	r3, [pc, #208]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003964:	7b1b      	ldrb	r3, [r3, #12]
10003966:	1c18      	adds	r0, r3, #0
10003968:	231f      	movs	r3, #31
1000396a:	4003      	ands	r3, r0
         * Configure Divider Factor for the Analog Internal Clock.
         * Configure Divider Factor for the Arbiter Clock.
         * Configure Double Clock for the MSB Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG = \
                (uint32_t)(((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)| \
1000396c:	430b      	orrs	r3, r1
1000396e:	2180      	movs	r1, #128	; 0x80
10003970:	0209      	lsls	r1, r1, #8
10003972:	4319      	orrs	r1, r3
         * Make divider bit fields writable.
         * Configure Divider Factor for the Analog Internal Clock.
         * Configure Divider Factor for the Arbiter Clock.
         * Configure Double Clock for the MSB Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG = \
10003974:	2380      	movs	r3, #128	; 0x80
10003976:	50d1      	str	r1, [r2, r3]
                (uint32_t)(((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)| \
                        (((uint32_t)ADCGLOB001_Handle0.kArbiterClkDivider <<VADC_GLOBCFG_DIVD_Pos) & VADC_GLOBCFG_DIVD_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.keDoubleClkMSBConver <<VADC_GLOBCFG_DCMSB_Pos)&VADC_GLOBCFG_DCMSB_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kAnalogClkDivider <<VADC_GLOBCFG_DIVA_Pos)&VADC_GLOBCFG_DIVA_Msk));
        /* Make the divider bit fields write protected */
        CLR_BIT( ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG, VADC_GLOBCFG_DIVWC_Pos);
10003978:	4b2e      	ldr	r3, [pc, #184]	; (10003a34 <ADCGLOB001_Init+0x14c>)
1000397a:	681a      	ldr	r2, [r3, #0]
1000397c:	4b2d      	ldr	r3, [pc, #180]	; (10003a34 <ADCGLOB001_Init+0x14c>)
1000397e:	6819      	ldr	r1, [r3, #0]
10003980:	2380      	movs	r3, #128	; 0x80
10003982:	58c9      	ldr	r1, [r1, r3]
10003984:	4b30      	ldr	r3, [pc, #192]	; (10003a48 <ADCGLOB001_Init+0x160>)
10003986:	4019      	ands	r1, r3
10003988:	2380      	movs	r3, #128	; 0x80
1000398a:	50d1      	str	r1, [r2, r3]
         * Configure Class0 Sample Time Control for Standard Conversion.
         * Configure Class0 Sample Time Control for EMUX Conversion.
         * Configure Class0 Conversion Mode for Standard Conversion.
         * Configure Class0 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \
1000398c:	4b29      	ldr	r3, [pc, #164]	; (10003a34 <ADCGLOB001_Init+0x14c>)
1000398e:	681a      	ldr	r2, [r3, #0]
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \
10003990:	4b28      	ldr	r3, [pc, #160]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003992:	7d1b      	ldrb	r3, [r3, #20]
10003994:	0619      	lsls	r1, r3, #24
10003996:	23e0      	movs	r3, #224	; 0xe0
10003998:	04db      	lsls	r3, r3, #19
1000399a:	4019      	ands	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass0 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \
1000399c:	4b25      	ldr	r3, [pc, #148]	; (10003a34 <ADCGLOB001_Init+0x14c>)
1000399e:	7c1b      	ldrb	r3, [r3, #16]
100039a0:	0418      	lsls	r0, r3, #16
100039a2:	23f8      	movs	r3, #248	; 0xf8
100039a4:	035b      	lsls	r3, r3, #13
100039a6:	4003      	ands	r3, r0
         * Configure Class0 Sample Time Control for EMUX Conversion.
         * Configure Class0 Conversion Mode for Standard Conversion.
         * Configure Class0 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \
100039a8:	4319      	orrs	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass0 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass0 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \
100039aa:	4b22      	ldr	r3, [pc, #136]	; (10003a34 <ADCGLOB001_Init+0x14c>)
100039ac:	7c9b      	ldrb	r3, [r3, #18]
100039ae:	0218      	lsls	r0, r3, #8
100039b0:	23e0      	movs	r3, #224	; 0xe0
100039b2:	00db      	lsls	r3, r3, #3
100039b4:	4003      	ands	r3, r0
         * Configure Class0 Conversion Mode for Standard Conversion.
         * Configure Class0 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass0 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \
100039b6:	4319      	orrs	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass0 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass0 <<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));
100039b8:	4b1e      	ldr	r3, [pc, #120]	; (10003a34 <ADCGLOB001_Init+0x14c>)
100039ba:	7b9b      	ldrb	r3, [r3, #14]
100039bc:	1c18      	adds	r0, r3, #0
100039be:	231f      	movs	r3, #31
100039c0:	4003      	ands	r3, r0
         * Configure Class0 Sample Time Control for EMUX Conversion.
         * Configure Class0 Conversion Mode for Standard Conversion.
         * Configure Class0 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \
100039c2:	4319      	orrs	r1, r3
         * Configure Class0 Sample Time Control for Standard Conversion.
         * Configure Class0 Sample Time Control for EMUX Conversion.
         * Configure Class0 Conversion Mode for Standard Conversion.
         * Configure Class0 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \
100039c4:	23a0      	movs	r3, #160	; 0xa0
100039c6:	50d1      	str	r1, [r2, r3]
         * Configure Class1 Sample Time Control for Standard Conversion.
         * Configure Class1 Sample Time Control for EMUX Conversion.
         * Configure Class1 Conversion Mode for Standard Conversion.
         * Configure Class1 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \
100039c8:	4b1a      	ldr	r3, [pc, #104]	; (10003a34 <ADCGLOB001_Init+0x14c>)
100039ca:	681a      	ldr	r2, [r3, #0]
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \
100039cc:	4b19      	ldr	r3, [pc, #100]	; (10003a34 <ADCGLOB001_Init+0x14c>)
100039ce:	7d5b      	ldrb	r3, [r3, #21]
100039d0:	0619      	lsls	r1, r3, #24
100039d2:	23e0      	movs	r3, #224	; 0xe0
100039d4:	04db      	lsls	r3, r3, #19
100039d6:	4019      	ands	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \
100039d8:	4b16      	ldr	r3, [pc, #88]	; (10003a34 <ADCGLOB001_Init+0x14c>)
100039da:	7c5b      	ldrb	r3, [r3, #17]
100039dc:	0418      	lsls	r0, r3, #16
100039de:	23f8      	movs	r3, #248	; 0xf8
100039e0:	035b      	lsls	r3, r3, #13
100039e2:	4003      	ands	r3, r0
         * Configure Class1 Sample Time Control for EMUX Conversion.
         * Configure Class1 Conversion Mode for Standard Conversion.
         * Configure Class1 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \
100039e4:	4319      	orrs	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \
100039e6:	4b13      	ldr	r3, [pc, #76]	; (10003a34 <ADCGLOB001_Init+0x14c>)
100039e8:	7cdb      	ldrb	r3, [r3, #19]
100039ea:	0218      	lsls	r0, r3, #8
100039ec:	23e0      	movs	r3, #224	; 0xe0
100039ee:	00db      	lsls	r3, r3, #3
100039f0:	4003      	ands	r3, r0
         * Configure Class1 Conversion Mode for Standard Conversion.
         * Configure Class1 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \
100039f2:	4319      	orrs	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass1<<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));
100039f4:	4b0f      	ldr	r3, [pc, #60]	; (10003a34 <ADCGLOB001_Init+0x14c>)
100039f6:	7bdb      	ldrb	r3, [r3, #15]
100039f8:	1c18      	adds	r0, r3, #0
100039fa:	231f      	movs	r3, #31
100039fc:	4003      	ands	r3, r0
         * Configure Class1 Sample Time Control for EMUX Conversion.
         * Configure Class1 Conversion Mode for Standard Conversion.
         * Configure Class1 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \
100039fe:	4319      	orrs	r1, r3
         * Configure Class1 Sample Time Control for Standard Conversion.
         * Configure Class1 Sample Time Control for EMUX Conversion.
         * Configure Class1 Conversion Mode for Standard Conversion.
         * Configure Class1 Conversion Mode for EMUX Conversion.
         */
        ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \
10003a00:	23a4      	movs	r3, #164	; 0xa4
10003a02:	50d1      	str	r1, [r2, r3]
                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass1<<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));

        /* Configure the lower and upper boundary based on the GUI configuration.*/
        ADCGLOB001_Handle0.kGlobalPtr->GLOBBOUND = \
10003a04:	4b0b      	ldr	r3, [pc, #44]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003a06:	681a      	ldr	r2, [r3, #0]
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.KGlobBoundary1 <<VADC_GLOBBOUND_BOUNDARY1_Pos)&VADC_GLOBBOUND_BOUNDARY1_Msk)| \
10003a08:	4b0a      	ldr	r3, [pc, #40]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003a0a:	895b      	ldrh	r3, [r3, #10]
10003a0c:	0419      	lsls	r1, r3, #16
10003a0e:	4b0f      	ldr	r3, [pc, #60]	; (10003a4c <ADCGLOB001_Init+0x164>)
10003a10:	4019      	ands	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.KGlobBoundary0 <<VADC_GLOBBOUND_BOUNDARY0_Pos)&VADC_GLOBBOUND_BOUNDARY0_Msk));
10003a12:	4b08      	ldr	r3, [pc, #32]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003a14:	891b      	ldrh	r3, [r3, #8]
10003a16:	051b      	lsls	r3, r3, #20
10003a18:	0d1b      	lsrs	r3, r3, #20
                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass1<<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));

        /* Configure the lower and upper boundary based on the GUI configuration.*/
        ADCGLOB001_Handle0.kGlobalPtr->GLOBBOUND = \
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.KGlobBoundary1 <<VADC_GLOBBOUND_BOUNDARY1_Pos)&VADC_GLOBBOUND_BOUNDARY1_Msk)| \
10003a1a:	4319      	orrs	r1, r3
                        (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass1<<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));

        /* Configure the lower and upper boundary based on the GUI configuration.*/
        ADCGLOB001_Handle0.kGlobalPtr->GLOBBOUND = \
10003a1c:	23b8      	movs	r3, #184	; 0xb8
10003a1e:	50d1      	str	r1, [r2, r3]
                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.KGlobBoundary1 <<VADC_GLOBBOUND_BOUNDARY1_Pos)&VADC_GLOBBOUND_BOUNDARY1_Msk)| \
                        (((uint32_t)ADCGLOB001_Handle0.KGlobBoundary0 <<VADC_GLOBBOUND_BOUNDARY0_Pos)&VADC_GLOBBOUND_BOUNDARY0_Msk));
        ADCGLOB001_Handle0.kDynamicDataPtr->StateType = ADCGLOB001_INITIALIZED;
10003a20:	4b04      	ldr	r3, [pc, #16]	; (10003a34 <ADCGLOB001_Init+0x14c>)
10003a22:	685b      	ldr	r3, [r3, #4]
10003a24:	2201      	movs	r2, #1
10003a26:	701a      	strb	r2, [r3, #0]
        Status &= (uint32_t)DAVEApp_SUCCESS;
10003a28:	2300      	movs	r3, #0
10003a2a:	607b      	str	r3, [r7, #4]
    } else {
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

}
10003a2c:	46bd      	mov	sp, r7
10003a2e:	b002      	add	sp, #8
10003a30:	bd80      	pop	{r7, pc}
10003a32:	46c0      	nop			; (mov r8, r8)
10003a34:	10006410 	.word	0x10006410
10003a38:	40010300 	.word	0x40010300
10003a3c:	3ff00000 	.word	0x3ff00000
10003a40:	40010000 	.word	0x40010000
10003a44:	40010500 	.word	0x40010500
10003a48:	ffff7fff 	.word	0xffff7fff
10003a4c:	0fff0000 	.word	0x0fff0000

10003a50 <ADCGLOB001_DeInit>:

/**
 * This function will de-initialize VADC Global registers.
 */
status_t ADCGLOB001_DeInit(const ADCGLOB001_HandleType * HandlePtr)
{
10003a50:	b580      	push	{r7, lr}
10003a52:	b084      	sub	sp, #16
10003a54:	af00      	add	r7, sp, #0
10003a56:	6078      	str	r0, [r7, #4]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003a58:	2301      	movs	r3, #1
10003a5a:	60fb      	str	r3, [r7, #12]

    if(HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED )
10003a5c:	687b      	ldr	r3, [r7, #4]
10003a5e:	685b      	ldr	r3, [r3, #4]
10003a60:	781b      	ldrb	r3, [r3, #0]
10003a62:	2b01      	cmp	r3, #1
10003a64:	d131      	bne.n	10003aca <ADCGLOB001_DeInit+0x7a>
    {
        /* Enable the VADC clock gating
         * This line of code is not applicable for XMC4500.
         */

        SET_BIT(SCU_CLK->CGATSET0, SCU_CLK_CGATSET0_VADC_Pos);
10003a66:	4b1b      	ldr	r3, [pc, #108]	; (10003ad4 <ADCGLOB001_DeInit+0x84>)
10003a68:	4a1a      	ldr	r2, [pc, #104]	; (10003ad4 <ADCGLOB001_DeInit+0x84>)
10003a6a:	68d2      	ldr	r2, [r2, #12]
10003a6c:	2101      	movs	r1, #1
10003a6e:	430a      	orrs	r2, r1
10003a70:	60da      	str	r2, [r3, #12]
        /* Bring the module out of disabled state */
        CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);
10003a72:	687b      	ldr	r3, [r7, #4]
10003a74:	681b      	ldr	r3, [r3, #0]
10003a76:	687a      	ldr	r2, [r7, #4]
10003a78:	6812      	ldr	r2, [r2, #0]
10003a7a:	6812      	ldr	r2, [r2, #0]
10003a7c:	2101      	movs	r1, #1
10003a7e:	438a      	bics	r2, r1
10003a80:	601a      	str	r2, [r3, #0]

        /* Make divider bit fields writable and deconfigure Analog Internal Clock,
     Arbiter Clock & MSB Conversion bits.*/
        HandlePtr->kGlobalPtr->GLOBCFG = \
10003a82:	687b      	ldr	r3, [r7, #4]
10003a84:	681a      	ldr	r2, [r3, #0]
10003a86:	2380      	movs	r3, #128	; 0x80
10003a88:	4913      	ldr	r1, [pc, #76]	; (10003ad8 <ADCGLOB001_DeInit+0x88>)
10003a8a:	50d1      	str	r1, [r2, r3]
                (((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)|((~(VADC_GLOBCFG_DIVD_Msk))& \
                        (~(VADC_GLOBCFG_DCMSB_Msk)) & (~(VADC_GLOBCFG_DIVA_Msk))));

        /* Again make the divider bit fields write protected */
        CLR_BIT( HandlePtr->kGlobalPtr->GLOBCFG, VADC_GLOBCFG_DIVWC_Pos);
10003a8c:	687b      	ldr	r3, [r7, #4]
10003a8e:	681a      	ldr	r2, [r3, #0]
10003a90:	687b      	ldr	r3, [r7, #4]
10003a92:	6819      	ldr	r1, [r3, #0]
10003a94:	2380      	movs	r3, #128	; 0x80
10003a96:	58c9      	ldr	r1, [r1, r3]
10003a98:	4b10      	ldr	r3, [pc, #64]	; (10003adc <ADCGLOB001_DeInit+0x8c>)
10003a9a:	4019      	ands	r1, r3
10003a9c:	2380      	movs	r3, #128	; 0x80
10003a9e:	50d1      	str	r1, [r2, r3]
         *  mode.
         * Configure Class0 Conversion Mode for Standard Conversion into default mode.
         * Configure Class0 Sample Time Control for EMUX Conversion into default mode.
         * Configure Class0  Conversion Mode for EMUX Conversion into default mode.
         */
        HandlePtr->kGlobalPtr->GLOBICLASS[0] = \
10003aa0:	687b      	ldr	r3, [r7, #4]
10003aa2:	681a      	ldr	r2, [r3, #0]
10003aa4:	23a0      	movs	r3, #160	; 0xa0
10003aa6:	490e      	ldr	r1, [pc, #56]	; (10003ae0 <ADCGLOB001_DeInit+0x90>)
10003aa8:	50d1      	str	r1, [r2, r3]
         *  mode.
         * Configure Class1 Conversion Mode for Standard Conversion into default mode.
         * Configure Class1 Sample Time Control for EMUX Conversion into default mode.
         * Configure Class1  Conversion Mode for EMUX Conversion into default mode.
         */
        HandlePtr->kGlobalPtr->GLOBICLASS[1] = \
10003aaa:	687b      	ldr	r3, [r7, #4]
10003aac:	681a      	ldr	r2, [r3, #0]
10003aae:	23a4      	movs	r3, #164	; 0xa4
10003ab0:	490b      	ldr	r1, [pc, #44]	; (10003ae0 <ADCGLOB001_DeInit+0x90>)
10003ab2:	50d1      	str	r1, [r2, r3]
                ((~(VADC_GLOBICLASS_CME_Msk))&(~(VADC_GLOBICLASS_STCE_Msk))& \
                        (~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));

        /* Configure global lower and upper boundary value into default value.*/
        HandlePtr->kGlobalPtr->GLOBBOUND = \
10003ab4:	687b      	ldr	r3, [r7, #4]
10003ab6:	681a      	ldr	r2, [r3, #0]
10003ab8:	23b8      	movs	r3, #184	; 0xb8
10003aba:	490a      	ldr	r1, [pc, #40]	; (10003ae4 <ADCGLOB001_DeInit+0x94>)
10003abc:	50d1      	str	r1, [r2, r3]
                ((~(VADC_GLOBBOUND_BOUNDARY1_Msk))&(~(VADC_GLOBBOUND_BOUNDARY0_Msk)));

        HandlePtr->kDynamicDataPtr->StateType = ADCGLOB001_UNINITIALIZED;
10003abe:	687b      	ldr	r3, [r7, #4]
10003ac0:	685b      	ldr	r3, [r3, #4]
10003ac2:	2200      	movs	r2, #0
10003ac4:	701a      	strb	r2, [r3, #0]
        Status = (uint32_t)DAVEApp_SUCCESS;
10003ac6:	2300      	movs	r3, #0
10003ac8:	60fb      	str	r3, [r7, #12]
    } else {
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003aca:	68fb      	ldr	r3, [r7, #12]
}
10003acc:	1c18      	adds	r0, r3, #0
10003ace:	46bd      	mov	sp, r7
10003ad0:	b004      	add	sp, #16
10003ad2:	bd80      	pop	{r7, pc}
10003ad4:	40010300 	.word	0x40010300
10003ad8:	fffffc60 	.word	0xfffffc60
10003adc:	ffff7fff 	.word	0xffff7fff
10003ae0:	f8e0f8e0 	.word	0xf8e0f8e0
10003ae4:	f000f000 	.word	0xf000f000

10003ae8 <ADCGLOB001_CLKRequestDisable>:

/**
 * This function disable the control of the module.
 */
status_t ADCGLOB001_CLKRequestDisable(const ADCGLOB001_HandleType * HandlePtr)
{
10003ae8:	b580      	push	{r7, lr}
10003aea:	b084      	sub	sp, #16
10003aec:	af00      	add	r7, sp, #0
10003aee:	6078      	str	r0, [r7, #4]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003af0:	2301      	movs	r3, #1
10003af2:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003af4:	687b      	ldr	r3, [r7, #4]
10003af6:	685b      	ldr	r3, [r3, #4]
10003af8:	781b      	ldrb	r3, [r3, #0]
10003afa:	2b01      	cmp	r3, #1
10003afc:	d109      	bne.n	10003b12 <ADCGLOB001_CLKRequestDisable+0x2a>
        /* Bring the module in disabled state
         * Module Disable Request Bit
         * 0 : enable the module clock
         * 1 : stop the module clock */

        SET_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);
10003afe:	687b      	ldr	r3, [r7, #4]
10003b00:	681b      	ldr	r3, [r3, #0]
10003b02:	687a      	ldr	r2, [r7, #4]
10003b04:	6812      	ldr	r2, [r2, #0]
10003b06:	6812      	ldr	r2, [r2, #0]
10003b08:	2101      	movs	r1, #1
10003b0a:	430a      	orrs	r2, r1
10003b0c:	601a      	str	r2, [r3, #0]

        Status = (uint32_t)DAVEApp_SUCCESS;
10003b0e:	2300      	movs	r3, #0
10003b10:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003b12:	68fb      	ldr	r3, [r7, #12]
}
10003b14:	1c18      	adds	r0, r3, #0
10003b16:	46bd      	mov	sp, r7
10003b18:	b004      	add	sp, #16
10003b1a:	bd80      	pop	{r7, pc}

10003b1c <ADCGLOB001_CLKRequestEnable>:
/**
 * This function enable the control of the module.
 */
status_t ADCGLOB001_CLKRequestEnable(const ADCGLOB001_HandleType * HandlePtr)
{
10003b1c:	b580      	push	{r7, lr}
10003b1e:	b084      	sub	sp, #16
10003b20:	af00      	add	r7, sp, #0
10003b22:	6078      	str	r0, [r7, #4]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003b24:	2301      	movs	r3, #1
10003b26:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003b28:	687b      	ldr	r3, [r7, #4]
10003b2a:	685b      	ldr	r3, [r3, #4]
10003b2c:	781b      	ldrb	r3, [r3, #0]
10003b2e:	2b01      	cmp	r3, #1
10003b30:	d109      	bne.n	10003b46 <ADCGLOB001_CLKRequestEnable+0x2a>
    {
        /* Bring the module out of disabled state */

        CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);
10003b32:	687b      	ldr	r3, [r7, #4]
10003b34:	681b      	ldr	r3, [r3, #0]
10003b36:	687a      	ldr	r2, [r7, #4]
10003b38:	6812      	ldr	r2, [r2, #0]
10003b3a:	6812      	ldr	r2, [r2, #0]
10003b3c:	2101      	movs	r1, #1
10003b3e:	438a      	bics	r2, r1
10003b40:	601a      	str	r2, [r3, #0]

        Status = (uint32_t)DAVEApp_SUCCESS;
10003b42:	2300      	movs	r3, #0
10003b44:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003b46:	68fb      	ldr	r3, [r7, #12]
}
10003b48:	1c18      	adds	r0, r3, #0
10003b4a:	46bd      	mov	sp, r7
10003b4c:	b004      	add	sp, #16
10003b4e:	bd80      	pop	{r7, pc}

10003b50 <ADCGLOB001_SetStartUpCalibration>:
 */

status_t ADCGLOB001_SetStartUpCalibration(
        const ADCGLOB001_HandleType *HandlePtr
)
{
10003b50:	b580      	push	{r7, lr}
10003b52:	b084      	sub	sp, #16
10003b54:	af00      	add	r7, sp, #0
10003b56:	6078      	str	r0, [r7, #4]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003b58:	2301      	movs	r3, #1
10003b5a:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003b5c:	687b      	ldr	r3, [r7, #4]
10003b5e:	685b      	ldr	r3, [r3, #4]
10003b60:	781b      	ldrb	r3, [r3, #0]
10003b62:	2b01      	cmp	r3, #1
10003b64:	d10c      	bne.n	10003b80 <ADCGLOB001_SetStartUpCalibration+0x30>
    {
        /* Initiate Start-Up Calibration */

        SET_BIT( HandlePtr->kGlobalPtr->GLOBCFG, VADC_GLOBCFG_SUCAL_Pos);
10003b66:	687b      	ldr	r3, [r7, #4]
10003b68:	681a      	ldr	r2, [r3, #0]
10003b6a:	687b      	ldr	r3, [r7, #4]
10003b6c:	6819      	ldr	r1, [r3, #0]
10003b6e:	2380      	movs	r3, #128	; 0x80
10003b70:	58cb      	ldr	r3, [r1, r3]
10003b72:	2180      	movs	r1, #128	; 0x80
10003b74:	0609      	lsls	r1, r1, #24
10003b76:	4319      	orrs	r1, r3
10003b78:	2380      	movs	r3, #128	; 0x80
10003b7a:	50d1      	str	r1, [r2, r3]

        Status = (uint32_t)DAVEApp_SUCCESS;
10003b7c:	2300      	movs	r3, #0
10003b7e:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003b80:	68fb      	ldr	r3, [r7, #12]
}
10003b82:	1c18      	adds	r0, r3, #0
10003b84:	46bd      	mov	sp, r7
10003b86:	b004      	add	sp, #16
10003b88:	bd80      	pop	{r7, pc}
10003b8a:	46c0      	nop			; (mov r8, r8)

10003b8c <ADCGLOB001_StartUpCalibrationInit>:
/**
 * This function Initialise the calibration based on GUI configuration.
 */
status_t ADCGLOB001_StartUpCalibrationInit(void)
{
10003b8c:	b580      	push	{r7, lr}
10003b8e:	b082      	sub	sp, #8
10003b90:	af00      	add	r7, sp, #0
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003b92:	2301      	movs	r3, #1
10003b94:	607b      	str	r3, [r7, #4]

    if(ADCGLOB001_Handle0.kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED )
10003b96:	4b0d      	ldr	r3, [pc, #52]	; (10003bcc <ADCGLOB001_StartUpCalibrationInit+0x40>)
10003b98:	685b      	ldr	r3, [r3, #4]
10003b9a:	781b      	ldrb	r3, [r3, #0]
10003b9c:	2b01      	cmp	r3, #1
10003b9e:	d110      	bne.n	10003bc2 <ADCGLOB001_StartUpCalibrationInit+0x36>
    {
        /* Initialise Calibration */

        if(ADCGLOB001_Handle0.keStartCalib == (uint8_t)1)
10003ba0:	4b0a      	ldr	r3, [pc, #40]	; (10003bcc <ADCGLOB001_StartUpCalibrationInit+0x40>)
10003ba2:	7d9b      	ldrb	r3, [r3, #22]
10003ba4:	2b01      	cmp	r3, #1
10003ba6:	d10a      	bne.n	10003bbe <ADCGLOB001_StartUpCalibrationInit+0x32>
        {
            /* Initiate Start-Up Calibration */
            SET_BIT( ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG, VADC_GLOBCFG_SUCAL_Pos);
10003ba8:	4b08      	ldr	r3, [pc, #32]	; (10003bcc <ADCGLOB001_StartUpCalibrationInit+0x40>)
10003baa:	681a      	ldr	r2, [r3, #0]
10003bac:	4b07      	ldr	r3, [pc, #28]	; (10003bcc <ADCGLOB001_StartUpCalibrationInit+0x40>)
10003bae:	6819      	ldr	r1, [r3, #0]
10003bb0:	2380      	movs	r3, #128	; 0x80
10003bb2:	58cb      	ldr	r3, [r1, r3]
10003bb4:	2180      	movs	r1, #128	; 0x80
10003bb6:	0609      	lsls	r1, r1, #24
10003bb8:	4319      	orrs	r1, r3
10003bba:	2380      	movs	r3, #128	; 0x80
10003bbc:	50d1      	str	r1, [r2, r3]
        }

        Status = (uint32_t)DAVEApp_SUCCESS;
10003bbe:	2300      	movs	r3, #0
10003bc0:	607b      	str	r3, [r7, #4]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003bc2:	687b      	ldr	r3, [r7, #4]
}
10003bc4:	1c18      	adds	r0, r3, #0
10003bc6:	46bd      	mov	sp, r7
10003bc8:	b002      	add	sp, #8
10003bca:	bd80      	pop	{r7, pc}
10003bcc:	10006410 	.word	0x10006410

10003bd0 <ADCGLOB001_EnableSleepModeControl>:
 * reaction to sleep mode.
 */
status_t ADCGLOB001_EnableSleepModeControl(
        const ADCGLOB001_HandleType * HandlePtr
)
{
10003bd0:	b580      	push	{r7, lr}
10003bd2:	b084      	sub	sp, #16
10003bd4:	af00      	add	r7, sp, #0
10003bd6:	6078      	str	r0, [r7, #4]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003bd8:	2301      	movs	r3, #1
10003bda:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003bdc:	687b      	ldr	r3, [r7, #4]
10003bde:	685b      	ldr	r3, [r3, #4]
10003be0:	781b      	ldrb	r3, [r3, #0]
10003be2:	2b01      	cmp	r3, #1
10003be4:	d109      	bne.n	10003bfa <ADCGLOB001_EnableSleepModeControl+0x2a>
    {
        /* Reset  Sleep Mode Enable Control bit*/
        CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_EDIS_Pos);
10003be6:	687b      	ldr	r3, [r7, #4]
10003be8:	681b      	ldr	r3, [r3, #0]
10003bea:	687a      	ldr	r2, [r7, #4]
10003bec:	6812      	ldr	r2, [r2, #0]
10003bee:	6812      	ldr	r2, [r2, #0]
10003bf0:	2108      	movs	r1, #8
10003bf2:	438a      	bics	r2, r1
10003bf4:	601a      	str	r2, [r3, #0]

        Status = (uint32_t)DAVEApp_SUCCESS;
10003bf6:	2300      	movs	r3, #0
10003bf8:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003bfa:	68fb      	ldr	r3, [r7, #12]
}
10003bfc:	1c18      	adds	r0, r3, #0
10003bfe:	46bd      	mov	sp, r7
10003c00:	b004      	add	sp, #16
10003c02:	bd80      	pop	{r7, pc}

10003c04 <ADCGLOB001_DisregardSleepModeControl>:
 * This function disregards Sleep Mode Control.
 */
status_t ADCGLOB001_DisregardSleepModeControl(
        const ADCGLOB001_HandleType * HandlePtr
)
{
10003c04:	b580      	push	{r7, lr}
10003c06:	b084      	sub	sp, #16
10003c08:	af00      	add	r7, sp, #0
10003c0a:	6078      	str	r0, [r7, #4]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003c0c:	2301      	movs	r3, #1
10003c0e:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003c10:	687b      	ldr	r3, [r7, #4]
10003c12:	685b      	ldr	r3, [r3, #4]
10003c14:	781b      	ldrb	r3, [r3, #0]
10003c16:	2b01      	cmp	r3, #1
10003c18:	d109      	bne.n	10003c2e <ADCGLOB001_DisregardSleepModeControl+0x2a>
    {
        /* set  Sleep Mode Enable Control bit*/
        SET_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_EDIS_Pos);
10003c1a:	687b      	ldr	r3, [r7, #4]
10003c1c:	681b      	ldr	r3, [r3, #0]
10003c1e:	687a      	ldr	r2, [r7, #4]
10003c20:	6812      	ldr	r2, [r2, #0]
10003c22:	6812      	ldr	r2, [r2, #0]
10003c24:	2108      	movs	r1, #8
10003c26:	430a      	orrs	r2, r1
10003c28:	601a      	str	r2, [r3, #0]

        Status = (uint32_t)DAVEApp_SUCCESS;
10003c2a:	2300      	movs	r3, #0
10003c2c:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003c2e:	68fb      	ldr	r3, [r7, #12]
}
10003c30:	1c18      	adds	r0, r3, #0
10003c32:	46bd      	mov	sp, r7
10003c34:	b004      	add	sp, #16
10003c36:	bd80      	pop	{r7, pc}

10003c38 <ADCGLOB001_SetGlobClass0ConvMode>:
 */
status_t ADCGLOB001_SetGlobClass0ConvMode(
        const ADCGLOB001_HandleType * HandlePtr,
        ADCGLOB001_ConversionMode ConversionModeVal
)
{
10003c38:	b580      	push	{r7, lr}
10003c3a:	b084      	sub	sp, #16
10003c3c:	af00      	add	r7, sp, #0
10003c3e:	6078      	str	r0, [r7, #4]
10003c40:	1c0a      	adds	r2, r1, #0
10003c42:	1cfb      	adds	r3, r7, #3
10003c44:	701a      	strb	r2, [r3, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003c46:	2301      	movs	r3, #1
10003c48:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003c4a:	687b      	ldr	r3, [r7, #4]
10003c4c:	685b      	ldr	r3, [r3, #4]
10003c4e:	781b      	ldrb	r3, [r3, #0]
10003c50:	2b01      	cmp	r3, #1
10003c52:	d11d      	bne.n	10003c90 <ADCGLOB001_SetGlobClass0ConvMode+0x58>
    {
        if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||
10003c54:	1cfb      	adds	r3, r7, #3
10003c56:	781b      	ldrb	r3, [r3, #0]
10003c58:	2b02      	cmp	r3, #2
10003c5a:	d903      	bls.n	10003c64 <ADCGLOB001_SetGlobClass0ConvMode+0x2c>
10003c5c:	1cfb      	adds	r3, r7, #3
10003c5e:	781b      	ldrb	r3, [r3, #0]
10003c60:	2b05      	cmp	r3, #5
10003c62:	d113      	bne.n	10003c8c <ADCGLOB001_SetGlobClass0ConvMode+0x54>
                (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {
            /* Set the global class0 conversion mode */
            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0],
10003c64:	687b      	ldr	r3, [r7, #4]
10003c66:	681a      	ldr	r2, [r3, #0]
10003c68:	1cfb      	adds	r3, r7, #3
10003c6a:	781b      	ldrb	r3, [r3, #0]
10003c6c:	0219      	lsls	r1, r3, #8
10003c6e:	23e0      	movs	r3, #224	; 0xe0
10003c70:	00db      	lsls	r3, r3, #3
10003c72:	4019      	ands	r1, r3
10003c74:	687b      	ldr	r3, [r7, #4]
10003c76:	6818      	ldr	r0, [r3, #0]
10003c78:	23a0      	movs	r3, #160	; 0xa0
10003c7a:	58c0      	ldr	r0, [r0, r3]
10003c7c:	4b07      	ldr	r3, [pc, #28]	; (10003c9c <ADCGLOB001_SetGlobClass0ConvMode+0x64>)
10003c7e:	4003      	ands	r3, r0
10003c80:	4319      	orrs	r1, r3
10003c82:	23a0      	movs	r3, #160	; 0xa0
10003c84:	50d1      	str	r1, [r2, r3]
                    VADC_GLOBICLASS_CMS_Msk,
                    VADC_GLOBICLASS_CMS_Pos,
                    (uint32_t)ConversionModeVal
            );

            Status = (uint32_t)DAVEApp_SUCCESS;
10003c86:	2300      	movs	r3, #0
10003c88:	60fb      	str	r3, [r7, #12]
10003c8a:	e001      	b.n	10003c90 <ADCGLOB001_SetGlobClass0ConvMode+0x58>
        }
        else
        {
            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
10003c8c:	2302      	movs	r3, #2
10003c8e:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003c90:	68fb      	ldr	r3, [r7, #12]
}
10003c92:	1c18      	adds	r0, r3, #0
10003c94:	46bd      	mov	sp, r7
10003c96:	b004      	add	sp, #16
10003c98:	bd80      	pop	{r7, pc}
10003c9a:	46c0      	nop			; (mov r8, r8)
10003c9c:	fffff8ff 	.word	0xfffff8ff

10003ca0 <ADCGLOB001_SetGlobClass0SampleTime>:

status_t ADCGLOB001_SetGlobClass0SampleTime(
        const ADCGLOB001_HandleType * HandlePtr,
        uint8_t SampleTime
)
{
10003ca0:	b580      	push	{r7, lr}
10003ca2:	b084      	sub	sp, #16
10003ca4:	af00      	add	r7, sp, #0
10003ca6:	6078      	str	r0, [r7, #4]
10003ca8:	1c0a      	adds	r2, r1, #0
10003caa:	1cfb      	adds	r3, r7, #3
10003cac:	701a      	strb	r2, [r3, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003cae:	2301      	movs	r3, #1
10003cb0:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003cb2:	687b      	ldr	r3, [r7, #4]
10003cb4:	685b      	ldr	r3, [r3, #4]
10003cb6:	781b      	ldrb	r3, [r3, #0]
10003cb8:	2b01      	cmp	r3, #1
10003cba:	d117      	bne.n	10003cec <ADCGLOB001_SetGlobClass0SampleTime+0x4c>
    {
        if(SampleTime < (uint8_t)32){
10003cbc:	1cfb      	adds	r3, r7, #3
10003cbe:	781b      	ldrb	r3, [r3, #0]
10003cc0:	2b1f      	cmp	r3, #31
10003cc2:	d811      	bhi.n	10003ce8 <ADCGLOB001_SetGlobClass0SampleTime+0x48>
            /* Set the global class0 Sample Time */
            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0],
10003cc4:	687b      	ldr	r3, [r7, #4]
10003cc6:	681a      	ldr	r2, [r3, #0]
10003cc8:	1cfb      	adds	r3, r7, #3
10003cca:	7819      	ldrb	r1, [r3, #0]
10003ccc:	231f      	movs	r3, #31
10003cce:	4019      	ands	r1, r3
10003cd0:	687b      	ldr	r3, [r7, #4]
10003cd2:	6818      	ldr	r0, [r3, #0]
10003cd4:	23a0      	movs	r3, #160	; 0xa0
10003cd6:	58c3      	ldr	r3, [r0, r3]
10003cd8:	201f      	movs	r0, #31
10003cda:	4383      	bics	r3, r0
10003cdc:	4319      	orrs	r1, r3
10003cde:	23a0      	movs	r3, #160	; 0xa0
10003ce0:	50d1      	str	r1, [r2, r3]
                    VADC_GLOBICLASS_STCS_Msk,
                    VADC_GLOBICLASS_STCS_Pos,
                    (uint32_t)SampleTime
            );

            Status = (uint32_t)DAVEApp_SUCCESS;
10003ce2:	2300      	movs	r3, #0
10003ce4:	60fb      	str	r3, [r7, #12]
10003ce6:	e001      	b.n	10003cec <ADCGLOB001_SetGlobClass0SampleTime+0x4c>
        }
        else
        {
            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
10003ce8:	2302      	movs	r3, #2
10003cea:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003cec:	68fb      	ldr	r3, [r7, #12]

}
10003cee:	1c18      	adds	r0, r3, #0
10003cf0:	46bd      	mov	sp, r7
10003cf2:	b004      	add	sp, #16
10003cf4:	bd80      	pop	{r7, pc}
10003cf6:	46c0      	nop			; (mov r8, r8)

10003cf8 <ADCGLOB001_SetGlobClass0EmuxConvMode>:
 */
status_t ADCGLOB001_SetGlobClass0EmuxConvMode(
        const ADCGLOB001_HandleType * HandlePtr,
        ADCGLOB001_ConversionMode ConversionModeVal
)
{
10003cf8:	b580      	push	{r7, lr}
10003cfa:	b084      	sub	sp, #16
10003cfc:	af00      	add	r7, sp, #0
10003cfe:	6078      	str	r0, [r7, #4]
10003d00:	1c0a      	adds	r2, r1, #0
10003d02:	1cfb      	adds	r3, r7, #3
10003d04:	701a      	strb	r2, [r3, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003d06:	2301      	movs	r3, #1
10003d08:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003d0a:	687b      	ldr	r3, [r7, #4]
10003d0c:	685b      	ldr	r3, [r3, #4]
10003d0e:	781b      	ldrb	r3, [r3, #0]
10003d10:	2b01      	cmp	r3, #1
10003d12:	d11d      	bne.n	10003d50 <ADCGLOB001_SetGlobClass0EmuxConvMode+0x58>
    {
        if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||
10003d14:	1cfb      	adds	r3, r7, #3
10003d16:	781b      	ldrb	r3, [r3, #0]
10003d18:	2b02      	cmp	r3, #2
10003d1a:	d903      	bls.n	10003d24 <ADCGLOB001_SetGlobClass0EmuxConvMode+0x2c>
10003d1c:	1cfb      	adds	r3, r7, #3
10003d1e:	781b      	ldrb	r3, [r3, #0]
10003d20:	2b05      	cmp	r3, #5
10003d22:	d113      	bne.n	10003d4c <ADCGLOB001_SetGlobClass0EmuxConvMode+0x54>
                (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {
            /* Set the global class0 External Multiplexer conversion mode*/
            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0],
10003d24:	687b      	ldr	r3, [r7, #4]
10003d26:	681a      	ldr	r2, [r3, #0]
10003d28:	1cfb      	adds	r3, r7, #3
10003d2a:	781b      	ldrb	r3, [r3, #0]
10003d2c:	0619      	lsls	r1, r3, #24
10003d2e:	23e0      	movs	r3, #224	; 0xe0
10003d30:	04db      	lsls	r3, r3, #19
10003d32:	4019      	ands	r1, r3
10003d34:	687b      	ldr	r3, [r7, #4]
10003d36:	6818      	ldr	r0, [r3, #0]
10003d38:	23a0      	movs	r3, #160	; 0xa0
10003d3a:	58c0      	ldr	r0, [r0, r3]
10003d3c:	4b07      	ldr	r3, [pc, #28]	; (10003d5c <ADCGLOB001_SetGlobClass0EmuxConvMode+0x64>)
10003d3e:	4003      	ands	r3, r0
10003d40:	4319      	orrs	r1, r3
10003d42:	23a0      	movs	r3, #160	; 0xa0
10003d44:	50d1      	str	r1, [r2, r3]
                    VADC_GLOBICLASS_CME_Msk,
                    VADC_GLOBICLASS_CME_Pos,
                    (uint32_t)ConversionModeVal
            );
            Status = (uint32_t)DAVEApp_SUCCESS;
10003d46:	2300      	movs	r3, #0
10003d48:	60fb      	str	r3, [r7, #12]
10003d4a:	e001      	b.n	10003d50 <ADCGLOB001_SetGlobClass0EmuxConvMode+0x58>

        }
        else
        {
            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
10003d4c:	2302      	movs	r3, #2
10003d4e:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003d50:	68fb      	ldr	r3, [r7, #12]

}
10003d52:	1c18      	adds	r0, r3, #0
10003d54:	46bd      	mov	sp, r7
10003d56:	b004      	add	sp, #16
10003d58:	bd80      	pop	{r7, pc}
10003d5a:	46c0      	nop			; (mov r8, r8)
10003d5c:	f8ffffff 	.word	0xf8ffffff

10003d60 <ADCGLOB001_SetGlobClass0EmuxSampleTime>:
 */
status_t ADCGLOB001_SetGlobClass0EmuxSampleTime(
        const ADCGLOB001_HandleType * HandlePtr,
        uint8_t SampleTime
)
{
10003d60:	b580      	push	{r7, lr}
10003d62:	b084      	sub	sp, #16
10003d64:	af00      	add	r7, sp, #0
10003d66:	6078      	str	r0, [r7, #4]
10003d68:	1c0a      	adds	r2, r1, #0
10003d6a:	1cfb      	adds	r3, r7, #3
10003d6c:	701a      	strb	r2, [r3, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003d6e:	2301      	movs	r3, #1
10003d70:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003d72:	687b      	ldr	r3, [r7, #4]
10003d74:	685b      	ldr	r3, [r3, #4]
10003d76:	781b      	ldrb	r3, [r3, #0]
10003d78:	2b01      	cmp	r3, #1
10003d7a:	d119      	bne.n	10003db0 <ADCGLOB001_SetGlobClass0EmuxSampleTime+0x50>
    {
        if(SampleTime < (uint8_t)32){
10003d7c:	1cfb      	adds	r3, r7, #3
10003d7e:	781b      	ldrb	r3, [r3, #0]
10003d80:	2b1f      	cmp	r3, #31
10003d82:	d813      	bhi.n	10003dac <ADCGLOB001_SetGlobClass0EmuxSampleTime+0x4c>

            /* Set the global class0 External Multiplexer Sample Time */
            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0],
10003d84:	687b      	ldr	r3, [r7, #4]
10003d86:	681a      	ldr	r2, [r3, #0]
10003d88:	1cfb      	adds	r3, r7, #3
10003d8a:	781b      	ldrb	r3, [r3, #0]
10003d8c:	0419      	lsls	r1, r3, #16
10003d8e:	23f8      	movs	r3, #248	; 0xf8
10003d90:	035b      	lsls	r3, r3, #13
10003d92:	4019      	ands	r1, r3
10003d94:	687b      	ldr	r3, [r7, #4]
10003d96:	6818      	ldr	r0, [r3, #0]
10003d98:	23a0      	movs	r3, #160	; 0xa0
10003d9a:	58c0      	ldr	r0, [r0, r3]
10003d9c:	4b07      	ldr	r3, [pc, #28]	; (10003dbc <ADCGLOB001_SetGlobClass0EmuxSampleTime+0x5c>)
10003d9e:	4003      	ands	r3, r0
10003da0:	4319      	orrs	r1, r3
10003da2:	23a0      	movs	r3, #160	; 0xa0
10003da4:	50d1      	str	r1, [r2, r3]
                    VADC_GLOBICLASS_STCE_Msk,
                    VADC_GLOBICLASS_STCE_Pos,
                    (uint32_t)SampleTime
            );

            Status = (uint32_t)DAVEApp_SUCCESS;
10003da6:	2300      	movs	r3, #0
10003da8:	60fb      	str	r3, [r7, #12]
10003daa:	e001      	b.n	10003db0 <ADCGLOB001_SetGlobClass0EmuxSampleTime+0x50>

        }
        else
        {
            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
10003dac:	2302      	movs	r3, #2
10003dae:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003db0:	68fb      	ldr	r3, [r7, #12]
}
10003db2:	1c18      	adds	r0, r3, #0
10003db4:	46bd      	mov	sp, r7
10003db6:	b004      	add	sp, #16
10003db8:	bd80      	pop	{r7, pc}
10003dba:	46c0      	nop			; (mov r8, r8)
10003dbc:	ffe0ffff 	.word	0xffe0ffff

10003dc0 <ADCGLOB001_SetGlobClass1ConvMode>:
 */
status_t ADCGLOB001_SetGlobClass1ConvMode(
        const ADCGLOB001_HandleType * HandlePtr,
        ADCGLOB001_ConversionMode ConversionModeVal
)
{
10003dc0:	b580      	push	{r7, lr}
10003dc2:	b084      	sub	sp, #16
10003dc4:	af00      	add	r7, sp, #0
10003dc6:	6078      	str	r0, [r7, #4]
10003dc8:	1c0a      	adds	r2, r1, #0
10003dca:	1cfb      	adds	r3, r7, #3
10003dcc:	701a      	strb	r2, [r3, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003dce:	2301      	movs	r3, #1
10003dd0:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003dd2:	687b      	ldr	r3, [r7, #4]
10003dd4:	685b      	ldr	r3, [r3, #4]
10003dd6:	781b      	ldrb	r3, [r3, #0]
10003dd8:	2b01      	cmp	r3, #1
10003dda:	d11d      	bne.n	10003e18 <ADCGLOB001_SetGlobClass1ConvMode+0x58>
    {
        if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||
10003ddc:	1cfb      	adds	r3, r7, #3
10003dde:	781b      	ldrb	r3, [r3, #0]
10003de0:	2b02      	cmp	r3, #2
10003de2:	d903      	bls.n	10003dec <ADCGLOB001_SetGlobClass1ConvMode+0x2c>
10003de4:	1cfb      	adds	r3, r7, #3
10003de6:	781b      	ldrb	r3, [r3, #0]
10003de8:	2b05      	cmp	r3, #5
10003dea:	d113      	bne.n	10003e14 <ADCGLOB001_SetGlobClass1ConvMode+0x54>
                (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {
            /* Set the global class 1 conversion mode */
            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1],
10003dec:	687b      	ldr	r3, [r7, #4]
10003dee:	681a      	ldr	r2, [r3, #0]
10003df0:	1cfb      	adds	r3, r7, #3
10003df2:	781b      	ldrb	r3, [r3, #0]
10003df4:	0219      	lsls	r1, r3, #8
10003df6:	23e0      	movs	r3, #224	; 0xe0
10003df8:	00db      	lsls	r3, r3, #3
10003dfa:	4019      	ands	r1, r3
10003dfc:	687b      	ldr	r3, [r7, #4]
10003dfe:	6818      	ldr	r0, [r3, #0]
10003e00:	23a4      	movs	r3, #164	; 0xa4
10003e02:	58c0      	ldr	r0, [r0, r3]
10003e04:	4b07      	ldr	r3, [pc, #28]	; (10003e24 <ADCGLOB001_SetGlobClass1ConvMode+0x64>)
10003e06:	4003      	ands	r3, r0
10003e08:	4319      	orrs	r1, r3
10003e0a:	23a4      	movs	r3, #164	; 0xa4
10003e0c:	50d1      	str	r1, [r2, r3]
                    VADC_GLOBICLASS_CMS_Msk,
                    VADC_GLOBICLASS_CMS_Pos,
                    (uint32_t)ConversionModeVal
            );

            Status = (uint32_t)DAVEApp_SUCCESS;
10003e0e:	2300      	movs	r3, #0
10003e10:	60fb      	str	r3, [r7, #12]
10003e12:	e001      	b.n	10003e18 <ADCGLOB001_SetGlobClass1ConvMode+0x58>

        }
        else
        {
            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
10003e14:	2302      	movs	r3, #2
10003e16:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003e18:	68fb      	ldr	r3, [r7, #12]
}
10003e1a:	1c18      	adds	r0, r3, #0
10003e1c:	46bd      	mov	sp, r7
10003e1e:	b004      	add	sp, #16
10003e20:	bd80      	pop	{r7, pc}
10003e22:	46c0      	nop			; (mov r8, r8)
10003e24:	fffff8ff 	.word	0xfffff8ff

10003e28 <ADCGLOB001_SetGlobClass1SampleTime>:
 */
status_t ADCGLOB001_SetGlobClass1SampleTime(
        const ADCGLOB001_HandleType * HandlePtr,
        uint8_t SampleTime
)
{
10003e28:	b580      	push	{r7, lr}
10003e2a:	b084      	sub	sp, #16
10003e2c:	af00      	add	r7, sp, #0
10003e2e:	6078      	str	r0, [r7, #4]
10003e30:	1c0a      	adds	r2, r1, #0
10003e32:	1cfb      	adds	r3, r7, #3
10003e34:	701a      	strb	r2, [r3, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003e36:	2301      	movs	r3, #1
10003e38:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003e3a:	687b      	ldr	r3, [r7, #4]
10003e3c:	685b      	ldr	r3, [r3, #4]
10003e3e:	781b      	ldrb	r3, [r3, #0]
10003e40:	2b01      	cmp	r3, #1
10003e42:	d117      	bne.n	10003e74 <ADCGLOB001_SetGlobClass1SampleTime+0x4c>
    {

        if(SampleTime < (uint8_t)32){
10003e44:	1cfb      	adds	r3, r7, #3
10003e46:	781b      	ldrb	r3, [r3, #0]
10003e48:	2b1f      	cmp	r3, #31
10003e4a:	d811      	bhi.n	10003e70 <ADCGLOB001_SetGlobClass1SampleTime+0x48>
            /* Write the global class 1 Sample Time */
            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1],
10003e4c:	687b      	ldr	r3, [r7, #4]
10003e4e:	681a      	ldr	r2, [r3, #0]
10003e50:	1cfb      	adds	r3, r7, #3
10003e52:	7819      	ldrb	r1, [r3, #0]
10003e54:	231f      	movs	r3, #31
10003e56:	4019      	ands	r1, r3
10003e58:	687b      	ldr	r3, [r7, #4]
10003e5a:	6818      	ldr	r0, [r3, #0]
10003e5c:	23a4      	movs	r3, #164	; 0xa4
10003e5e:	58c3      	ldr	r3, [r0, r3]
10003e60:	201f      	movs	r0, #31
10003e62:	4383      	bics	r3, r0
10003e64:	4319      	orrs	r1, r3
10003e66:	23a4      	movs	r3, #164	; 0xa4
10003e68:	50d1      	str	r1, [r2, r3]
                    VADC_GLOBICLASS_STCS_Msk,
                    VADC_GLOBICLASS_STCS_Pos,
                    (uint32_t)SampleTime
            );

            Status = (uint32_t)DAVEApp_SUCCESS;
10003e6a:	2300      	movs	r3, #0
10003e6c:	60fb      	str	r3, [r7, #12]
10003e6e:	e001      	b.n	10003e74 <ADCGLOB001_SetGlobClass1SampleTime+0x4c>

        }
        else
        {
            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
10003e70:	2302      	movs	r3, #2
10003e72:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003e74:	68fb      	ldr	r3, [r7, #12]
}
10003e76:	1c18      	adds	r0, r3, #0
10003e78:	46bd      	mov	sp, r7
10003e7a:	b004      	add	sp, #16
10003e7c:	bd80      	pop	{r7, pc}
10003e7e:	46c0      	nop			; (mov r8, r8)

10003e80 <ADCGLOB001_SetGlobClass1EmuxConvMode>:
 */
status_t ADCGLOB001_SetGlobClass1EmuxConvMode(
        const ADCGLOB001_HandleType * HandlePtr,
        ADCGLOB001_ConversionMode ConversionModeVal
)
{
10003e80:	b580      	push	{r7, lr}
10003e82:	b084      	sub	sp, #16
10003e84:	af00      	add	r7, sp, #0
10003e86:	6078      	str	r0, [r7, #4]
10003e88:	1c0a      	adds	r2, r1, #0
10003e8a:	1cfb      	adds	r3, r7, #3
10003e8c:	701a      	strb	r2, [r3, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003e8e:	2301      	movs	r3, #1
10003e90:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003e92:	687b      	ldr	r3, [r7, #4]
10003e94:	685b      	ldr	r3, [r3, #4]
10003e96:	781b      	ldrb	r3, [r3, #0]
10003e98:	2b01      	cmp	r3, #1
10003e9a:	d11d      	bne.n	10003ed8 <ADCGLOB001_SetGlobClass1EmuxConvMode+0x58>
    {
        if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||
10003e9c:	1cfb      	adds	r3, r7, #3
10003e9e:	781b      	ldrb	r3, [r3, #0]
10003ea0:	2b02      	cmp	r3, #2
10003ea2:	d903      	bls.n	10003eac <ADCGLOB001_SetGlobClass1EmuxConvMode+0x2c>
10003ea4:	1cfb      	adds	r3, r7, #3
10003ea6:	781b      	ldrb	r3, [r3, #0]
10003ea8:	2b05      	cmp	r3, #5
10003eaa:	d113      	bne.n	10003ed4 <ADCGLOB001_SetGlobClass1EmuxConvMode+0x54>
                (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) {
            /* Write the global class1 External Multiplexer conversion mode */

            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1],
10003eac:	687b      	ldr	r3, [r7, #4]
10003eae:	681a      	ldr	r2, [r3, #0]
10003eb0:	1cfb      	adds	r3, r7, #3
10003eb2:	781b      	ldrb	r3, [r3, #0]
10003eb4:	0619      	lsls	r1, r3, #24
10003eb6:	23e0      	movs	r3, #224	; 0xe0
10003eb8:	04db      	lsls	r3, r3, #19
10003eba:	4019      	ands	r1, r3
10003ebc:	687b      	ldr	r3, [r7, #4]
10003ebe:	6818      	ldr	r0, [r3, #0]
10003ec0:	23a4      	movs	r3, #164	; 0xa4
10003ec2:	58c0      	ldr	r0, [r0, r3]
10003ec4:	4b07      	ldr	r3, [pc, #28]	; (10003ee4 <ADCGLOB001_SetGlobClass1EmuxConvMode+0x64>)
10003ec6:	4003      	ands	r3, r0
10003ec8:	4319      	orrs	r1, r3
10003eca:	23a4      	movs	r3, #164	; 0xa4
10003ecc:	50d1      	str	r1, [r2, r3]
                    VADC_GLOBICLASS_CME_Msk,
                    VADC_GLOBICLASS_CME_Pos,
                    (uint32_t)ConversionModeVal
            );
            Status = (uint32_t)DAVEApp_SUCCESS;
10003ece:	2300      	movs	r3, #0
10003ed0:	60fb      	str	r3, [r7, #12]
10003ed2:	e001      	b.n	10003ed8 <ADCGLOB001_SetGlobClass1EmuxConvMode+0x58>
        }
        else
        {
            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
10003ed4:	2302      	movs	r3, #2
10003ed6:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003ed8:	68fb      	ldr	r3, [r7, #12]
}
10003eda:	1c18      	adds	r0, r3, #0
10003edc:	46bd      	mov	sp, r7
10003ede:	b004      	add	sp, #16
10003ee0:	bd80      	pop	{r7, pc}
10003ee2:	46c0      	nop			; (mov r8, r8)
10003ee4:	f8ffffff 	.word	0xf8ffffff

10003ee8 <ADCGLOB001_SetGlobClass1EmuxSampleTime>:
 */
status_t ADCGLOB001_SetGlobClass1EmuxSampleTime(
        const ADCGLOB001_HandleType * HandlePtr,
        uint8_t SampleTime
)
{
10003ee8:	b580      	push	{r7, lr}
10003eea:	b084      	sub	sp, #16
10003eec:	af00      	add	r7, sp, #0
10003eee:	6078      	str	r0, [r7, #4]
10003ef0:	1c0a      	adds	r2, r1, #0
10003ef2:	1cfb      	adds	r3, r7, #3
10003ef4:	701a      	strb	r2, [r3, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003ef6:	2301      	movs	r3, #1
10003ef8:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003efa:	687b      	ldr	r3, [r7, #4]
10003efc:	685b      	ldr	r3, [r3, #4]
10003efe:	781b      	ldrb	r3, [r3, #0]
10003f00:	2b01      	cmp	r3, #1
10003f02:	d119      	bne.n	10003f38 <ADCGLOB001_SetGlobClass1EmuxSampleTime+0x50>
    {
        if(SampleTime < (uint8_t)32){
10003f04:	1cfb      	adds	r3, r7, #3
10003f06:	781b      	ldrb	r3, [r3, #0]
10003f08:	2b1f      	cmp	r3, #31
10003f0a:	d813      	bhi.n	10003f34 <ADCGLOB001_SetGlobClass1EmuxSampleTime+0x4c>
            /* Write the global class1 External Multiplexer Sample Time */
            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1],
10003f0c:	687b      	ldr	r3, [r7, #4]
10003f0e:	681a      	ldr	r2, [r3, #0]
10003f10:	1cfb      	adds	r3, r7, #3
10003f12:	781b      	ldrb	r3, [r3, #0]
10003f14:	0419      	lsls	r1, r3, #16
10003f16:	23f8      	movs	r3, #248	; 0xf8
10003f18:	035b      	lsls	r3, r3, #13
10003f1a:	4019      	ands	r1, r3
10003f1c:	687b      	ldr	r3, [r7, #4]
10003f1e:	6818      	ldr	r0, [r3, #0]
10003f20:	23a4      	movs	r3, #164	; 0xa4
10003f22:	58c0      	ldr	r0, [r0, r3]
10003f24:	4b07      	ldr	r3, [pc, #28]	; (10003f44 <ADCGLOB001_SetGlobClass1EmuxSampleTime+0x5c>)
10003f26:	4003      	ands	r3, r0
10003f28:	4319      	orrs	r1, r3
10003f2a:	23a4      	movs	r3, #164	; 0xa4
10003f2c:	50d1      	str	r1, [r2, r3]
                    VADC_GLOBICLASS_STCE_Msk,
                    VADC_GLOBICLASS_STCE_Pos,
                    (uint32_t)SampleTime
            );
            Status = (uint32_t)DAVEApp_SUCCESS;
10003f2e:	2300      	movs	r3, #0
10003f30:	60fb      	str	r3, [r7, #12]
10003f32:	e001      	b.n	10003f38 <ADCGLOB001_SetGlobClass1EmuxSampleTime+0x50>

        }
        else
        {
            Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;
10003f34:	2302      	movs	r3, #2
10003f36:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003f38:	68fb      	ldr	r3, [r7, #12]
}
10003f3a:	1c18      	adds	r0, r3, #0
10003f3c:	46bd      	mov	sp, r7
10003f3e:	b004      	add	sp, #16
10003f40:	bd80      	pop	{r7, pc}
10003f42:	46c0      	nop			; (mov r8, r8)
10003f44:	ffe0ffff 	.word	0xffe0ffff

10003f48 <ADCGLOB001_GetDisableBitStatus>:
 */
status_t ADCGLOB001_GetDisableBitStatus(
        const ADCGLOB001_HandleType * HandlePtr,
        uint8_t *StatusValue
)
{
10003f48:	b580      	push	{r7, lr}
10003f4a:	b084      	sub	sp, #16
10003f4c:	af00      	add	r7, sp, #0
10003f4e:	6078      	str	r0, [r7, #4]
10003f50:	6039      	str	r1, [r7, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003f52:	2301      	movs	r3, #1
10003f54:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003f56:	687b      	ldr	r3, [r7, #4]
10003f58:	685b      	ldr	r3, [r3, #4]
10003f5a:	781b      	ldrb	r3, [r3, #0]
10003f5c:	2b01      	cmp	r3, #1
10003f5e:	d10a      	bne.n	10003f76 <ADCGLOB001_GetDisableBitStatus+0x2e>
    {
        /*Read the status value */

        *StatusValue = (uint8_t) RD_REG( HandlePtr->kGlobalPtr->CLC,
10003f60:	687b      	ldr	r3, [r7, #4]
10003f62:	681b      	ldr	r3, [r3, #0]
10003f64:	681a      	ldr	r2, [r3, #0]
10003f66:	2302      	movs	r3, #2
10003f68:	4013      	ands	r3, r2
10003f6a:	085b      	lsrs	r3, r3, #1
10003f6c:	b2da      	uxtb	r2, r3
10003f6e:	683b      	ldr	r3, [r7, #0]
10003f70:	701a      	strb	r2, [r3, #0]
                VADC_CLC_DISS_Msk,
                VADC_CLC_DISS_Pos
        );
        Status = (uint32_t)DAVEApp_SUCCESS;
10003f72:	2300      	movs	r3, #0
10003f74:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003f76:	68fb      	ldr	r3, [r7, #12]
}
10003f78:	1c18      	adds	r0, r3, #0
10003f7a:	46bd      	mov	sp, r7
10003f7c:	b004      	add	sp, #16
10003f7e:	bd80      	pop	{r7, pc}

10003f80 <ADCGLOB001_GetIdValue>:

status_t ADCGLOB001_GetIdValue(
        const ADCGLOB001_HandleType * HandlePtr,
        uint32_t *IDValue
)
{
10003f80:	b580      	push	{r7, lr}
10003f82:	b084      	sub	sp, #16
10003f84:	af00      	add	r7, sp, #0
10003f86:	6078      	str	r0, [r7, #4]
10003f88:	6039      	str	r1, [r7, #0]
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003f8a:	2301      	movs	r3, #1
10003f8c:	60fb      	str	r3, [r7, #12]

    if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)
10003f8e:	687b      	ldr	r3, [r7, #4]
10003f90:	685b      	ldr	r3, [r3, #4]
10003f92:	781b      	ldrb	r3, [r3, #0]
10003f94:	2b01      	cmp	r3, #1
10003f96:	d106      	bne.n	10003fa6 <ADCGLOB001_GetIdValue+0x26>
    {
        /*Read the ID value */
        *IDValue =(uint32_t)HandlePtr->kGlobalPtr->ID;
10003f98:	687b      	ldr	r3, [r7, #4]
10003f9a:	681b      	ldr	r3, [r3, #0]
10003f9c:	689a      	ldr	r2, [r3, #8]
10003f9e:	683b      	ldr	r3, [r7, #0]
10003fa0:	601a      	str	r2, [r3, #0]

        Status = (uint32_t)DAVEApp_SUCCESS;
10003fa2:	2300      	movs	r3, #0
10003fa4:	60fb      	str	r3, [r7, #12]
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

    return Status;
10003fa6:	68fb      	ldr	r3, [r7, #12]
}
10003fa8:	1c18      	adds	r0, r3, #0
10003faa:	46bd      	mov	sp, r7
10003fac:	b004      	add	sp, #16
10003fae:	bd80      	pop	{r7, pc}

10003fb0 <EnableWritetoVadcRegisters>:
/* By default all Vadc registers are writable.
 * EnableWritetoVadcRegisters function is called to write to registers, this function can be called
 * only if the vadc registers disabled for writing by calling the function DisableWritetoVadcRegisters() */

void EnableWritetoVadcRegisters(void)
{
10003fb0:	b580      	push	{r7, lr}
10003fb2:	b082      	sub	sp, #8
10003fb4:	af00      	add	r7, sp, #0
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
10003fb6:	2301      	movs	r3, #1
10003fb8:	607b      	str	r3, [r7, #4]

    SCU_GENERAL->PASSWD = 0x000000C0U;
10003fba:	4b34      	ldr	r3, [pc, #208]	; (1000408c <EnableWritetoVadcRegisters+0xdc>)
10003fbc:	22c0      	movs	r2, #192	; 0xc0
10003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk)==0)
10003fc0:	4b32      	ldr	r3, [pc, #200]	; (1000408c <EnableWritetoVadcRegisters+0xdc>)
10003fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10003fc4:	2304      	movs	r3, #4
10003fc6:	4013      	ands	r3, r2
10003fc8:	d159      	bne.n	1000407e <EnableWritetoVadcRegisters+0xce>
    {
        /*Channel control registers*/
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC0_Msk, VADC_ACCPROT0_APC0_Pos, 0U);
10003fca:	4a31      	ldr	r2, [pc, #196]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10003fcc:	4930      	ldr	r1, [pc, #192]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10003fce:	2388      	movs	r3, #136	; 0x88
10003fd0:	58cb      	ldr	r3, [r1, r3]
10003fd2:	2101      	movs	r1, #1
10003fd4:	1c18      	adds	r0, r3, #0
10003fd6:	4388      	bics	r0, r1
10003fd8:	1c01      	adds	r1, r0, #0
10003fda:	2388      	movs	r3, #136	; 0x88
10003fdc:	50d1      	str	r1, [r2, r3]
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC1_Msk, VADC_ACCPROT0_APC1_Pos, 0U);
10003fde:	4a2c      	ldr	r2, [pc, #176]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10003fe0:	492b      	ldr	r1, [pc, #172]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10003fe2:	2388      	movs	r3, #136	; 0x88
10003fe4:	58cb      	ldr	r3, [r1, r3]
10003fe6:	2102      	movs	r1, #2
10003fe8:	1c18      	adds	r0, r3, #0
10003fea:	4388      	bics	r0, r1
10003fec:	1c01      	adds	r1, r0, #0
10003fee:	2388      	movs	r3, #136	; 0x88
10003ff0:	50d1      	str	r1, [r2, r3]

        /*    Enable write to External multiplexer control registers*/
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APEM_Msk, VADC_ACCPROT0_APEM_Pos, 0U);
10003ff2:	4a27      	ldr	r2, [pc, #156]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10003ff4:	4926      	ldr	r1, [pc, #152]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10003ff6:	2388      	movs	r3, #136	; 0x88
10003ff8:	58c9      	ldr	r1, [r1, r3]
10003ffa:	4b26      	ldr	r3, [pc, #152]	; (10004094 <EnableWritetoVadcRegisters+0xe4>)
10003ffc:	4019      	ands	r1, r3
10003ffe:	2388      	movs	r3, #136	; 0x88
10004000:	50d1      	str	r1, [r2, r3]

        /*    Initialization control registers */
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API0_Msk, VADC_ACCPROT0_API0_Pos, 0U);
10004002:	4a23      	ldr	r2, [pc, #140]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004004:	4922      	ldr	r1, [pc, #136]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004006:	2388      	movs	r3, #136	; 0x88
10004008:	58c9      	ldr	r1, [r1, r3]
1000400a:	4b23      	ldr	r3, [pc, #140]	; (10004098 <EnableWritetoVadcRegisters+0xe8>)
1000400c:	4019      	ands	r1, r3
1000400e:	2388      	movs	r3, #136	; 0x88
10004010:	50d1      	str	r1, [r2, r3]
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API1_Msk, VADC_ACCPROT0_API1_Pos, 0U);
10004012:	4a1f      	ldr	r2, [pc, #124]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004014:	491e      	ldr	r1, [pc, #120]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004016:	2388      	movs	r3, #136	; 0x88
10004018:	58c9      	ldr	r1, [r1, r3]
1000401a:	4b20      	ldr	r3, [pc, #128]	; (1000409c <EnableWritetoVadcRegisters+0xec>)
1000401c:	4019      	ands	r1, r3
1000401e:	2388      	movs	r3, #136	; 0x88
10004020:	50d1      	str	r1, [r2, r3]

        /*    Enable write to Gobal configuration registers */
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APGC_Msk, VADC_ACCPROT0_APGC_Pos, 0U);
10004022:	4a1b      	ldr	r2, [pc, #108]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004024:	491a      	ldr	r1, [pc, #104]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004026:	2388      	movs	r3, #136	; 0x88
10004028:	58cb      	ldr	r3, [r1, r3]
1000402a:	005b      	lsls	r3, r3, #1
1000402c:	0859      	lsrs	r1, r3, #1
1000402e:	2388      	movs	r3, #136	; 0x88
10004030:	50d1      	str	r1, [r2, r3]

        /*    Enable write to Service request control registers*/
        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS0_Pos, 0U);
10004032:	4a17      	ldr	r2, [pc, #92]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004034:	4916      	ldr	r1, [pc, #88]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004036:	238c      	movs	r3, #140	; 0x8c
10004038:	58cb      	ldr	r3, [r1, r3]
1000403a:	2102      	movs	r1, #2
1000403c:	1c18      	adds	r0, r3, #0
1000403e:	4388      	bics	r0, r1
10004040:	1c01      	adds	r1, r0, #0
10004042:	238c      	movs	r3, #140	; 0x8c
10004044:	50d1      	str	r1, [r2, r3]
        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS1_Pos, 0U);
10004046:	4a12      	ldr	r2, [pc, #72]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
10004048:	4911      	ldr	r1, [pc, #68]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
1000404a:	238c      	movs	r3, #140	; 0x8c
1000404c:	58cb      	ldr	r3, [r1, r3]
1000404e:	2102      	movs	r1, #2
10004050:	1c18      	adds	r0, r3, #0
10004052:	4388      	bics	r0, r1
10004054:	1c01      	adds	r1, r0, #0
10004056:	238c      	movs	r3, #140	; 0x8c
10004058:	50d1      	str	r1, [r2, r3]

        /*Enable write to Result control registers*/
        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR0_Msk, VADC_ACCPROT1_APR0_Pos, 0U);
1000405a:	4a0d      	ldr	r2, [pc, #52]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
1000405c:	490c      	ldr	r1, [pc, #48]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
1000405e:	238c      	movs	r3, #140	; 0x8c
10004060:	58c9      	ldr	r1, [r1, r3]
10004062:	4b0d      	ldr	r3, [pc, #52]	; (10004098 <EnableWritetoVadcRegisters+0xe8>)
10004064:	4019      	ands	r1, r3
10004066:	238c      	movs	r3, #140	; 0x8c
10004068:	50d1      	str	r1, [r2, r3]
        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR1_Msk, VADC_ACCPROT1_APR1_Pos, 0U);
1000406a:	4a09      	ldr	r2, [pc, #36]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
1000406c:	4908      	ldr	r1, [pc, #32]	; (10004090 <EnableWritetoVadcRegisters+0xe0>)
1000406e:	238c      	movs	r3, #140	; 0x8c
10004070:	58c9      	ldr	r1, [r1, r3]
10004072:	4b0a      	ldr	r3, [pc, #40]	; (1000409c <EnableWritetoVadcRegisters+0xec>)
10004074:	4019      	ands	r1, r3
10004076:	238c      	movs	r3, #140	; 0x8c
10004078:	50d1      	str	r1, [r2, r3]
        Status = (uint32_t)DAVEApp_SUCCESS;
1000407a:	2300      	movs	r3, #0
1000407c:	607b      	str	r3, [r7, #4]
    }
    SCU_GENERAL->PASSWD = 0x000000C3UL;
1000407e:	4b03      	ldr	r3, [pc, #12]	; (1000408c <EnableWritetoVadcRegisters+0xdc>)
10004080:	22c3      	movs	r2, #195	; 0xc3
10004082:	625a      	str	r2, [r3, #36]	; 0x24
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

}
10004084:	46bd      	mov	sp, r7
10004086:	b002      	add	sp, #8
10004088:	bd80      	pop	{r7, pc}
1000408a:	46c0      	nop			; (mov r8, r8)
1000408c:	40010000 	.word	0x40010000
10004090:	48030000 	.word	0x48030000
10004094:	ffff7fff 	.word	0xffff7fff
10004098:	fffeffff 	.word	0xfffeffff
1000409c:	fffdffff 	.word	0xfffdffff

100040a0 <DisableWritetoVadcRegisters>:
 * be called only if the user wants to disable writing to vadc registers. To enable writing to registers
 * EnableWritetoVadcRegisters() function needs to be called. */


void DisableWritetoVadcRegisters(void)
{
100040a0:	b580      	push	{r7, lr}
100040a2:	b082      	sub	sp, #8
100040a4:	af00      	add	r7, sp, #0
    status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;
100040a6:	2301      	movs	r3, #1
100040a8:	607b      	str	r3, [r7, #4]

    SCU_GENERAL->PASSWD = 0x000000C0U;
100040aa:	4b33      	ldr	r3, [pc, #204]	; (10004178 <DisableWritetoVadcRegisters+0xd8>)
100040ac:	22c0      	movs	r2, #192	; 0xc0
100040ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk)==0)
100040b0:	4b31      	ldr	r3, [pc, #196]	; (10004178 <DisableWritetoVadcRegisters+0xd8>)
100040b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100040b4:	2304      	movs	r3, #4
100040b6:	4013      	ands	r3, r2
100040b8:	d157      	bne.n	1000416a <DisableWritetoVadcRegisters+0xca>
    {
        /*Channel control registers*/
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC0_Msk, VADC_ACCPROT0_APC0_Pos, 1U);
100040ba:	4a30      	ldr	r2, [pc, #192]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
100040bc:	492f      	ldr	r1, [pc, #188]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
100040be:	2388      	movs	r3, #136	; 0x88
100040c0:	58cb      	ldr	r3, [r1, r3]
100040c2:	2101      	movs	r1, #1
100040c4:	4319      	orrs	r1, r3
100040c6:	2388      	movs	r3, #136	; 0x88
100040c8:	50d1      	str	r1, [r2, r3]
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APC1_Msk, VADC_ACCPROT0_APC1_Pos, 1U);
100040ca:	4a2c      	ldr	r2, [pc, #176]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
100040cc:	492b      	ldr	r1, [pc, #172]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
100040ce:	2388      	movs	r3, #136	; 0x88
100040d0:	58cb      	ldr	r3, [r1, r3]
100040d2:	2102      	movs	r1, #2
100040d4:	4319      	orrs	r1, r3
100040d6:	2388      	movs	r3, #136	; 0x88
100040d8:	50d1      	str	r1, [r2, r3]

        /*Enable write to External multiplexer control registers*/
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APEM_Msk, VADC_ACCPROT0_APEM_Pos, 1U);
100040da:	4a28      	ldr	r2, [pc, #160]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
100040dc:	4927      	ldr	r1, [pc, #156]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
100040de:	2388      	movs	r3, #136	; 0x88
100040e0:	58cb      	ldr	r3, [r1, r3]
100040e2:	2180      	movs	r1, #128	; 0x80
100040e4:	0209      	lsls	r1, r1, #8
100040e6:	4319      	orrs	r1, r3
100040e8:	2388      	movs	r3, #136	; 0x88
100040ea:	50d1      	str	r1, [r2, r3]

        /*Initialization control registers*/
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API0_Msk, VADC_ACCPROT0_API0_Pos, 1U);
100040ec:	4a23      	ldr	r2, [pc, #140]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
100040ee:	4923      	ldr	r1, [pc, #140]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
100040f0:	2388      	movs	r3, #136	; 0x88
100040f2:	58cb      	ldr	r3, [r1, r3]
100040f4:	2180      	movs	r1, #128	; 0x80
100040f6:	0249      	lsls	r1, r1, #9
100040f8:	4319      	orrs	r1, r3
100040fa:	2388      	movs	r3, #136	; 0x88
100040fc:	50d1      	str	r1, [r2, r3]
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_API1_Msk, VADC_ACCPROT0_API1_Pos, 1U);
100040fe:	4a1f      	ldr	r2, [pc, #124]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004100:	491e      	ldr	r1, [pc, #120]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004102:	2388      	movs	r3, #136	; 0x88
10004104:	58cb      	ldr	r3, [r1, r3]
10004106:	2180      	movs	r1, #128	; 0x80
10004108:	0289      	lsls	r1, r1, #10
1000410a:	4319      	orrs	r1, r3
1000410c:	2388      	movs	r3, #136	; 0x88
1000410e:	50d1      	str	r1, [r2, r3]

        /*Enable write to Gobal configuration registers*/
        WR_REG( VADC->ACCPROT0, VADC_ACCPROT0_APGC_Msk, VADC_ACCPROT0_APGC_Pos, 1U);
10004110:	4a1a      	ldr	r2, [pc, #104]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004112:	491a      	ldr	r1, [pc, #104]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004114:	2388      	movs	r3, #136	; 0x88
10004116:	58cb      	ldr	r3, [r1, r3]
10004118:	2180      	movs	r1, #128	; 0x80
1000411a:	0609      	lsls	r1, r1, #24
1000411c:	4319      	orrs	r1, r3
1000411e:	2388      	movs	r3, #136	; 0x88
10004120:	50d1      	str	r1, [r2, r3]

        /*Enable write to Service request control registers*/
        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS0_Msk, VADC_ACCPROT1_APS0_Pos, 1U);
10004122:	4a16      	ldr	r2, [pc, #88]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004124:	4915      	ldr	r1, [pc, #84]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004126:	238c      	movs	r3, #140	; 0x8c
10004128:	58cb      	ldr	r3, [r1, r3]
1000412a:	2101      	movs	r1, #1
1000412c:	4319      	orrs	r1, r3
1000412e:	238c      	movs	r3, #140	; 0x8c
10004130:	50d1      	str	r1, [r2, r3]
        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APS1_Msk, VADC_ACCPROT1_APS1_Pos, 1U);
10004132:	4a12      	ldr	r2, [pc, #72]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004134:	4911      	ldr	r1, [pc, #68]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004136:	238c      	movs	r3, #140	; 0x8c
10004138:	58cb      	ldr	r3, [r1, r3]
1000413a:	2102      	movs	r1, #2
1000413c:	4319      	orrs	r1, r3
1000413e:	238c      	movs	r3, #140	; 0x8c
10004140:	50d1      	str	r1, [r2, r3]

        /*Enable write to Result control registers*/
        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR0_Msk, VADC_ACCPROT1_APR0_Pos, 1U);
10004142:	4a0e      	ldr	r2, [pc, #56]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004144:	490d      	ldr	r1, [pc, #52]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004146:	238c      	movs	r3, #140	; 0x8c
10004148:	58cb      	ldr	r3, [r1, r3]
1000414a:	2180      	movs	r1, #128	; 0x80
1000414c:	0249      	lsls	r1, r1, #9
1000414e:	4319      	orrs	r1, r3
10004150:	238c      	movs	r3, #140	; 0x8c
10004152:	50d1      	str	r1, [r2, r3]
        WR_REG( VADC->ACCPROT1, VADC_ACCPROT1_APR1_Msk, VADC_ACCPROT1_APR1_Pos, 1U);
10004154:	4a09      	ldr	r2, [pc, #36]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004156:	4909      	ldr	r1, [pc, #36]	; (1000417c <DisableWritetoVadcRegisters+0xdc>)
10004158:	238c      	movs	r3, #140	; 0x8c
1000415a:	58cb      	ldr	r3, [r1, r3]
1000415c:	2180      	movs	r1, #128	; 0x80
1000415e:	0289      	lsls	r1, r1, #10
10004160:	4319      	orrs	r1, r3
10004162:	238c      	movs	r3, #140	; 0x8c
10004164:	50d1      	str	r1, [r2, r3]
        Status = (uint32_t)DAVEApp_SUCCESS;
10004166:	2300      	movs	r3, #0
10004168:	607b      	str	r3, [r7, #4]
    }

    SCU_GENERAL->PASSWD = 0x000000C3UL;
1000416a:	4b03      	ldr	r3, [pc, #12]	; (10004178 <DisableWritetoVadcRegisters+0xd8>)
1000416c:	22c3      	movs	r2, #195	; 0xc3
1000416e:	625a      	str	r2, [r3, #36]	; 0x24
    if (Status != (uint32_t)DAVEApp_SUCCESS)
    {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
    }

}
10004170:	46bd      	mov	sp, r7
10004172:	b002      	add	sp, #8
10004174:	bd80      	pop	{r7, pc}
10004176:	46c0      	nop			; (mov r8, r8)
10004178:	40010000 	.word	0x40010000
1000417c:	48030000 	.word	0x48030000

10004180 <__aeabi_uidiv>:
10004180:	2900      	cmp	r1, #0
10004182:	d034      	beq.n	100041ee <.udivsi3_skip_div0_test+0x6a>

10004184 <.udivsi3_skip_div0_test>:
10004184:	2301      	movs	r3, #1
10004186:	2200      	movs	r2, #0
10004188:	b410      	push	{r4}
1000418a:	4288      	cmp	r0, r1
1000418c:	d32c      	bcc.n	100041e8 <.udivsi3_skip_div0_test+0x64>
1000418e:	2401      	movs	r4, #1
10004190:	0724      	lsls	r4, r4, #28
10004192:	42a1      	cmp	r1, r4
10004194:	d204      	bcs.n	100041a0 <.udivsi3_skip_div0_test+0x1c>
10004196:	4281      	cmp	r1, r0
10004198:	d202      	bcs.n	100041a0 <.udivsi3_skip_div0_test+0x1c>
1000419a:	0109      	lsls	r1, r1, #4
1000419c:	011b      	lsls	r3, r3, #4
1000419e:	e7f8      	b.n	10004192 <.udivsi3_skip_div0_test+0xe>
100041a0:	00e4      	lsls	r4, r4, #3
100041a2:	42a1      	cmp	r1, r4
100041a4:	d204      	bcs.n	100041b0 <.udivsi3_skip_div0_test+0x2c>
100041a6:	4281      	cmp	r1, r0
100041a8:	d202      	bcs.n	100041b0 <.udivsi3_skip_div0_test+0x2c>
100041aa:	0049      	lsls	r1, r1, #1
100041ac:	005b      	lsls	r3, r3, #1
100041ae:	e7f8      	b.n	100041a2 <.udivsi3_skip_div0_test+0x1e>
100041b0:	4288      	cmp	r0, r1
100041b2:	d301      	bcc.n	100041b8 <.udivsi3_skip_div0_test+0x34>
100041b4:	1a40      	subs	r0, r0, r1
100041b6:	431a      	orrs	r2, r3
100041b8:	084c      	lsrs	r4, r1, #1
100041ba:	42a0      	cmp	r0, r4
100041bc:	d302      	bcc.n	100041c4 <.udivsi3_skip_div0_test+0x40>
100041be:	1b00      	subs	r0, r0, r4
100041c0:	085c      	lsrs	r4, r3, #1
100041c2:	4322      	orrs	r2, r4
100041c4:	088c      	lsrs	r4, r1, #2
100041c6:	42a0      	cmp	r0, r4
100041c8:	d302      	bcc.n	100041d0 <.udivsi3_skip_div0_test+0x4c>
100041ca:	1b00      	subs	r0, r0, r4
100041cc:	089c      	lsrs	r4, r3, #2
100041ce:	4322      	orrs	r2, r4
100041d0:	08cc      	lsrs	r4, r1, #3
100041d2:	42a0      	cmp	r0, r4
100041d4:	d302      	bcc.n	100041dc <.udivsi3_skip_div0_test+0x58>
100041d6:	1b00      	subs	r0, r0, r4
100041d8:	08dc      	lsrs	r4, r3, #3
100041da:	4322      	orrs	r2, r4
100041dc:	2800      	cmp	r0, #0
100041de:	d003      	beq.n	100041e8 <.udivsi3_skip_div0_test+0x64>
100041e0:	091b      	lsrs	r3, r3, #4
100041e2:	d001      	beq.n	100041e8 <.udivsi3_skip_div0_test+0x64>
100041e4:	0909      	lsrs	r1, r1, #4
100041e6:	e7e3      	b.n	100041b0 <.udivsi3_skip_div0_test+0x2c>
100041e8:	1c10      	adds	r0, r2, #0
100041ea:	bc10      	pop	{r4}
100041ec:	4770      	bx	lr
100041ee:	2800      	cmp	r0, #0
100041f0:	d001      	beq.n	100041f6 <.udivsi3_skip_div0_test+0x72>
100041f2:	2000      	movs	r0, #0
100041f4:	43c0      	mvns	r0, r0
100041f6:	b407      	push	{r0, r1, r2}
100041f8:	4802      	ldr	r0, [pc, #8]	; (10004204 <.udivsi3_skip_div0_test+0x80>)
100041fa:	a102      	add	r1, pc, #8	; (adr r1, 10004204 <.udivsi3_skip_div0_test+0x80>)
100041fc:	1840      	adds	r0, r0, r1
100041fe:	9002      	str	r0, [sp, #8]
10004200:	bd03      	pop	{r0, r1, pc}
10004202:	46c0      	nop			; (mov r8, r8)
10004204:	00000019 	.word	0x00000019

10004208 <__aeabi_uidivmod>:
10004208:	2900      	cmp	r1, #0
1000420a:	d0f0      	beq.n	100041ee <.udivsi3_skip_div0_test+0x6a>
1000420c:	b503      	push	{r0, r1, lr}
1000420e:	f7ff ffb9 	bl	10004184 <.udivsi3_skip_div0_test>
10004212:	bc0e      	pop	{r1, r2, r3}
10004214:	4342      	muls	r2, r0
10004216:	1a89      	subs	r1, r1, r2
10004218:	4718      	bx	r3
1000421a:	46c0      	nop			; (mov r8, r8)

1000421c <__aeabi_idiv0>:
1000421c:	4770      	bx	lr
1000421e:	46c0      	nop			; (mov r8, r8)

10004220 <__aeabi_cfrcmple>:
10004220:	4684      	mov	ip, r0
10004222:	1c08      	adds	r0, r1, #0
10004224:	4661      	mov	r1, ip
10004226:	e7ff      	b.n	10004228 <__aeabi_cfcmpeq>

10004228 <__aeabi_cfcmpeq>:
10004228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000422a:	f000 fa17 	bl	1000465c <__lesf2>
1000422e:	2800      	cmp	r0, #0
10004230:	d401      	bmi.n	10004236 <__aeabi_cfcmpeq+0xe>
10004232:	2100      	movs	r1, #0
10004234:	42c8      	cmn	r0, r1
10004236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10004238 <__aeabi_fcmpeq>:
10004238:	b510      	push	{r4, lr}
1000423a:	f000 f99f 	bl	1000457c <__eqsf2>
1000423e:	4240      	negs	r0, r0
10004240:	3001      	adds	r0, #1
10004242:	bd10      	pop	{r4, pc}

10004244 <__aeabi_fcmplt>:
10004244:	b510      	push	{r4, lr}
10004246:	f000 fa09 	bl	1000465c <__lesf2>
1000424a:	2800      	cmp	r0, #0
1000424c:	db01      	blt.n	10004252 <__aeabi_fcmplt+0xe>
1000424e:	2000      	movs	r0, #0
10004250:	bd10      	pop	{r4, pc}
10004252:	2001      	movs	r0, #1
10004254:	bd10      	pop	{r4, pc}
10004256:	46c0      	nop			; (mov r8, r8)

10004258 <__aeabi_fcmple>:
10004258:	b510      	push	{r4, lr}
1000425a:	f000 f9ff 	bl	1000465c <__lesf2>
1000425e:	2800      	cmp	r0, #0
10004260:	dd01      	ble.n	10004266 <__aeabi_fcmple+0xe>
10004262:	2000      	movs	r0, #0
10004264:	bd10      	pop	{r4, pc}
10004266:	2001      	movs	r0, #1
10004268:	bd10      	pop	{r4, pc}
1000426a:	46c0      	nop			; (mov r8, r8)

1000426c <__aeabi_fcmpgt>:
1000426c:	b510      	push	{r4, lr}
1000426e:	f000 f9ad 	bl	100045cc <__gesf2>
10004272:	2800      	cmp	r0, #0
10004274:	dc01      	bgt.n	1000427a <__aeabi_fcmpgt+0xe>
10004276:	2000      	movs	r0, #0
10004278:	bd10      	pop	{r4, pc}
1000427a:	2001      	movs	r0, #1
1000427c:	bd10      	pop	{r4, pc}
1000427e:	46c0      	nop			; (mov r8, r8)

10004280 <__aeabi_fcmpge>:
10004280:	b510      	push	{r4, lr}
10004282:	f000 f9a3 	bl	100045cc <__gesf2>
10004286:	2800      	cmp	r0, #0
10004288:	da01      	bge.n	1000428e <__aeabi_fcmpge+0xe>
1000428a:	2000      	movs	r0, #0
1000428c:	bd10      	pop	{r4, pc}
1000428e:	2001      	movs	r0, #1
10004290:	bd10      	pop	{r4, pc}
10004292:	46c0      	nop			; (mov r8, r8)

10004294 <__aeabi_f2uiz>:
10004294:	219e      	movs	r1, #158	; 0x9e
10004296:	b510      	push	{r4, lr}
10004298:	05c9      	lsls	r1, r1, #23
1000429a:	1c04      	adds	r4, r0, #0
1000429c:	f7ff fff0 	bl	10004280 <__aeabi_fcmpge>
100042a0:	2800      	cmp	r0, #0
100042a2:	d103      	bne.n	100042ac <__aeabi_f2uiz+0x18>
100042a4:	1c20      	adds	r0, r4, #0
100042a6:	f000 fd2b 	bl	10004d00 <__aeabi_f2iz>
100042aa:	bd10      	pop	{r4, pc}
100042ac:	229e      	movs	r2, #158	; 0x9e
100042ae:	1c20      	adds	r0, r4, #0
100042b0:	05d1      	lsls	r1, r2, #23
100042b2:	f000 fb4b 	bl	1000494c <__aeabi_fsub>
100042b6:	f000 fd23 	bl	10004d00 <__aeabi_f2iz>
100042ba:	2380      	movs	r3, #128	; 0x80
100042bc:	061c      	lsls	r4, r3, #24
100042be:	1900      	adds	r0, r0, r4
100042c0:	e7f3      	b.n	100042aa <__aeabi_f2uiz+0x16>
100042c2:	46c0      	nop			; (mov r8, r8)
100042c4:	0000      	movs	r0, r0
	...

100042c8 <__aeabi_d2uiz>:
100042c8:	b538      	push	{r3, r4, r5, lr}
100042ca:	4b0e      	ldr	r3, [pc, #56]	; (10004304 <__aeabi_d2uiz+0x3c>)
100042cc:	4a0c      	ldr	r2, [pc, #48]	; (10004300 <__aeabi_d2uiz+0x38>)
100042ce:	1c04      	adds	r4, r0, #0
100042d0:	1c0d      	adds	r5, r1, #0
100042d2:	f001 ff15 	bl	10006100 <__aeabi_dcmpge>
100042d6:	2800      	cmp	r0, #0
100042d8:	d104      	bne.n	100042e4 <__aeabi_d2uiz+0x1c>
100042da:	1c20      	adds	r0, r4, #0
100042dc:	1c29      	adds	r1, r5, #0
100042de:	f001 fe53 	bl	10005f88 <__aeabi_d2iz>
100042e2:	bd38      	pop	{r3, r4, r5, pc}
100042e4:	4b07      	ldr	r3, [pc, #28]	; (10004304 <__aeabi_d2uiz+0x3c>)
100042e6:	4a06      	ldr	r2, [pc, #24]	; (10004300 <__aeabi_d2uiz+0x38>)
100042e8:	1c20      	adds	r0, r4, #0
100042ea:	1c29      	adds	r1, r5, #0
100042ec:	f001 faca 	bl	10005884 <__aeabi_dsub>
100042f0:	f001 fe4a 	bl	10005f88 <__aeabi_d2iz>
100042f4:	2380      	movs	r3, #128	; 0x80
100042f6:	0619      	lsls	r1, r3, #24
100042f8:	1840      	adds	r0, r0, r1
100042fa:	e7f2      	b.n	100042e2 <__aeabi_d2uiz+0x1a>
100042fc:	46c0      	nop			; (mov r8, r8)
100042fe:	46c0      	nop			; (mov r8, r8)
10004300:	00000000 	.word	0x00000000
10004304:	41e00000 	.word	0x41e00000

10004308 <__aeabi_fdiv>:
10004308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000430a:	465f      	mov	r7, fp
1000430c:	4656      	mov	r6, sl
1000430e:	464d      	mov	r5, r9
10004310:	4644      	mov	r4, r8
10004312:	b4f0      	push	{r4, r5, r6, r7}
10004314:	0245      	lsls	r5, r0, #9
10004316:	0044      	lsls	r4, r0, #1
10004318:	b083      	sub	sp, #12
1000431a:	1c0e      	adds	r6, r1, #0
1000431c:	0a6d      	lsrs	r5, r5, #9
1000431e:	0e24      	lsrs	r4, r4, #24
10004320:	0fc7      	lsrs	r7, r0, #31
10004322:	2c00      	cmp	r4, #0
10004324:	d107      	bne.n	10004336 <__aeabi_fdiv+0x2e>
10004326:	2d00      	cmp	r5, #0
10004328:	d000      	beq.n	1000432c <__aeabi_fdiv+0x24>
1000432a:	e091      	b.n	10004450 <__aeabi_fdiv+0x148>
1000432c:	2104      	movs	r1, #4
1000432e:	2201      	movs	r2, #1
10004330:	4688      	mov	r8, r1
10004332:	4692      	mov	sl, r2
10004334:	e009      	b.n	1000434a <__aeabi_fdiv+0x42>
10004336:	2cff      	cmp	r4, #255	; 0xff
10004338:	d055      	beq.n	100043e6 <__aeabi_fdiv+0xde>
1000433a:	2380      	movs	r3, #128	; 0x80
1000433c:	0418      	lsls	r0, r3, #16
1000433e:	2100      	movs	r1, #0
10004340:	4305      	orrs	r5, r0
10004342:	00ed      	lsls	r5, r5, #3
10004344:	3c7f      	subs	r4, #127	; 0x7f
10004346:	4688      	mov	r8, r1
10004348:	468a      	mov	sl, r1
1000434a:	1c33      	adds	r3, r6, #0
1000434c:	0058      	lsls	r0, r3, #1
1000434e:	0276      	lsls	r6, r6, #9
10004350:	0fd9      	lsrs	r1, r3, #31
10004352:	0a76      	lsrs	r6, r6, #9
10004354:	0e00      	lsrs	r0, r0, #24
10004356:	468b      	mov	fp, r1
10004358:	d14c      	bne.n	100043f4 <__aeabi_fdiv+0xec>
1000435a:	2201      	movs	r2, #1
1000435c:	4694      	mov	ip, r2
1000435e:	2e00      	cmp	r6, #0
10004360:	d000      	beq.n	10004364 <__aeabi_fdiv+0x5c>
10004362:	e081      	b.n	10004468 <__aeabi_fdiv+0x160>
10004364:	465b      	mov	r3, fp
10004366:	407b      	eors	r3, r7
10004368:	4662      	mov	r2, ip
1000436a:	4641      	mov	r1, r8
1000436c:	9301      	str	r3, [sp, #4]
1000436e:	430a      	orrs	r2, r1
10004370:	2a0f      	cmp	r2, #15
10004372:	d950      	bls.n	10004416 <__aeabi_fdiv+0x10e>
10004374:	1a20      	subs	r0, r4, r0
10004376:	0169      	lsls	r1, r5, #5
10004378:	4681      	mov	r9, r0
1000437a:	0175      	lsls	r5, r6, #5
1000437c:	42a9      	cmp	r1, r5
1000437e:	d300      	bcc.n	10004382 <__aeabi_fdiv+0x7a>
10004380:	e0b3      	b.n	100044ea <__aeabi_fdiv+0x1e2>
10004382:	2201      	movs	r2, #1
10004384:	4253      	negs	r3, r2
10004386:	4499      	add	r9, r3
10004388:	241b      	movs	r4, #27
1000438a:	2600      	movs	r6, #0
1000438c:	2701      	movs	r7, #1
1000438e:	1e62      	subs	r2, r4, #1
10004390:	1c38      	adds	r0, r7, #0
10004392:	4010      	ands	r0, r2
10004394:	004b      	lsls	r3, r1, #1
10004396:	0076      	lsls	r6, r6, #1
10004398:	2900      	cmp	r1, #0
1000439a:	da00      	bge.n	1000439e <__aeabi_fdiv+0x96>
1000439c:	e0a9      	b.n	100044f2 <__aeabi_fdiv+0x1ea>
1000439e:	429d      	cmp	r5, r3
100043a0:	d800      	bhi.n	100043a4 <__aeabi_fdiv+0x9c>
100043a2:	e0a6      	b.n	100044f2 <__aeabi_fdiv+0x1ea>
100043a4:	3c01      	subs	r4, #1
100043a6:	2c00      	cmp	r4, #0
100043a8:	dc00      	bgt.n	100043ac <__aeabi_fdiv+0xa4>
100043aa:	e0ab      	b.n	10004504 <__aeabi_fdiv+0x1fc>
100043ac:	2800      	cmp	r0, #0
100043ae:	d00c      	beq.n	100043ca <__aeabi_fdiv+0xc2>
100043b0:	1c19      	adds	r1, r3, #0
100043b2:	0076      	lsls	r6, r6, #1
100043b4:	005b      	lsls	r3, r3, #1
100043b6:	2900      	cmp	r1, #0
100043b8:	db01      	blt.n	100043be <__aeabi_fdiv+0xb6>
100043ba:	429d      	cmp	r5, r3
100043bc:	d801      	bhi.n	100043c2 <__aeabi_fdiv+0xba>
100043be:	1b5b      	subs	r3, r3, r5
100043c0:	433e      	orrs	r6, r7
100043c2:	3c01      	subs	r4, #1
100043c4:	2c00      	cmp	r4, #0
100043c6:	dc00      	bgt.n	100043ca <__aeabi_fdiv+0xc2>
100043c8:	e09c      	b.n	10004504 <__aeabi_fdiv+0x1fc>
100043ca:	0059      	lsls	r1, r3, #1
100043cc:	0072      	lsls	r2, r6, #1
100043ce:	2b00      	cmp	r3, #0
100043d0:	db01      	blt.n	100043d6 <__aeabi_fdiv+0xce>
100043d2:	428d      	cmp	r5, r1
100043d4:	d801      	bhi.n	100043da <__aeabi_fdiv+0xd2>
100043d6:	1b49      	subs	r1, r1, r5
100043d8:	433a      	orrs	r2, r7
100043da:	3c01      	subs	r4, #1
100043dc:	004b      	lsls	r3, r1, #1
100043de:	0056      	lsls	r6, r2, #1
100043e0:	2900      	cmp	r1, #0
100043e2:	daea      	bge.n	100043ba <__aeabi_fdiv+0xb2>
100043e4:	e7eb      	b.n	100043be <__aeabi_fdiv+0xb6>
100043e6:	2d00      	cmp	r5, #0
100043e8:	d12d      	bne.n	10004446 <__aeabi_fdiv+0x13e>
100043ea:	2008      	movs	r0, #8
100043ec:	2102      	movs	r1, #2
100043ee:	4680      	mov	r8, r0
100043f0:	468a      	mov	sl, r1
100043f2:	e7aa      	b.n	1000434a <__aeabi_fdiv+0x42>
100043f4:	28ff      	cmp	r0, #255	; 0xff
100043f6:	d020      	beq.n	1000443a <__aeabi_fdiv+0x132>
100043f8:	2280      	movs	r2, #128	; 0x80
100043fa:	0413      	lsls	r3, r2, #16
100043fc:	2100      	movs	r1, #0
100043fe:	431e      	orrs	r6, r3
10004400:	468c      	mov	ip, r1
10004402:	465b      	mov	r3, fp
10004404:	407b      	eors	r3, r7
10004406:	4662      	mov	r2, ip
10004408:	4641      	mov	r1, r8
1000440a:	00f6      	lsls	r6, r6, #3
1000440c:	387f      	subs	r0, #127	; 0x7f
1000440e:	9301      	str	r3, [sp, #4]
10004410:	430a      	orrs	r2, r1
10004412:	2a0f      	cmp	r2, #15
10004414:	d8ae      	bhi.n	10004374 <__aeabi_fdiv+0x6c>
10004416:	4956      	ldr	r1, [pc, #344]	; (10004570 <__aeabi_fdiv+0x268>)
10004418:	0092      	lsls	r2, r2, #2
1000441a:	588a      	ldr	r2, [r1, r2]
1000441c:	4697      	mov	pc, r2
1000441e:	9b01      	ldr	r3, [sp, #4]
10004420:	26ff      	movs	r6, #255	; 0xff
10004422:	2500      	movs	r5, #0
10004424:	05f0      	lsls	r0, r6, #23
10004426:	4328      	orrs	r0, r5
10004428:	07de      	lsls	r6, r3, #31
1000442a:	4330      	orrs	r0, r6
1000442c:	b003      	add	sp, #12
1000442e:	bc3c      	pop	{r2, r3, r4, r5}
10004430:	4690      	mov	r8, r2
10004432:	4699      	mov	r9, r3
10004434:	46a2      	mov	sl, r4
10004436:	46ab      	mov	fp, r5
10004438:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000443a:	1c33      	adds	r3, r6, #0
1000443c:	1e5a      	subs	r2, r3, #1
1000443e:	4193      	sbcs	r3, r2
10004440:	3302      	adds	r3, #2
10004442:	469c      	mov	ip, r3
10004444:	e78e      	b.n	10004364 <__aeabi_fdiv+0x5c>
10004446:	220c      	movs	r2, #12
10004448:	2303      	movs	r3, #3
1000444a:	4690      	mov	r8, r2
1000444c:	469a      	mov	sl, r3
1000444e:	e77c      	b.n	1000434a <__aeabi_fdiv+0x42>
10004450:	1c28      	adds	r0, r5, #0
10004452:	f001 fe5f 	bl	10006114 <__clzsi2>
10004456:	2276      	movs	r2, #118	; 0x76
10004458:	1f44      	subs	r4, r0, #5
1000445a:	4253      	negs	r3, r2
1000445c:	40a5      	lsls	r5, r4
1000445e:	1a1c      	subs	r4, r3, r0
10004460:	2000      	movs	r0, #0
10004462:	4680      	mov	r8, r0
10004464:	4682      	mov	sl, r0
10004466:	e770      	b.n	1000434a <__aeabi_fdiv+0x42>
10004468:	1c30      	adds	r0, r6, #0
1000446a:	f001 fe53 	bl	10006114 <__clzsi2>
1000446e:	2376      	movs	r3, #118	; 0x76
10004470:	1f41      	subs	r1, r0, #5
10004472:	408e      	lsls	r6, r1
10004474:	425a      	negs	r2, r3
10004476:	2100      	movs	r1, #0
10004478:	1a10      	subs	r0, r2, r0
1000447a:	468c      	mov	ip, r1
1000447c:	e772      	b.n	10004364 <__aeabi_fdiv+0x5c>
1000447e:	2300      	movs	r3, #0
10004480:	4d3c      	ldr	r5, [pc, #240]	; (10004574 <__aeabi_fdiv+0x26c>)
10004482:	26ff      	movs	r6, #255	; 0xff
10004484:	e7ce      	b.n	10004424 <__aeabi_fdiv+0x11c>
10004486:	465f      	mov	r7, fp
10004488:	1c35      	adds	r5, r6, #0
1000448a:	9701      	str	r7, [sp, #4]
1000448c:	4663      	mov	r3, ip
1000448e:	2b02      	cmp	r3, #2
10004490:	d0c5      	beq.n	1000441e <__aeabi_fdiv+0x116>
10004492:	2b03      	cmp	r3, #3
10004494:	d063      	beq.n	1000455e <__aeabi_fdiv+0x256>
10004496:	2b01      	cmp	r3, #1
10004498:	d043      	beq.n	10004522 <__aeabi_fdiv+0x21a>
1000449a:	4649      	mov	r1, r9
1000449c:	317f      	adds	r1, #127	; 0x7f
1000449e:	2900      	cmp	r1, #0
100044a0:	dd35      	ble.n	1000450e <__aeabi_fdiv+0x206>
100044a2:	270f      	movs	r7, #15
100044a4:	402f      	ands	r7, r5
100044a6:	2f04      	cmp	r7, #4
100044a8:	d000      	beq.n	100044ac <__aeabi_fdiv+0x1a4>
100044aa:	3504      	adds	r5, #4
100044ac:	012b      	lsls	r3, r5, #4
100044ae:	d503      	bpl.n	100044b8 <__aeabi_fdiv+0x1b0>
100044b0:	4a31      	ldr	r2, [pc, #196]	; (10004578 <__aeabi_fdiv+0x270>)
100044b2:	4649      	mov	r1, r9
100044b4:	4015      	ands	r5, r2
100044b6:	3180      	adds	r1, #128	; 0x80
100044b8:	29fe      	cmp	r1, #254	; 0xfe
100044ba:	dcb0      	bgt.n	1000441e <__aeabi_fdiv+0x116>
100044bc:	01a8      	lsls	r0, r5, #6
100044be:	0a45      	lsrs	r5, r0, #9
100044c0:	b2ce      	uxtb	r6, r1
100044c2:	9b01      	ldr	r3, [sp, #4]
100044c4:	e7ae      	b.n	10004424 <__aeabi_fdiv+0x11c>
100044c6:	2600      	movs	r6, #0
100044c8:	2500      	movs	r5, #0
100044ca:	e7ab      	b.n	10004424 <__aeabi_fdiv+0x11c>
100044cc:	2080      	movs	r0, #128	; 0x80
100044ce:	03c1      	lsls	r1, r0, #15
100044d0:	420d      	tst	r5, r1
100044d2:	d011      	beq.n	100044f8 <__aeabi_fdiv+0x1f0>
100044d4:	420e      	tst	r6, r1
100044d6:	d10f      	bne.n	100044f8 <__aeabi_fdiv+0x1f0>
100044d8:	430e      	orrs	r6, r1
100044da:	0273      	lsls	r3, r6, #9
100044dc:	0a5d      	lsrs	r5, r3, #9
100044de:	26ff      	movs	r6, #255	; 0xff
100044e0:	465b      	mov	r3, fp
100044e2:	e79f      	b.n	10004424 <__aeabi_fdiv+0x11c>
100044e4:	9701      	str	r7, [sp, #4]
100044e6:	4653      	mov	r3, sl
100044e8:	e7d1      	b.n	1000448e <__aeabi_fdiv+0x186>
100044ea:	1b49      	subs	r1, r1, r5
100044ec:	241a      	movs	r4, #26
100044ee:	2601      	movs	r6, #1
100044f0:	e74c      	b.n	1000438c <__aeabi_fdiv+0x84>
100044f2:	1b5b      	subs	r3, r3, r5
100044f4:	433e      	orrs	r6, r7
100044f6:	e755      	b.n	100043a4 <__aeabi_fdiv+0x9c>
100044f8:	430d      	orrs	r5, r1
100044fa:	026a      	lsls	r2, r5, #9
100044fc:	0a55      	lsrs	r5, r2, #9
100044fe:	1c3b      	adds	r3, r7, #0
10004500:	26ff      	movs	r6, #255	; 0xff
10004502:	e78f      	b.n	10004424 <__aeabi_fdiv+0x11c>
10004504:	1c1d      	adds	r5, r3, #0
10004506:	1e6b      	subs	r3, r5, #1
10004508:	419d      	sbcs	r5, r3
1000450a:	4335      	orrs	r5, r6
1000450c:	e7c5      	b.n	1000449a <__aeabi_fdiv+0x192>
1000450e:	247e      	movs	r4, #126	; 0x7e
10004510:	4267      	negs	r7, r4
10004512:	464a      	mov	r2, r9
10004514:	1ab9      	subs	r1, r7, r2
10004516:	291b      	cmp	r1, #27
10004518:	dd08      	ble.n	1000452c <__aeabi_fdiv+0x224>
1000451a:	9b01      	ldr	r3, [sp, #4]
1000451c:	2600      	movs	r6, #0
1000451e:	2500      	movs	r5, #0
10004520:	e780      	b.n	10004424 <__aeabi_fdiv+0x11c>
10004522:	9d01      	ldr	r5, [sp, #4]
10004524:	2600      	movs	r6, #0
10004526:	402b      	ands	r3, r5
10004528:	2500      	movs	r5, #0
1000452a:	e77b      	b.n	10004424 <__aeabi_fdiv+0x11c>
1000452c:	464e      	mov	r6, r9
1000452e:	369e      	adds	r6, #158	; 0x9e
10004530:	1c28      	adds	r0, r5, #0
10004532:	40b5      	lsls	r5, r6
10004534:	1c2b      	adds	r3, r5, #0
10004536:	1e5d      	subs	r5, r3, #1
10004538:	41ab      	sbcs	r3, r5
1000453a:	40c8      	lsrs	r0, r1
1000453c:	4303      	orrs	r3, r0
1000453e:	250f      	movs	r5, #15
10004540:	401d      	ands	r5, r3
10004542:	2d04      	cmp	r5, #4
10004544:	d000      	beq.n	10004548 <__aeabi_fdiv+0x240>
10004546:	3304      	adds	r3, #4
10004548:	015a      	lsls	r2, r3, #5
1000454a:	d503      	bpl.n	10004554 <__aeabi_fdiv+0x24c>
1000454c:	9b01      	ldr	r3, [sp, #4]
1000454e:	2601      	movs	r6, #1
10004550:	2500      	movs	r5, #0
10004552:	e767      	b.n	10004424 <__aeabi_fdiv+0x11c>
10004554:	019c      	lsls	r4, r3, #6
10004556:	0a65      	lsrs	r5, r4, #9
10004558:	9b01      	ldr	r3, [sp, #4]
1000455a:	2600      	movs	r6, #0
1000455c:	e762      	b.n	10004424 <__aeabi_fdiv+0x11c>
1000455e:	2780      	movs	r7, #128	; 0x80
10004560:	03fc      	lsls	r4, r7, #15
10004562:	4325      	orrs	r5, r4
10004564:	026e      	lsls	r6, r5, #9
10004566:	0a75      	lsrs	r5, r6, #9
10004568:	9b01      	ldr	r3, [sp, #4]
1000456a:	26ff      	movs	r6, #255	; 0xff
1000456c:	e75a      	b.n	10004424 <__aeabi_fdiv+0x11c>
1000456e:	46c0      	nop			; (mov r8, r8)
10004570:	10006428 	.word	0x10006428
10004574:	007fffff 	.word	0x007fffff
10004578:	f7ffffff 	.word	0xf7ffffff

1000457c <__eqsf2>:
1000457c:	0243      	lsls	r3, r0, #9
1000457e:	0042      	lsls	r2, r0, #1
10004580:	b570      	push	{r4, r5, r6, lr}
10004582:	0a5c      	lsrs	r4, r3, #9
10004584:	0fc6      	lsrs	r6, r0, #31
10004586:	0e13      	lsrs	r3, r2, #24
10004588:	0248      	lsls	r0, r1, #9
1000458a:	004a      	lsls	r2, r1, #1
1000458c:	0a45      	lsrs	r5, r0, #9
1000458e:	0e12      	lsrs	r2, r2, #24
10004590:	0fc9      	lsrs	r1, r1, #31
10004592:	2bff      	cmp	r3, #255	; 0xff
10004594:	d005      	beq.n	100045a2 <__eqsf2+0x26>
10004596:	2aff      	cmp	r2, #255	; 0xff
10004598:	d008      	beq.n	100045ac <__eqsf2+0x30>
1000459a:	2001      	movs	r0, #1
1000459c:	4293      	cmp	r3, r2
1000459e:	d00b      	beq.n	100045b8 <__eqsf2+0x3c>
100045a0:	bd70      	pop	{r4, r5, r6, pc}
100045a2:	2001      	movs	r0, #1
100045a4:	2c00      	cmp	r4, #0
100045a6:	d1fb      	bne.n	100045a0 <__eqsf2+0x24>
100045a8:	2aff      	cmp	r2, #255	; 0xff
100045aa:	d1f6      	bne.n	1000459a <__eqsf2+0x1e>
100045ac:	2001      	movs	r0, #1
100045ae:	2d00      	cmp	r5, #0
100045b0:	d1f6      	bne.n	100045a0 <__eqsf2+0x24>
100045b2:	2001      	movs	r0, #1
100045b4:	4293      	cmp	r3, r2
100045b6:	d1f3      	bne.n	100045a0 <__eqsf2+0x24>
100045b8:	42ac      	cmp	r4, r5
100045ba:	d1f1      	bne.n	100045a0 <__eqsf2+0x24>
100045bc:	428e      	cmp	r6, r1
100045be:	d003      	beq.n	100045c8 <__eqsf2+0x4c>
100045c0:	2b00      	cmp	r3, #0
100045c2:	d1ed      	bne.n	100045a0 <__eqsf2+0x24>
100045c4:	2c00      	cmp	r4, #0
100045c6:	d1eb      	bne.n	100045a0 <__eqsf2+0x24>
100045c8:	2000      	movs	r0, #0
100045ca:	e7e9      	b.n	100045a0 <__eqsf2+0x24>

100045cc <__gesf2>:
100045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100045ce:	0243      	lsls	r3, r0, #9
100045d0:	0042      	lsls	r2, r0, #1
100045d2:	004f      	lsls	r7, r1, #1
100045d4:	0fc6      	lsrs	r6, r0, #31
100045d6:	0248      	lsls	r0, r1, #9
100045d8:	0a5c      	lsrs	r4, r3, #9
100045da:	0a45      	lsrs	r5, r0, #9
100045dc:	0e13      	lsrs	r3, r2, #24
100045de:	0fc9      	lsrs	r1, r1, #31
100045e0:	0e3a      	lsrs	r2, r7, #24
100045e2:	2bff      	cmp	r3, #255	; 0xff
100045e4:	d026      	beq.n	10004634 <__gesf2+0x68>
100045e6:	2aff      	cmp	r2, #255	; 0xff
100045e8:	d029      	beq.n	1000463e <__gesf2+0x72>
100045ea:	2b00      	cmp	r3, #0
100045ec:	d10c      	bne.n	10004608 <__gesf2+0x3c>
100045ee:	4260      	negs	r0, r4
100045f0:	4160      	adcs	r0, r4
100045f2:	4684      	mov	ip, r0
100045f4:	2a00      	cmp	r2, #0
100045f6:	d00a      	beq.n	1000460e <__gesf2+0x42>
100045f8:	2800      	cmp	r0, #0
100045fa:	d116      	bne.n	1000462a <__gesf2+0x5e>
100045fc:	428e      	cmp	r6, r1
100045fe:	d021      	beq.n	10004644 <__gesf2+0x78>
10004600:	2e00      	cmp	r6, #0
10004602:	d114      	bne.n	1000462e <__gesf2+0x62>
10004604:	2001      	movs	r0, #1
10004606:	e014      	b.n	10004632 <__gesf2+0x66>
10004608:	2a00      	cmp	r2, #0
1000460a:	d1f7      	bne.n	100045fc <__gesf2+0x30>
1000460c:	4694      	mov	ip, r2
1000460e:	426f      	negs	r7, r5
10004610:	416f      	adcs	r7, r5
10004612:	4660      	mov	r0, ip
10004614:	2800      	cmp	r0, #0
10004616:	d105      	bne.n	10004624 <__gesf2+0x58>
10004618:	2f00      	cmp	r7, #0
1000461a:	d0ef      	beq.n	100045fc <__gesf2+0x30>
1000461c:	2001      	movs	r0, #1
1000461e:	2e00      	cmp	r6, #0
10004620:	d007      	beq.n	10004632 <__gesf2+0x66>
10004622:	e004      	b.n	1000462e <__gesf2+0x62>
10004624:	2000      	movs	r0, #0
10004626:	2f00      	cmp	r7, #0
10004628:	d103      	bne.n	10004632 <__gesf2+0x66>
1000462a:	2900      	cmp	r1, #0
1000462c:	d1ea      	bne.n	10004604 <__gesf2+0x38>
1000462e:	2101      	movs	r1, #1
10004630:	4248      	negs	r0, r1
10004632:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004634:	2c00      	cmp	r4, #0
10004636:	d0d6      	beq.n	100045e6 <__gesf2+0x1a>
10004638:	2202      	movs	r2, #2
1000463a:	4250      	negs	r0, r2
1000463c:	e7f9      	b.n	10004632 <__gesf2+0x66>
1000463e:	2d00      	cmp	r5, #0
10004640:	d0d3      	beq.n	100045ea <__gesf2+0x1e>
10004642:	e7f9      	b.n	10004638 <__gesf2+0x6c>
10004644:	4293      	cmp	r3, r2
10004646:	dcdb      	bgt.n	10004600 <__gesf2+0x34>
10004648:	db04      	blt.n	10004654 <__gesf2+0x88>
1000464a:	42ac      	cmp	r4, r5
1000464c:	d8d8      	bhi.n	10004600 <__gesf2+0x34>
1000464e:	2000      	movs	r0, #0
10004650:	42ac      	cmp	r4, r5
10004652:	d2ee      	bcs.n	10004632 <__gesf2+0x66>
10004654:	2e00      	cmp	r6, #0
10004656:	d0ea      	beq.n	1000462e <__gesf2+0x62>
10004658:	2001      	movs	r0, #1
1000465a:	e7ea      	b.n	10004632 <__gesf2+0x66>

1000465c <__lesf2>:
1000465c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000465e:	0243      	lsls	r3, r0, #9
10004660:	0042      	lsls	r2, r0, #1
10004662:	004f      	lsls	r7, r1, #1
10004664:	0fc6      	lsrs	r6, r0, #31
10004666:	0248      	lsls	r0, r1, #9
10004668:	0a5c      	lsrs	r4, r3, #9
1000466a:	0a45      	lsrs	r5, r0, #9
1000466c:	0e13      	lsrs	r3, r2, #24
1000466e:	0fc9      	lsrs	r1, r1, #31
10004670:	0e3a      	lsrs	r2, r7, #24
10004672:	2bff      	cmp	r3, #255	; 0xff
10004674:	d026      	beq.n	100046c4 <__lesf2+0x68>
10004676:	2aff      	cmp	r2, #255	; 0xff
10004678:	d028      	beq.n	100046cc <__lesf2+0x70>
1000467a:	2b00      	cmp	r3, #0
1000467c:	d00f      	beq.n	1000469e <__lesf2+0x42>
1000467e:	2a00      	cmp	r2, #0
10004680:	d114      	bne.n	100046ac <__lesf2+0x50>
10004682:	4694      	mov	ip, r2
10004684:	426f      	negs	r7, r5
10004686:	416f      	adcs	r7, r5
10004688:	4660      	mov	r0, ip
1000468a:	2800      	cmp	r0, #0
1000468c:	d014      	beq.n	100046b8 <__lesf2+0x5c>
1000468e:	2000      	movs	r0, #0
10004690:	2f00      	cmp	r7, #0
10004692:	d103      	bne.n	1000469c <__lesf2+0x40>
10004694:	2900      	cmp	r1, #0
10004696:	d10d      	bne.n	100046b4 <__lesf2+0x58>
10004698:	2101      	movs	r1, #1
1000469a:	4248      	negs	r0, r1
1000469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000469e:	4260      	negs	r0, r4
100046a0:	4160      	adcs	r0, r4
100046a2:	4684      	mov	ip, r0
100046a4:	2a00      	cmp	r2, #0
100046a6:	d0ed      	beq.n	10004684 <__lesf2+0x28>
100046a8:	2800      	cmp	r0, #0
100046aa:	d1f3      	bne.n	10004694 <__lesf2+0x38>
100046ac:	428e      	cmp	r6, r1
100046ae:	d011      	beq.n	100046d4 <__lesf2+0x78>
100046b0:	2e00      	cmp	r6, #0
100046b2:	d1f1      	bne.n	10004698 <__lesf2+0x3c>
100046b4:	2001      	movs	r0, #1
100046b6:	e7f1      	b.n	1000469c <__lesf2+0x40>
100046b8:	2f00      	cmp	r7, #0
100046ba:	d0f7      	beq.n	100046ac <__lesf2+0x50>
100046bc:	2001      	movs	r0, #1
100046be:	2e00      	cmp	r6, #0
100046c0:	d0ec      	beq.n	1000469c <__lesf2+0x40>
100046c2:	e7e9      	b.n	10004698 <__lesf2+0x3c>
100046c4:	2002      	movs	r0, #2
100046c6:	2c00      	cmp	r4, #0
100046c8:	d1e8      	bne.n	1000469c <__lesf2+0x40>
100046ca:	e7d4      	b.n	10004676 <__lesf2+0x1a>
100046cc:	2002      	movs	r0, #2
100046ce:	2d00      	cmp	r5, #0
100046d0:	d1e4      	bne.n	1000469c <__lesf2+0x40>
100046d2:	e7d2      	b.n	1000467a <__lesf2+0x1e>
100046d4:	4293      	cmp	r3, r2
100046d6:	dceb      	bgt.n	100046b0 <__lesf2+0x54>
100046d8:	db04      	blt.n	100046e4 <__lesf2+0x88>
100046da:	42ac      	cmp	r4, r5
100046dc:	d8e8      	bhi.n	100046b0 <__lesf2+0x54>
100046de:	2000      	movs	r0, #0
100046e0:	42ac      	cmp	r4, r5
100046e2:	d2db      	bcs.n	1000469c <__lesf2+0x40>
100046e4:	2e00      	cmp	r6, #0
100046e6:	d0d7      	beq.n	10004698 <__lesf2+0x3c>
100046e8:	2001      	movs	r0, #1
100046ea:	e7d7      	b.n	1000469c <__lesf2+0x40>

100046ec <__aeabi_fmul>:
100046ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100046ee:	465f      	mov	r7, fp
100046f0:	4656      	mov	r6, sl
100046f2:	464d      	mov	r5, r9
100046f4:	4644      	mov	r4, r8
100046f6:	b4f0      	push	{r4, r5, r6, r7}
100046f8:	0245      	lsls	r5, r0, #9
100046fa:	0046      	lsls	r6, r0, #1
100046fc:	b083      	sub	sp, #12
100046fe:	1c0f      	adds	r7, r1, #0
10004700:	0a6d      	lsrs	r5, r5, #9
10004702:	0e36      	lsrs	r6, r6, #24
10004704:	0fc4      	lsrs	r4, r0, #31
10004706:	2e00      	cmp	r6, #0
10004708:	d106      	bne.n	10004718 <__aeabi_fmul+0x2c>
1000470a:	2d00      	cmp	r5, #0
1000470c:	d170      	bne.n	100047f0 <__aeabi_fmul+0x104>
1000470e:	2104      	movs	r1, #4
10004710:	2201      	movs	r2, #1
10004712:	4688      	mov	r8, r1
10004714:	4692      	mov	sl, r2
10004716:	e009      	b.n	1000472c <__aeabi_fmul+0x40>
10004718:	2eff      	cmp	r6, #255	; 0xff
1000471a:	d043      	beq.n	100047a4 <__aeabi_fmul+0xb8>
1000471c:	2380      	movs	r3, #128	; 0x80
1000471e:	0418      	lsls	r0, r3, #16
10004720:	2100      	movs	r1, #0
10004722:	4305      	orrs	r5, r0
10004724:	00ed      	lsls	r5, r5, #3
10004726:	3e7f      	subs	r6, #127	; 0x7f
10004728:	4688      	mov	r8, r1
1000472a:	468a      	mov	sl, r1
1000472c:	1c38      	adds	r0, r7, #0
1000472e:	0043      	lsls	r3, r0, #1
10004730:	027f      	lsls	r7, r7, #9
10004732:	0fc1      	lsrs	r1, r0, #31
10004734:	0a7f      	lsrs	r7, r7, #9
10004736:	0e1b      	lsrs	r3, r3, #24
10004738:	468b      	mov	fp, r1
1000473a:	d13a      	bne.n	100047b2 <__aeabi_fmul+0xc6>
1000473c:	2101      	movs	r1, #1
1000473e:	2f00      	cmp	r7, #0
10004740:	d162      	bne.n	10004808 <__aeabi_fmul+0x11c>
10004742:	4658      	mov	r0, fp
10004744:	4060      	eors	r0, r4
10004746:	4642      	mov	r2, r8
10004748:	9001      	str	r0, [sp, #4]
1000474a:	430a      	orrs	r2, r1
1000474c:	2a0f      	cmp	r2, #15
1000474e:	d93f      	bls.n	100047d0 <__aeabi_fmul+0xe4>
10004750:	042c      	lsls	r4, r5, #16
10004752:	18f0      	adds	r0, r6, r3
10004754:	0c26      	lsrs	r6, r4, #16
10004756:	043b      	lsls	r3, r7, #16
10004758:	0c1a      	lsrs	r2, r3, #16
1000475a:	1c31      	adds	r1, r6, #0
1000475c:	4351      	muls	r1, r2
1000475e:	0c3f      	lsrs	r7, r7, #16
10004760:	0c2d      	lsrs	r5, r5, #16
10004762:	437e      	muls	r6, r7
10004764:	436a      	muls	r2, r5
10004766:	4681      	mov	r9, r0
10004768:	0c08      	lsrs	r0, r1, #16
1000476a:	1836      	adds	r6, r6, r0
1000476c:	1c2c      	adds	r4, r5, #0
1000476e:	18b3      	adds	r3, r6, r2
10004770:	437c      	muls	r4, r7
10004772:	429a      	cmp	r2, r3
10004774:	d900      	bls.n	10004778 <__aeabi_fmul+0x8c>
10004776:	e09a      	b.n	100048ae <__aeabi_fmul+0x1c2>
10004778:	0409      	lsls	r1, r1, #16
1000477a:	041d      	lsls	r5, r3, #16
1000477c:	0c08      	lsrs	r0, r1, #16
1000477e:	182e      	adds	r6, r5, r0
10004780:	01b5      	lsls	r5, r6, #6
10004782:	0c1b      	lsrs	r3, r3, #16
10004784:	1e69      	subs	r1, r5, #1
10004786:	418d      	sbcs	r5, r1
10004788:	0eb2      	lsrs	r2, r6, #26
1000478a:	18e7      	adds	r7, r4, r3
1000478c:	4315      	orrs	r5, r2
1000478e:	01bc      	lsls	r4, r7, #6
10004790:	4325      	orrs	r5, r4
10004792:	012b      	lsls	r3, r5, #4
10004794:	d54b      	bpl.n	1000482e <__aeabi_fmul+0x142>
10004796:	2001      	movs	r0, #1
10004798:	4028      	ands	r0, r5
1000479a:	2101      	movs	r1, #1
1000479c:	086d      	lsrs	r5, r5, #1
1000479e:	4489      	add	r9, r1
100047a0:	4305      	orrs	r5, r0
100047a2:	e044      	b.n	1000482e <__aeabi_fmul+0x142>
100047a4:	2d00      	cmp	r5, #0
100047a6:	d11e      	bne.n	100047e6 <__aeabi_fmul+0xfa>
100047a8:	2008      	movs	r0, #8
100047aa:	2102      	movs	r1, #2
100047ac:	4680      	mov	r8, r0
100047ae:	468a      	mov	sl, r1
100047b0:	e7bc      	b.n	1000472c <__aeabi_fmul+0x40>
100047b2:	2bff      	cmp	r3, #255	; 0xff
100047b4:	d012      	beq.n	100047dc <__aeabi_fmul+0xf0>
100047b6:	2280      	movs	r2, #128	; 0x80
100047b8:	0410      	lsls	r0, r2, #16
100047ba:	4307      	orrs	r7, r0
100047bc:	4658      	mov	r0, fp
100047be:	2100      	movs	r1, #0
100047c0:	4060      	eors	r0, r4
100047c2:	4642      	mov	r2, r8
100047c4:	00ff      	lsls	r7, r7, #3
100047c6:	3b7f      	subs	r3, #127	; 0x7f
100047c8:	9001      	str	r0, [sp, #4]
100047ca:	430a      	orrs	r2, r1
100047cc:	2a0f      	cmp	r2, #15
100047ce:	d8bf      	bhi.n	10004750 <__aeabi_fmul+0x64>
100047d0:	0090      	lsls	r0, r2, #2
100047d2:	4a5b      	ldr	r2, [pc, #364]	; (10004940 <__aeabi_fmul+0x254>)
100047d4:	4684      	mov	ip, r0
100047d6:	4462      	add	r2, ip
100047d8:	6810      	ldr	r0, [r2, #0]
100047da:	4687      	mov	pc, r0
100047dc:	1c39      	adds	r1, r7, #0
100047de:	1e4a      	subs	r2, r1, #1
100047e0:	4191      	sbcs	r1, r2
100047e2:	3102      	adds	r1, #2
100047e4:	e7ad      	b.n	10004742 <__aeabi_fmul+0x56>
100047e6:	220c      	movs	r2, #12
100047e8:	2303      	movs	r3, #3
100047ea:	4690      	mov	r8, r2
100047ec:	469a      	mov	sl, r3
100047ee:	e79d      	b.n	1000472c <__aeabi_fmul+0x40>
100047f0:	1c28      	adds	r0, r5, #0
100047f2:	f001 fc8f 	bl	10006114 <__clzsi2>
100047f6:	2276      	movs	r2, #118	; 0x76
100047f8:	1f46      	subs	r6, r0, #5
100047fa:	4253      	negs	r3, r2
100047fc:	40b5      	lsls	r5, r6
100047fe:	1a1e      	subs	r6, r3, r0
10004800:	2000      	movs	r0, #0
10004802:	4680      	mov	r8, r0
10004804:	4682      	mov	sl, r0
10004806:	e791      	b.n	1000472c <__aeabi_fmul+0x40>
10004808:	1c38      	adds	r0, r7, #0
1000480a:	f001 fc83 	bl	10006114 <__clzsi2>
1000480e:	2176      	movs	r1, #118	; 0x76
10004810:	1f43      	subs	r3, r0, #5
10004812:	424a      	negs	r2, r1
10004814:	409f      	lsls	r7, r3
10004816:	2100      	movs	r1, #0
10004818:	1a13      	subs	r3, r2, r0
1000481a:	e792      	b.n	10004742 <__aeabi_fmul+0x56>
1000481c:	9401      	str	r4, [sp, #4]
1000481e:	4651      	mov	r1, sl
10004820:	2902      	cmp	r1, #2
10004822:	d02c      	beq.n	1000487e <__aeabi_fmul+0x192>
10004824:	2903      	cmp	r1, #3
10004826:	d100      	bne.n	1000482a <__aeabi_fmul+0x13e>
10004828:	e080      	b.n	1000492c <__aeabi_fmul+0x240>
1000482a:	2901      	cmp	r1, #1
1000482c:	d048      	beq.n	100048c0 <__aeabi_fmul+0x1d4>
1000482e:	464e      	mov	r6, r9
10004830:	367f      	adds	r6, #127	; 0x7f
10004832:	2e00      	cmp	r6, #0
10004834:	dd51      	ble.n	100048da <__aeabi_fmul+0x1ee>
10004836:	240f      	movs	r4, #15
10004838:	402c      	ands	r4, r5
1000483a:	2c04      	cmp	r4, #4
1000483c:	d000      	beq.n	10004840 <__aeabi_fmul+0x154>
1000483e:	3504      	adds	r5, #4
10004840:	012a      	lsls	r2, r5, #4
10004842:	d503      	bpl.n	1000484c <__aeabi_fmul+0x160>
10004844:	493f      	ldr	r1, [pc, #252]	; (10004944 <__aeabi_fmul+0x258>)
10004846:	464e      	mov	r6, r9
10004848:	400d      	ands	r5, r1
1000484a:	3680      	adds	r6, #128	; 0x80
1000484c:	2efe      	cmp	r6, #254	; 0xfe
1000484e:	dd3d      	ble.n	100048cc <__aeabi_fmul+0x1e0>
10004850:	9b01      	ldr	r3, [sp, #4]
10004852:	2401      	movs	r4, #1
10004854:	401c      	ands	r4, r3
10004856:	21ff      	movs	r1, #255	; 0xff
10004858:	2500      	movs	r5, #0
1000485a:	05c8      	lsls	r0, r1, #23
1000485c:	07e2      	lsls	r2, r4, #31
1000485e:	4328      	orrs	r0, r5
10004860:	4310      	orrs	r0, r2
10004862:	b003      	add	sp, #12
10004864:	bc3c      	pop	{r2, r3, r4, r5}
10004866:	4690      	mov	r8, r2
10004868:	4699      	mov	r9, r3
1000486a:	46a2      	mov	sl, r4
1000486c:	46ab      	mov	fp, r5
1000486e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004870:	2400      	movs	r4, #0
10004872:	4d35      	ldr	r5, [pc, #212]	; (10004948 <__aeabi_fmul+0x25c>)
10004874:	21ff      	movs	r1, #255	; 0xff
10004876:	e7f0      	b.n	1000485a <__aeabi_fmul+0x16e>
10004878:	4651      	mov	r1, sl
1000487a:	2902      	cmp	r1, #2
1000487c:	d1d2      	bne.n	10004824 <__aeabi_fmul+0x138>
1000487e:	9d01      	ldr	r5, [sp, #4]
10004880:	2401      	movs	r4, #1
10004882:	402c      	ands	r4, r5
10004884:	21ff      	movs	r1, #255	; 0xff
10004886:	2500      	movs	r5, #0
10004888:	e7e7      	b.n	1000485a <__aeabi_fmul+0x16e>
1000488a:	465e      	mov	r6, fp
1000488c:	1c3d      	adds	r5, r7, #0
1000488e:	9601      	str	r6, [sp, #4]
10004890:	e7c6      	b.n	10004820 <__aeabi_fmul+0x134>
10004892:	1c3d      	adds	r5, r7, #0
10004894:	e7c4      	b.n	10004820 <__aeabi_fmul+0x134>
10004896:	2680      	movs	r6, #128	; 0x80
10004898:	03f3      	lsls	r3, r6, #15
1000489a:	421d      	tst	r5, r3
1000489c:	d00b      	beq.n	100048b6 <__aeabi_fmul+0x1ca>
1000489e:	421f      	tst	r7, r3
100048a0:	d109      	bne.n	100048b6 <__aeabi_fmul+0x1ca>
100048a2:	431f      	orrs	r7, r3
100048a4:	027a      	lsls	r2, r7, #9
100048a6:	0a55      	lsrs	r5, r2, #9
100048a8:	465c      	mov	r4, fp
100048aa:	21ff      	movs	r1, #255	; 0xff
100048ac:	e7d5      	b.n	1000485a <__aeabi_fmul+0x16e>
100048ae:	2280      	movs	r2, #128	; 0x80
100048b0:	0257      	lsls	r7, r2, #9
100048b2:	19e4      	adds	r4, r4, r7
100048b4:	e760      	b.n	10004778 <__aeabi_fmul+0x8c>
100048b6:	431d      	orrs	r5, r3
100048b8:	026f      	lsls	r7, r5, #9
100048ba:	0a7d      	lsrs	r5, r7, #9
100048bc:	21ff      	movs	r1, #255	; 0xff
100048be:	e7cc      	b.n	1000485a <__aeabi_fmul+0x16e>
100048c0:	9b01      	ldr	r3, [sp, #4]
100048c2:	2500      	movs	r5, #0
100048c4:	4019      	ands	r1, r3
100048c6:	b2cc      	uxtb	r4, r1
100048c8:	2100      	movs	r1, #0
100048ca:	e7c6      	b.n	1000485a <__aeabi_fmul+0x16e>
100048cc:	9801      	ldr	r0, [sp, #4]
100048ce:	01ad      	lsls	r5, r5, #6
100048d0:	2401      	movs	r4, #1
100048d2:	0a6d      	lsrs	r5, r5, #9
100048d4:	b2f1      	uxtb	r1, r6
100048d6:	4004      	ands	r4, r0
100048d8:	e7bf      	b.n	1000485a <__aeabi_fmul+0x16e>
100048da:	267e      	movs	r6, #126	; 0x7e
100048dc:	4273      	negs	r3, r6
100048de:	464a      	mov	r2, r9
100048e0:	1a9f      	subs	r7, r3, r2
100048e2:	2f1b      	cmp	r7, #27
100048e4:	dd05      	ble.n	100048f2 <__aeabi_fmul+0x206>
100048e6:	9d01      	ldr	r5, [sp, #4]
100048e8:	2401      	movs	r4, #1
100048ea:	402c      	ands	r4, r5
100048ec:	2100      	movs	r1, #0
100048ee:	2500      	movs	r5, #0
100048f0:	e7b3      	b.n	1000485a <__aeabi_fmul+0x16e>
100048f2:	4649      	mov	r1, r9
100048f4:	319e      	adds	r1, #158	; 0x9e
100048f6:	1c2c      	adds	r4, r5, #0
100048f8:	408d      	lsls	r5, r1
100048fa:	1c2e      	adds	r6, r5, #0
100048fc:	40fc      	lsrs	r4, r7
100048fe:	1e75      	subs	r5, r6, #1
10004900:	41ae      	sbcs	r6, r5
10004902:	4326      	orrs	r6, r4
10004904:	200f      	movs	r0, #15
10004906:	4030      	ands	r0, r6
10004908:	2804      	cmp	r0, #4
1000490a:	d000      	beq.n	1000490e <__aeabi_fmul+0x222>
1000490c:	3604      	adds	r6, #4
1000490e:	0170      	lsls	r0, r6, #5
10004910:	d505      	bpl.n	1000491e <__aeabi_fmul+0x232>
10004912:	9f01      	ldr	r7, [sp, #4]
10004914:	2401      	movs	r4, #1
10004916:	403c      	ands	r4, r7
10004918:	2101      	movs	r1, #1
1000491a:	2500      	movs	r5, #0
1000491c:	e79d      	b.n	1000485a <__aeabi_fmul+0x16e>
1000491e:	9a01      	ldr	r2, [sp, #4]
10004920:	01b3      	lsls	r3, r6, #6
10004922:	2401      	movs	r4, #1
10004924:	0a5d      	lsrs	r5, r3, #9
10004926:	4014      	ands	r4, r2
10004928:	2100      	movs	r1, #0
1000492a:	e796      	b.n	1000485a <__aeabi_fmul+0x16e>
1000492c:	2280      	movs	r2, #128	; 0x80
1000492e:	03d0      	lsls	r0, r2, #15
10004930:	4305      	orrs	r5, r0
10004932:	026c      	lsls	r4, r5, #9
10004934:	9901      	ldr	r1, [sp, #4]
10004936:	0a65      	lsrs	r5, r4, #9
10004938:	2401      	movs	r4, #1
1000493a:	400c      	ands	r4, r1
1000493c:	21ff      	movs	r1, #255	; 0xff
1000493e:	e78c      	b.n	1000485a <__aeabi_fmul+0x16e>
10004940:	10006468 	.word	0x10006468
10004944:	f7ffffff 	.word	0xf7ffffff
10004948:	007fffff 	.word	0x007fffff

1000494c <__aeabi_fsub>:
1000494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000494e:	0243      	lsls	r3, r0, #9
10004950:	0045      	lsls	r5, r0, #1
10004952:	024f      	lsls	r7, r1, #9
10004954:	004c      	lsls	r4, r1, #1
10004956:	0fc2      	lsrs	r2, r0, #31
10004958:	0998      	lsrs	r0, r3, #6
1000495a:	4684      	mov	ip, r0
1000495c:	0e2d      	lsrs	r5, r5, #24
1000495e:	0e20      	lsrs	r0, r4, #24
10004960:	0fc9      	lsrs	r1, r1, #31
10004962:	09bf      	lsrs	r7, r7, #6
10004964:	28ff      	cmp	r0, #255	; 0xff
10004966:	d054      	beq.n	10004a12 <__aeabi_fsub+0xc6>
10004968:	2601      	movs	r6, #1
1000496a:	4071      	eors	r1, r6
1000496c:	428a      	cmp	r2, r1
1000496e:	d03b      	beq.n	100049e8 <__aeabi_fsub+0x9c>
10004970:	1a2c      	subs	r4, r5, r0
10004972:	2c00      	cmp	r4, #0
10004974:	dc00      	bgt.n	10004978 <__aeabi_fsub+0x2c>
10004976:	e089      	b.n	10004a8c <__aeabi_fsub+0x140>
10004978:	2800      	cmp	r0, #0
1000497a:	d125      	bne.n	100049c8 <__aeabi_fsub+0x7c>
1000497c:	2f00      	cmp	r7, #0
1000497e:	d14b      	bne.n	10004a18 <__aeabi_fsub+0xcc>
10004980:	1c6e      	adds	r6, r5, #1
10004982:	1c2c      	adds	r4, r5, #0
10004984:	4663      	mov	r3, ip
10004986:	1c15      	adds	r5, r2, #0
10004988:	220f      	movs	r2, #15
1000498a:	401a      	ands	r2, r3
1000498c:	2a04      	cmp	r2, #4
1000498e:	d000      	beq.n	10004992 <__aeabi_fsub+0x46>
10004990:	3304      	adds	r3, #4
10004992:	2780      	movs	r7, #128	; 0x80
10004994:	04f9      	lsls	r1, r7, #19
10004996:	2201      	movs	r2, #1
10004998:	4019      	ands	r1, r3
1000499a:	402a      	ands	r2, r5
1000499c:	2900      	cmp	r1, #0
1000499e:	d006      	beq.n	100049ae <__aeabi_fsub+0x62>
100049a0:	2eff      	cmp	r6, #255	; 0xff
100049a2:	d100      	bne.n	100049a6 <__aeabi_fsub+0x5a>
100049a4:	e081      	b.n	10004aaa <__aeabi_fsub+0x15e>
100049a6:	4db1      	ldr	r5, [pc, #708]	; (10004c6c <__aeabi_fsub+0x320>)
100049a8:	1c34      	adds	r4, r6, #0
100049aa:	402b      	ands	r3, r5
100049ac:	3601      	adds	r6, #1
100049ae:	b2f6      	uxtb	r6, r6
100049b0:	08dd      	lsrs	r5, r3, #3
100049b2:	2e01      	cmp	r6, #1
100049b4:	dd62      	ble.n	10004a7c <__aeabi_fsub+0x130>
100049b6:	026b      	lsls	r3, r5, #9
100049b8:	0a5d      	lsrs	r5, r3, #9
100049ba:	b2e4      	uxtb	r4, r4
100049bc:	05e4      	lsls	r4, r4, #23
100049be:	4325      	orrs	r5, r4
100049c0:	1c28      	adds	r0, r5, #0
100049c2:	07d2      	lsls	r2, r2, #31
100049c4:	4310      	orrs	r0, r2
100049c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100049c8:	2dff      	cmp	r5, #255	; 0xff
100049ca:	d051      	beq.n	10004a70 <__aeabi_fsub+0x124>
100049cc:	2180      	movs	r1, #128	; 0x80
100049ce:	04cb      	lsls	r3, r1, #19
100049d0:	431f      	orrs	r7, r3
100049d2:	2601      	movs	r6, #1
100049d4:	2c1b      	cmp	r4, #27
100049d6:	dd70      	ble.n	10004aba <__aeabi_fsub+0x16e>
100049d8:	4667      	mov	r7, ip
100049da:	1c2c      	adds	r4, r5, #0
100049dc:	1bbb      	subs	r3, r7, r6
100049de:	1c15      	adds	r5, r2, #0
100049e0:	0158      	lsls	r0, r3, #5
100049e2:	d422      	bmi.n	10004a2a <__aeabi_fsub+0xde>
100049e4:	1c66      	adds	r6, r4, #1
100049e6:	e7cf      	b.n	10004988 <__aeabi_fsub+0x3c>
100049e8:	1a2e      	subs	r6, r5, r0
100049ea:	2e00      	cmp	r6, #0
100049ec:	dd76      	ble.n	10004adc <__aeabi_fsub+0x190>
100049ee:	2800      	cmp	r0, #0
100049f0:	d032      	beq.n	10004a58 <__aeabi_fsub+0x10c>
100049f2:	2dff      	cmp	r5, #255	; 0xff
100049f4:	d03c      	beq.n	10004a70 <__aeabi_fsub+0x124>
100049f6:	2480      	movs	r4, #128	; 0x80
100049f8:	04e1      	lsls	r1, r4, #19
100049fa:	430f      	orrs	r7, r1
100049fc:	2301      	movs	r3, #1
100049fe:	2e1b      	cmp	r6, #27
10004a00:	dc00      	bgt.n	10004a04 <__aeabi_fsub+0xb8>
10004a02:	e0d1      	b.n	10004ba8 <__aeabi_fsub+0x25c>
10004a04:	4463      	add	r3, ip
10004a06:	1c2c      	adds	r4, r5, #0
10004a08:	0158      	lsls	r0, r3, #5
10004a0a:	d47a      	bmi.n	10004b02 <__aeabi_fsub+0x1b6>
10004a0c:	1c66      	adds	r6, r4, #1
10004a0e:	1c15      	adds	r5, r2, #0
10004a10:	e7ba      	b.n	10004988 <__aeabi_fsub+0x3c>
10004a12:	2f00      	cmp	r7, #0
10004a14:	d1aa      	bne.n	1000496c <__aeabi_fsub+0x20>
10004a16:	e7a7      	b.n	10004968 <__aeabi_fsub+0x1c>
10004a18:	3c01      	subs	r4, #1
10004a1a:	2c00      	cmp	r4, #0
10004a1c:	d16d      	bne.n	10004afa <__aeabi_fsub+0x1ae>
10004a1e:	4663      	mov	r3, ip
10004a20:	1c2c      	adds	r4, r5, #0
10004a22:	1bdb      	subs	r3, r3, r7
10004a24:	1c15      	adds	r5, r2, #0
10004a26:	0158      	lsls	r0, r3, #5
10004a28:	d5dc      	bpl.n	100049e4 <__aeabi_fsub+0x98>
10004a2a:	019a      	lsls	r2, r3, #6
10004a2c:	0996      	lsrs	r6, r2, #6
10004a2e:	1c30      	adds	r0, r6, #0
10004a30:	f001 fb70 	bl	10006114 <__clzsi2>
10004a34:	3805      	subs	r0, #5
10004a36:	4086      	lsls	r6, r0
10004a38:	4284      	cmp	r4, r0
10004a3a:	dc39      	bgt.n	10004ab0 <__aeabi_fsub+0x164>
10004a3c:	1b00      	subs	r0, r0, r4
10004a3e:	231f      	movs	r3, #31
10004a40:	1a1a      	subs	r2, r3, r0
10004a42:	1c33      	adds	r3, r6, #0
10004a44:	1c31      	adds	r1, r6, #0
10004a46:	1c44      	adds	r4, r0, #1
10004a48:	4093      	lsls	r3, r2
10004a4a:	40e1      	lsrs	r1, r4
10004a4c:	1e5e      	subs	r6, r3, #1
10004a4e:	41b3      	sbcs	r3, r6
10004a50:	430b      	orrs	r3, r1
10004a52:	2601      	movs	r6, #1
10004a54:	2400      	movs	r4, #0
10004a56:	e797      	b.n	10004988 <__aeabi_fsub+0x3c>
10004a58:	2f00      	cmp	r7, #0
10004a5a:	d100      	bne.n	10004a5e <__aeabi_fsub+0x112>
10004a5c:	e790      	b.n	10004980 <__aeabi_fsub+0x34>
10004a5e:	3e01      	subs	r6, #1
10004a60:	2e00      	cmp	r6, #0
10004a62:	d103      	bne.n	10004a6c <__aeabi_fsub+0x120>
10004a64:	4664      	mov	r4, ip
10004a66:	193b      	adds	r3, r7, r4
10004a68:	1c2c      	adds	r4, r5, #0
10004a6a:	e7cd      	b.n	10004a08 <__aeabi_fsub+0xbc>
10004a6c:	2dff      	cmp	r5, #255	; 0xff
10004a6e:	d1c5      	bne.n	100049fc <__aeabi_fsub+0xb0>
10004a70:	1c15      	adds	r5, r2, #0
10004a72:	2280      	movs	r2, #128	; 0x80
10004a74:	4663      	mov	r3, ip
10004a76:	0056      	lsls	r6, r2, #1
10004a78:	24ff      	movs	r4, #255	; 0xff
10004a7a:	e785      	b.n	10004988 <__aeabi_fsub+0x3c>
10004a7c:	2d00      	cmp	r5, #0
10004a7e:	d09c      	beq.n	100049ba <__aeabi_fsub+0x6e>
10004a80:	2c00      	cmp	r4, #0
10004a82:	d028      	beq.n	10004ad6 <__aeabi_fsub+0x18a>
10004a84:	2080      	movs	r0, #128	; 0x80
10004a86:	03c7      	lsls	r7, r0, #15
10004a88:	433d      	orrs	r5, r7
10004a8a:	e794      	b.n	100049b6 <__aeabi_fsub+0x6a>
10004a8c:	2c00      	cmp	r4, #0
10004a8e:	d145      	bne.n	10004b1c <__aeabi_fsub+0x1d0>
10004a90:	1c6b      	adds	r3, r5, #1
10004a92:	b2d8      	uxtb	r0, r3
10004a94:	2801      	cmp	r0, #1
10004a96:	dc00      	bgt.n	10004a9a <__aeabi_fsub+0x14e>
10004a98:	e090      	b.n	10004bbc <__aeabi_fsub+0x270>
10004a9a:	4664      	mov	r4, ip
10004a9c:	1be6      	subs	r6, r4, r7
10004a9e:	0173      	lsls	r3, r6, #5
10004aa0:	d557      	bpl.n	10004b52 <__aeabi_fsub+0x206>
10004aa2:	1b3e      	subs	r6, r7, r4
10004aa4:	1c2c      	adds	r4, r5, #0
10004aa6:	1c0d      	adds	r5, r1, #0
10004aa8:	e7c1      	b.n	10004a2e <__aeabi_fsub+0xe2>
10004aaa:	24ff      	movs	r4, #255	; 0xff
10004aac:	2500      	movs	r5, #0
10004aae:	e785      	b.n	100049bc <__aeabi_fsub+0x70>
10004ab0:	4b6e      	ldr	r3, [pc, #440]	; (10004c6c <__aeabi_fsub+0x320>)
10004ab2:	1a24      	subs	r4, r4, r0
10004ab4:	4033      	ands	r3, r6
10004ab6:	1c66      	adds	r6, r4, #1
10004ab8:	e766      	b.n	10004988 <__aeabi_fsub+0x3c>
10004aba:	1c38      	adds	r0, r7, #0
10004abc:	2120      	movs	r1, #32
10004abe:	40e0      	lsrs	r0, r4
10004ac0:	1b0c      	subs	r4, r1, r4
10004ac2:	40a7      	lsls	r7, r4
10004ac4:	1c3e      	adds	r6, r7, #0
10004ac6:	1e77      	subs	r7, r6, #1
10004ac8:	41be      	sbcs	r6, r7
10004aca:	4306      	orrs	r6, r0
10004acc:	4667      	mov	r7, ip
10004ace:	1c2c      	adds	r4, r5, #0
10004ad0:	1bbb      	subs	r3, r7, r6
10004ad2:	1c15      	adds	r5, r2, #0
10004ad4:	e784      	b.n	100049e0 <__aeabi_fsub+0x94>
10004ad6:	0269      	lsls	r1, r5, #9
10004ad8:	0a4d      	lsrs	r5, r1, #9
10004ada:	e76f      	b.n	100049bc <__aeabi_fsub+0x70>
10004adc:	2e00      	cmp	r6, #0
10004ade:	d179      	bne.n	10004bd4 <__aeabi_fsub+0x288>
10004ae0:	1c6c      	adds	r4, r5, #1
10004ae2:	b2e0      	uxtb	r0, r4
10004ae4:	2801      	cmp	r0, #1
10004ae6:	dd4b      	ble.n	10004b80 <__aeabi_fsub+0x234>
10004ae8:	2cff      	cmp	r4, #255	; 0xff
10004aea:	d100      	bne.n	10004aee <__aeabi_fsub+0x1a2>
10004aec:	e098      	b.n	10004c20 <__aeabi_fsub+0x2d4>
10004aee:	4661      	mov	r1, ip
10004af0:	187f      	adds	r7, r7, r1
10004af2:	1cae      	adds	r6, r5, #2
10004af4:	087b      	lsrs	r3, r7, #1
10004af6:	1c15      	adds	r5, r2, #0
10004af8:	e746      	b.n	10004988 <__aeabi_fsub+0x3c>
10004afa:	2dff      	cmp	r5, #255	; 0xff
10004afc:	d000      	beq.n	10004b00 <__aeabi_fsub+0x1b4>
10004afe:	e768      	b.n	100049d2 <__aeabi_fsub+0x86>
10004b00:	e7b6      	b.n	10004a70 <__aeabi_fsub+0x124>
10004b02:	1c67      	adds	r7, r4, #1
10004b04:	2fff      	cmp	r7, #255	; 0xff
10004b06:	d036      	beq.n	10004b76 <__aeabi_fsub+0x22a>
10004b08:	4858      	ldr	r0, [pc, #352]	; (10004c6c <__aeabi_fsub+0x320>)
10004b0a:	2101      	movs	r1, #1
10004b0c:	4019      	ands	r1, r3
10004b0e:	4003      	ands	r3, r0
10004b10:	085b      	lsrs	r3, r3, #1
10004b12:	1ca6      	adds	r6, r4, #2
10004b14:	430b      	orrs	r3, r1
10004b16:	1c3c      	adds	r4, r7, #0
10004b18:	1c15      	adds	r5, r2, #0
10004b1a:	e735      	b.n	10004988 <__aeabi_fsub+0x3c>
10004b1c:	4266      	negs	r6, r4
10004b1e:	2d00      	cmp	r5, #0
10004b20:	d01e      	beq.n	10004b60 <__aeabi_fsub+0x214>
10004b22:	28ff      	cmp	r0, #255	; 0xff
10004b24:	d06f      	beq.n	10004c06 <__aeabi_fsub+0x2ba>
10004b26:	2580      	movs	r5, #128	; 0x80
10004b28:	4662      	mov	r2, ip
10004b2a:	04eb      	lsls	r3, r5, #19
10004b2c:	431a      	orrs	r2, r3
10004b2e:	4694      	mov	ip, r2
10004b30:	2501      	movs	r5, #1
10004b32:	2e1b      	cmp	r6, #27
10004b34:	dc09      	bgt.n	10004b4a <__aeabi_fsub+0x1fe>
10004b36:	4662      	mov	r2, ip
10004b38:	2320      	movs	r3, #32
10004b3a:	40f2      	lsrs	r2, r6
10004b3c:	4664      	mov	r4, ip
10004b3e:	1b9e      	subs	r6, r3, r6
10004b40:	40b4      	lsls	r4, r6
10004b42:	1c25      	adds	r5, r4, #0
10004b44:	1e6c      	subs	r4, r5, #1
10004b46:	41a5      	sbcs	r5, r4
10004b48:	4315      	orrs	r5, r2
10004b4a:	1b7b      	subs	r3, r7, r5
10004b4c:	1c04      	adds	r4, r0, #0
10004b4e:	1c0d      	adds	r5, r1, #0
10004b50:	e769      	b.n	10004a26 <__aeabi_fsub+0xda>
10004b52:	2e00      	cmp	r6, #0
10004b54:	d10c      	bne.n	10004b70 <__aeabi_fsub+0x224>
10004b56:	2200      	movs	r2, #0
10004b58:	2601      	movs	r6, #1
10004b5a:	2304      	movs	r3, #4
10004b5c:	2400      	movs	r4, #0
10004b5e:	e726      	b.n	100049ae <__aeabi_fsub+0x62>
10004b60:	4664      	mov	r4, ip
10004b62:	2c00      	cmp	r4, #0
10004b64:	d155      	bne.n	10004c12 <__aeabi_fsub+0x2c6>
10004b66:	1c46      	adds	r6, r0, #1
10004b68:	1c3b      	adds	r3, r7, #0
10004b6a:	1c04      	adds	r4, r0, #0
10004b6c:	1c0d      	adds	r5, r1, #0
10004b6e:	e70b      	b.n	10004988 <__aeabi_fsub+0x3c>
10004b70:	1c2c      	adds	r4, r5, #0
10004b72:	1c15      	adds	r5, r2, #0
10004b74:	e75b      	b.n	10004a2e <__aeabi_fsub+0xe2>
10004b76:	2380      	movs	r3, #128	; 0x80
10004b78:	005e      	lsls	r6, r3, #1
10004b7a:	24ff      	movs	r4, #255	; 0xff
10004b7c:	2304      	movs	r3, #4
10004b7e:	e716      	b.n	100049ae <__aeabi_fsub+0x62>
10004b80:	2d00      	cmp	r5, #0
10004b82:	d000      	beq.n	10004b86 <__aeabi_fsub+0x23a>
10004b84:	e08d      	b.n	10004ca2 <__aeabi_fsub+0x356>
10004b86:	4665      	mov	r5, ip
10004b88:	2d00      	cmp	r5, #0
10004b8a:	d100      	bne.n	10004b8e <__aeabi_fsub+0x242>
10004b8c:	e0ad      	b.n	10004cea <__aeabi_fsub+0x39e>
10004b8e:	2f00      	cmp	r7, #0
10004b90:	d100      	bne.n	10004b94 <__aeabi_fsub+0x248>
10004b92:	e081      	b.n	10004c98 <__aeabi_fsub+0x34c>
10004b94:	197b      	adds	r3, r7, r5
10004b96:	015c      	lsls	r4, r3, #5
10004b98:	d400      	bmi.n	10004b9c <__aeabi_fsub+0x250>
10004b9a:	e07e      	b.n	10004c9a <__aeabi_fsub+0x34e>
10004b9c:	4f33      	ldr	r7, [pc, #204]	; (10004c6c <__aeabi_fsub+0x320>)
10004b9e:	1c15      	adds	r5, r2, #0
10004ba0:	403b      	ands	r3, r7
10004ba2:	2602      	movs	r6, #2
10004ba4:	2401      	movs	r4, #1
10004ba6:	e6ef      	b.n	10004988 <__aeabi_fsub+0x3c>
10004ba8:	1c38      	adds	r0, r7, #0
10004baa:	2320      	movs	r3, #32
10004bac:	40f0      	lsrs	r0, r6
10004bae:	1b9e      	subs	r6, r3, r6
10004bb0:	40b7      	lsls	r7, r6
10004bb2:	1c3b      	adds	r3, r7, #0
10004bb4:	1e5f      	subs	r7, r3, #1
10004bb6:	41bb      	sbcs	r3, r7
10004bb8:	4303      	orrs	r3, r0
10004bba:	e723      	b.n	10004a04 <__aeabi_fsub+0xb8>
10004bbc:	2d00      	cmp	r5, #0
10004bbe:	d115      	bne.n	10004bec <__aeabi_fsub+0x2a0>
10004bc0:	4665      	mov	r5, ip
10004bc2:	2d00      	cmp	r5, #0
10004bc4:	d147      	bne.n	10004c56 <__aeabi_fsub+0x30a>
10004bc6:	2f00      	cmp	r7, #0
10004bc8:	d0c5      	beq.n	10004b56 <__aeabi_fsub+0x20a>
10004bca:	1c3b      	adds	r3, r7, #0
10004bcc:	1c0d      	adds	r5, r1, #0
10004bce:	2601      	movs	r6, #1
10004bd0:	2400      	movs	r4, #0
10004bd2:	e6d9      	b.n	10004988 <__aeabi_fsub+0x3c>
10004bd4:	4276      	negs	r6, r6
10004bd6:	2d00      	cmp	r5, #0
10004bd8:	d126      	bne.n	10004c28 <__aeabi_fsub+0x2dc>
10004bda:	4665      	mov	r5, ip
10004bdc:	2d00      	cmp	r5, #0
10004bde:	d000      	beq.n	10004be2 <__aeabi_fsub+0x296>
10004be0:	e07d      	b.n	10004cde <__aeabi_fsub+0x392>
10004be2:	1c46      	adds	r6, r0, #1
10004be4:	1c3b      	adds	r3, r7, #0
10004be6:	1c04      	adds	r4, r0, #0
10004be8:	1c15      	adds	r5, r2, #0
10004bea:	e6cd      	b.n	10004988 <__aeabi_fsub+0x3c>
10004bec:	4665      	mov	r5, ip
10004bee:	2d00      	cmp	r5, #0
10004bf0:	d140      	bne.n	10004c74 <__aeabi_fsub+0x328>
10004bf2:	2f00      	cmp	r7, #0
10004bf4:	d107      	bne.n	10004c06 <__aeabi_fsub+0x2ba>
10004bf6:	2180      	movs	r1, #128	; 0x80
10004bf8:	2200      	movs	r2, #0
10004bfa:	004e      	lsls	r6, r1, #1
10004bfc:	4b1c      	ldr	r3, [pc, #112]	; (10004c70 <__aeabi_fsub+0x324>)
10004bfe:	24ff      	movs	r4, #255	; 0xff
10004c00:	e6d5      	b.n	100049ae <__aeabi_fsub+0x62>
10004c02:	28ff      	cmp	r0, #255	; 0xff
10004c04:	d194      	bne.n	10004b30 <__aeabi_fsub+0x1e4>
10004c06:	2080      	movs	r0, #128	; 0x80
10004c08:	1c3b      	adds	r3, r7, #0
10004c0a:	1c0d      	adds	r5, r1, #0
10004c0c:	0046      	lsls	r6, r0, #1
10004c0e:	24ff      	movs	r4, #255	; 0xff
10004c10:	e6ba      	b.n	10004988 <__aeabi_fsub+0x3c>
10004c12:	3e01      	subs	r6, #1
10004c14:	2e00      	cmp	r6, #0
10004c16:	d1f4      	bne.n	10004c02 <__aeabi_fsub+0x2b6>
10004c18:	1b3b      	subs	r3, r7, r4
10004c1a:	1c0d      	adds	r5, r1, #0
10004c1c:	1c04      	adds	r4, r0, #0
10004c1e:	e702      	b.n	10004a26 <__aeabi_fsub+0xda>
10004c20:	2580      	movs	r5, #128	; 0x80
10004c22:	006e      	lsls	r6, r5, #1
10004c24:	2304      	movs	r3, #4
10004c26:	e6c2      	b.n	100049ae <__aeabi_fsub+0x62>
10004c28:	28ff      	cmp	r0, #255	; 0xff
10004c2a:	d052      	beq.n	10004cd2 <__aeabi_fsub+0x386>
10004c2c:	2480      	movs	r4, #128	; 0x80
10004c2e:	4661      	mov	r1, ip
10004c30:	04e3      	lsls	r3, r4, #19
10004c32:	4319      	orrs	r1, r3
10004c34:	468c      	mov	ip, r1
10004c36:	2301      	movs	r3, #1
10004c38:	2e1b      	cmp	r6, #27
10004c3a:	dc09      	bgt.n	10004c50 <__aeabi_fsub+0x304>
10004c3c:	2120      	movs	r1, #32
10004c3e:	4664      	mov	r4, ip
10004c40:	40f4      	lsrs	r4, r6
10004c42:	4665      	mov	r5, ip
10004c44:	1b8e      	subs	r6, r1, r6
10004c46:	40b5      	lsls	r5, r6
10004c48:	1c2b      	adds	r3, r5, #0
10004c4a:	1e59      	subs	r1, r3, #1
10004c4c:	418b      	sbcs	r3, r1
10004c4e:	4323      	orrs	r3, r4
10004c50:	19db      	adds	r3, r3, r7
10004c52:	1c04      	adds	r4, r0, #0
10004c54:	e6d8      	b.n	10004a08 <__aeabi_fsub+0xbc>
10004c56:	2f00      	cmp	r7, #0
10004c58:	d01e      	beq.n	10004c98 <__aeabi_fsub+0x34c>
10004c5a:	1beb      	subs	r3, r5, r7
10004c5c:	0158      	lsls	r0, r3, #5
10004c5e:	d54b      	bpl.n	10004cf8 <__aeabi_fsub+0x3ac>
10004c60:	1b7b      	subs	r3, r7, r5
10004c62:	2601      	movs	r6, #1
10004c64:	1c0d      	adds	r5, r1, #0
10004c66:	2400      	movs	r4, #0
10004c68:	e68e      	b.n	10004988 <__aeabi_fsub+0x3c>
10004c6a:	46c0      	nop			; (mov r8, r8)
10004c6c:	fbffffff 	.word	0xfbffffff
10004c70:	03fffffc 	.word	0x03fffffc
10004c74:	2f00      	cmp	r7, #0
10004c76:	d100      	bne.n	10004c7a <__aeabi_fsub+0x32e>
10004c78:	e6fa      	b.n	10004a70 <__aeabi_fsub+0x124>
10004c7a:	2080      	movs	r0, #128	; 0x80
10004c7c:	08eb      	lsrs	r3, r5, #3
10004c7e:	03c4      	lsls	r4, r0, #15
10004c80:	4223      	tst	r3, r4
10004c82:	d037      	beq.n	10004cf4 <__aeabi_fsub+0x3a8>
10004c84:	08ff      	lsrs	r7, r7, #3
10004c86:	4227      	tst	r7, r4
10004c88:	d134      	bne.n	10004cf4 <__aeabi_fsub+0x3a8>
10004c8a:	1c3b      	adds	r3, r7, #0
10004c8c:	1c0d      	adds	r5, r1, #0
10004c8e:	2280      	movs	r2, #128	; 0x80
10004c90:	00db      	lsls	r3, r3, #3
10004c92:	0056      	lsls	r6, r2, #1
10004c94:	24ff      	movs	r4, #255	; 0xff
10004c96:	e677      	b.n	10004988 <__aeabi_fsub+0x3c>
10004c98:	4663      	mov	r3, ip
10004c9a:	1c15      	adds	r5, r2, #0
10004c9c:	2601      	movs	r6, #1
10004c9e:	2400      	movs	r4, #0
10004ca0:	e672      	b.n	10004988 <__aeabi_fsub+0x3c>
10004ca2:	4664      	mov	r4, ip
10004ca4:	2c00      	cmp	r4, #0
10004ca6:	d014      	beq.n	10004cd2 <__aeabi_fsub+0x386>
10004ca8:	2f00      	cmp	r7, #0
10004caa:	d100      	bne.n	10004cae <__aeabi_fsub+0x362>
10004cac:	e6e0      	b.n	10004a70 <__aeabi_fsub+0x124>
10004cae:	2380      	movs	r3, #128	; 0x80
10004cb0:	08e6      	lsrs	r6, r4, #3
10004cb2:	03d8      	lsls	r0, r3, #15
10004cb4:	1c31      	adds	r1, r6, #0
10004cb6:	4206      	tst	r6, r0
10004cb8:	d003      	beq.n	10004cc2 <__aeabi_fsub+0x376>
10004cba:	08f9      	lsrs	r1, r7, #3
10004cbc:	4201      	tst	r1, r0
10004cbe:	d000      	beq.n	10004cc2 <__aeabi_fsub+0x376>
10004cc0:	1c31      	adds	r1, r6, #0
10004cc2:	1c15      	adds	r5, r2, #0
10004cc4:	2280      	movs	r2, #128	; 0x80
10004cc6:	00cb      	lsls	r3, r1, #3
10004cc8:	0056      	lsls	r6, r2, #1
10004cca:	24ff      	movs	r4, #255	; 0xff
10004ccc:	e65c      	b.n	10004988 <__aeabi_fsub+0x3c>
10004cce:	28ff      	cmp	r0, #255	; 0xff
10004cd0:	d1b1      	bne.n	10004c36 <__aeabi_fsub+0x2ea>
10004cd2:	2080      	movs	r0, #128	; 0x80
10004cd4:	1c3b      	adds	r3, r7, #0
10004cd6:	1c15      	adds	r5, r2, #0
10004cd8:	0046      	lsls	r6, r0, #1
10004cda:	24ff      	movs	r4, #255	; 0xff
10004cdc:	e654      	b.n	10004988 <__aeabi_fsub+0x3c>
10004cde:	3e01      	subs	r6, #1
10004ce0:	2e00      	cmp	r6, #0
10004ce2:	d1f4      	bne.n	10004cce <__aeabi_fsub+0x382>
10004ce4:	197b      	adds	r3, r7, r5
10004ce6:	1c04      	adds	r4, r0, #0
10004ce8:	e68e      	b.n	10004a08 <__aeabi_fsub+0xbc>
10004cea:	1c3b      	adds	r3, r7, #0
10004cec:	1c15      	adds	r5, r2, #0
10004cee:	2601      	movs	r6, #1
10004cf0:	2400      	movs	r4, #0
10004cf2:	e649      	b.n	10004988 <__aeabi_fsub+0x3c>
10004cf4:	1c15      	adds	r5, r2, #0
10004cf6:	e7ca      	b.n	10004c8e <__aeabi_fsub+0x342>
10004cf8:	2b00      	cmp	r3, #0
10004cfa:	d100      	bne.n	10004cfe <__aeabi_fsub+0x3b2>
10004cfc:	e72b      	b.n	10004b56 <__aeabi_fsub+0x20a>
10004cfe:	e7cc      	b.n	10004c9a <__aeabi_fsub+0x34e>

10004d00 <__aeabi_f2iz>:
10004d00:	0243      	lsls	r3, r0, #9
10004d02:	0042      	lsls	r2, r0, #1
10004d04:	0a59      	lsrs	r1, r3, #9
10004d06:	0e13      	lsrs	r3, r2, #24
10004d08:	0fc2      	lsrs	r2, r0, #31
10004d0a:	2000      	movs	r0, #0
10004d0c:	2b7e      	cmp	r3, #126	; 0x7e
10004d0e:	dd0d      	ble.n	10004d2c <__aeabi_f2iz+0x2c>
10004d10:	2b9d      	cmp	r3, #157	; 0x9d
10004d12:	dc0c      	bgt.n	10004d2e <__aeabi_f2iz+0x2e>
10004d14:	2080      	movs	r0, #128	; 0x80
10004d16:	0400      	lsls	r0, r0, #16
10004d18:	4301      	orrs	r1, r0
10004d1a:	2b95      	cmp	r3, #149	; 0x95
10004d1c:	dc0a      	bgt.n	10004d34 <__aeabi_f2iz+0x34>
10004d1e:	2096      	movs	r0, #150	; 0x96
10004d20:	1ac3      	subs	r3, r0, r3
10004d22:	40d9      	lsrs	r1, r3
10004d24:	4248      	negs	r0, r1
10004d26:	2a00      	cmp	r2, #0
10004d28:	d100      	bne.n	10004d2c <__aeabi_f2iz+0x2c>
10004d2a:	1c08      	adds	r0, r1, #0
10004d2c:	4770      	bx	lr
10004d2e:	4903      	ldr	r1, [pc, #12]	; (10004d3c <__aeabi_f2iz+0x3c>)
10004d30:	1850      	adds	r0, r2, r1
10004d32:	e7fb      	b.n	10004d2c <__aeabi_f2iz+0x2c>
10004d34:	3b96      	subs	r3, #150	; 0x96
10004d36:	4099      	lsls	r1, r3
10004d38:	e7f4      	b.n	10004d24 <__aeabi_f2iz+0x24>
10004d3a:	46c0      	nop			; (mov r8, r8)
10004d3c:	7fffffff 	.word	0x7fffffff

10004d40 <__aeabi_ui2f>:
10004d40:	b510      	push	{r4, lr}
10004d42:	1e04      	subs	r4, r0, #0
10004d44:	d034      	beq.n	10004db0 <__aeabi_ui2f+0x70>
10004d46:	f001 f9e5 	bl	10006114 <__clzsi2>
10004d4a:	239e      	movs	r3, #158	; 0x9e
10004d4c:	1a1b      	subs	r3, r3, r0
10004d4e:	2b96      	cmp	r3, #150	; 0x96
10004d50:	dc07      	bgt.n	10004d62 <__aeabi_ui2f+0x22>
10004d52:	3808      	subs	r0, #8
10004d54:	4084      	lsls	r4, r0
10004d56:	0264      	lsls	r4, r4, #9
10004d58:	0a61      	lsrs	r1, r4, #9
10004d5a:	b2db      	uxtb	r3, r3
10004d5c:	05d8      	lsls	r0, r3, #23
10004d5e:	4308      	orrs	r0, r1
10004d60:	bd10      	pop	{r4, pc}
10004d62:	2b99      	cmp	r3, #153	; 0x99
10004d64:	dd0a      	ble.n	10004d7c <__aeabi_ui2f+0x3c>
10004d66:	1c02      	adds	r2, r0, #0
10004d68:	321b      	adds	r2, #27
10004d6a:	1c21      	adds	r1, r4, #0
10004d6c:	4091      	lsls	r1, r2
10004d6e:	1c0a      	adds	r2, r1, #0
10004d70:	1e51      	subs	r1, r2, #1
10004d72:	418a      	sbcs	r2, r1
10004d74:	2105      	movs	r1, #5
10004d76:	1a09      	subs	r1, r1, r0
10004d78:	40cc      	lsrs	r4, r1
10004d7a:	4314      	orrs	r4, r2
10004d7c:	2805      	cmp	r0, #5
10004d7e:	dc1a      	bgt.n	10004db6 <__aeabi_ui2f+0x76>
10004d80:	4a18      	ldr	r2, [pc, #96]	; (10004de4 <__aeabi_ui2f+0xa4>)
10004d82:	210f      	movs	r1, #15
10004d84:	4022      	ands	r2, r4
10004d86:	400c      	ands	r4, r1
10004d88:	2c04      	cmp	r4, #4
10004d8a:	d000      	beq.n	10004d8e <__aeabi_ui2f+0x4e>
10004d8c:	3204      	adds	r2, #4
10004d8e:	0151      	lsls	r1, r2, #5
10004d90:	d505      	bpl.n	10004d9e <__aeabi_ui2f+0x5e>
10004d92:	249f      	movs	r4, #159	; 0x9f
10004d94:	1a23      	subs	r3, r4, r0
10004d96:	2bff      	cmp	r3, #255	; 0xff
10004d98:	d021      	beq.n	10004dde <__aeabi_ui2f+0x9e>
10004d9a:	4812      	ldr	r0, [pc, #72]	; (10004de4 <__aeabi_ui2f+0xa4>)
10004d9c:	4002      	ands	r2, r0
10004d9e:	1c59      	adds	r1, r3, #1
10004da0:	b2cc      	uxtb	r4, r1
10004da2:	08d2      	lsrs	r2, r2, #3
10004da4:	2c01      	cmp	r4, #1
10004da6:	dd09      	ble.n	10004dbc <__aeabi_ui2f+0x7c>
10004da8:	0250      	lsls	r0, r2, #9
10004daa:	0a41      	lsrs	r1, r0, #9
10004dac:	b2db      	uxtb	r3, r3
10004dae:	e7d5      	b.n	10004d5c <__aeabi_ui2f+0x1c>
10004db0:	2300      	movs	r3, #0
10004db2:	2100      	movs	r1, #0
10004db4:	e7d2      	b.n	10004d5c <__aeabi_ui2f+0x1c>
10004db6:	1f42      	subs	r2, r0, #5
10004db8:	4094      	lsls	r4, r2
10004dba:	e7e1      	b.n	10004d80 <__aeabi_ui2f+0x40>
10004dbc:	2a00      	cmp	r2, #0
10004dbe:	d00b      	beq.n	10004dd8 <__aeabi_ui2f+0x98>
10004dc0:	2b00      	cmp	r3, #0
10004dc2:	d006      	beq.n	10004dd2 <__aeabi_ui2f+0x92>
10004dc4:	2180      	movs	r1, #128	; 0x80
10004dc6:	03cc      	lsls	r4, r1, #15
10004dc8:	4322      	orrs	r2, r4
10004dca:	0252      	lsls	r2, r2, #9
10004dcc:	0a51      	lsrs	r1, r2, #9
10004dce:	b2db      	uxtb	r3, r3
10004dd0:	e7c4      	b.n	10004d5c <__aeabi_ui2f+0x1c>
10004dd2:	0250      	lsls	r0, r2, #9
10004dd4:	0a41      	lsrs	r1, r0, #9
10004dd6:	e7c1      	b.n	10004d5c <__aeabi_ui2f+0x1c>
10004dd8:	b2db      	uxtb	r3, r3
10004dda:	2100      	movs	r1, #0
10004ddc:	e7be      	b.n	10004d5c <__aeabi_ui2f+0x1c>
10004dde:	23ff      	movs	r3, #255	; 0xff
10004de0:	2100      	movs	r1, #0
10004de2:	e7bb      	b.n	10004d5c <__aeabi_ui2f+0x1c>
10004de4:	fbffffff 	.word	0xfbffffff

10004de8 <__aeabi_ddiv>:
10004de8:	b5f0      	push	{r4, r5, r6, r7, lr}
10004dea:	464d      	mov	r5, r9
10004dec:	4644      	mov	r4, r8
10004dee:	465f      	mov	r7, fp
10004df0:	4656      	mov	r6, sl
10004df2:	b4f0      	push	{r4, r5, r6, r7}
10004df4:	1c1d      	adds	r5, r3, #0
10004df6:	004b      	lsls	r3, r1, #1
10004df8:	1c14      	adds	r4, r2, #0
10004dfa:	030e      	lsls	r6, r1, #12
10004dfc:	0d5b      	lsrs	r3, r3, #21
10004dfe:	0fca      	lsrs	r2, r1, #31
10004e00:	b087      	sub	sp, #28
10004e02:	1c07      	adds	r7, r0, #0
10004e04:	0b36      	lsrs	r6, r6, #12
10004e06:	4698      	mov	r8, r3
10004e08:	4691      	mov	r9, r2
10004e0a:	2b00      	cmp	r3, #0
10004e0c:	d11d      	bne.n	10004e4a <__aeabi_ddiv+0x62>
10004e0e:	1c32      	adds	r2, r6, #0
10004e10:	4302      	orrs	r2, r0
10004e12:	d100      	bne.n	10004e16 <__aeabi_ddiv+0x2e>
10004e14:	e181      	b.n	1000511a <__aeabi_ddiv+0x332>
10004e16:	2e00      	cmp	r6, #0
10004e18:	d100      	bne.n	10004e1c <__aeabi_ddiv+0x34>
10004e1a:	e204      	b.n	10005226 <__aeabi_ddiv+0x43e>
10004e1c:	1c30      	adds	r0, r6, #0
10004e1e:	f001 f979 	bl	10006114 <__clzsi2>
10004e22:	2827      	cmp	r0, #39	; 0x27
10004e24:	dd00      	ble.n	10004e28 <__aeabi_ddiv+0x40>
10004e26:	e1f8      	b.n	1000521a <__aeabi_ddiv+0x432>
10004e28:	2128      	movs	r1, #40	; 0x28
10004e2a:	1c03      	adds	r3, r0, #0
10004e2c:	3b08      	subs	r3, #8
10004e2e:	1a0a      	subs	r2, r1, r0
10004e30:	1c39      	adds	r1, r7, #0
10004e32:	409e      	lsls	r6, r3
10004e34:	40d1      	lsrs	r1, r2
10004e36:	430e      	orrs	r6, r1
10004e38:	409f      	lsls	r7, r3
10004e3a:	4bc1      	ldr	r3, [pc, #772]	; (10005140 <__aeabi_ddiv+0x358>)
10004e3c:	2100      	movs	r1, #0
10004e3e:	1a18      	subs	r0, r3, r0
10004e40:	2200      	movs	r2, #0
10004e42:	4680      	mov	r8, r0
10004e44:	468a      	mov	sl, r1
10004e46:	9200      	str	r2, [sp, #0]
10004e48:	e00f      	b.n	10004e6a <__aeabi_ddiv+0x82>
10004e4a:	48be      	ldr	r0, [pc, #760]	; (10005144 <__aeabi_ddiv+0x35c>)
10004e4c:	4283      	cmp	r3, r0
10004e4e:	d031      	beq.n	10004eb4 <__aeabi_ddiv+0xcc>
10004e50:	2180      	movs	r1, #128	; 0x80
10004e52:	034b      	lsls	r3, r1, #13
10004e54:	431e      	orrs	r6, r3
10004e56:	48bc      	ldr	r0, [pc, #752]	; (10005148 <__aeabi_ddiv+0x360>)
10004e58:	0f7a      	lsrs	r2, r7, #29
10004e5a:	00f6      	lsls	r6, r6, #3
10004e5c:	2100      	movs	r1, #0
10004e5e:	2300      	movs	r3, #0
10004e60:	4316      	orrs	r6, r2
10004e62:	00ff      	lsls	r7, r7, #3
10004e64:	4480      	add	r8, r0
10004e66:	468a      	mov	sl, r1
10004e68:	9300      	str	r3, [sp, #0]
10004e6a:	1c29      	adds	r1, r5, #0
10004e6c:	1c20      	adds	r0, r4, #0
10004e6e:	1c25      	adds	r5, r4, #0
10004e70:	004a      	lsls	r2, r1, #1
10004e72:	030c      	lsls	r4, r1, #12
10004e74:	0fcb      	lsrs	r3, r1, #31
10004e76:	0b24      	lsrs	r4, r4, #12
10004e78:	0d52      	lsrs	r2, r2, #21
10004e7a:	469b      	mov	fp, r3
10004e7c:	d125      	bne.n	10004eca <__aeabi_ddiv+0xe2>
10004e7e:	1c21      	adds	r1, r4, #0
10004e80:	4301      	orrs	r1, r0
10004e82:	d100      	bne.n	10004e86 <__aeabi_ddiv+0x9e>
10004e84:	e150      	b.n	10005128 <__aeabi_ddiv+0x340>
10004e86:	2c00      	cmp	r4, #0
10004e88:	d100      	bne.n	10004e8c <__aeabi_ddiv+0xa4>
10004e8a:	e1c2      	b.n	10005212 <__aeabi_ddiv+0x42a>
10004e8c:	1c20      	adds	r0, r4, #0
10004e8e:	f001 f941 	bl	10006114 <__clzsi2>
10004e92:	2827      	cmp	r0, #39	; 0x27
10004e94:	dd00      	ble.n	10004e98 <__aeabi_ddiv+0xb0>
10004e96:	e1b6      	b.n	10005206 <__aeabi_ddiv+0x41e>
10004e98:	1c03      	adds	r3, r0, #0
10004e9a:	2228      	movs	r2, #40	; 0x28
10004e9c:	3b08      	subs	r3, #8
10004e9e:	1c29      	adds	r1, r5, #0
10004ea0:	1a12      	subs	r2, r2, r0
10004ea2:	409c      	lsls	r4, r3
10004ea4:	40d1      	lsrs	r1, r2
10004ea6:	430c      	orrs	r4, r1
10004ea8:	409d      	lsls	r5, r3
10004eaa:	4ba5      	ldr	r3, [pc, #660]	; (10005140 <__aeabi_ddiv+0x358>)
10004eac:	1a1a      	subs	r2, r3, r0
10004eae:	2000      	movs	r0, #0
10004eb0:	9002      	str	r0, [sp, #8]
10004eb2:	e019      	b.n	10004ee8 <__aeabi_ddiv+0x100>
10004eb4:	1c32      	adds	r2, r6, #0
10004eb6:	433a      	orrs	r2, r7
10004eb8:	d000      	beq.n	10004ebc <__aeabi_ddiv+0xd4>
10004eba:	e129      	b.n	10005110 <__aeabi_ddiv+0x328>
10004ebc:	2708      	movs	r7, #8
10004ebe:	2302      	movs	r3, #2
10004ec0:	46ba      	mov	sl, r7
10004ec2:	2600      	movs	r6, #0
10004ec4:	2700      	movs	r7, #0
10004ec6:	9300      	str	r3, [sp, #0]
10004ec8:	e7cf      	b.n	10004e6a <__aeabi_ddiv+0x82>
10004eca:	489e      	ldr	r0, [pc, #632]	; (10005144 <__aeabi_ddiv+0x35c>)
10004ecc:	4282      	cmp	r2, r0
10004ece:	d100      	bne.n	10004ed2 <__aeabi_ddiv+0xea>
10004ed0:	e113      	b.n	100050fa <__aeabi_ddiv+0x312>
10004ed2:	2180      	movs	r1, #128	; 0x80
10004ed4:	034b      	lsls	r3, r1, #13
10004ed6:	431c      	orrs	r4, r3
10004ed8:	499b      	ldr	r1, [pc, #620]	; (10005148 <__aeabi_ddiv+0x360>)
10004eda:	0f68      	lsrs	r0, r5, #29
10004edc:	00e4      	lsls	r4, r4, #3
10004ede:	2300      	movs	r3, #0
10004ee0:	4304      	orrs	r4, r0
10004ee2:	00ed      	lsls	r5, r5, #3
10004ee4:	1852      	adds	r2, r2, r1
10004ee6:	9302      	str	r3, [sp, #8]
10004ee8:	4648      	mov	r0, r9
10004eea:	465b      	mov	r3, fp
10004eec:	4043      	eors	r3, r0
10004eee:	9802      	ldr	r0, [sp, #8]
10004ef0:	4651      	mov	r1, sl
10004ef2:	9301      	str	r3, [sp, #4]
10004ef4:	4301      	orrs	r1, r0
10004ef6:	290f      	cmp	r1, #15
10004ef8:	d800      	bhi.n	10004efc <__aeabi_ddiv+0x114>
10004efa:	e0df      	b.n	100050bc <__aeabi_ddiv+0x2d4>
10004efc:	4643      	mov	r3, r8
10004efe:	1a9a      	subs	r2, r3, r2
10004f00:	9204      	str	r2, [sp, #16]
10004f02:	42a6      	cmp	r6, r4
10004f04:	d800      	bhi.n	10004f08 <__aeabi_ddiv+0x120>
10004f06:	e16e      	b.n	100051e6 <__aeabi_ddiv+0x3fe>
10004f08:	0871      	lsrs	r1, r6, #1
10004f0a:	087b      	lsrs	r3, r7, #1
10004f0c:	07f6      	lsls	r6, r6, #31
10004f0e:	4333      	orrs	r3, r6
10004f10:	07fa      	lsls	r2, r7, #31
10004f12:	4689      	mov	r9, r1
10004f14:	4698      	mov	r8, r3
10004f16:	9202      	str	r2, [sp, #8]
10004f18:	0e28      	lsrs	r0, r5, #24
10004f1a:	0224      	lsls	r4, r4, #8
10004f1c:	4304      	orrs	r4, r0
10004f1e:	022d      	lsls	r5, r5, #8
10004f20:	0427      	lsls	r7, r4, #16
10004f22:	0c39      	lsrs	r1, r7, #16
10004f24:	46ab      	mov	fp, r5
10004f26:	0c25      	lsrs	r5, r4, #16
10004f28:	9100      	str	r1, [sp, #0]
10004f2a:	4648      	mov	r0, r9
10004f2c:	1c29      	adds	r1, r5, #0
10004f2e:	f7ff f927 	bl	10004180 <__aeabi_uidiv>
10004f32:	9f00      	ldr	r7, [sp, #0]
10004f34:	1c06      	adds	r6, r0, #0
10004f36:	4347      	muls	r7, r0
10004f38:	1c29      	adds	r1, r5, #0
10004f3a:	4648      	mov	r0, r9
10004f3c:	f7ff f964 	bl	10004208 <__aeabi_uidivmod>
10004f40:	4643      	mov	r3, r8
10004f42:	0408      	lsls	r0, r1, #16
10004f44:	0c1a      	lsrs	r2, r3, #16
10004f46:	4310      	orrs	r0, r2
10004f48:	4287      	cmp	r7, r0
10004f4a:	d907      	bls.n	10004f5c <__aeabi_ddiv+0x174>
10004f4c:	1900      	adds	r0, r0, r4
10004f4e:	3e01      	subs	r6, #1
10004f50:	4284      	cmp	r4, r0
10004f52:	d803      	bhi.n	10004f5c <__aeabi_ddiv+0x174>
10004f54:	4287      	cmp	r7, r0
10004f56:	d901      	bls.n	10004f5c <__aeabi_ddiv+0x174>
10004f58:	3e01      	subs	r6, #1
10004f5a:	1900      	adds	r0, r0, r4
10004f5c:	1bc1      	subs	r1, r0, r7
10004f5e:	468a      	mov	sl, r1
10004f60:	1c08      	adds	r0, r1, #0
10004f62:	1c29      	adds	r1, r5, #0
10004f64:	f7ff f90c 	bl	10004180 <__aeabi_uidiv>
10004f68:	9b00      	ldr	r3, [sp, #0]
10004f6a:	1c07      	adds	r7, r0, #0
10004f6c:	4343      	muls	r3, r0
10004f6e:	1c29      	adds	r1, r5, #0
10004f70:	4650      	mov	r0, sl
10004f72:	4699      	mov	r9, r3
10004f74:	f7ff f948 	bl	10004208 <__aeabi_uidivmod>
10004f78:	4642      	mov	r2, r8
10004f7a:	0410      	lsls	r0, r2, #16
10004f7c:	040b      	lsls	r3, r1, #16
10004f7e:	0c01      	lsrs	r1, r0, #16
10004f80:	430b      	orrs	r3, r1
10004f82:	4599      	cmp	r9, r3
10004f84:	d904      	bls.n	10004f90 <__aeabi_ddiv+0x1a8>
10004f86:	191b      	adds	r3, r3, r4
10004f88:	3f01      	subs	r7, #1
10004f8a:	429c      	cmp	r4, r3
10004f8c:	d800      	bhi.n	10004f90 <__aeabi_ddiv+0x1a8>
10004f8e:	e164      	b.n	1000525a <__aeabi_ddiv+0x472>
10004f90:	0436      	lsls	r6, r6, #16
10004f92:	433e      	orrs	r6, r7
10004f94:	465f      	mov	r7, fp
10004f96:	464a      	mov	r2, r9
10004f98:	0c39      	lsrs	r1, r7, #16
10004f9a:	4689      	mov	r9, r1
10004f9c:	1a9b      	subs	r3, r3, r2
10004f9e:	4659      	mov	r1, fp
10004fa0:	0432      	lsls	r2, r6, #16
10004fa2:	0c17      	lsrs	r7, r2, #16
10004fa4:	040a      	lsls	r2, r1, #16
10004fa6:	4649      	mov	r1, r9
10004fa8:	4379      	muls	r1, r7
10004faa:	0c12      	lsrs	r2, r2, #16
10004fac:	9203      	str	r2, [sp, #12]
10004fae:	468c      	mov	ip, r1
10004fb0:	9903      	ldr	r1, [sp, #12]
10004fb2:	0c30      	lsrs	r0, r6, #16
10004fb4:	437a      	muls	r2, r7
10004fb6:	4341      	muls	r1, r0
10004fb8:	464f      	mov	r7, r9
10004fba:	4378      	muls	r0, r7
10004fbc:	448c      	add	ip, r1
10004fbe:	0c17      	lsrs	r7, r2, #16
10004fc0:	4467      	add	r7, ip
10004fc2:	42b9      	cmp	r1, r7
10004fc4:	d902      	bls.n	10004fcc <__aeabi_ddiv+0x1e4>
10004fc6:	2180      	movs	r1, #128	; 0x80
10004fc8:	0249      	lsls	r1, r1, #9
10004fca:	1840      	adds	r0, r0, r1
10004fcc:	0c39      	lsrs	r1, r7, #16
10004fce:	0412      	lsls	r2, r2, #16
10004fd0:	1840      	adds	r0, r0, r1
10004fd2:	043f      	lsls	r7, r7, #16
10004fd4:	0c11      	lsrs	r1, r2, #16
10004fd6:	187f      	adds	r7, r7, r1
10004fd8:	4283      	cmp	r3, r0
10004fda:	d200      	bcs.n	10004fde <__aeabi_ddiv+0x1f6>
10004fdc:	e127      	b.n	1000522e <__aeabi_ddiv+0x446>
10004fde:	d100      	bne.n	10004fe2 <__aeabi_ddiv+0x1fa>
10004fe0:	e141      	b.n	10005266 <__aeabi_ddiv+0x47e>
10004fe2:	9902      	ldr	r1, [sp, #8]
10004fe4:	1a1b      	subs	r3, r3, r0
10004fe6:	1bcf      	subs	r7, r1, r7
10004fe8:	42b9      	cmp	r1, r7
10004fea:	4180      	sbcs	r0, r0
10004fec:	4241      	negs	r1, r0
10004fee:	1a5a      	subs	r2, r3, r1
10004ff0:	4690      	mov	r8, r2
10004ff2:	42a2      	cmp	r2, r4
10004ff4:	d100      	bne.n	10004ff8 <__aeabi_ddiv+0x210>
10004ff6:	e15f      	b.n	100052b8 <__aeabi_ddiv+0x4d0>
10004ff8:	1c10      	adds	r0, r2, #0
10004ffa:	1c29      	adds	r1, r5, #0
10004ffc:	f7ff f8c0 	bl	10004180 <__aeabi_uidiv>
10005000:	9b00      	ldr	r3, [sp, #0]
10005002:	9002      	str	r0, [sp, #8]
10005004:	4343      	muls	r3, r0
10005006:	1c29      	adds	r1, r5, #0
10005008:	4640      	mov	r0, r8
1000500a:	469a      	mov	sl, r3
1000500c:	f7ff f8fc 	bl	10004208 <__aeabi_uidivmod>
10005010:	0c38      	lsrs	r0, r7, #16
10005012:	0409      	lsls	r1, r1, #16
10005014:	4301      	orrs	r1, r0
10005016:	458a      	cmp	sl, r1
10005018:	d90a      	bls.n	10005030 <__aeabi_ddiv+0x248>
1000501a:	9a02      	ldr	r2, [sp, #8]
1000501c:	1909      	adds	r1, r1, r4
1000501e:	3a01      	subs	r2, #1
10005020:	9202      	str	r2, [sp, #8]
10005022:	428c      	cmp	r4, r1
10005024:	d804      	bhi.n	10005030 <__aeabi_ddiv+0x248>
10005026:	458a      	cmp	sl, r1
10005028:	d902      	bls.n	10005030 <__aeabi_ddiv+0x248>
1000502a:	3a01      	subs	r2, #1
1000502c:	9202      	str	r2, [sp, #8]
1000502e:	1909      	adds	r1, r1, r4
10005030:	4653      	mov	r3, sl
10005032:	1ac8      	subs	r0, r1, r3
10005034:	1c29      	adds	r1, r5, #0
10005036:	9005      	str	r0, [sp, #20]
10005038:	f7ff f8a2 	bl	10004180 <__aeabi_uidiv>
1000503c:	9a00      	ldr	r2, [sp, #0]
1000503e:	1c29      	adds	r1, r5, #0
10005040:	4342      	muls	r2, r0
10005042:	4680      	mov	r8, r0
10005044:	9805      	ldr	r0, [sp, #20]
10005046:	4692      	mov	sl, r2
10005048:	f7ff f8de 	bl	10004208 <__aeabi_uidivmod>
1000504c:	043f      	lsls	r7, r7, #16
1000504e:	040d      	lsls	r5, r1, #16
10005050:	0c3a      	lsrs	r2, r7, #16
10005052:	432a      	orrs	r2, r5
10005054:	4592      	cmp	sl, r2
10005056:	d909      	bls.n	1000506c <__aeabi_ddiv+0x284>
10005058:	2101      	movs	r1, #1
1000505a:	424b      	negs	r3, r1
1000505c:	1912      	adds	r2, r2, r4
1000505e:	4498      	add	r8, r3
10005060:	4294      	cmp	r4, r2
10005062:	d803      	bhi.n	1000506c <__aeabi_ddiv+0x284>
10005064:	4592      	cmp	sl, r2
10005066:	d901      	bls.n	1000506c <__aeabi_ddiv+0x284>
10005068:	4498      	add	r8, r3
1000506a:	1912      	adds	r2, r2, r4
1000506c:	9d02      	ldr	r5, [sp, #8]
1000506e:	4643      	mov	r3, r8
10005070:	042f      	lsls	r7, r5, #16
10005072:	431f      	orrs	r7, r3
10005074:	4650      	mov	r0, sl
10005076:	1a11      	subs	r1, r2, r0
10005078:	0438      	lsls	r0, r7, #16
1000507a:	0c03      	lsrs	r3, r0, #16
1000507c:	464d      	mov	r5, r9
1000507e:	435d      	muls	r5, r3
10005080:	9803      	ldr	r0, [sp, #12]
10005082:	46ac      	mov	ip, r5
10005084:	9d03      	ldr	r5, [sp, #12]
10005086:	0c3a      	lsrs	r2, r7, #16
10005088:	4358      	muls	r0, r3
1000508a:	4355      	muls	r5, r2
1000508c:	464b      	mov	r3, r9
1000508e:	435a      	muls	r2, r3
10005090:	44ac      	add	ip, r5
10005092:	0c03      	lsrs	r3, r0, #16
10005094:	4463      	add	r3, ip
10005096:	429d      	cmp	r5, r3
10005098:	d902      	bls.n	100050a0 <__aeabi_ddiv+0x2b8>
1000509a:	2580      	movs	r5, #128	; 0x80
1000509c:	026d      	lsls	r5, r5, #9
1000509e:	1952      	adds	r2, r2, r5
100050a0:	0c1d      	lsrs	r5, r3, #16
100050a2:	0400      	lsls	r0, r0, #16
100050a4:	1952      	adds	r2, r2, r5
100050a6:	041b      	lsls	r3, r3, #16
100050a8:	0c05      	lsrs	r5, r0, #16
100050aa:	195b      	adds	r3, r3, r5
100050ac:	4291      	cmp	r1, r2
100050ae:	d200      	bcs.n	100050b2 <__aeabi_ddiv+0x2ca>
100050b0:	e0e6      	b.n	10005280 <__aeabi_ddiv+0x498>
100050b2:	d100      	bne.n	100050b6 <__aeabi_ddiv+0x2ce>
100050b4:	e13d      	b.n	10005332 <__aeabi_ddiv+0x54a>
100050b6:	2201      	movs	r2, #1
100050b8:	4317      	orrs	r7, r2
100050ba:	e05a      	b.n	10005172 <__aeabi_ddiv+0x38a>
100050bc:	0089      	lsls	r1, r1, #2
100050be:	4823      	ldr	r0, [pc, #140]	; (1000514c <__aeabi_ddiv+0x364>)
100050c0:	468c      	mov	ip, r1
100050c2:	4460      	add	r0, ip
100050c4:	6801      	ldr	r1, [r0, #0]
100050c6:	468f      	mov	pc, r1
100050c8:	9b01      	ldr	r3, [sp, #4]
100050ca:	4a1e      	ldr	r2, [pc, #120]	; (10005144 <__aeabi_ddiv+0x35c>)
100050cc:	2600      	movs	r6, #0
100050ce:	2700      	movs	r7, #0
100050d0:	2000      	movs	r0, #0
100050d2:	2100      	movs	r1, #0
100050d4:	1c38      	adds	r0, r7, #0
100050d6:	0d0f      	lsrs	r7, r1, #20
100050d8:	053c      	lsls	r4, r7, #20
100050da:	4d1d      	ldr	r5, [pc, #116]	; (10005150 <__aeabi_ddiv+0x368>)
100050dc:	4334      	orrs	r4, r6
100050de:	0512      	lsls	r2, r2, #20
100050e0:	4025      	ands	r5, r4
100050e2:	4315      	orrs	r5, r2
100050e4:	006e      	lsls	r6, r5, #1
100050e6:	07db      	lsls	r3, r3, #31
100050e8:	0871      	lsrs	r1, r6, #1
100050ea:	4319      	orrs	r1, r3
100050ec:	b007      	add	sp, #28
100050ee:	bc3c      	pop	{r2, r3, r4, r5}
100050f0:	4690      	mov	r8, r2
100050f2:	4699      	mov	r9, r3
100050f4:	46a2      	mov	sl, r4
100050f6:	46ab      	mov	fp, r5
100050f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100050fa:	1c21      	adds	r1, r4, #0
100050fc:	2003      	movs	r0, #3
100050fe:	4329      	orrs	r1, r5
10005100:	9002      	str	r0, [sp, #8]
10005102:	d000      	beq.n	10005106 <__aeabi_ddiv+0x31e>
10005104:	e6f0      	b.n	10004ee8 <__aeabi_ddiv+0x100>
10005106:	2302      	movs	r3, #2
10005108:	2400      	movs	r4, #0
1000510a:	2500      	movs	r5, #0
1000510c:	9302      	str	r3, [sp, #8]
1000510e:	e6eb      	b.n	10004ee8 <__aeabi_ddiv+0x100>
10005110:	200c      	movs	r0, #12
10005112:	2103      	movs	r1, #3
10005114:	4682      	mov	sl, r0
10005116:	9100      	str	r1, [sp, #0]
10005118:	e6a7      	b.n	10004e6a <__aeabi_ddiv+0x82>
1000511a:	2704      	movs	r7, #4
1000511c:	2301      	movs	r3, #1
1000511e:	46ba      	mov	sl, r7
10005120:	2600      	movs	r6, #0
10005122:	2700      	movs	r7, #0
10005124:	9300      	str	r3, [sp, #0]
10005126:	e6a0      	b.n	10004e6a <__aeabi_ddiv+0x82>
10005128:	2101      	movs	r1, #1
1000512a:	2400      	movs	r4, #0
1000512c:	2500      	movs	r5, #0
1000512e:	9102      	str	r1, [sp, #8]
10005130:	e6da      	b.n	10004ee8 <__aeabi_ddiv+0x100>
10005132:	2701      	movs	r7, #1
10005134:	2300      	movs	r3, #0
10005136:	4e07      	ldr	r6, [pc, #28]	; (10005154 <__aeabi_ddiv+0x36c>)
10005138:	427f      	negs	r7, r7
1000513a:	4a02      	ldr	r2, [pc, #8]	; (10005144 <__aeabi_ddiv+0x35c>)
1000513c:	e7c8      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
1000513e:	46c0      	nop			; (mov r8, r8)
10005140:	fffffc0d 	.word	0xfffffc0d
10005144:	000007ff 	.word	0x000007ff
10005148:	fffffc01 	.word	0xfffffc01
1000514c:	100064a8 	.word	0x100064a8
10005150:	800fffff 	.word	0x800fffff
10005154:	000fffff 	.word	0x000fffff
10005158:	1c2f      	adds	r7, r5, #0
1000515a:	465a      	mov	r2, fp
1000515c:	9d02      	ldr	r5, [sp, #8]
1000515e:	1c26      	adds	r6, r4, #0
10005160:	9201      	str	r2, [sp, #4]
10005162:	2d02      	cmp	r5, #2
10005164:	d0b0      	beq.n	100050c8 <__aeabi_ddiv+0x2e0>
10005166:	2d03      	cmp	r5, #3
10005168:	d100      	bne.n	1000516c <__aeabi_ddiv+0x384>
1000516a:	e101      	b.n	10005370 <__aeabi_ddiv+0x588>
1000516c:	2d01      	cmp	r5, #1
1000516e:	d100      	bne.n	10005172 <__aeabi_ddiv+0x38a>
10005170:	e09c      	b.n	100052ac <__aeabi_ddiv+0x4c4>
10005172:	9b04      	ldr	r3, [sp, #16]
10005174:	4882      	ldr	r0, [pc, #520]	; (10005380 <__aeabi_ddiv+0x598>)
10005176:	181a      	adds	r2, r3, r0
10005178:	2a00      	cmp	r2, #0
1000517a:	dc00      	bgt.n	1000517e <__aeabi_ddiv+0x396>
1000517c:	e08c      	b.n	10005298 <__aeabi_ddiv+0x4b0>
1000517e:	240f      	movs	r4, #15
10005180:	403c      	ands	r4, r7
10005182:	2c04      	cmp	r4, #4
10005184:	d005      	beq.n	10005192 <__aeabi_ddiv+0x3aa>
10005186:	1d3b      	adds	r3, r7, #4
10005188:	42bb      	cmp	r3, r7
1000518a:	41bf      	sbcs	r7, r7
1000518c:	427d      	negs	r5, r7
1000518e:	1976      	adds	r6, r6, r5
10005190:	1c1f      	adds	r7, r3, #0
10005192:	01f1      	lsls	r1, r6, #7
10005194:	d505      	bpl.n	100051a2 <__aeabi_ddiv+0x3ba>
10005196:	4a7b      	ldr	r2, [pc, #492]	; (10005384 <__aeabi_ddiv+0x59c>)
10005198:	9904      	ldr	r1, [sp, #16]
1000519a:	2080      	movs	r0, #128	; 0x80
1000519c:	00c4      	lsls	r4, r0, #3
1000519e:	4016      	ands	r6, r2
100051a0:	190a      	adds	r2, r1, r4
100051a2:	4b79      	ldr	r3, [pc, #484]	; (10005388 <__aeabi_ddiv+0x5a0>)
100051a4:	429a      	cmp	r2, r3
100051a6:	dd00      	ble.n	100051aa <__aeabi_ddiv+0x3c2>
100051a8:	e78e      	b.n	100050c8 <__aeabi_ddiv+0x2e0>
100051aa:	0775      	lsls	r5, r6, #29
100051ac:	08ff      	lsrs	r7, r7, #3
100051ae:	0276      	lsls	r6, r6, #9
100051b0:	0551      	lsls	r1, r2, #21
100051b2:	432f      	orrs	r7, r5
100051b4:	0b36      	lsrs	r6, r6, #12
100051b6:	0d4a      	lsrs	r2, r1, #21
100051b8:	9b01      	ldr	r3, [sp, #4]
100051ba:	e789      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
100051bc:	2200      	movs	r2, #0
100051be:	2600      	movs	r6, #0
100051c0:	2700      	movs	r7, #0
100051c2:	e785      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
100051c4:	2080      	movs	r0, #128	; 0x80
100051c6:	0301      	lsls	r1, r0, #12
100051c8:	420e      	tst	r6, r1
100051ca:	d016      	beq.n	100051fa <__aeabi_ddiv+0x412>
100051cc:	420c      	tst	r4, r1
100051ce:	d114      	bne.n	100051fa <__aeabi_ddiv+0x412>
100051d0:	430c      	orrs	r4, r1
100051d2:	0326      	lsls	r6, r4, #12
100051d4:	0b36      	lsrs	r6, r6, #12
100051d6:	465b      	mov	r3, fp
100051d8:	1c2f      	adds	r7, r5, #0
100051da:	4a6c      	ldr	r2, [pc, #432]	; (1000538c <__aeabi_ddiv+0x5a4>)
100051dc:	e778      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
100051de:	464c      	mov	r4, r9
100051e0:	9401      	str	r4, [sp, #4]
100051e2:	9d00      	ldr	r5, [sp, #0]
100051e4:	e7bd      	b.n	10005162 <__aeabi_ddiv+0x37a>
100051e6:	42a6      	cmp	r6, r4
100051e8:	d043      	beq.n	10005272 <__aeabi_ddiv+0x48a>
100051ea:	9804      	ldr	r0, [sp, #16]
100051ec:	46b8      	mov	r8, r7
100051ee:	3801      	subs	r0, #1
100051f0:	2700      	movs	r7, #0
100051f2:	9004      	str	r0, [sp, #16]
100051f4:	46b1      	mov	r9, r6
100051f6:	9702      	str	r7, [sp, #8]
100051f8:	e68e      	b.n	10004f18 <__aeabi_ddiv+0x130>
100051fa:	430e      	orrs	r6, r1
100051fc:	0333      	lsls	r3, r6, #12
100051fe:	0b1e      	lsrs	r6, r3, #12
10005200:	4a62      	ldr	r2, [pc, #392]	; (1000538c <__aeabi_ddiv+0x5a4>)
10005202:	464b      	mov	r3, r9
10005204:	e764      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
10005206:	1c04      	adds	r4, r0, #0
10005208:	3c28      	subs	r4, #40	; 0x28
1000520a:	40a5      	lsls	r5, r4
1000520c:	1c2c      	adds	r4, r5, #0
1000520e:	2500      	movs	r5, #0
10005210:	e64b      	b.n	10004eaa <__aeabi_ddiv+0xc2>
10005212:	f000 ff7f 	bl	10006114 <__clzsi2>
10005216:	3020      	adds	r0, #32
10005218:	e63b      	b.n	10004e92 <__aeabi_ddiv+0xaa>
1000521a:	1c06      	adds	r6, r0, #0
1000521c:	3e28      	subs	r6, #40	; 0x28
1000521e:	40b7      	lsls	r7, r6
10005220:	1c3e      	adds	r6, r7, #0
10005222:	2700      	movs	r7, #0
10005224:	e609      	b.n	10004e3a <__aeabi_ddiv+0x52>
10005226:	f000 ff75 	bl	10006114 <__clzsi2>
1000522a:	3020      	adds	r0, #32
1000522c:	e5f9      	b.n	10004e22 <__aeabi_ddiv+0x3a>
1000522e:	9a02      	ldr	r2, [sp, #8]
10005230:	3e01      	subs	r6, #1
10005232:	1c11      	adds	r1, r2, #0
10005234:	4459      	add	r1, fp
10005236:	4559      	cmp	r1, fp
10005238:	4192      	sbcs	r2, r2
1000523a:	4252      	negs	r2, r2
1000523c:	1912      	adds	r2, r2, r4
1000523e:	18d3      	adds	r3, r2, r3
10005240:	429c      	cmp	r4, r3
10005242:	d204      	bcs.n	1000524e <__aeabi_ddiv+0x466>
10005244:	4298      	cmp	r0, r3
10005246:	d86b      	bhi.n	10005320 <__aeabi_ddiv+0x538>
10005248:	d016      	beq.n	10005278 <__aeabi_ddiv+0x490>
1000524a:	1a1b      	subs	r3, r3, r0
1000524c:	e6cb      	b.n	10004fe6 <__aeabi_ddiv+0x1fe>
1000524e:	42a3      	cmp	r3, r4
10005250:	d1fb      	bne.n	1000524a <__aeabi_ddiv+0x462>
10005252:	458b      	cmp	fp, r1
10005254:	d9f6      	bls.n	10005244 <__aeabi_ddiv+0x45c>
10005256:	1a23      	subs	r3, r4, r0
10005258:	e6c5      	b.n	10004fe6 <__aeabi_ddiv+0x1fe>
1000525a:	4599      	cmp	r9, r3
1000525c:	d800      	bhi.n	10005260 <__aeabi_ddiv+0x478>
1000525e:	e697      	b.n	10004f90 <__aeabi_ddiv+0x1a8>
10005260:	3f01      	subs	r7, #1
10005262:	191b      	adds	r3, r3, r4
10005264:	e694      	b.n	10004f90 <__aeabi_ddiv+0x1a8>
10005266:	9a02      	ldr	r2, [sp, #8]
10005268:	42ba      	cmp	r2, r7
1000526a:	d3e0      	bcc.n	1000522e <__aeabi_ddiv+0x446>
1000526c:	9902      	ldr	r1, [sp, #8]
1000526e:	2300      	movs	r3, #0
10005270:	e6b9      	b.n	10004fe6 <__aeabi_ddiv+0x1fe>
10005272:	42af      	cmp	r7, r5
10005274:	d9b9      	bls.n	100051ea <__aeabi_ddiv+0x402>
10005276:	e647      	b.n	10004f08 <__aeabi_ddiv+0x120>
10005278:	428f      	cmp	r7, r1
1000527a:	d851      	bhi.n	10005320 <__aeabi_ddiv+0x538>
1000527c:	2300      	movs	r3, #0
1000527e:	e6b2      	b.n	10004fe6 <__aeabi_ddiv+0x1fe>
10005280:	1909      	adds	r1, r1, r4
10005282:	3f01      	subs	r7, #1
10005284:	4658      	mov	r0, fp
10005286:	428c      	cmp	r4, r1
10005288:	d919      	bls.n	100052be <__aeabi_ddiv+0x4d6>
1000528a:	4291      	cmp	r1, r2
1000528c:	d000      	beq.n	10005290 <__aeabi_ddiv+0x4a8>
1000528e:	e712      	b.n	100050b6 <__aeabi_ddiv+0x2ce>
10005290:	4298      	cmp	r0, r3
10005292:	d000      	beq.n	10005296 <__aeabi_ddiv+0x4ae>
10005294:	e70f      	b.n	100050b6 <__aeabi_ddiv+0x2ce>
10005296:	e76c      	b.n	10005172 <__aeabi_ddiv+0x38a>
10005298:	4c3d      	ldr	r4, [pc, #244]	; (10005390 <__aeabi_ddiv+0x5a8>)
1000529a:	9d04      	ldr	r5, [sp, #16]
1000529c:	1b63      	subs	r3, r4, r5
1000529e:	2b38      	cmp	r3, #56	; 0x38
100052a0:	dd1c      	ble.n	100052dc <__aeabi_ddiv+0x4f4>
100052a2:	9b01      	ldr	r3, [sp, #4]
100052a4:	2200      	movs	r2, #0
100052a6:	2600      	movs	r6, #0
100052a8:	2700      	movs	r7, #0
100052aa:	e711      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
100052ac:	9b01      	ldr	r3, [sp, #4]
100052ae:	2200      	movs	r2, #0
100052b0:	402b      	ands	r3, r5
100052b2:	2600      	movs	r6, #0
100052b4:	2700      	movs	r7, #0
100052b6:	e70b      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
100052b8:	2701      	movs	r7, #1
100052ba:	427f      	negs	r7, r7
100052bc:	e759      	b.n	10005172 <__aeabi_ddiv+0x38a>
100052be:	428a      	cmp	r2, r1
100052c0:	d803      	bhi.n	100052ca <__aeabi_ddiv+0x4e2>
100052c2:	d000      	beq.n	100052c6 <__aeabi_ddiv+0x4de>
100052c4:	e6f7      	b.n	100050b6 <__aeabi_ddiv+0x2ce>
100052c6:	4298      	cmp	r0, r3
100052c8:	d2e2      	bcs.n	10005290 <__aeabi_ddiv+0x4a8>
100052ca:	465d      	mov	r5, fp
100052cc:	0068      	lsls	r0, r5, #1
100052ce:	4558      	cmp	r0, fp
100052d0:	41ad      	sbcs	r5, r5
100052d2:	426d      	negs	r5, r5
100052d4:	192c      	adds	r4, r5, r4
100052d6:	3f01      	subs	r7, #1
100052d8:	1909      	adds	r1, r1, r4
100052da:	e7d6      	b.n	1000528a <__aeabi_ddiv+0x4a2>
100052dc:	2b1f      	cmp	r3, #31
100052de:	dc34      	bgt.n	1000534a <__aeabi_ddiv+0x562>
100052e0:	9c04      	ldr	r4, [sp, #16]
100052e2:	4a2c      	ldr	r2, [pc, #176]	; (10005394 <__aeabi_ddiv+0x5ac>)
100052e4:	1c38      	adds	r0, r7, #0
100052e6:	18a5      	adds	r5, r4, r2
100052e8:	1c31      	adds	r1, r6, #0
100052ea:	40af      	lsls	r7, r5
100052ec:	40d8      	lsrs	r0, r3
100052ee:	40a9      	lsls	r1, r5
100052f0:	1c3c      	adds	r4, r7, #0
100052f2:	4301      	orrs	r1, r0
100052f4:	1e67      	subs	r7, r4, #1
100052f6:	41bc      	sbcs	r4, r7
100052f8:	1c0f      	adds	r7, r1, #0
100052fa:	4327      	orrs	r7, r4
100052fc:	40de      	lsrs	r6, r3
100052fe:	230f      	movs	r3, #15
10005300:	403b      	ands	r3, r7
10005302:	2b04      	cmp	r3, #4
10005304:	d005      	beq.n	10005312 <__aeabi_ddiv+0x52a>
10005306:	1d3a      	adds	r2, r7, #4
10005308:	42ba      	cmp	r2, r7
1000530a:	41bf      	sbcs	r7, r7
1000530c:	427d      	negs	r5, r7
1000530e:	1976      	adds	r6, r6, r5
10005310:	1c17      	adds	r7, r2, #0
10005312:	0232      	lsls	r2, r6, #8
10005314:	d511      	bpl.n	1000533a <__aeabi_ddiv+0x552>
10005316:	9b01      	ldr	r3, [sp, #4]
10005318:	2201      	movs	r2, #1
1000531a:	2600      	movs	r6, #0
1000531c:	2700      	movs	r7, #0
1000531e:	e6d7      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
10005320:	4459      	add	r1, fp
10005322:	4559      	cmp	r1, fp
10005324:	4192      	sbcs	r2, r2
10005326:	4252      	negs	r2, r2
10005328:	1912      	adds	r2, r2, r4
1000532a:	18d3      	adds	r3, r2, r3
1000532c:	3e01      	subs	r6, #1
1000532e:	1a1b      	subs	r3, r3, r0
10005330:	e659      	b.n	10004fe6 <__aeabi_ddiv+0x1fe>
10005332:	2b00      	cmp	r3, #0
10005334:	d1a4      	bne.n	10005280 <__aeabi_ddiv+0x498>
10005336:	2000      	movs	r0, #0
10005338:	e7aa      	b.n	10005290 <__aeabi_ddiv+0x4a8>
1000533a:	0770      	lsls	r0, r6, #29
1000533c:	08ff      	lsrs	r7, r7, #3
1000533e:	0271      	lsls	r1, r6, #9
10005340:	4307      	orrs	r7, r0
10005342:	0b0e      	lsrs	r6, r1, #12
10005344:	9b01      	ldr	r3, [sp, #4]
10005346:	2200      	movs	r2, #0
10005348:	e6c2      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
1000534a:	4913      	ldr	r1, [pc, #76]	; (10005398 <__aeabi_ddiv+0x5b0>)
1000534c:	9c04      	ldr	r4, [sp, #16]
1000534e:	1c30      	adds	r0, r6, #0
10005350:	1b0a      	subs	r2, r1, r4
10005352:	40d0      	lsrs	r0, r2
10005354:	1c05      	adds	r5, r0, #0
10005356:	2b20      	cmp	r3, #32
10005358:	d008      	beq.n	1000536c <__aeabi_ddiv+0x584>
1000535a:	4b10      	ldr	r3, [pc, #64]	; (1000539c <__aeabi_ddiv+0x5b4>)
1000535c:	18e1      	adds	r1, r4, r3
1000535e:	408e      	lsls	r6, r1
10005360:	4337      	orrs	r7, r6
10005362:	1e7b      	subs	r3, r7, #1
10005364:	419f      	sbcs	r7, r3
10005366:	432f      	orrs	r7, r5
10005368:	2600      	movs	r6, #0
1000536a:	e7c8      	b.n	100052fe <__aeabi_ddiv+0x516>
1000536c:	2600      	movs	r6, #0
1000536e:	e7f7      	b.n	10005360 <__aeabi_ddiv+0x578>
10005370:	2280      	movs	r2, #128	; 0x80
10005372:	0310      	lsls	r0, r2, #12
10005374:	4306      	orrs	r6, r0
10005376:	0331      	lsls	r1, r6, #12
10005378:	0b0e      	lsrs	r6, r1, #12
1000537a:	9b01      	ldr	r3, [sp, #4]
1000537c:	4a03      	ldr	r2, [pc, #12]	; (1000538c <__aeabi_ddiv+0x5a4>)
1000537e:	e6a7      	b.n	100050d0 <__aeabi_ddiv+0x2e8>
10005380:	000003ff 	.word	0x000003ff
10005384:	feffffff 	.word	0xfeffffff
10005388:	000007fe 	.word	0x000007fe
1000538c:	000007ff 	.word	0x000007ff
10005390:	fffffc02 	.word	0xfffffc02
10005394:	0000041e 	.word	0x0000041e
10005398:	fffffbe2 	.word	0xfffffbe2
1000539c:	0000043e 	.word	0x0000043e

100053a0 <__aeabi_dmul>:
100053a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100053a2:	4656      	mov	r6, sl
100053a4:	4644      	mov	r4, r8
100053a6:	465f      	mov	r7, fp
100053a8:	464d      	mov	r5, r9
100053aa:	b4f0      	push	{r4, r5, r6, r7}
100053ac:	004f      	lsls	r7, r1, #1
100053ae:	1c1d      	adds	r5, r3, #0
100053b0:	030b      	lsls	r3, r1, #12
100053b2:	1c14      	adds	r4, r2, #0
100053b4:	0b1a      	lsrs	r2, r3, #12
100053b6:	0d7b      	lsrs	r3, r7, #21
100053b8:	b087      	sub	sp, #28
100053ba:	1c06      	adds	r6, r0, #0
100053bc:	4692      	mov	sl, r2
100053be:	4698      	mov	r8, r3
100053c0:	0fcf      	lsrs	r7, r1, #31
100053c2:	2b00      	cmp	r3, #0
100053c4:	d121      	bne.n	1000540a <__aeabi_dmul+0x6a>
100053c6:	4302      	orrs	r2, r0
100053c8:	d100      	bne.n	100053cc <__aeabi_dmul+0x2c>
100053ca:	e149      	b.n	10005660 <__aeabi_dmul+0x2c0>
100053cc:	4653      	mov	r3, sl
100053ce:	2b00      	cmp	r3, #0
100053d0:	d100      	bne.n	100053d4 <__aeabi_dmul+0x34>
100053d2:	e1e4      	b.n	1000579e <__aeabi_dmul+0x3fe>
100053d4:	4650      	mov	r0, sl
100053d6:	f000 fe9d 	bl	10006114 <__clzsi2>
100053da:	1e03      	subs	r3, r0, #0
100053dc:	2b27      	cmp	r3, #39	; 0x27
100053de:	dd00      	ble.n	100053e2 <__aeabi_dmul+0x42>
100053e0:	e1d8      	b.n	10005794 <__aeabi_dmul+0x3f4>
100053e2:	3b08      	subs	r3, #8
100053e4:	4651      	mov	r1, sl
100053e6:	4099      	lsls	r1, r3
100053e8:	2228      	movs	r2, #40	; 0x28
100053ea:	4688      	mov	r8, r1
100053ec:	1a11      	subs	r1, r2, r0
100053ee:	1c32      	adds	r2, r6, #0
100053f0:	40ca      	lsrs	r2, r1
100053f2:	4641      	mov	r1, r8
100053f4:	430a      	orrs	r2, r1
100053f6:	4692      	mov	sl, r2
100053f8:	409e      	lsls	r6, r3
100053fa:	4bd8      	ldr	r3, [pc, #864]	; (1000575c <__aeabi_dmul+0x3bc>)
100053fc:	2200      	movs	r2, #0
100053fe:	1a18      	subs	r0, r3, r0
10005400:	2100      	movs	r1, #0
10005402:	4680      	mov	r8, r0
10005404:	4691      	mov	r9, r2
10005406:	9103      	str	r1, [sp, #12]
10005408:	e011      	b.n	1000542e <__aeabi_dmul+0x8e>
1000540a:	48d5      	ldr	r0, [pc, #852]	; (10005760 <__aeabi_dmul+0x3c0>)
1000540c:	4283      	cmp	r3, r0
1000540e:	d03e      	beq.n	1000548e <__aeabi_dmul+0xee>
10005410:	2180      	movs	r1, #128	; 0x80
10005412:	4653      	mov	r3, sl
10005414:	034a      	lsls	r2, r1, #13
10005416:	431a      	orrs	r2, r3
10005418:	00d0      	lsls	r0, r2, #3
1000541a:	0f71      	lsrs	r1, r6, #29
1000541c:	4308      	orrs	r0, r1
1000541e:	4ad1      	ldr	r2, [pc, #836]	; (10005764 <__aeabi_dmul+0x3c4>)
10005420:	4682      	mov	sl, r0
10005422:	2300      	movs	r3, #0
10005424:	2000      	movs	r0, #0
10005426:	00f6      	lsls	r6, r6, #3
10005428:	4490      	add	r8, r2
1000542a:	4699      	mov	r9, r3
1000542c:	9003      	str	r0, [sp, #12]
1000542e:	1c29      	adds	r1, r5, #0
10005430:	1c20      	adds	r0, r4, #0
10005432:	1c25      	adds	r5, r4, #0
10005434:	004a      	lsls	r2, r1, #1
10005436:	030c      	lsls	r4, r1, #12
10005438:	0fcb      	lsrs	r3, r1, #31
1000543a:	0b24      	lsrs	r4, r4, #12
1000543c:	0d52      	lsrs	r2, r2, #21
1000543e:	469b      	mov	fp, r3
10005440:	d131      	bne.n	100054a6 <__aeabi_dmul+0x106>
10005442:	1c21      	adds	r1, r4, #0
10005444:	4301      	orrs	r1, r0
10005446:	d100      	bne.n	1000544a <__aeabi_dmul+0xaa>
10005448:	e112      	b.n	10005670 <__aeabi_dmul+0x2d0>
1000544a:	2c00      	cmp	r4, #0
1000544c:	d100      	bne.n	10005450 <__aeabi_dmul+0xb0>
1000544e:	e19d      	b.n	1000578c <__aeabi_dmul+0x3ec>
10005450:	1c20      	adds	r0, r4, #0
10005452:	f000 fe5f 	bl	10006114 <__clzsi2>
10005456:	2827      	cmp	r0, #39	; 0x27
10005458:	dd00      	ble.n	1000545c <__aeabi_dmul+0xbc>
1000545a:	e191      	b.n	10005780 <__aeabi_dmul+0x3e0>
1000545c:	1c03      	adds	r3, r0, #0
1000545e:	2228      	movs	r2, #40	; 0x28
10005460:	3b08      	subs	r3, #8
10005462:	1c29      	adds	r1, r5, #0
10005464:	1a12      	subs	r2, r2, r0
10005466:	409c      	lsls	r4, r3
10005468:	40d1      	lsrs	r1, r2
1000546a:	430c      	orrs	r4, r1
1000546c:	409d      	lsls	r5, r3
1000546e:	4bbb      	ldr	r3, [pc, #748]	; (1000575c <__aeabi_dmul+0x3bc>)
10005470:	4659      	mov	r1, fp
10005472:	1a1a      	subs	r2, r3, r0
10005474:	4079      	eors	r1, r7
10005476:	2000      	movs	r0, #0
10005478:	464b      	mov	r3, r9
1000547a:	9101      	str	r1, [sp, #4]
1000547c:	4303      	orrs	r3, r0
1000547e:	2b0f      	cmp	r3, #15
10005480:	d826      	bhi.n	100054d0 <__aeabi_dmul+0x130>
10005482:	0099      	lsls	r1, r3, #2
10005484:	4bb8      	ldr	r3, [pc, #736]	; (10005768 <__aeabi_dmul+0x3c8>)
10005486:	468c      	mov	ip, r1
10005488:	4463      	add	r3, ip
1000548a:	6819      	ldr	r1, [r3, #0]
1000548c:	468f      	mov	pc, r1
1000548e:	1c11      	adds	r1, r2, #0
10005490:	4331      	orrs	r1, r6
10005492:	d000      	beq.n	10005496 <__aeabi_dmul+0xf6>
10005494:	e0df      	b.n	10005656 <__aeabi_dmul+0x2b6>
10005496:	2608      	movs	r6, #8
10005498:	2000      	movs	r0, #0
1000549a:	2102      	movs	r1, #2
1000549c:	46b1      	mov	r9, r6
1000549e:	4682      	mov	sl, r0
100054a0:	2600      	movs	r6, #0
100054a2:	9103      	str	r1, [sp, #12]
100054a4:	e7c3      	b.n	1000542e <__aeabi_dmul+0x8e>
100054a6:	48ae      	ldr	r0, [pc, #696]	; (10005760 <__aeabi_dmul+0x3c0>)
100054a8:	4282      	cmp	r2, r0
100054aa:	d100      	bne.n	100054ae <__aeabi_dmul+0x10e>
100054ac:	e0c9      	b.n	10005642 <__aeabi_dmul+0x2a2>
100054ae:	2180      	movs	r1, #128	; 0x80
100054b0:	034b      	lsls	r3, r1, #13
100054b2:	431c      	orrs	r4, r3
100054b4:	49ab      	ldr	r1, [pc, #684]	; (10005764 <__aeabi_dmul+0x3c4>)
100054b6:	0f68      	lsrs	r0, r5, #29
100054b8:	00e4      	lsls	r4, r4, #3
100054ba:	4304      	orrs	r4, r0
100054bc:	00ed      	lsls	r5, r5, #3
100054be:	1852      	adds	r2, r2, r1
100054c0:	2000      	movs	r0, #0
100054c2:	4659      	mov	r1, fp
100054c4:	4079      	eors	r1, r7
100054c6:	464b      	mov	r3, r9
100054c8:	9101      	str	r1, [sp, #4]
100054ca:	4303      	orrs	r3, r0
100054cc:	2b0f      	cmp	r3, #15
100054ce:	d9d8      	bls.n	10005482 <__aeabi_dmul+0xe2>
100054d0:	4442      	add	r2, r8
100054d2:	0433      	lsls	r3, r6, #16
100054d4:	0429      	lsls	r1, r5, #16
100054d6:	9204      	str	r2, [sp, #16]
100054d8:	0c1a      	lsrs	r2, r3, #16
100054da:	0c0f      	lsrs	r7, r1, #16
100054dc:	1c10      	adds	r0, r2, #0
100054de:	4378      	muls	r0, r7
100054e0:	0c36      	lsrs	r6, r6, #16
100054e2:	1c33      	adds	r3, r6, #0
100054e4:	4680      	mov	r8, r0
100054e6:	0c2d      	lsrs	r5, r5, #16
100054e8:	437b      	muls	r3, r7
100054ea:	1c30      	adds	r0, r6, #0
100054ec:	4368      	muls	r0, r5
100054ee:	1c11      	adds	r1, r2, #0
100054f0:	4369      	muls	r1, r5
100054f2:	469c      	mov	ip, r3
100054f4:	4643      	mov	r3, r8
100054f6:	4683      	mov	fp, r0
100054f8:	0c18      	lsrs	r0, r3, #16
100054fa:	1808      	adds	r0, r1, r0
100054fc:	4460      	add	r0, ip
100054fe:	4584      	cmp	ip, r0
10005500:	d900      	bls.n	10005504 <__aeabi_dmul+0x164>
10005502:	e11f      	b.n	10005744 <__aeabi_dmul+0x3a4>
10005504:	0c01      	lsrs	r1, r0, #16
10005506:	4643      	mov	r3, r8
10005508:	9103      	str	r1, [sp, #12]
1000550a:	0419      	lsls	r1, r3, #16
1000550c:	0c0b      	lsrs	r3, r1, #16
1000550e:	0400      	lsls	r0, r0, #16
10005510:	18c0      	adds	r0, r0, r3
10005512:	0421      	lsls	r1, r4, #16
10005514:	0c24      	lsrs	r4, r4, #16
10005516:	9005      	str	r0, [sp, #20]
10005518:	1c10      	adds	r0, r2, #0
1000551a:	4362      	muls	r2, r4
1000551c:	0c09      	lsrs	r1, r1, #16
1000551e:	9202      	str	r2, [sp, #8]
10005520:	4348      	muls	r0, r1
10005522:	1c32      	adds	r2, r6, #0
10005524:	4366      	muls	r6, r4
10005526:	434a      	muls	r2, r1
10005528:	9b02      	ldr	r3, [sp, #8]
1000552a:	46b1      	mov	r9, r6
1000552c:	0c06      	lsrs	r6, r0, #16
1000552e:	4690      	mov	r8, r2
10005530:	46b4      	mov	ip, r6
10005532:	1c1a      	adds	r2, r3, #0
10005534:	4462      	add	r2, ip
10005536:	4442      	add	r2, r8
10005538:	4590      	cmp	r8, r2
1000553a:	d902      	bls.n	10005542 <__aeabi_dmul+0x1a2>
1000553c:	2680      	movs	r6, #128	; 0x80
1000553e:	0273      	lsls	r3, r6, #9
10005540:	4499      	add	r9, r3
10005542:	0c16      	lsrs	r6, r2, #16
10005544:	46b0      	mov	r8, r6
10005546:	44c1      	add	r9, r8
10005548:	0400      	lsls	r0, r0, #16
1000554a:	464b      	mov	r3, r9
1000554c:	0c06      	lsrs	r6, r0, #16
1000554e:	0412      	lsls	r2, r2, #16
10005550:	9302      	str	r3, [sp, #8]
10005552:	1993      	adds	r3, r2, r6
10005554:	4656      	mov	r6, sl
10005556:	0432      	lsls	r2, r6, #16
10005558:	0c10      	lsrs	r0, r2, #16
1000555a:	1c02      	adds	r2, r0, #0
1000555c:	436a      	muls	r2, r5
1000555e:	469c      	mov	ip, r3
10005560:	1c03      	adds	r3, r0, #0
10005562:	437b      	muls	r3, r7
10005564:	4691      	mov	r9, r2
10005566:	0c32      	lsrs	r2, r6, #16
10005568:	4357      	muls	r7, r2
1000556a:	4698      	mov	r8, r3
1000556c:	0c1b      	lsrs	r3, r3, #16
1000556e:	469a      	mov	sl, r3
10005570:	44d1      	add	r9, sl
10005572:	44b9      	add	r9, r7
10005574:	4355      	muls	r5, r2
10005576:	454f      	cmp	r7, r9
10005578:	d902      	bls.n	10005580 <__aeabi_dmul+0x1e0>
1000557a:	2780      	movs	r7, #128	; 0x80
1000557c:	027e      	lsls	r6, r7, #9
1000557e:	19ad      	adds	r5, r5, r6
10005580:	464b      	mov	r3, r9
10005582:	0c1f      	lsrs	r7, r3, #16
10005584:	4646      	mov	r6, r8
10005586:	19ed      	adds	r5, r5, r7
10005588:	041f      	lsls	r7, r3, #16
1000558a:	0433      	lsls	r3, r6, #16
1000558c:	0c1e      	lsrs	r6, r3, #16
1000558e:	1c03      	adds	r3, r0, #0
10005590:	434b      	muls	r3, r1
10005592:	4360      	muls	r0, r4
10005594:	4351      	muls	r1, r2
10005596:	4354      	muls	r4, r2
10005598:	0c1a      	lsrs	r2, r3, #16
1000559a:	1880      	adds	r0, r0, r2
1000559c:	46b0      	mov	r8, r6
1000559e:	1840      	adds	r0, r0, r1
100055a0:	4447      	add	r7, r8
100055a2:	469a      	mov	sl, r3
100055a4:	4281      	cmp	r1, r0
100055a6:	d902      	bls.n	100055ae <__aeabi_dmul+0x20e>
100055a8:	2180      	movs	r1, #128	; 0x80
100055aa:	024e      	lsls	r6, r1, #9
100055ac:	19a4      	adds	r4, r4, r6
100055ae:	9b03      	ldr	r3, [sp, #12]
100055b0:	1c1a      	adds	r2, r3, #0
100055b2:	4462      	add	r2, ip
100055b4:	445a      	add	r2, fp
100055b6:	4562      	cmp	r2, ip
100055b8:	4189      	sbcs	r1, r1
100055ba:	424e      	negs	r6, r1
100055bc:	4651      	mov	r1, sl
100055be:	46b3      	mov	fp, r6
100055c0:	0403      	lsls	r3, r0, #16
100055c2:	040e      	lsls	r6, r1, #16
100055c4:	469c      	mov	ip, r3
100055c6:	9902      	ldr	r1, [sp, #8]
100055c8:	0c33      	lsrs	r3, r6, #16
100055ca:	4463      	add	r3, ip
100055cc:	18ce      	adds	r6, r1, r3
100055ce:	46b0      	mov	r8, r6
100055d0:	46c2      	mov	sl, r8
100055d2:	44da      	add	sl, fp
100055d4:	19d2      	adds	r2, r2, r7
100055d6:	42ba      	cmp	r2, r7
100055d8:	41bf      	sbcs	r7, r7
100055da:	4651      	mov	r1, sl
100055dc:	427b      	negs	r3, r7
100055de:	186f      	adds	r7, r5, r1
100055e0:	18f9      	adds	r1, r7, r3
100055e2:	4699      	mov	r9, r3
100055e4:	45da      	cmp	sl, fp
100055e6:	419b      	sbcs	r3, r3
100055e8:	425e      	negs	r6, r3
100055ea:	9b02      	ldr	r3, [sp, #8]
100055ec:	46b3      	mov	fp, r6
100055ee:	4598      	cmp	r8, r3
100055f0:	41b6      	sbcs	r6, r6
100055f2:	4276      	negs	r6, r6
100055f4:	465b      	mov	r3, fp
100055f6:	431e      	orrs	r6, r3
100055f8:	0c00      	lsrs	r0, r0, #16
100055fa:	4549      	cmp	r1, r9
100055fc:	419b      	sbcs	r3, r3
100055fe:	42af      	cmp	r7, r5
10005600:	41ad      	sbcs	r5, r5
10005602:	1836      	adds	r6, r6, r0
10005604:	426f      	negs	r7, r5
10005606:	4258      	negs	r0, r3
10005608:	4338      	orrs	r0, r7
1000560a:	1836      	adds	r6, r6, r0
1000560c:	9805      	ldr	r0, [sp, #20]
1000560e:	1934      	adds	r4, r6, r4
10005610:	0256      	lsls	r6, r2, #9
10005612:	4306      	orrs	r6, r0
10005614:	0dcb      	lsrs	r3, r1, #23
10005616:	0264      	lsls	r4, r4, #9
10005618:	1e70      	subs	r0, r6, #1
1000561a:	4186      	sbcs	r6, r0
1000561c:	0dd2      	lsrs	r2, r2, #23
1000561e:	4316      	orrs	r6, r2
10005620:	0249      	lsls	r1, r1, #9
10005622:	431c      	orrs	r4, r3
10005624:	430e      	orrs	r6, r1
10005626:	01e0      	lsls	r0, r4, #7
10005628:	d52f      	bpl.n	1000568a <__aeabi_dmul+0x2ea>
1000562a:	2701      	movs	r7, #1
1000562c:	9d04      	ldr	r5, [sp, #16]
1000562e:	4037      	ands	r7, r6
10005630:	0873      	lsrs	r3, r6, #1
10005632:	1c3e      	adds	r6, r7, #0
10005634:	07e0      	lsls	r0, r4, #31
10005636:	3501      	adds	r5, #1
10005638:	431e      	orrs	r6, r3
1000563a:	9504      	str	r5, [sp, #16]
1000563c:	4306      	orrs	r6, r0
1000563e:	0864      	lsrs	r4, r4, #1
10005640:	e023      	b.n	1000568a <__aeabi_dmul+0x2ea>
10005642:	1c23      	adds	r3, r4, #0
10005644:	432b      	orrs	r3, r5
10005646:	2003      	movs	r0, #3
10005648:	2b00      	cmp	r3, #0
1000564a:	d000      	beq.n	1000564e <__aeabi_dmul+0x2ae>
1000564c:	e739      	b.n	100054c2 <__aeabi_dmul+0x122>
1000564e:	2400      	movs	r4, #0
10005650:	2500      	movs	r5, #0
10005652:	2002      	movs	r0, #2
10005654:	e735      	b.n	100054c2 <__aeabi_dmul+0x122>
10005656:	220c      	movs	r2, #12
10005658:	2303      	movs	r3, #3
1000565a:	4691      	mov	r9, r2
1000565c:	9303      	str	r3, [sp, #12]
1000565e:	e6e6      	b.n	1000542e <__aeabi_dmul+0x8e>
10005660:	2604      	movs	r6, #4
10005662:	2300      	movs	r3, #0
10005664:	2001      	movs	r0, #1
10005666:	46b1      	mov	r9, r6
10005668:	469a      	mov	sl, r3
1000566a:	2600      	movs	r6, #0
1000566c:	9003      	str	r0, [sp, #12]
1000566e:	e6de      	b.n	1000542e <__aeabi_dmul+0x8e>
10005670:	2400      	movs	r4, #0
10005672:	2500      	movs	r5, #0
10005674:	2001      	movs	r0, #1
10005676:	e724      	b.n	100054c2 <__aeabi_dmul+0x122>
10005678:	9803      	ldr	r0, [sp, #12]
1000567a:	4654      	mov	r4, sl
1000567c:	2802      	cmp	r0, #2
1000567e:	d044      	beq.n	1000570a <__aeabi_dmul+0x36a>
10005680:	2803      	cmp	r0, #3
10005682:	d100      	bne.n	10005686 <__aeabi_dmul+0x2e6>
10005684:	e0ea      	b.n	1000585c <__aeabi_dmul+0x4bc>
10005686:	2801      	cmp	r0, #1
10005688:	d060      	beq.n	1000574c <__aeabi_dmul+0x3ac>
1000568a:	9a04      	ldr	r2, [sp, #16]
1000568c:	4937      	ldr	r1, [pc, #220]	; (1000576c <__aeabi_dmul+0x3cc>)
1000568e:	1850      	adds	r0, r2, r1
10005690:	2800      	cmp	r0, #0
10005692:	dc00      	bgt.n	10005696 <__aeabi_dmul+0x2f6>
10005694:	e095      	b.n	100057c2 <__aeabi_dmul+0x422>
10005696:	270f      	movs	r7, #15
10005698:	4037      	ands	r7, r6
1000569a:	2f04      	cmp	r7, #4
1000569c:	d005      	beq.n	100056aa <__aeabi_dmul+0x30a>
1000569e:	1d31      	adds	r1, r6, #4
100056a0:	42b1      	cmp	r1, r6
100056a2:	41b6      	sbcs	r6, r6
100056a4:	4275      	negs	r5, r6
100056a6:	1964      	adds	r4, r4, r5
100056a8:	1c0e      	adds	r6, r1, #0
100056aa:	01e1      	lsls	r1, r4, #7
100056ac:	d505      	bpl.n	100056ba <__aeabi_dmul+0x31a>
100056ae:	4830      	ldr	r0, [pc, #192]	; (10005770 <__aeabi_dmul+0x3d0>)
100056b0:	9a04      	ldr	r2, [sp, #16]
100056b2:	2380      	movs	r3, #128	; 0x80
100056b4:	00df      	lsls	r7, r3, #3
100056b6:	4004      	ands	r4, r0
100056b8:	19d0      	adds	r0, r2, r7
100056ba:	492e      	ldr	r1, [pc, #184]	; (10005774 <__aeabi_dmul+0x3d4>)
100056bc:	4288      	cmp	r0, r1
100056be:	dc24      	bgt.n	1000570a <__aeabi_dmul+0x36a>
100056c0:	9b01      	ldr	r3, [sp, #4]
100056c2:	0765      	lsls	r5, r4, #29
100056c4:	08f6      	lsrs	r6, r6, #3
100056c6:	0264      	lsls	r4, r4, #9
100056c8:	0542      	lsls	r2, r0, #21
100056ca:	2701      	movs	r7, #1
100056cc:	432e      	orrs	r6, r5
100056ce:	0b24      	lsrs	r4, r4, #12
100056d0:	0d52      	lsrs	r2, r2, #21
100056d2:	401f      	ands	r7, r3
100056d4:	2000      	movs	r0, #0
100056d6:	2100      	movs	r1, #0
100056d8:	0d09      	lsrs	r1, r1, #20
100056da:	050d      	lsls	r5, r1, #20
100056dc:	4325      	orrs	r5, r4
100056de:	4c26      	ldr	r4, [pc, #152]	; (10005778 <__aeabi_dmul+0x3d8>)
100056e0:	0512      	lsls	r2, r2, #20
100056e2:	402c      	ands	r4, r5
100056e4:	4314      	orrs	r4, r2
100056e6:	0063      	lsls	r3, r4, #1
100056e8:	1c30      	adds	r0, r6, #0
100056ea:	085e      	lsrs	r6, r3, #1
100056ec:	07ff      	lsls	r7, r7, #31
100056ee:	1c31      	adds	r1, r6, #0
100056f0:	4339      	orrs	r1, r7
100056f2:	b007      	add	sp, #28
100056f4:	bc3c      	pop	{r2, r3, r4, r5}
100056f6:	4690      	mov	r8, r2
100056f8:	4699      	mov	r9, r3
100056fa:	46a2      	mov	sl, r4
100056fc:	46ab      	mov	fp, r5
100056fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005700:	465a      	mov	r2, fp
10005702:	1c2e      	adds	r6, r5, #0
10005704:	9201      	str	r2, [sp, #4]
10005706:	2802      	cmp	r0, #2
10005708:	d1ba      	bne.n	10005680 <__aeabi_dmul+0x2e0>
1000570a:	9e01      	ldr	r6, [sp, #4]
1000570c:	2701      	movs	r7, #1
1000570e:	4037      	ands	r7, r6
10005710:	4a13      	ldr	r2, [pc, #76]	; (10005760 <__aeabi_dmul+0x3c0>)
10005712:	2400      	movs	r4, #0
10005714:	2600      	movs	r6, #0
10005716:	e7dd      	b.n	100056d4 <__aeabi_dmul+0x334>
10005718:	4654      	mov	r4, sl
1000571a:	9701      	str	r7, [sp, #4]
1000571c:	9803      	ldr	r0, [sp, #12]
1000571e:	e7ad      	b.n	1000567c <__aeabi_dmul+0x2dc>
10005720:	2601      	movs	r6, #1
10005722:	2700      	movs	r7, #0
10005724:	4c15      	ldr	r4, [pc, #84]	; (1000577c <__aeabi_dmul+0x3dc>)
10005726:	4276      	negs	r6, r6
10005728:	4a0d      	ldr	r2, [pc, #52]	; (10005760 <__aeabi_dmul+0x3c0>)
1000572a:	e7d3      	b.n	100056d4 <__aeabi_dmul+0x334>
1000572c:	1c2e      	adds	r6, r5, #0
1000572e:	e7a5      	b.n	1000567c <__aeabi_dmul+0x2dc>
10005730:	2280      	movs	r2, #128	; 0x80
10005732:	0313      	lsls	r3, r2, #12
10005734:	4651      	mov	r1, sl
10005736:	4219      	tst	r1, r3
10005738:	d135      	bne.n	100057a6 <__aeabi_dmul+0x406>
1000573a:	430b      	orrs	r3, r1
1000573c:	031d      	lsls	r5, r3, #12
1000573e:	0b2c      	lsrs	r4, r5, #12
10005740:	4a07      	ldr	r2, [pc, #28]	; (10005760 <__aeabi_dmul+0x3c0>)
10005742:	e7c7      	b.n	100056d4 <__aeabi_dmul+0x334>
10005744:	2180      	movs	r1, #128	; 0x80
10005746:	024b      	lsls	r3, r1, #9
10005748:	449b      	add	fp, r3
1000574a:	e6db      	b.n	10005504 <__aeabi_dmul+0x164>
1000574c:	9b01      	ldr	r3, [sp, #4]
1000574e:	2200      	movs	r2, #0
10005750:	4018      	ands	r0, r3
10005752:	b2c7      	uxtb	r7, r0
10005754:	2400      	movs	r4, #0
10005756:	2600      	movs	r6, #0
10005758:	e7bc      	b.n	100056d4 <__aeabi_dmul+0x334>
1000575a:	46c0      	nop			; (mov r8, r8)
1000575c:	fffffc0d 	.word	0xfffffc0d
10005760:	000007ff 	.word	0x000007ff
10005764:	fffffc01 	.word	0xfffffc01
10005768:	100064e8 	.word	0x100064e8
1000576c:	000003ff 	.word	0x000003ff
10005770:	feffffff 	.word	0xfeffffff
10005774:	000007fe 	.word	0x000007fe
10005778:	800fffff 	.word	0x800fffff
1000577c:	000fffff 	.word	0x000fffff
10005780:	1c04      	adds	r4, r0, #0
10005782:	3c28      	subs	r4, #40	; 0x28
10005784:	40a5      	lsls	r5, r4
10005786:	1c2c      	adds	r4, r5, #0
10005788:	2500      	movs	r5, #0
1000578a:	e670      	b.n	1000546e <__aeabi_dmul+0xce>
1000578c:	f000 fcc2 	bl	10006114 <__clzsi2>
10005790:	3020      	adds	r0, #32
10005792:	e660      	b.n	10005456 <__aeabi_dmul+0xb6>
10005794:	3b28      	subs	r3, #40	; 0x28
10005796:	409e      	lsls	r6, r3
10005798:	46b2      	mov	sl, r6
1000579a:	2600      	movs	r6, #0
1000579c:	e62d      	b.n	100053fa <__aeabi_dmul+0x5a>
1000579e:	f000 fcb9 	bl	10006114 <__clzsi2>
100057a2:	3020      	adds	r0, #32
100057a4:	e619      	b.n	100053da <__aeabi_dmul+0x3a>
100057a6:	421c      	tst	r4, r3
100057a8:	d106      	bne.n	100057b8 <__aeabi_dmul+0x418>
100057aa:	431c      	orrs	r4, r3
100057ac:	0326      	lsls	r6, r4, #12
100057ae:	0b34      	lsrs	r4, r6, #12
100057b0:	465f      	mov	r7, fp
100057b2:	1c2e      	adds	r6, r5, #0
100057b4:	4a2e      	ldr	r2, [pc, #184]	; (10005870 <__aeabi_dmul+0x4d0>)
100057b6:	e78d      	b.n	100056d4 <__aeabi_dmul+0x334>
100057b8:	430b      	orrs	r3, r1
100057ba:	0318      	lsls	r0, r3, #12
100057bc:	0b04      	lsrs	r4, r0, #12
100057be:	4a2c      	ldr	r2, [pc, #176]	; (10005870 <__aeabi_dmul+0x4d0>)
100057c0:	e788      	b.n	100056d4 <__aeabi_dmul+0x334>
100057c2:	4f2c      	ldr	r7, [pc, #176]	; (10005874 <__aeabi_dmul+0x4d4>)
100057c4:	9d04      	ldr	r5, [sp, #16]
100057c6:	1b7b      	subs	r3, r7, r5
100057c8:	2b38      	cmp	r3, #56	; 0x38
100057ca:	dd06      	ble.n	100057da <__aeabi_dmul+0x43a>
100057cc:	9e01      	ldr	r6, [sp, #4]
100057ce:	2701      	movs	r7, #1
100057d0:	4037      	ands	r7, r6
100057d2:	2200      	movs	r2, #0
100057d4:	2400      	movs	r4, #0
100057d6:	2600      	movs	r6, #0
100057d8:	e77c      	b.n	100056d4 <__aeabi_dmul+0x334>
100057da:	2b1f      	cmp	r3, #31
100057dc:	dc21      	bgt.n	10005822 <__aeabi_dmul+0x482>
100057de:	9a04      	ldr	r2, [sp, #16]
100057e0:	4f25      	ldr	r7, [pc, #148]	; (10005878 <__aeabi_dmul+0x4d8>)
100057e2:	1c35      	adds	r5, r6, #0
100057e4:	19d1      	adds	r1, r2, r7
100057e6:	1c20      	adds	r0, r4, #0
100057e8:	408e      	lsls	r6, r1
100057ea:	40dd      	lsrs	r5, r3
100057ec:	4088      	lsls	r0, r1
100057ee:	1c32      	adds	r2, r6, #0
100057f0:	4328      	orrs	r0, r5
100057f2:	1e56      	subs	r6, r2, #1
100057f4:	41b2      	sbcs	r2, r6
100057f6:	1c06      	adds	r6, r0, #0
100057f8:	4316      	orrs	r6, r2
100057fa:	40dc      	lsrs	r4, r3
100057fc:	230f      	movs	r3, #15
100057fe:	4033      	ands	r3, r6
10005800:	2b04      	cmp	r3, #4
10005802:	d005      	beq.n	10005810 <__aeabi_dmul+0x470>
10005804:	1d37      	adds	r7, r6, #4
10005806:	42b7      	cmp	r7, r6
10005808:	41b6      	sbcs	r6, r6
1000580a:	4271      	negs	r1, r6
1000580c:	1864      	adds	r4, r4, r1
1000580e:	1c3e      	adds	r6, r7, #0
10005810:	0225      	lsls	r5, r4, #8
10005812:	d517      	bpl.n	10005844 <__aeabi_dmul+0x4a4>
10005814:	9b01      	ldr	r3, [sp, #4]
10005816:	2701      	movs	r7, #1
10005818:	401f      	ands	r7, r3
1000581a:	2201      	movs	r2, #1
1000581c:	2400      	movs	r4, #0
1000581e:	2600      	movs	r6, #0
10005820:	e758      	b.n	100056d4 <__aeabi_dmul+0x334>
10005822:	4816      	ldr	r0, [pc, #88]	; (1000587c <__aeabi_dmul+0x4dc>)
10005824:	9a04      	ldr	r2, [sp, #16]
10005826:	1c21      	adds	r1, r4, #0
10005828:	1a87      	subs	r7, r0, r2
1000582a:	40f9      	lsrs	r1, r7
1000582c:	1c0d      	adds	r5, r1, #0
1000582e:	2b20      	cmp	r3, #32
10005830:	d012      	beq.n	10005858 <__aeabi_dmul+0x4b8>
10005832:	4b13      	ldr	r3, [pc, #76]	; (10005880 <__aeabi_dmul+0x4e0>)
10005834:	18d0      	adds	r0, r2, r3
10005836:	4084      	lsls	r4, r0
10005838:	4326      	orrs	r6, r4
1000583a:	1e72      	subs	r2, r6, #1
1000583c:	4196      	sbcs	r6, r2
1000583e:	432e      	orrs	r6, r5
10005840:	2400      	movs	r4, #0
10005842:	e7db      	b.n	100057fc <__aeabi_dmul+0x45c>
10005844:	9a01      	ldr	r2, [sp, #4]
10005846:	0765      	lsls	r5, r4, #29
10005848:	08f6      	lsrs	r6, r6, #3
1000584a:	0260      	lsls	r0, r4, #9
1000584c:	2701      	movs	r7, #1
1000584e:	4017      	ands	r7, r2
10005850:	432e      	orrs	r6, r5
10005852:	0b04      	lsrs	r4, r0, #12
10005854:	2200      	movs	r2, #0
10005856:	e73d      	b.n	100056d4 <__aeabi_dmul+0x334>
10005858:	2400      	movs	r4, #0
1000585a:	e7ed      	b.n	10005838 <__aeabi_dmul+0x498>
1000585c:	2180      	movs	r1, #128	; 0x80
1000585e:	030f      	lsls	r7, r1, #12
10005860:	433c      	orrs	r4, r7
10005862:	9801      	ldr	r0, [sp, #4]
10005864:	0324      	lsls	r4, r4, #12
10005866:	2701      	movs	r7, #1
10005868:	0b24      	lsrs	r4, r4, #12
1000586a:	4007      	ands	r7, r0
1000586c:	4a00      	ldr	r2, [pc, #0]	; (10005870 <__aeabi_dmul+0x4d0>)
1000586e:	e731      	b.n	100056d4 <__aeabi_dmul+0x334>
10005870:	000007ff 	.word	0x000007ff
10005874:	fffffc02 	.word	0xfffffc02
10005878:	0000041e 	.word	0x0000041e
1000587c:	fffffbe2 	.word	0xfffffbe2
10005880:	0000043e 	.word	0x0000043e

10005884 <__aeabi_dsub>:
10005884:	b5f0      	push	{r4, r5, r6, r7, lr}
10005886:	4657      	mov	r7, sl
10005888:	464e      	mov	r6, r9
1000588a:	4645      	mov	r5, r8
1000588c:	b4e0      	push	{r5, r6, r7}
1000588e:	1c07      	adds	r7, r0, #0
10005890:	030d      	lsls	r5, r1, #12
10005892:	004e      	lsls	r6, r1, #1
10005894:	0a68      	lsrs	r0, r5, #9
10005896:	0fcc      	lsrs	r4, r1, #31
10005898:	0f79      	lsrs	r1, r7, #29
1000589a:	4308      	orrs	r0, r1
1000589c:	4684      	mov	ip, r0
1000589e:	1c11      	adds	r1, r2, #0
100058a0:	0318      	lsls	r0, r3, #12
100058a2:	005a      	lsls	r2, r3, #1
100058a4:	00fd      	lsls	r5, r7, #3
100058a6:	0a40      	lsrs	r0, r0, #9
100058a8:	0fdf      	lsrs	r7, r3, #31
100058aa:	0f4b      	lsrs	r3, r1, #29
100058ac:	4318      	orrs	r0, r3
100058ae:	4bca      	ldr	r3, [pc, #808]	; (10005bd8 <__aeabi_dsub+0x354>)
100058b0:	00c9      	lsls	r1, r1, #3
100058b2:	0d76      	lsrs	r6, r6, #21
100058b4:	0d52      	lsrs	r2, r2, #21
100058b6:	468a      	mov	sl, r1
100058b8:	429a      	cmp	r2, r3
100058ba:	d100      	bne.n	100058be <__aeabi_dsub+0x3a>
100058bc:	e0e0      	b.n	10005a80 <__aeabi_dsub+0x1fc>
100058be:	2301      	movs	r3, #1
100058c0:	405f      	eors	r7, r3
100058c2:	46b9      	mov	r9, r7
100058c4:	42bc      	cmp	r4, r7
100058c6:	d100      	bne.n	100058ca <__aeabi_dsub+0x46>
100058c8:	e0a8      	b.n	10005a1c <__aeabi_dsub+0x198>
100058ca:	1ab7      	subs	r7, r6, r2
100058cc:	2f00      	cmp	r7, #0
100058ce:	dc00      	bgt.n	100058d2 <__aeabi_dsub+0x4e>
100058d0:	e110      	b.n	10005af4 <__aeabi_dsub+0x270>
100058d2:	2a00      	cmp	r2, #0
100058d4:	d112      	bne.n	100058fc <__aeabi_dsub+0x78>
100058d6:	4652      	mov	r2, sl
100058d8:	4302      	orrs	r2, r0
100058da:	d100      	bne.n	100058de <__aeabi_dsub+0x5a>
100058dc:	e0d4      	b.n	10005a88 <__aeabi_dsub+0x204>
100058de:	3f01      	subs	r7, #1
100058e0:	2f00      	cmp	r7, #0
100058e2:	d000      	beq.n	100058e6 <__aeabi_dsub+0x62>
100058e4:	e160      	b.n	10005ba8 <__aeabi_dsub+0x324>
100058e6:	4651      	mov	r1, sl
100058e8:	1a6f      	subs	r7, r5, r1
100058ea:	42bd      	cmp	r5, r7
100058ec:	41ad      	sbcs	r5, r5
100058ee:	4662      	mov	r2, ip
100058f0:	426b      	negs	r3, r5
100058f2:	1a10      	subs	r0, r2, r0
100058f4:	1c3d      	adds	r5, r7, #0
100058f6:	1ac3      	subs	r3, r0, r3
100058f8:	1c37      	adds	r7, r6, #0
100058fa:	e024      	b.n	10005946 <__aeabi_dsub+0xc2>
100058fc:	4ab6      	ldr	r2, [pc, #728]	; (10005bd8 <__aeabi_dsub+0x354>)
100058fe:	4296      	cmp	r6, r2
10005900:	d100      	bne.n	10005904 <__aeabi_dsub+0x80>
10005902:	e0e3      	b.n	10005acc <__aeabi_dsub+0x248>
10005904:	2180      	movs	r1, #128	; 0x80
10005906:	040b      	lsls	r3, r1, #16
10005908:	4318      	orrs	r0, r3
1000590a:	2f38      	cmp	r7, #56	; 0x38
1000590c:	dd00      	ble.n	10005910 <__aeabi_dsub+0x8c>
1000590e:	e123      	b.n	10005b58 <__aeabi_dsub+0x2d4>
10005910:	2f1f      	cmp	r7, #31
10005912:	dd00      	ble.n	10005916 <__aeabi_dsub+0x92>
10005914:	e166      	b.n	10005be4 <__aeabi_dsub+0x360>
10005916:	2120      	movs	r1, #32
10005918:	1bc9      	subs	r1, r1, r7
1000591a:	1c02      	adds	r2, r0, #0
1000591c:	4653      	mov	r3, sl
1000591e:	408a      	lsls	r2, r1
10005920:	40fb      	lsrs	r3, r7
10005922:	431a      	orrs	r2, r3
10005924:	4653      	mov	r3, sl
10005926:	408b      	lsls	r3, r1
10005928:	1c19      	adds	r1, r3, #0
1000592a:	1e4b      	subs	r3, r1, #1
1000592c:	4199      	sbcs	r1, r3
1000592e:	1c03      	adds	r3, r0, #0
10005930:	430a      	orrs	r2, r1
10005932:	40fb      	lsrs	r3, r7
10005934:	1aaa      	subs	r2, r5, r2
10005936:	4667      	mov	r7, ip
10005938:	4295      	cmp	r5, r2
1000593a:	41ad      	sbcs	r5, r5
1000593c:	1af8      	subs	r0, r7, r3
1000593e:	426b      	negs	r3, r5
10005940:	1ac3      	subs	r3, r0, r3
10005942:	1c15      	adds	r5, r2, #0
10005944:	1c37      	adds	r7, r6, #0
10005946:	021a      	lsls	r2, r3, #8
10005948:	d400      	bmi.n	1000594c <__aeabi_dsub+0xc8>
1000594a:	e0c7      	b.n	10005adc <__aeabi_dsub+0x258>
1000594c:	025e      	lsls	r6, r3, #9
1000594e:	0a71      	lsrs	r1, r6, #9
10005950:	4688      	mov	r8, r1
10005952:	4642      	mov	r2, r8
10005954:	2a00      	cmp	r2, #0
10005956:	d100      	bne.n	1000595a <__aeabi_dsub+0xd6>
10005958:	e0f0      	b.n	10005b3c <__aeabi_dsub+0x2b8>
1000595a:	4640      	mov	r0, r8
1000595c:	f000 fbda 	bl	10006114 <__clzsi2>
10005960:	1c02      	adds	r2, r0, #0
10005962:	3a08      	subs	r2, #8
10005964:	2a1f      	cmp	r2, #31
10005966:	dd00      	ble.n	1000596a <__aeabi_dsub+0xe6>
10005968:	e0f1      	b.n	10005b4e <__aeabi_dsub+0x2ca>
1000596a:	2328      	movs	r3, #40	; 0x28
1000596c:	1a18      	subs	r0, r3, r0
1000596e:	1c2e      	adds	r6, r5, #0
10005970:	4641      	mov	r1, r8
10005972:	40c6      	lsrs	r6, r0
10005974:	4091      	lsls	r1, r2
10005976:	1c33      	adds	r3, r6, #0
10005978:	430b      	orrs	r3, r1
1000597a:	4095      	lsls	r5, r2
1000597c:	4297      	cmp	r7, r2
1000597e:	dd00      	ble.n	10005982 <__aeabi_dsub+0xfe>
10005980:	e0a9      	b.n	10005ad6 <__aeabi_dsub+0x252>
10005982:	1bd0      	subs	r0, r2, r7
10005984:	1c41      	adds	r1, r0, #1
10005986:	291f      	cmp	r1, #31
10005988:	dd00      	ble.n	1000598c <__aeabi_dsub+0x108>
1000598a:	e112      	b.n	10005bb2 <__aeabi_dsub+0x32e>
1000598c:	271f      	movs	r7, #31
1000598e:	1a3a      	subs	r2, r7, r0
10005990:	1c2e      	adds	r6, r5, #0
10005992:	1c18      	adds	r0, r3, #0
10005994:	40ce      	lsrs	r6, r1
10005996:	4090      	lsls	r0, r2
10005998:	4095      	lsls	r5, r2
1000599a:	4330      	orrs	r0, r6
1000599c:	1e6a      	subs	r2, r5, #1
1000599e:	4195      	sbcs	r5, r2
100059a0:	40cb      	lsrs	r3, r1
100059a2:	4305      	orrs	r5, r0
100059a4:	2101      	movs	r1, #1
100059a6:	2700      	movs	r7, #0
100059a8:	260f      	movs	r6, #15
100059aa:	402e      	ands	r6, r5
100059ac:	2e04      	cmp	r6, #4
100059ae:	d100      	bne.n	100059b2 <__aeabi_dsub+0x12e>
100059b0:	e072      	b.n	10005a98 <__aeabi_dsub+0x214>
100059b2:	1d2e      	adds	r6, r5, #4
100059b4:	42ae      	cmp	r6, r5
100059b6:	41ad      	sbcs	r5, r5
100059b8:	4268      	negs	r0, r5
100059ba:	2280      	movs	r2, #128	; 0x80
100059bc:	181b      	adds	r3, r3, r0
100059be:	2501      	movs	r5, #1
100059c0:	0410      	lsls	r0, r2, #16
100059c2:	4018      	ands	r0, r3
100059c4:	402c      	ands	r4, r5
100059c6:	2800      	cmp	r0, #0
100059c8:	d007      	beq.n	100059da <__aeabi_dsub+0x156>
100059ca:	4f83      	ldr	r7, [pc, #524]	; (10005bd8 <__aeabi_dsub+0x354>)
100059cc:	42b9      	cmp	r1, r7
100059ce:	d100      	bne.n	100059d2 <__aeabi_dsub+0x14e>
100059d0:	e0b0      	b.n	10005b34 <__aeabi_dsub+0x2b0>
100059d2:	4a82      	ldr	r2, [pc, #520]	; (10005bdc <__aeabi_dsub+0x358>)
100059d4:	1c0f      	adds	r7, r1, #0
100059d6:	4013      	ands	r3, r2
100059d8:	3101      	adds	r1, #1
100059da:	08f2      	lsrs	r2, r6, #3
100059dc:	0549      	lsls	r1, r1, #21
100059de:	075e      	lsls	r6, r3, #29
100059e0:	4332      	orrs	r2, r6
100059e2:	08db      	lsrs	r3, r3, #3
100059e4:	0d48      	lsrs	r0, r1, #21
100059e6:	2801      	cmp	r0, #1
100059e8:	dc00      	bgt.n	100059ec <__aeabi_dsub+0x168>
100059ea:	e079      	b.n	10005ae0 <__aeabi_dsub+0x25c>
100059ec:	031b      	lsls	r3, r3, #12
100059ee:	0578      	lsls	r0, r7, #21
100059f0:	0b1e      	lsrs	r6, r3, #12
100059f2:	0d47      	lsrs	r7, r0, #21
100059f4:	2000      	movs	r0, #0
100059f6:	2100      	movs	r1, #0
100059f8:	0d09      	lsrs	r1, r1, #20
100059fa:	057d      	lsls	r5, r7, #21
100059fc:	050b      	lsls	r3, r1, #20
100059fe:	4f78      	ldr	r7, [pc, #480]	; (10005be0 <__aeabi_dsub+0x35c>)
10005a00:	431e      	orrs	r6, r3
10005a02:	1c10      	adds	r0, r2, #0
10005a04:	4037      	ands	r7, r6
10005a06:	086a      	lsrs	r2, r5, #1
10005a08:	4317      	orrs	r7, r2
10005a0a:	007e      	lsls	r6, r7, #1
10005a0c:	0871      	lsrs	r1, r6, #1
10005a0e:	07e4      	lsls	r4, r4, #31
10005a10:	4321      	orrs	r1, r4
10005a12:	bc1c      	pop	{r2, r3, r4}
10005a14:	4690      	mov	r8, r2
10005a16:	4699      	mov	r9, r3
10005a18:	46a2      	mov	sl, r4
10005a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005a1c:	1ab3      	subs	r3, r6, r2
10005a1e:	2b00      	cmp	r3, #0
10005a20:	dc00      	bgt.n	10005a24 <__aeabi_dsub+0x1a0>
10005a22:	e0a6      	b.n	10005b72 <__aeabi_dsub+0x2ee>
10005a24:	2a00      	cmp	r2, #0
10005a26:	d03e      	beq.n	10005aa6 <__aeabi_dsub+0x222>
10005a28:	4a6b      	ldr	r2, [pc, #428]	; (10005bd8 <__aeabi_dsub+0x354>)
10005a2a:	4296      	cmp	r6, r2
10005a2c:	d04e      	beq.n	10005acc <__aeabi_dsub+0x248>
10005a2e:	2180      	movs	r1, #128	; 0x80
10005a30:	040f      	lsls	r7, r1, #16
10005a32:	4338      	orrs	r0, r7
10005a34:	2b38      	cmp	r3, #56	; 0x38
10005a36:	dc00      	bgt.n	10005a3a <__aeabi_dsub+0x1b6>
10005a38:	e118      	b.n	10005c6c <__aeabi_dsub+0x3e8>
10005a3a:	4653      	mov	r3, sl
10005a3c:	4318      	orrs	r0, r3
10005a3e:	2700      	movs	r7, #0
10005a40:	2200      	movs	r2, #0
10005a42:	2800      	cmp	r0, #0
10005a44:	d000      	beq.n	10005a48 <__aeabi_dsub+0x1c4>
10005a46:	2201      	movs	r2, #1
10005a48:	1952      	adds	r2, r2, r5
10005a4a:	42aa      	cmp	r2, r5
10005a4c:	41ad      	sbcs	r5, r5
10005a4e:	4467      	add	r7, ip
10005a50:	426b      	negs	r3, r5
10005a52:	18fb      	adds	r3, r7, r3
10005a54:	1c15      	adds	r5, r2, #0
10005a56:	1c37      	adds	r7, r6, #0
10005a58:	021e      	lsls	r6, r3, #8
10005a5a:	d53f      	bpl.n	10005adc <__aeabi_dsub+0x258>
10005a5c:	485e      	ldr	r0, [pc, #376]	; (10005bd8 <__aeabi_dsub+0x354>)
10005a5e:	1c7e      	adds	r6, r7, #1
10005a60:	4286      	cmp	r6, r0
10005a62:	d100      	bne.n	10005a66 <__aeabi_dsub+0x1e2>
10005a64:	e17b      	b.n	10005d5e <__aeabi_dsub+0x4da>
10005a66:	495d      	ldr	r1, [pc, #372]	; (10005bdc <__aeabi_dsub+0x358>)
10005a68:	2201      	movs	r2, #1
10005a6a:	402a      	ands	r2, r5
10005a6c:	400b      	ands	r3, r1
10005a6e:	0868      	lsrs	r0, r5, #1
10005a70:	1c15      	adds	r5, r2, #0
10005a72:	07d9      	lsls	r1, r3, #31
10005a74:	4305      	orrs	r5, r0
10005a76:	430d      	orrs	r5, r1
10005a78:	085b      	lsrs	r3, r3, #1
10005a7a:	1cb9      	adds	r1, r7, #2
10005a7c:	1c37      	adds	r7, r6, #0
10005a7e:	e793      	b.n	100059a8 <__aeabi_dsub+0x124>
10005a80:	4301      	orrs	r1, r0
10005a82:	d100      	bne.n	10005a86 <__aeabi_dsub+0x202>
10005a84:	e71b      	b.n	100058be <__aeabi_dsub+0x3a>
10005a86:	e71c      	b.n	100058c2 <__aeabi_dsub+0x3e>
10005a88:	1c71      	adds	r1, r6, #1
10005a8a:	1c37      	adds	r7, r6, #0
10005a8c:	260f      	movs	r6, #15
10005a8e:	4663      	mov	r3, ip
10005a90:	402e      	ands	r6, r5
10005a92:	2e04      	cmp	r6, #4
10005a94:	d000      	beq.n	10005a98 <__aeabi_dsub+0x214>
10005a96:	e78c      	b.n	100059b2 <__aeabi_dsub+0x12e>
10005a98:	2280      	movs	r2, #128	; 0x80
10005a9a:	2601      	movs	r6, #1
10005a9c:	0410      	lsls	r0, r2, #16
10005a9e:	4034      	ands	r4, r6
10005aa0:	4018      	ands	r0, r3
10005aa2:	1c2e      	adds	r6, r5, #0
10005aa4:	e78f      	b.n	100059c6 <__aeabi_dsub+0x142>
10005aa6:	4652      	mov	r2, sl
10005aa8:	4302      	orrs	r2, r0
10005aaa:	d0ed      	beq.n	10005a88 <__aeabi_dsub+0x204>
10005aac:	3b01      	subs	r3, #1
10005aae:	2b00      	cmp	r3, #0
10005ab0:	d109      	bne.n	10005ac6 <__aeabi_dsub+0x242>
10005ab2:	4657      	mov	r7, sl
10005ab4:	1979      	adds	r1, r7, r5
10005ab6:	42a9      	cmp	r1, r5
10005ab8:	4192      	sbcs	r2, r2
10005aba:	4255      	negs	r5, r2
10005abc:	4460      	add	r0, ip
10005abe:	1943      	adds	r3, r0, r5
10005ac0:	1c37      	adds	r7, r6, #0
10005ac2:	1c0d      	adds	r5, r1, #0
10005ac4:	e7c8      	b.n	10005a58 <__aeabi_dsub+0x1d4>
10005ac6:	4944      	ldr	r1, [pc, #272]	; (10005bd8 <__aeabi_dsub+0x354>)
10005ac8:	428e      	cmp	r6, r1
10005aca:	d1b3      	bne.n	10005a34 <__aeabi_dsub+0x1b0>
10005acc:	2080      	movs	r0, #128	; 0x80
10005ace:	4663      	mov	r3, ip
10005ad0:	0101      	lsls	r1, r0, #4
10005ad2:	1c37      	adds	r7, r6, #0
10005ad4:	e768      	b.n	100059a8 <__aeabi_dsub+0x124>
10005ad6:	1abf      	subs	r7, r7, r2
10005ad8:	4a40      	ldr	r2, [pc, #256]	; (10005bdc <__aeabi_dsub+0x358>)
10005ada:	4013      	ands	r3, r2
10005adc:	1c79      	adds	r1, r7, #1
10005ade:	e763      	b.n	100059a8 <__aeabi_dsub+0x124>
10005ae0:	1c15      	adds	r5, r2, #0
10005ae2:	431d      	orrs	r5, r3
10005ae4:	d100      	bne.n	10005ae8 <__aeabi_dsub+0x264>
10005ae6:	e221      	b.n	10005f2c <__aeabi_dsub+0x6a8>
10005ae8:	2f00      	cmp	r7, #0
10005aea:	d03e      	beq.n	10005b6a <__aeabi_dsub+0x2e6>
10005aec:	2680      	movs	r6, #128	; 0x80
10005aee:	0331      	lsls	r1, r6, #12
10005af0:	430b      	orrs	r3, r1
10005af2:	e77b      	b.n	100059ec <__aeabi_dsub+0x168>
10005af4:	2f00      	cmp	r7, #0
10005af6:	d000      	beq.n	10005afa <__aeabi_dsub+0x276>
10005af8:	e086      	b.n	10005c08 <__aeabi_dsub+0x384>
10005afa:	1c72      	adds	r2, r6, #1
10005afc:	0551      	lsls	r1, r2, #21
10005afe:	0d4b      	lsrs	r3, r1, #21
10005b00:	2b01      	cmp	r3, #1
10005b02:	dc00      	bgt.n	10005b06 <__aeabi_dsub+0x282>
10005b04:	e0f0      	b.n	10005ce8 <__aeabi_dsub+0x464>
10005b06:	4657      	mov	r7, sl
10005b08:	1bea      	subs	r2, r5, r7
10005b0a:	4295      	cmp	r5, r2
10005b0c:	419b      	sbcs	r3, r3
10005b0e:	4667      	mov	r7, ip
10005b10:	1a39      	subs	r1, r7, r0
10005b12:	425b      	negs	r3, r3
10005b14:	1ac9      	subs	r1, r1, r3
10005b16:	4688      	mov	r8, r1
10005b18:	020b      	lsls	r3, r1, #8
10005b1a:	d400      	bmi.n	10005b1e <__aeabi_dsub+0x29a>
10005b1c:	e09d      	b.n	10005c5a <__aeabi_dsub+0x3d6>
10005b1e:	4654      	mov	r4, sl
10005b20:	1b65      	subs	r5, r4, r5
10005b22:	45aa      	cmp	sl, r5
10005b24:	4192      	sbcs	r2, r2
10005b26:	1bc0      	subs	r0, r0, r7
10005b28:	4257      	negs	r7, r2
10005b2a:	1bc3      	subs	r3, r0, r7
10005b2c:	4698      	mov	r8, r3
10005b2e:	1c37      	adds	r7, r6, #0
10005b30:	464c      	mov	r4, r9
10005b32:	e70e      	b.n	10005952 <__aeabi_dsub+0xce>
10005b34:	1c0f      	adds	r7, r1, #0
10005b36:	2600      	movs	r6, #0
10005b38:	2200      	movs	r2, #0
10005b3a:	e75b      	b.n	100059f4 <__aeabi_dsub+0x170>
10005b3c:	1c28      	adds	r0, r5, #0
10005b3e:	f000 fae9 	bl	10006114 <__clzsi2>
10005b42:	3020      	adds	r0, #32
10005b44:	1c02      	adds	r2, r0, #0
10005b46:	3a08      	subs	r2, #8
10005b48:	2a1f      	cmp	r2, #31
10005b4a:	dc00      	bgt.n	10005b4e <__aeabi_dsub+0x2ca>
10005b4c:	e70d      	b.n	1000596a <__aeabi_dsub+0xe6>
10005b4e:	3828      	subs	r0, #40	; 0x28
10005b50:	4085      	lsls	r5, r0
10005b52:	1c2b      	adds	r3, r5, #0
10005b54:	2500      	movs	r5, #0
10005b56:	e711      	b.n	1000597c <__aeabi_dsub+0xf8>
10005b58:	4657      	mov	r7, sl
10005b5a:	4338      	orrs	r0, r7
10005b5c:	2300      	movs	r3, #0
10005b5e:	2200      	movs	r2, #0
10005b60:	2800      	cmp	r0, #0
10005b62:	d100      	bne.n	10005b66 <__aeabi_dsub+0x2e2>
10005b64:	e6e6      	b.n	10005934 <__aeabi_dsub+0xb0>
10005b66:	2201      	movs	r2, #1
10005b68:	e6e4      	b.n	10005934 <__aeabi_dsub+0xb0>
10005b6a:	031d      	lsls	r5, r3, #12
10005b6c:	0b2e      	lsrs	r6, r5, #12
10005b6e:	2700      	movs	r7, #0
10005b70:	e740      	b.n	100059f4 <__aeabi_dsub+0x170>
10005b72:	2b00      	cmp	r3, #0
10005b74:	d000      	beq.n	10005b78 <__aeabi_dsub+0x2f4>
10005b76:	e0d9      	b.n	10005d2c <__aeabi_dsub+0x4a8>
10005b78:	1c77      	adds	r7, r6, #1
10005b7a:	0579      	lsls	r1, r7, #21
10005b7c:	0d4a      	lsrs	r2, r1, #21
10005b7e:	2a01      	cmp	r2, #1
10005b80:	dc00      	bgt.n	10005b84 <__aeabi_dsub+0x300>
10005b82:	e095      	b.n	10005cb0 <__aeabi_dsub+0x42c>
10005b84:	4b14      	ldr	r3, [pc, #80]	; (10005bd8 <__aeabi_dsub+0x354>)
10005b86:	429f      	cmp	r7, r3
10005b88:	d100      	bne.n	10005b8c <__aeabi_dsub+0x308>
10005b8a:	e0fe      	b.n	10005d8a <__aeabi_dsub+0x506>
10005b8c:	4651      	mov	r1, sl
10005b8e:	1949      	adds	r1, r1, r5
10005b90:	42a9      	cmp	r1, r5
10005b92:	41ad      	sbcs	r5, r5
10005b94:	4662      	mov	r2, ip
10005b96:	426b      	negs	r3, r5
10005b98:	1880      	adds	r0, r0, r2
10005b9a:	18c2      	adds	r2, r0, r3
10005b9c:	0849      	lsrs	r1, r1, #1
10005b9e:	07d5      	lsls	r5, r2, #31
10005ba0:	430d      	orrs	r5, r1
10005ba2:	0853      	lsrs	r3, r2, #1
10005ba4:	1cb1      	adds	r1, r6, #2
10005ba6:	e6ff      	b.n	100059a8 <__aeabi_dsub+0x124>
10005ba8:	490b      	ldr	r1, [pc, #44]	; (10005bd8 <__aeabi_dsub+0x354>)
10005baa:	428e      	cmp	r6, r1
10005bac:	d000      	beq.n	10005bb0 <__aeabi_dsub+0x32c>
10005bae:	e6ac      	b.n	1000590a <__aeabi_dsub+0x86>
10005bb0:	e78c      	b.n	10005acc <__aeabi_dsub+0x248>
10005bb2:	1c06      	adds	r6, r0, #0
10005bb4:	3e1f      	subs	r6, #31
10005bb6:	1c1f      	adds	r7, r3, #0
10005bb8:	40f7      	lsrs	r7, r6
10005bba:	1c3e      	adds	r6, r7, #0
10005bbc:	2920      	cmp	r1, #32
10005bbe:	d073      	beq.n	10005ca8 <__aeabi_dsub+0x424>
10005bc0:	223f      	movs	r2, #63	; 0x3f
10005bc2:	1a10      	subs	r0, r2, r0
10005bc4:	4083      	lsls	r3, r0
10005bc6:	431d      	orrs	r5, r3
10005bc8:	1e6b      	subs	r3, r5, #1
10005bca:	419d      	sbcs	r5, r3
10005bcc:	4335      	orrs	r5, r6
10005bce:	2101      	movs	r1, #1
10005bd0:	2300      	movs	r3, #0
10005bd2:	2700      	movs	r7, #0
10005bd4:	e6e8      	b.n	100059a8 <__aeabi_dsub+0x124>
10005bd6:	46c0      	nop			; (mov r8, r8)
10005bd8:	000007ff 	.word	0x000007ff
10005bdc:	ff7fffff 	.word	0xff7fffff
10005be0:	800fffff 	.word	0x800fffff
10005be4:	1c3b      	adds	r3, r7, #0
10005be6:	3b20      	subs	r3, #32
10005be8:	1c01      	adds	r1, r0, #0
10005bea:	40d9      	lsrs	r1, r3
10005bec:	1c0b      	adds	r3, r1, #0
10005bee:	2f20      	cmp	r7, #32
10005bf0:	d05c      	beq.n	10005cac <__aeabi_dsub+0x428>
10005bf2:	2240      	movs	r2, #64	; 0x40
10005bf4:	1bd7      	subs	r7, r2, r7
10005bf6:	40b8      	lsls	r0, r7
10005bf8:	1c02      	adds	r2, r0, #0
10005bfa:	4650      	mov	r0, sl
10005bfc:	4302      	orrs	r2, r0
10005bfe:	1e51      	subs	r1, r2, #1
10005c00:	418a      	sbcs	r2, r1
10005c02:	431a      	orrs	r2, r3
10005c04:	2300      	movs	r3, #0
10005c06:	e695      	b.n	10005934 <__aeabi_dsub+0xb0>
10005c08:	427f      	negs	r7, r7
10005c0a:	2e00      	cmp	r6, #0
10005c0c:	d040      	beq.n	10005c90 <__aeabi_dsub+0x40c>
10005c0e:	4cca      	ldr	r4, [pc, #808]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005c10:	42a2      	cmp	r2, r4
10005c12:	d100      	bne.n	10005c16 <__aeabi_dsub+0x392>
10005c14:	e11f      	b.n	10005e56 <__aeabi_dsub+0x5d2>
10005c16:	2180      	movs	r1, #128	; 0x80
10005c18:	4666      	mov	r6, ip
10005c1a:	040b      	lsls	r3, r1, #16
10005c1c:	431e      	orrs	r6, r3
10005c1e:	46b4      	mov	ip, r6
10005c20:	2f38      	cmp	r7, #56	; 0x38
10005c22:	dd00      	ble.n	10005c26 <__aeabi_dsub+0x3a2>
10005c24:	e0a9      	b.n	10005d7a <__aeabi_dsub+0x4f6>
10005c26:	2f1f      	cmp	r7, #31
10005c28:	dd00      	ble.n	10005c2c <__aeabi_dsub+0x3a8>
10005c2a:	e13d      	b.n	10005ea8 <__aeabi_dsub+0x624>
10005c2c:	2320      	movs	r3, #32
10005c2e:	1bde      	subs	r6, r3, r7
10005c30:	1c29      	adds	r1, r5, #0
10005c32:	4664      	mov	r4, ip
10005c34:	40b4      	lsls	r4, r6
10005c36:	40f9      	lsrs	r1, r7
10005c38:	40b5      	lsls	r5, r6
10005c3a:	1e6b      	subs	r3, r5, #1
10005c3c:	419d      	sbcs	r5, r3
10005c3e:	4321      	orrs	r1, r4
10005c40:	4663      	mov	r3, ip
10005c42:	430d      	orrs	r5, r1
10005c44:	40fb      	lsrs	r3, r7
10005c46:	4657      	mov	r7, sl
10005c48:	1b7d      	subs	r5, r7, r5
10005c4a:	1ac0      	subs	r0, r0, r3
10005c4c:	45aa      	cmp	sl, r5
10005c4e:	419b      	sbcs	r3, r3
10005c50:	425f      	negs	r7, r3
10005c52:	1bc3      	subs	r3, r0, r7
10005c54:	464c      	mov	r4, r9
10005c56:	1c17      	adds	r7, r2, #0
10005c58:	e675      	b.n	10005946 <__aeabi_dsub+0xc2>
10005c5a:	1c0d      	adds	r5, r1, #0
10005c5c:	4315      	orrs	r5, r2
10005c5e:	d120      	bne.n	10005ca2 <__aeabi_dsub+0x41e>
10005c60:	2400      	movs	r4, #0
10005c62:	2101      	movs	r1, #1
10005c64:	2300      	movs	r3, #0
10005c66:	2604      	movs	r6, #4
10005c68:	2700      	movs	r7, #0
10005c6a:	e6b6      	b.n	100059da <__aeabi_dsub+0x156>
10005c6c:	2b1f      	cmp	r3, #31
10005c6e:	dc4a      	bgt.n	10005d06 <__aeabi_dsub+0x482>
10005c70:	2120      	movs	r1, #32
10005c72:	1ac9      	subs	r1, r1, r3
10005c74:	1c07      	adds	r7, r0, #0
10005c76:	4652      	mov	r2, sl
10005c78:	408f      	lsls	r7, r1
10005c7a:	40da      	lsrs	r2, r3
10005c7c:	433a      	orrs	r2, r7
10005c7e:	4657      	mov	r7, sl
10005c80:	408f      	lsls	r7, r1
10005c82:	1c39      	adds	r1, r7, #0
10005c84:	1e4f      	subs	r7, r1, #1
10005c86:	41b9      	sbcs	r1, r7
10005c88:	40d8      	lsrs	r0, r3
10005c8a:	430a      	orrs	r2, r1
10005c8c:	1c07      	adds	r7, r0, #0
10005c8e:	e6db      	b.n	10005a48 <__aeabi_dsub+0x1c4>
10005c90:	4664      	mov	r4, ip
10005c92:	432c      	orrs	r4, r5
10005c94:	d169      	bne.n	10005d6a <__aeabi_dsub+0x4e6>
10005c96:	1c51      	adds	r1, r2, #1
10005c98:	1c03      	adds	r3, r0, #0
10005c9a:	4655      	mov	r5, sl
10005c9c:	1c17      	adds	r7, r2, #0
10005c9e:	464c      	mov	r4, r9
10005ca0:	e682      	b.n	100059a8 <__aeabi_dsub+0x124>
10005ca2:	1c15      	adds	r5, r2, #0
10005ca4:	1c37      	adds	r7, r6, #0
10005ca6:	e654      	b.n	10005952 <__aeabi_dsub+0xce>
10005ca8:	2300      	movs	r3, #0
10005caa:	e78c      	b.n	10005bc6 <__aeabi_dsub+0x342>
10005cac:	2200      	movs	r2, #0
10005cae:	e7a4      	b.n	10005bfa <__aeabi_dsub+0x376>
10005cb0:	4667      	mov	r7, ip
10005cb2:	432f      	orrs	r7, r5
10005cb4:	2e00      	cmp	r6, #0
10005cb6:	d000      	beq.n	10005cba <__aeabi_dsub+0x436>
10005cb8:	e0d4      	b.n	10005e64 <__aeabi_dsub+0x5e0>
10005cba:	2f00      	cmp	r7, #0
10005cbc:	d100      	bne.n	10005cc0 <__aeabi_dsub+0x43c>
10005cbe:	e126      	b.n	10005f0e <__aeabi_dsub+0x68a>
10005cc0:	4653      	mov	r3, sl
10005cc2:	4303      	orrs	r3, r0
10005cc4:	d100      	bne.n	10005cc8 <__aeabi_dsub+0x444>
10005cc6:	e0e4      	b.n	10005e92 <__aeabi_dsub+0x60e>
10005cc8:	4651      	mov	r1, sl
10005cca:	194f      	adds	r7, r1, r5
10005ccc:	42af      	cmp	r7, r5
10005cce:	41ad      	sbcs	r5, r5
10005cd0:	4460      	add	r0, ip
10005cd2:	426e      	negs	r6, r5
10005cd4:	1983      	adds	r3, r0, r6
10005cd6:	021e      	lsls	r6, r3, #8
10005cd8:	d400      	bmi.n	10005cdc <__aeabi_dsub+0x458>
10005cda:	e14e      	b.n	10005f7a <__aeabi_dsub+0x6f6>
10005cdc:	4897      	ldr	r0, [pc, #604]	; (10005f3c <__aeabi_dsub+0x6b8>)
10005cde:	1c3d      	adds	r5, r7, #0
10005ce0:	4003      	ands	r3, r0
10005ce2:	2102      	movs	r1, #2
10005ce4:	2701      	movs	r7, #1
10005ce6:	e65f      	b.n	100059a8 <__aeabi_dsub+0x124>
10005ce8:	4661      	mov	r1, ip
10005cea:	4329      	orrs	r1, r5
10005cec:	2e00      	cmp	r6, #0
10005cee:	d129      	bne.n	10005d44 <__aeabi_dsub+0x4c0>
10005cf0:	2900      	cmp	r1, #0
10005cf2:	d176      	bne.n	10005de2 <__aeabi_dsub+0x55e>
10005cf4:	4651      	mov	r1, sl
10005cf6:	4301      	orrs	r1, r0
10005cf8:	d0b2      	beq.n	10005c60 <__aeabi_dsub+0x3dc>
10005cfa:	1c03      	adds	r3, r0, #0
10005cfc:	4655      	mov	r5, sl
10005cfe:	464c      	mov	r4, r9
10005d00:	2101      	movs	r1, #1
10005d02:	2700      	movs	r7, #0
10005d04:	e650      	b.n	100059a8 <__aeabi_dsub+0x124>
10005d06:	1c1f      	adds	r7, r3, #0
10005d08:	3f20      	subs	r7, #32
10005d0a:	1c01      	adds	r1, r0, #0
10005d0c:	40f9      	lsrs	r1, r7
10005d0e:	1c0f      	adds	r7, r1, #0
10005d10:	2b20      	cmp	r3, #32
10005d12:	d100      	bne.n	10005d16 <__aeabi_dsub+0x492>
10005d14:	e0c6      	b.n	10005ea4 <__aeabi_dsub+0x620>
10005d16:	2240      	movs	r2, #64	; 0x40
10005d18:	1ad3      	subs	r3, r2, r3
10005d1a:	4098      	lsls	r0, r3
10005d1c:	1c02      	adds	r2, r0, #0
10005d1e:	4650      	mov	r0, sl
10005d20:	4302      	orrs	r2, r0
10005d22:	1e53      	subs	r3, r2, #1
10005d24:	419a      	sbcs	r2, r3
10005d26:	433a      	orrs	r2, r7
10005d28:	2700      	movs	r7, #0
10005d2a:	e68d      	b.n	10005a48 <__aeabi_dsub+0x1c4>
10005d2c:	425b      	negs	r3, r3
10005d2e:	2e00      	cmp	r6, #0
10005d30:	d130      	bne.n	10005d94 <__aeabi_dsub+0x510>
10005d32:	4667      	mov	r7, ip
10005d34:	432f      	orrs	r7, r5
10005d36:	d000      	beq.n	10005d3a <__aeabi_dsub+0x4b6>
10005d38:	e0c8      	b.n	10005ecc <__aeabi_dsub+0x648>
10005d3a:	1c51      	adds	r1, r2, #1
10005d3c:	1c03      	adds	r3, r0, #0
10005d3e:	4655      	mov	r5, sl
10005d40:	1c17      	adds	r7, r2, #0
10005d42:	e631      	b.n	100059a8 <__aeabi_dsub+0x124>
10005d44:	2900      	cmp	r1, #0
10005d46:	d165      	bne.n	10005e14 <__aeabi_dsub+0x590>
10005d48:	4657      	mov	r7, sl
10005d4a:	4307      	orrs	r7, r0
10005d4c:	d100      	bne.n	10005d50 <__aeabi_dsub+0x4cc>
10005d4e:	e0c8      	b.n	10005ee2 <__aeabi_dsub+0x65e>
10005d50:	1c03      	adds	r3, r0, #0
10005d52:	2080      	movs	r0, #128	; 0x80
10005d54:	4655      	mov	r5, sl
10005d56:	464c      	mov	r4, r9
10005d58:	0101      	lsls	r1, r0, #4
10005d5a:	4f77      	ldr	r7, [pc, #476]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005d5c:	e624      	b.n	100059a8 <__aeabi_dsub+0x124>
10005d5e:	2380      	movs	r3, #128	; 0x80
10005d60:	1c37      	adds	r7, r6, #0
10005d62:	0119      	lsls	r1, r3, #4
10005d64:	2604      	movs	r6, #4
10005d66:	2300      	movs	r3, #0
10005d68:	e637      	b.n	100059da <__aeabi_dsub+0x156>
10005d6a:	3f01      	subs	r7, #1
10005d6c:	2f00      	cmp	r7, #0
10005d6e:	d16e      	bne.n	10005e4e <__aeabi_dsub+0x5ca>
10005d70:	4654      	mov	r4, sl
10005d72:	4661      	mov	r1, ip
10005d74:	1b65      	subs	r5, r4, r5
10005d76:	1a40      	subs	r0, r0, r1
10005d78:	e768      	b.n	10005c4c <__aeabi_dsub+0x3c8>
10005d7a:	4667      	mov	r7, ip
10005d7c:	433d      	orrs	r5, r7
10005d7e:	2300      	movs	r3, #0
10005d80:	2d00      	cmp	r5, #0
10005d82:	d100      	bne.n	10005d86 <__aeabi_dsub+0x502>
10005d84:	e75f      	b.n	10005c46 <__aeabi_dsub+0x3c2>
10005d86:	2501      	movs	r5, #1
10005d88:	e75d      	b.n	10005c46 <__aeabi_dsub+0x3c2>
10005d8a:	2680      	movs	r6, #128	; 0x80
10005d8c:	0131      	lsls	r1, r6, #4
10005d8e:	2300      	movs	r3, #0
10005d90:	2604      	movs	r6, #4
10005d92:	e622      	b.n	100059da <__aeabi_dsub+0x156>
10005d94:	4968      	ldr	r1, [pc, #416]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005d96:	428a      	cmp	r2, r1
10005d98:	d100      	bne.n	10005d9c <__aeabi_dsub+0x518>
10005d9a:	e0c1      	b.n	10005f20 <__aeabi_dsub+0x69c>
10005d9c:	2780      	movs	r7, #128	; 0x80
10005d9e:	4666      	mov	r6, ip
10005da0:	0439      	lsls	r1, r7, #16
10005da2:	430e      	orrs	r6, r1
10005da4:	46b4      	mov	ip, r6
10005da6:	2b38      	cmp	r3, #56	; 0x38
10005da8:	dd00      	ble.n	10005dac <__aeabi_dsub+0x528>
10005daa:	e0a2      	b.n	10005ef2 <__aeabi_dsub+0x66e>
10005dac:	2b1f      	cmp	r3, #31
10005dae:	dd00      	ble.n	10005db2 <__aeabi_dsub+0x52e>
10005db0:	e0d0      	b.n	10005f54 <__aeabi_dsub+0x6d0>
10005db2:	2120      	movs	r1, #32
10005db4:	1ac9      	subs	r1, r1, r3
10005db6:	1c2e      	adds	r6, r5, #0
10005db8:	4667      	mov	r7, ip
10005dba:	408f      	lsls	r7, r1
10005dbc:	408d      	lsls	r5, r1
10005dbe:	40de      	lsrs	r6, r3
10005dc0:	433e      	orrs	r6, r7
10005dc2:	1c29      	adds	r1, r5, #0
10005dc4:	4667      	mov	r7, ip
10005dc6:	1e4d      	subs	r5, r1, #1
10005dc8:	41a9      	sbcs	r1, r5
10005dca:	40df      	lsrs	r7, r3
10005dcc:	1c35      	adds	r5, r6, #0
10005dce:	430d      	orrs	r5, r1
10005dd0:	1c3e      	adds	r6, r7, #0
10005dd2:	4455      	add	r5, sl
10005dd4:	4555      	cmp	r5, sl
10005dd6:	419b      	sbcs	r3, r3
10005dd8:	1830      	adds	r0, r6, r0
10005dda:	425e      	negs	r6, r3
10005ddc:	1983      	adds	r3, r0, r6
10005dde:	1c17      	adds	r7, r2, #0
10005de0:	e63a      	b.n	10005a58 <__aeabi_dsub+0x1d4>
10005de2:	4656      	mov	r6, sl
10005de4:	4306      	orrs	r6, r0
10005de6:	d054      	beq.n	10005e92 <__aeabi_dsub+0x60e>
10005de8:	4657      	mov	r7, sl
10005dea:	1bea      	subs	r2, r5, r7
10005dec:	4663      	mov	r3, ip
10005dee:	4295      	cmp	r5, r2
10005df0:	41b6      	sbcs	r6, r6
10005df2:	1a19      	subs	r1, r3, r0
10005df4:	4273      	negs	r3, r6
10005df6:	1acb      	subs	r3, r1, r3
10005df8:	021e      	lsls	r6, r3, #8
10005dfa:	d400      	bmi.n	10005dfe <__aeabi_dsub+0x57a>
10005dfc:	e0a2      	b.n	10005f44 <__aeabi_dsub+0x6c0>
10005dfe:	1b7d      	subs	r5, r7, r5
10005e00:	4664      	mov	r4, ip
10005e02:	45aa      	cmp	sl, r5
10005e04:	41bf      	sbcs	r7, r7
10005e06:	1b00      	subs	r0, r0, r4
10005e08:	427a      	negs	r2, r7
10005e0a:	1a83      	subs	r3, r0, r2
10005e0c:	464c      	mov	r4, r9
10005e0e:	2101      	movs	r1, #1
10005e10:	2700      	movs	r7, #0
10005e12:	e5c9      	b.n	100059a8 <__aeabi_dsub+0x124>
10005e14:	4656      	mov	r6, sl
10005e16:	4306      	orrs	r6, r0
10005e18:	d03f      	beq.n	10005e9a <__aeabi_dsub+0x616>
10005e1a:	4662      	mov	r2, ip
10005e1c:	2180      	movs	r1, #128	; 0x80
10005e1e:	0757      	lsls	r7, r2, #29
10005e20:	08ed      	lsrs	r5, r5, #3
10005e22:	08d3      	lsrs	r3, r2, #3
10005e24:	030a      	lsls	r2, r1, #12
10005e26:	433d      	orrs	r5, r7
10005e28:	4213      	tst	r3, r2
10005e2a:	d008      	beq.n	10005e3e <__aeabi_dsub+0x5ba>
10005e2c:	08c6      	lsrs	r6, r0, #3
10005e2e:	4216      	tst	r6, r2
10005e30:	d105      	bne.n	10005e3e <__aeabi_dsub+0x5ba>
10005e32:	4655      	mov	r5, sl
10005e34:	08ec      	lsrs	r4, r5, #3
10005e36:	0745      	lsls	r5, r0, #29
10005e38:	4325      	orrs	r5, r4
10005e3a:	1c33      	adds	r3, r6, #0
10005e3c:	464c      	mov	r4, r9
10005e3e:	0f68      	lsrs	r0, r5, #29
10005e40:	00db      	lsls	r3, r3, #3
10005e42:	2680      	movs	r6, #128	; 0x80
10005e44:	4303      	orrs	r3, r0
10005e46:	00ed      	lsls	r5, r5, #3
10005e48:	0131      	lsls	r1, r6, #4
10005e4a:	4f3b      	ldr	r7, [pc, #236]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005e4c:	e5ac      	b.n	100059a8 <__aeabi_dsub+0x124>
10005e4e:	493a      	ldr	r1, [pc, #232]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005e50:	428a      	cmp	r2, r1
10005e52:	d000      	beq.n	10005e56 <__aeabi_dsub+0x5d2>
10005e54:	e6e4      	b.n	10005c20 <__aeabi_dsub+0x39c>
10005e56:	2680      	movs	r6, #128	; 0x80
10005e58:	1c03      	adds	r3, r0, #0
10005e5a:	4655      	mov	r5, sl
10005e5c:	464c      	mov	r4, r9
10005e5e:	0131      	lsls	r1, r6, #4
10005e60:	1c17      	adds	r7, r2, #0
10005e62:	e5a1      	b.n	100059a8 <__aeabi_dsub+0x124>
10005e64:	2f00      	cmp	r7, #0
10005e66:	d04c      	beq.n	10005f02 <__aeabi_dsub+0x67e>
10005e68:	4653      	mov	r3, sl
10005e6a:	4303      	orrs	r3, r0
10005e6c:	d015      	beq.n	10005e9a <__aeabi_dsub+0x616>
10005e6e:	4662      	mov	r2, ip
10005e70:	2680      	movs	r6, #128	; 0x80
10005e72:	08ed      	lsrs	r5, r5, #3
10005e74:	0751      	lsls	r1, r2, #29
10005e76:	08d3      	lsrs	r3, r2, #3
10005e78:	0337      	lsls	r7, r6, #12
10005e7a:	430d      	orrs	r5, r1
10005e7c:	423b      	tst	r3, r7
10005e7e:	d0de      	beq.n	10005e3e <__aeabi_dsub+0x5ba>
10005e80:	08c2      	lsrs	r2, r0, #3
10005e82:	423a      	tst	r2, r7
10005e84:	d1db      	bne.n	10005e3e <__aeabi_dsub+0x5ba>
10005e86:	4655      	mov	r5, sl
10005e88:	08e9      	lsrs	r1, r5, #3
10005e8a:	0745      	lsls	r5, r0, #29
10005e8c:	1c13      	adds	r3, r2, #0
10005e8e:	430d      	orrs	r5, r1
10005e90:	e7d5      	b.n	10005e3e <__aeabi_dsub+0x5ba>
10005e92:	4663      	mov	r3, ip
10005e94:	2101      	movs	r1, #1
10005e96:	2700      	movs	r7, #0
10005e98:	e586      	b.n	100059a8 <__aeabi_dsub+0x124>
10005e9a:	2780      	movs	r7, #128	; 0x80
10005e9c:	0139      	lsls	r1, r7, #4
10005e9e:	4663      	mov	r3, ip
10005ea0:	4f25      	ldr	r7, [pc, #148]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005ea2:	e581      	b.n	100059a8 <__aeabi_dsub+0x124>
10005ea4:	2200      	movs	r2, #0
10005ea6:	e73a      	b.n	10005d1e <__aeabi_dsub+0x49a>
10005ea8:	1c3c      	adds	r4, r7, #0
10005eaa:	3c20      	subs	r4, #32
10005eac:	4666      	mov	r6, ip
10005eae:	40e6      	lsrs	r6, r4
10005eb0:	1c33      	adds	r3, r6, #0
10005eb2:	2f20      	cmp	r7, #32
10005eb4:	d05f      	beq.n	10005f76 <__aeabi_dsub+0x6f2>
10005eb6:	2440      	movs	r4, #64	; 0x40
10005eb8:	1be7      	subs	r7, r4, r7
10005eba:	4666      	mov	r6, ip
10005ebc:	40be      	lsls	r6, r7
10005ebe:	1c31      	adds	r1, r6, #0
10005ec0:	430d      	orrs	r5, r1
10005ec2:	1e69      	subs	r1, r5, #1
10005ec4:	418d      	sbcs	r5, r1
10005ec6:	431d      	orrs	r5, r3
10005ec8:	2300      	movs	r3, #0
10005eca:	e6bc      	b.n	10005c46 <__aeabi_dsub+0x3c2>
10005ecc:	3b01      	subs	r3, #1
10005ece:	2b00      	cmp	r3, #0
10005ed0:	d122      	bne.n	10005f18 <__aeabi_dsub+0x694>
10005ed2:	4455      	add	r5, sl
10005ed4:	4555      	cmp	r5, sl
10005ed6:	41bf      	sbcs	r7, r7
10005ed8:	427b      	negs	r3, r7
10005eda:	4460      	add	r0, ip
10005edc:	18c3      	adds	r3, r0, r3
10005ede:	1c17      	adds	r7, r2, #0
10005ee0:	e5ba      	b.n	10005a58 <__aeabi_dsub+0x1d4>
10005ee2:	2180      	movs	r1, #128	; 0x80
10005ee4:	2204      	movs	r2, #4
10005ee6:	2400      	movs	r4, #0
10005ee8:	0109      	lsls	r1, r1, #4
10005eea:	4b15      	ldr	r3, [pc, #84]	; (10005f40 <__aeabi_dsub+0x6bc>)
10005eec:	4256      	negs	r6, r2
10005eee:	4f12      	ldr	r7, [pc, #72]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005ef0:	e573      	b.n	100059da <__aeabi_dsub+0x156>
10005ef2:	4663      	mov	r3, ip
10005ef4:	431d      	orrs	r5, r3
10005ef6:	2600      	movs	r6, #0
10005ef8:	2d00      	cmp	r5, #0
10005efa:	d100      	bne.n	10005efe <__aeabi_dsub+0x67a>
10005efc:	e769      	b.n	10005dd2 <__aeabi_dsub+0x54e>
10005efe:	2501      	movs	r5, #1
10005f00:	e767      	b.n	10005dd2 <__aeabi_dsub+0x54e>
10005f02:	2280      	movs	r2, #128	; 0x80
10005f04:	1c03      	adds	r3, r0, #0
10005f06:	4655      	mov	r5, sl
10005f08:	0111      	lsls	r1, r2, #4
10005f0a:	4f0b      	ldr	r7, [pc, #44]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005f0c:	e54c      	b.n	100059a8 <__aeabi_dsub+0x124>
10005f0e:	1c03      	adds	r3, r0, #0
10005f10:	4655      	mov	r5, sl
10005f12:	2101      	movs	r1, #1
10005f14:	2700      	movs	r7, #0
10005f16:	e547      	b.n	100059a8 <__aeabi_dsub+0x124>
10005f18:	4907      	ldr	r1, [pc, #28]	; (10005f38 <__aeabi_dsub+0x6b4>)
10005f1a:	428a      	cmp	r2, r1
10005f1c:	d000      	beq.n	10005f20 <__aeabi_dsub+0x69c>
10005f1e:	e742      	b.n	10005da6 <__aeabi_dsub+0x522>
10005f20:	2180      	movs	r1, #128	; 0x80
10005f22:	1c03      	adds	r3, r0, #0
10005f24:	4655      	mov	r5, sl
10005f26:	0109      	lsls	r1, r1, #4
10005f28:	1c17      	adds	r7, r2, #0
10005f2a:	e53d      	b.n	100059a8 <__aeabi_dsub+0x124>
10005f2c:	057f      	lsls	r7, r7, #21
10005f2e:	0d7f      	lsrs	r7, r7, #21
10005f30:	2600      	movs	r6, #0
10005f32:	2200      	movs	r2, #0
10005f34:	e55e      	b.n	100059f4 <__aeabi_dsub+0x170>
10005f36:	46c0      	nop			; (mov r8, r8)
10005f38:	000007ff 	.word	0x000007ff
10005f3c:	ff7fffff 	.word	0xff7fffff
10005f40:	007fffff 	.word	0x007fffff
10005f44:	1c1d      	adds	r5, r3, #0
10005f46:	4315      	orrs	r5, r2
10005f48:	d100      	bne.n	10005f4c <__aeabi_dsub+0x6c8>
10005f4a:	e689      	b.n	10005c60 <__aeabi_dsub+0x3dc>
10005f4c:	1c15      	adds	r5, r2, #0
10005f4e:	2101      	movs	r1, #1
10005f50:	2700      	movs	r7, #0
10005f52:	e529      	b.n	100059a8 <__aeabi_dsub+0x124>
10005f54:	1c1f      	adds	r7, r3, #0
10005f56:	3f20      	subs	r7, #32
10005f58:	4661      	mov	r1, ip
10005f5a:	40f9      	lsrs	r1, r7
10005f5c:	2b20      	cmp	r3, #32
10005f5e:	d010      	beq.n	10005f82 <__aeabi_dsub+0x6fe>
10005f60:	2640      	movs	r6, #64	; 0x40
10005f62:	1af3      	subs	r3, r6, r3
10005f64:	4667      	mov	r7, ip
10005f66:	409f      	lsls	r7, r3
10005f68:	1c3b      	adds	r3, r7, #0
10005f6a:	431d      	orrs	r5, r3
10005f6c:	1e6b      	subs	r3, r5, #1
10005f6e:	419d      	sbcs	r5, r3
10005f70:	430d      	orrs	r5, r1
10005f72:	2600      	movs	r6, #0
10005f74:	e72d      	b.n	10005dd2 <__aeabi_dsub+0x54e>
10005f76:	2100      	movs	r1, #0
10005f78:	e7a2      	b.n	10005ec0 <__aeabi_dsub+0x63c>
10005f7a:	1c3d      	adds	r5, r7, #0
10005f7c:	2101      	movs	r1, #1
10005f7e:	2700      	movs	r7, #0
10005f80:	e512      	b.n	100059a8 <__aeabi_dsub+0x124>
10005f82:	2300      	movs	r3, #0
10005f84:	e7f1      	b.n	10005f6a <__aeabi_dsub+0x6e6>
10005f86:	46c0      	nop			; (mov r8, r8)

10005f88 <__aeabi_d2iz>:
10005f88:	4a13      	ldr	r2, [pc, #76]	; (10005fd8 <__aeabi_d2iz+0x50>)
10005f8a:	030b      	lsls	r3, r1, #12
10005f8c:	b530      	push	{r4, r5, lr}
10005f8e:	1c05      	adds	r5, r0, #0
10005f90:	0048      	lsls	r0, r1, #1
10005f92:	0b1c      	lsrs	r4, r3, #12
10005f94:	0fc9      	lsrs	r1, r1, #31
10005f96:	0d43      	lsrs	r3, r0, #21
10005f98:	2000      	movs	r0, #0
10005f9a:	4293      	cmp	r3, r2
10005f9c:	dd11      	ble.n	10005fc2 <__aeabi_d2iz+0x3a>
10005f9e:	480f      	ldr	r0, [pc, #60]	; (10005fdc <__aeabi_d2iz+0x54>)
10005fa0:	4283      	cmp	r3, r0
10005fa2:	dc0f      	bgt.n	10005fc4 <__aeabi_d2iz+0x3c>
10005fa4:	2280      	movs	r2, #128	; 0x80
10005fa6:	0350      	lsls	r0, r2, #13
10005fa8:	4a0d      	ldr	r2, [pc, #52]	; (10005fe0 <__aeabi_d2iz+0x58>)
10005faa:	4304      	orrs	r4, r0
10005fac:	1ad0      	subs	r0, r2, r3
10005fae:	281f      	cmp	r0, #31
10005fb0:	dd0b      	ble.n	10005fca <__aeabi_d2iz+0x42>
10005fb2:	4d0c      	ldr	r5, [pc, #48]	; (10005fe4 <__aeabi_d2iz+0x5c>)
10005fb4:	1aeb      	subs	r3, r5, r3
10005fb6:	40dc      	lsrs	r4, r3
10005fb8:	1c22      	adds	r2, r4, #0
10005fba:	4250      	negs	r0, r2
10005fbc:	2900      	cmp	r1, #0
10005fbe:	d100      	bne.n	10005fc2 <__aeabi_d2iz+0x3a>
10005fc0:	1c10      	adds	r0, r2, #0
10005fc2:	bd30      	pop	{r4, r5, pc}
10005fc4:	4c08      	ldr	r4, [pc, #32]	; (10005fe8 <__aeabi_d2iz+0x60>)
10005fc6:	1908      	adds	r0, r1, r4
10005fc8:	e7fb      	b.n	10005fc2 <__aeabi_d2iz+0x3a>
10005fca:	40c5      	lsrs	r5, r0
10005fcc:	4807      	ldr	r0, [pc, #28]	; (10005fec <__aeabi_d2iz+0x64>)
10005fce:	1c2a      	adds	r2, r5, #0
10005fd0:	181d      	adds	r5, r3, r0
10005fd2:	40ac      	lsls	r4, r5
10005fd4:	4322      	orrs	r2, r4
10005fd6:	e7f0      	b.n	10005fba <__aeabi_d2iz+0x32>
10005fd8:	000003fe 	.word	0x000003fe
10005fdc:	0000041d 	.word	0x0000041d
10005fe0:	00000433 	.word	0x00000433
10005fe4:	00000413 	.word	0x00000413
10005fe8:	7fffffff 	.word	0x7fffffff
10005fec:	fffffbed 	.word	0xfffffbed

10005ff0 <__aeabi_f2d>:
10005ff0:	0041      	lsls	r1, r0, #1
10005ff2:	b570      	push	{r4, r5, r6, lr}
10005ff4:	0e0e      	lsrs	r6, r1, #24
10005ff6:	1c73      	adds	r3, r6, #1
10005ff8:	0242      	lsls	r2, r0, #9
10005ffa:	0fc5      	lsrs	r5, r0, #31
10005ffc:	b2d8      	uxtb	r0, r3
10005ffe:	0a54      	lsrs	r4, r2, #9
10006000:	2801      	cmp	r0, #1
10006002:	dd15      	ble.n	10006030 <__aeabi_f2d+0x40>
10006004:	0763      	lsls	r3, r4, #29
10006006:	24e0      	movs	r4, #224	; 0xe0
10006008:	00a0      	lsls	r0, r4, #2
1000600a:	0b12      	lsrs	r2, r2, #12
1000600c:	1834      	adds	r4, r6, r0
1000600e:	2000      	movs	r0, #0
10006010:	2100      	movs	r1, #0
10006012:	1c18      	adds	r0, r3, #0
10006014:	0d0b      	lsrs	r3, r1, #20
10006016:	051e      	lsls	r6, r3, #20
10006018:	4b1c      	ldr	r3, [pc, #112]	; (1000608c <__aeabi_f2d+0x9c>)
1000601a:	4332      	orrs	r2, r6
1000601c:	0561      	lsls	r1, r4, #21
1000601e:	084c      	lsrs	r4, r1, #1
10006020:	4013      	ands	r3, r2
10006022:	4323      	orrs	r3, r4
10006024:	005a      	lsls	r2, r3, #1
10006026:	0856      	lsrs	r6, r2, #1
10006028:	07ed      	lsls	r5, r5, #31
1000602a:	1c31      	adds	r1, r6, #0
1000602c:	4329      	orrs	r1, r5
1000602e:	bd70      	pop	{r4, r5, r6, pc}
10006030:	2e00      	cmp	r6, #0
10006032:	d116      	bne.n	10006062 <__aeabi_f2d+0x72>
10006034:	2c00      	cmp	r4, #0
10006036:	d01e      	beq.n	10006076 <__aeabi_f2d+0x86>
10006038:	1c20      	adds	r0, r4, #0
1000603a:	f000 f86b 	bl	10006114 <__clzsi2>
1000603e:	280a      	cmp	r0, #10
10006040:	dc1d      	bgt.n	1000607e <__aeabi_f2d+0x8e>
10006042:	220b      	movs	r2, #11
10006044:	1a11      	subs	r1, r2, r0
10006046:	1c02      	adds	r2, r0, #0
10006048:	1c23      	adds	r3, r4, #0
1000604a:	3215      	adds	r2, #21
1000604c:	40cb      	lsrs	r3, r1
1000604e:	4094      	lsls	r4, r2
10006050:	1c1e      	adds	r6, r3, #0
10006052:	1c23      	adds	r3, r4, #0
10006054:	0334      	lsls	r4, r6, #12
10006056:	4e0e      	ldr	r6, [pc, #56]	; (10006090 <__aeabi_f2d+0xa0>)
10006058:	0b22      	lsrs	r2, r4, #12
1000605a:	1a30      	subs	r0, r6, r0
1000605c:	0541      	lsls	r1, r0, #21
1000605e:	0d4c      	lsrs	r4, r1, #21
10006060:	e7d5      	b.n	1000600e <__aeabi_f2d+0x1e>
10006062:	2c00      	cmp	r4, #0
10006064:	d003      	beq.n	1000606e <__aeabi_f2d+0x7e>
10006066:	0763      	lsls	r3, r4, #29
10006068:	0b12      	lsrs	r2, r2, #12
1000606a:	4c0a      	ldr	r4, [pc, #40]	; (10006094 <__aeabi_f2d+0xa4>)
1000606c:	e7cf      	b.n	1000600e <__aeabi_f2d+0x1e>
1000606e:	4c09      	ldr	r4, [pc, #36]	; (10006094 <__aeabi_f2d+0xa4>)
10006070:	2200      	movs	r2, #0
10006072:	2300      	movs	r3, #0
10006074:	e7cb      	b.n	1000600e <__aeabi_f2d+0x1e>
10006076:	2400      	movs	r4, #0
10006078:	2200      	movs	r2, #0
1000607a:	2300      	movs	r3, #0
1000607c:	e7c7      	b.n	1000600e <__aeabi_f2d+0x1e>
1000607e:	1c01      	adds	r1, r0, #0
10006080:	390b      	subs	r1, #11
10006082:	408c      	lsls	r4, r1
10006084:	1c26      	adds	r6, r4, #0
10006086:	2300      	movs	r3, #0
10006088:	e7e4      	b.n	10006054 <__aeabi_f2d+0x64>
1000608a:	46c0      	nop			; (mov r8, r8)
1000608c:	800fffff 	.word	0x800fffff
10006090:	00000389 	.word	0x00000389
10006094:	000007ff 	.word	0x000007ff

10006098 <__aeabi_cdrcmple>:
10006098:	4684      	mov	ip, r0
1000609a:	1c10      	adds	r0, r2, #0
1000609c:	4662      	mov	r2, ip
1000609e:	468c      	mov	ip, r1
100060a0:	1c19      	adds	r1, r3, #0
100060a2:	4663      	mov	r3, ip
100060a4:	e000      	b.n	100060a8 <__aeabi_cdcmpeq>
100060a6:	46c0      	nop			; (mov r8, r8)

100060a8 <__aeabi_cdcmpeq>:
100060a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100060aa:	f000 f903 	bl	100062b4 <__ledf2>
100060ae:	2800      	cmp	r0, #0
100060b0:	d401      	bmi.n	100060b6 <__aeabi_cdcmpeq+0xe>
100060b2:	2100      	movs	r1, #0
100060b4:	42c8      	cmn	r0, r1
100060b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100060b8 <__aeabi_dcmpeq>:
100060b8:	b510      	push	{r4, lr}
100060ba:	f000 f849 	bl	10006150 <__eqdf2>
100060be:	4240      	negs	r0, r0
100060c0:	3001      	adds	r0, #1
100060c2:	bd10      	pop	{r4, pc}

100060c4 <__aeabi_dcmplt>:
100060c4:	b510      	push	{r4, lr}
100060c6:	f000 f8f5 	bl	100062b4 <__ledf2>
100060ca:	2800      	cmp	r0, #0
100060cc:	db01      	blt.n	100060d2 <__aeabi_dcmplt+0xe>
100060ce:	2000      	movs	r0, #0
100060d0:	bd10      	pop	{r4, pc}
100060d2:	2001      	movs	r0, #1
100060d4:	bd10      	pop	{r4, pc}
100060d6:	46c0      	nop			; (mov r8, r8)

100060d8 <__aeabi_dcmple>:
100060d8:	b510      	push	{r4, lr}
100060da:	f000 f8eb 	bl	100062b4 <__ledf2>
100060de:	2800      	cmp	r0, #0
100060e0:	dd01      	ble.n	100060e6 <__aeabi_dcmple+0xe>
100060e2:	2000      	movs	r0, #0
100060e4:	bd10      	pop	{r4, pc}
100060e6:	2001      	movs	r0, #1
100060e8:	bd10      	pop	{r4, pc}
100060ea:	46c0      	nop			; (mov r8, r8)

100060ec <__aeabi_dcmpgt>:
100060ec:	b510      	push	{r4, lr}
100060ee:	f000 f86d 	bl	100061cc <__gedf2>
100060f2:	2800      	cmp	r0, #0
100060f4:	dc01      	bgt.n	100060fa <__aeabi_dcmpgt+0xe>
100060f6:	2000      	movs	r0, #0
100060f8:	bd10      	pop	{r4, pc}
100060fa:	2001      	movs	r0, #1
100060fc:	bd10      	pop	{r4, pc}
100060fe:	46c0      	nop			; (mov r8, r8)

10006100 <__aeabi_dcmpge>:
10006100:	b510      	push	{r4, lr}
10006102:	f000 f863 	bl	100061cc <__gedf2>
10006106:	2800      	cmp	r0, #0
10006108:	da01      	bge.n	1000610e <__aeabi_dcmpge+0xe>
1000610a:	2000      	movs	r0, #0
1000610c:	bd10      	pop	{r4, pc}
1000610e:	2001      	movs	r0, #1
10006110:	bd10      	pop	{r4, pc}
10006112:	46c0      	nop			; (mov r8, r8)

10006114 <__clzsi2>:
10006114:	211c      	movs	r1, #28
10006116:	2301      	movs	r3, #1
10006118:	041b      	lsls	r3, r3, #16
1000611a:	4298      	cmp	r0, r3
1000611c:	d301      	bcc.n	10006122 <__clzsi2+0xe>
1000611e:	0c00      	lsrs	r0, r0, #16
10006120:	3910      	subs	r1, #16
10006122:	0a1b      	lsrs	r3, r3, #8
10006124:	4298      	cmp	r0, r3
10006126:	d301      	bcc.n	1000612c <__clzsi2+0x18>
10006128:	0a00      	lsrs	r0, r0, #8
1000612a:	3908      	subs	r1, #8
1000612c:	091b      	lsrs	r3, r3, #4
1000612e:	4298      	cmp	r0, r3
10006130:	d301      	bcc.n	10006136 <__clzsi2+0x22>
10006132:	0900      	lsrs	r0, r0, #4
10006134:	3904      	subs	r1, #4
10006136:	a202      	add	r2, pc, #8	; (adr r2, 10006140 <__clzsi2+0x2c>)
10006138:	5c10      	ldrb	r0, [r2, r0]
1000613a:	1840      	adds	r0, r0, r1
1000613c:	4770      	bx	lr
1000613e:	46c0      	nop			; (mov r8, r8)
10006140:	02020304 	.word	0x02020304
10006144:	01010101 	.word	0x01010101
	...

10006150 <__eqdf2>:
10006150:	b5f0      	push	{r4, r5, r6, r7, lr}
10006152:	4694      	mov	ip, r2
10006154:	4647      	mov	r7, r8
10006156:	031a      	lsls	r2, r3, #12
10006158:	1c06      	adds	r6, r0, #0
1000615a:	0058      	lsls	r0, r3, #1
1000615c:	b480      	push	{r7}
1000615e:	0b17      	lsrs	r7, r2, #12
10006160:	0d42      	lsrs	r2, r0, #21
10006162:	4819      	ldr	r0, [pc, #100]	; (100061c8 <__eqdf2+0x78>)
10006164:	030d      	lsls	r5, r1, #12
10006166:	004c      	lsls	r4, r1, #1
10006168:	0fdb      	lsrs	r3, r3, #31
1000616a:	0b2d      	lsrs	r5, r5, #12
1000616c:	0d64      	lsrs	r4, r4, #21
1000616e:	0fc9      	lsrs	r1, r1, #31
10006170:	4698      	mov	r8, r3
10006172:	4284      	cmp	r4, r0
10006174:	d008      	beq.n	10006188 <__eqdf2+0x38>
10006176:	4814      	ldr	r0, [pc, #80]	; (100061c8 <__eqdf2+0x78>)
10006178:	4282      	cmp	r2, r0
1000617a:	d00d      	beq.n	10006198 <__eqdf2+0x48>
1000617c:	2001      	movs	r0, #1
1000617e:	4294      	cmp	r4, r2
10006180:	d012      	beq.n	100061a8 <__eqdf2+0x58>
10006182:	bc04      	pop	{r2}
10006184:	4690      	mov	r8, r2
10006186:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006188:	1c2b      	adds	r3, r5, #0
1000618a:	4333      	orrs	r3, r6
1000618c:	2001      	movs	r0, #1
1000618e:	2b00      	cmp	r3, #0
10006190:	d1f7      	bne.n	10006182 <__eqdf2+0x32>
10006192:	480d      	ldr	r0, [pc, #52]	; (100061c8 <__eqdf2+0x78>)
10006194:	4282      	cmp	r2, r0
10006196:	d1f1      	bne.n	1000617c <__eqdf2+0x2c>
10006198:	4663      	mov	r3, ip
1000619a:	433b      	orrs	r3, r7
1000619c:	2001      	movs	r0, #1
1000619e:	2b00      	cmp	r3, #0
100061a0:	d1ef      	bne.n	10006182 <__eqdf2+0x32>
100061a2:	2001      	movs	r0, #1
100061a4:	4294      	cmp	r4, r2
100061a6:	d1ec      	bne.n	10006182 <__eqdf2+0x32>
100061a8:	42bd      	cmp	r5, r7
100061aa:	d1ea      	bne.n	10006182 <__eqdf2+0x32>
100061ac:	4566      	cmp	r6, ip
100061ae:	d1e8      	bne.n	10006182 <__eqdf2+0x32>
100061b0:	4541      	cmp	r1, r8
100061b2:	d006      	beq.n	100061c2 <__eqdf2+0x72>
100061b4:	2c00      	cmp	r4, #0
100061b6:	d1e4      	bne.n	10006182 <__eqdf2+0x32>
100061b8:	1c28      	adds	r0, r5, #0
100061ba:	4330      	orrs	r0, r6
100061bc:	1e45      	subs	r5, r0, #1
100061be:	41a8      	sbcs	r0, r5
100061c0:	e7df      	b.n	10006182 <__eqdf2+0x32>
100061c2:	2000      	movs	r0, #0
100061c4:	e7dd      	b.n	10006182 <__eqdf2+0x32>
100061c6:	46c0      	nop			; (mov r8, r8)
100061c8:	000007ff 	.word	0x000007ff

100061cc <__gedf2>:
100061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100061ce:	4657      	mov	r7, sl
100061d0:	464e      	mov	r6, r9
100061d2:	4645      	mov	r5, r8
100061d4:	b4e0      	push	{r5, r6, r7}
100061d6:	1c04      	adds	r4, r0, #0
100061d8:	004e      	lsls	r6, r1, #1
100061da:	0308      	lsls	r0, r1, #12
100061dc:	0fc9      	lsrs	r1, r1, #31
100061de:	468a      	mov	sl, r1
100061e0:	1c17      	adds	r7, r2, #0
100061e2:	0059      	lsls	r1, r3, #1
100061e4:	031a      	lsls	r2, r3, #12
100061e6:	0b05      	lsrs	r5, r0, #12
100061e8:	0d70      	lsrs	r0, r6, #21
100061ea:	0b16      	lsrs	r6, r2, #12
100061ec:	0d4a      	lsrs	r2, r1, #21
100061ee:	4930      	ldr	r1, [pc, #192]	; (100062b0 <__gedf2+0xe4>)
100061f0:	0fdb      	lsrs	r3, r3, #31
100061f2:	469c      	mov	ip, r3
100061f4:	4288      	cmp	r0, r1
100061f6:	d032      	beq.n	1000625e <__gedf2+0x92>
100061f8:	492d      	ldr	r1, [pc, #180]	; (100062b0 <__gedf2+0xe4>)
100061fa:	428a      	cmp	r2, r1
100061fc:	d035      	beq.n	1000626a <__gedf2+0x9e>
100061fe:	2800      	cmp	r0, #0
10006200:	d10f      	bne.n	10006222 <__gedf2+0x56>
10006202:	1c29      	adds	r1, r5, #0
10006204:	4321      	orrs	r1, r4
10006206:	424b      	negs	r3, r1
10006208:	414b      	adcs	r3, r1
1000620a:	4698      	mov	r8, r3
1000620c:	2a00      	cmp	r2, #0
1000620e:	d00b      	beq.n	10006228 <__gedf2+0x5c>
10006210:	2b00      	cmp	r3, #0
10006212:	d11a      	bne.n	1000624a <__gedf2+0x7e>
10006214:	45e2      	cmp	sl, ip
10006216:	d02c      	beq.n	10006272 <__gedf2+0xa6>
10006218:	4655      	mov	r5, sl
1000621a:	2d00      	cmp	r5, #0
1000621c:	d118      	bne.n	10006250 <__gedf2+0x84>
1000621e:	2001      	movs	r0, #1
10006220:	e018      	b.n	10006254 <__gedf2+0x88>
10006222:	2a00      	cmp	r2, #0
10006224:	d1f6      	bne.n	10006214 <__gedf2+0x48>
10006226:	4690      	mov	r8, r2
10006228:	1c31      	adds	r1, r6, #0
1000622a:	4339      	orrs	r1, r7
1000622c:	424b      	negs	r3, r1
1000622e:	414b      	adcs	r3, r1
10006230:	4641      	mov	r1, r8
10006232:	2900      	cmp	r1, #0
10006234:	d106      	bne.n	10006244 <__gedf2+0x78>
10006236:	2b00      	cmp	r3, #0
10006238:	d0ec      	beq.n	10006214 <__gedf2+0x48>
1000623a:	4656      	mov	r6, sl
1000623c:	2001      	movs	r0, #1
1000623e:	2e00      	cmp	r6, #0
10006240:	d008      	beq.n	10006254 <__gedf2+0x88>
10006242:	e005      	b.n	10006250 <__gedf2+0x84>
10006244:	2000      	movs	r0, #0
10006246:	2b00      	cmp	r3, #0
10006248:	d104      	bne.n	10006254 <__gedf2+0x88>
1000624a:	4667      	mov	r7, ip
1000624c:	2f00      	cmp	r7, #0
1000624e:	d1e6      	bne.n	1000621e <__gedf2+0x52>
10006250:	2301      	movs	r3, #1
10006252:	4258      	negs	r0, r3
10006254:	bc1c      	pop	{r2, r3, r4}
10006256:	4690      	mov	r8, r2
10006258:	4699      	mov	r9, r3
1000625a:	46a2      	mov	sl, r4
1000625c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000625e:	1c2b      	adds	r3, r5, #0
10006260:	4323      	orrs	r3, r4
10006262:	d0c9      	beq.n	100061f8 <__gedf2+0x2c>
10006264:	2102      	movs	r1, #2
10006266:	4248      	negs	r0, r1
10006268:	e7f4      	b.n	10006254 <__gedf2+0x88>
1000626a:	1c33      	adds	r3, r6, #0
1000626c:	433b      	orrs	r3, r7
1000626e:	d0c6      	beq.n	100061fe <__gedf2+0x32>
10006270:	e7f8      	b.n	10006264 <__gedf2+0x98>
10006272:	4290      	cmp	r0, r2
10006274:	dc05      	bgt.n	10006282 <__gedf2+0xb6>
10006276:	da09      	bge.n	1000628c <__gedf2+0xc0>
10006278:	4652      	mov	r2, sl
1000627a:	2a00      	cmp	r2, #0
1000627c:	d0e8      	beq.n	10006250 <__gedf2+0x84>
1000627e:	2001      	movs	r0, #1
10006280:	e7e8      	b.n	10006254 <__gedf2+0x88>
10006282:	4654      	mov	r4, sl
10006284:	2c00      	cmp	r4, #0
10006286:	d1e3      	bne.n	10006250 <__gedf2+0x84>
10006288:	2001      	movs	r0, #1
1000628a:	e7e3      	b.n	10006254 <__gedf2+0x88>
1000628c:	42b5      	cmp	r5, r6
1000628e:	d8c3      	bhi.n	10006218 <__gedf2+0x4c>
10006290:	d007      	beq.n	100062a2 <__gedf2+0xd6>
10006292:	2000      	movs	r0, #0
10006294:	42b5      	cmp	r5, r6
10006296:	d2dd      	bcs.n	10006254 <__gedf2+0x88>
10006298:	4650      	mov	r0, sl
1000629a:	2800      	cmp	r0, #0
1000629c:	d0d8      	beq.n	10006250 <__gedf2+0x84>
1000629e:	2001      	movs	r0, #1
100062a0:	e7d8      	b.n	10006254 <__gedf2+0x88>
100062a2:	42bc      	cmp	r4, r7
100062a4:	d8b8      	bhi.n	10006218 <__gedf2+0x4c>
100062a6:	2000      	movs	r0, #0
100062a8:	42bc      	cmp	r4, r7
100062aa:	d3f5      	bcc.n	10006298 <__gedf2+0xcc>
100062ac:	e7d2      	b.n	10006254 <__gedf2+0x88>
100062ae:	46c0      	nop			; (mov r8, r8)
100062b0:	000007ff 	.word	0x000007ff

100062b4 <__ledf2>:
100062b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100062b6:	4644      	mov	r4, r8
100062b8:	465f      	mov	r7, fp
100062ba:	4656      	mov	r6, sl
100062bc:	464d      	mov	r5, r9
100062be:	b4f0      	push	{r4, r5, r6, r7}
100062c0:	4694      	mov	ip, r2
100062c2:	1c06      	adds	r6, r0, #0
100062c4:	031a      	lsls	r2, r3, #12
100062c6:	0058      	lsls	r0, r3, #1
100062c8:	0b17      	lsrs	r7, r2, #12
100062ca:	0d42      	lsrs	r2, r0, #21
100062cc:	482e      	ldr	r0, [pc, #184]	; (10006388 <__ledf2+0xd4>)
100062ce:	030d      	lsls	r5, r1, #12
100062d0:	004c      	lsls	r4, r1, #1
100062d2:	0fdb      	lsrs	r3, r3, #31
100062d4:	0b2d      	lsrs	r5, r5, #12
100062d6:	0d64      	lsrs	r4, r4, #21
100062d8:	0fc9      	lsrs	r1, r1, #31
100062da:	4698      	mov	r8, r3
100062dc:	4284      	cmp	r4, r0
100062de:	d033      	beq.n	10006348 <__ledf2+0x94>
100062e0:	4829      	ldr	r0, [pc, #164]	; (10006388 <__ledf2+0xd4>)
100062e2:	4282      	cmp	r2, r0
100062e4:	d036      	beq.n	10006354 <__ledf2+0xa0>
100062e6:	2c00      	cmp	r4, #0
100062e8:	d019      	beq.n	1000631e <__ledf2+0x6a>
100062ea:	2a00      	cmp	r2, #0
100062ec:	d120      	bne.n	10006330 <__ledf2+0x7c>
100062ee:	4693      	mov	fp, r2
100062f0:	4663      	mov	r3, ip
100062f2:	433b      	orrs	r3, r7
100062f4:	4258      	negs	r0, r3
100062f6:	4158      	adcs	r0, r3
100062f8:	465b      	mov	r3, fp
100062fa:	4682      	mov	sl, r0
100062fc:	2b00      	cmp	r3, #0
100062fe:	d01d      	beq.n	1000633c <__ledf2+0x88>
10006300:	4651      	mov	r1, sl
10006302:	2000      	movs	r0, #0
10006304:	2900      	cmp	r1, #0
10006306:	d104      	bne.n	10006312 <__ledf2+0x5e>
10006308:	4642      	mov	r2, r8
1000630a:	2a00      	cmp	r2, #0
1000630c:	d114      	bne.n	10006338 <__ledf2+0x84>
1000630e:	2401      	movs	r4, #1
10006310:	4260      	negs	r0, r4
10006312:	bc3c      	pop	{r2, r3, r4, r5}
10006314:	4690      	mov	r8, r2
10006316:	4699      	mov	r9, r3
10006318:	46a2      	mov	sl, r4
1000631a:	46ab      	mov	fp, r5
1000631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000631e:	1c2b      	adds	r3, r5, #0
10006320:	4333      	orrs	r3, r6
10006322:	4258      	negs	r0, r3
10006324:	4143      	adcs	r3, r0
10006326:	469b      	mov	fp, r3
10006328:	2a00      	cmp	r2, #0
1000632a:	d0e1      	beq.n	100062f0 <__ledf2+0x3c>
1000632c:	2b00      	cmp	r3, #0
1000632e:	d1eb      	bne.n	10006308 <__ledf2+0x54>
10006330:	4541      	cmp	r1, r8
10006332:	d015      	beq.n	10006360 <__ledf2+0xac>
10006334:	2900      	cmp	r1, #0
10006336:	d1ea      	bne.n	1000630e <__ledf2+0x5a>
10006338:	2001      	movs	r0, #1
1000633a:	e7ea      	b.n	10006312 <__ledf2+0x5e>
1000633c:	2800      	cmp	r0, #0
1000633e:	d0f7      	beq.n	10006330 <__ledf2+0x7c>
10006340:	2001      	movs	r0, #1
10006342:	2900      	cmp	r1, #0
10006344:	d0e5      	beq.n	10006312 <__ledf2+0x5e>
10006346:	e7e2      	b.n	1000630e <__ledf2+0x5a>
10006348:	1c2b      	adds	r3, r5, #0
1000634a:	4333      	orrs	r3, r6
1000634c:	2002      	movs	r0, #2
1000634e:	2b00      	cmp	r3, #0
10006350:	d1df      	bne.n	10006312 <__ledf2+0x5e>
10006352:	e7c5      	b.n	100062e0 <__ledf2+0x2c>
10006354:	4663      	mov	r3, ip
10006356:	433b      	orrs	r3, r7
10006358:	2002      	movs	r0, #2
1000635a:	2b00      	cmp	r3, #0
1000635c:	d1d9      	bne.n	10006312 <__ledf2+0x5e>
1000635e:	e7c2      	b.n	100062e6 <__ledf2+0x32>
10006360:	4294      	cmp	r4, r2
10006362:	dce7      	bgt.n	10006334 <__ledf2+0x80>
10006364:	db05      	blt.n	10006372 <__ledf2+0xbe>
10006366:	42bd      	cmp	r5, r7
10006368:	d8e4      	bhi.n	10006334 <__ledf2+0x80>
1000636a:	d006      	beq.n	1000637a <__ledf2+0xc6>
1000636c:	2000      	movs	r0, #0
1000636e:	42bd      	cmp	r5, r7
10006370:	d2cf      	bcs.n	10006312 <__ledf2+0x5e>
10006372:	2900      	cmp	r1, #0
10006374:	d0cb      	beq.n	1000630e <__ledf2+0x5a>
10006376:	2001      	movs	r0, #1
10006378:	e7cb      	b.n	10006312 <__ledf2+0x5e>
1000637a:	4566      	cmp	r6, ip
1000637c:	d8da      	bhi.n	10006334 <__ledf2+0x80>
1000637e:	2000      	movs	r0, #0
10006380:	4566      	cmp	r6, ip
10006382:	d3f6      	bcc.n	10006372 <__ledf2+0xbe>
10006384:	e7c5      	b.n	10006312 <__ledf2+0x5e>
10006386:	46c0      	nop			; (mov r8, r8)
10006388:	000007ff 	.word	0x000007ff

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	100010d7 	.word	0x100010d7
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	100010d9 	.word	0x100010d9
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	100010db 	.word	0x100010db
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	100010dd 	.word	0x100010dd
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	100010df 	.word	0x100010df
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	100010e1 	.word	0x100010e1
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	100010e3 	.word	0x100010e3
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	100010e5 	.word	0x100010e5
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	100010e7 	.word	0x100010e7
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	100010e9 	.word	0x100010e9
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	100010eb 	.word	0x100010eb
    MOV PC,R0
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	100010ed 	.word	0x100010ed
    MOV PC,R0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	1000110b 	.word	0x1000110b
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	1000110d 	.word	0x1000110d
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	1000110f 	.word	0x1000110f
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	10001111 	.word	0x10001111
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	10001113 	.word	0x10001113
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001115 	.word	0x10001115
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	100010ef 	.word	0x100010ef
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	100010f1 	.word	0x100010f1
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	100010f3 	.word	0x100010f3
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	100014ed 	.word	0x100014ed
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	100010f7 	.word	0x100010f7
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10001599 	.word	0x10001599
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001951 	.word	0x10001951
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	1000200d 	.word	0x1000200d
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	100010ff 	.word	0x100010ff
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001101 	.word	0x10001101
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	10001103 	.word	0x10001103
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001105 	.word	0x10001105
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001107 	.word	0x10001107
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001109 	.word	0x10001109
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001117 	.word	0x10001117
