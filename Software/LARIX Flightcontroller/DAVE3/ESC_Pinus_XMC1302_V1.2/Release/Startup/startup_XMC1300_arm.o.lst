   1              	# 1 "../Startup/startup_XMC1300_arm.s"
   1              	;*****************************************************************************/
   0              	
   2              	; * @file     startup_XMC1300.s
   3              	; * @brief    CMSIS Cortex-M0 Core Device Startup File for
   4              	; *           Infineon XMC1300 Device Series
   5              	; * @version  V1.10
   6              	; * @date     17. Jul. 2013
   7              	; *
   8              	; * @note
   9              	; * Copyright (C) 2009-2013 ARM Limited. All rights reserved.
  10              	; *
  11              	; * @par
  12              	; * ARM Limited (ARM) is supplying this software for use with Cortex-M
  13              	; * processor based microcontrollers.  This file can be freely distributed
  14              	; * within development tools that are supporting such ARM based processors.
  15              	; *
  16              	; * @par
  17              	; * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  18              	; * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  19              	; * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  20              	; * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  21              	; * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  22              	; *
  23              	; *****************************************************************************/
  24              	; *********************** Version History *************************************/
  25              	; *  V1.0, Jan, 21, 2013 TYS:Startup file for XMC1
  26              	; *  V1.1, Jul, 17, 2013 TYS:remove redundant vector table
  27              	; *****************************************************************************/
  28              	
  29              	;*  <<< Use Configuration Wizard in Context Menu >>>
  30              	
  31              	; Amount of memory (in bytes) allocated for Stack
  32              	; Tailor this value to your application needs
  33              	; <h> Stack Configuration
  34              	;   <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
  35              	; </h>
  36              	
  37              	Stack_Size      EQU     0x00000400
  38              	
  39              	                AREA    STACK, NOINIT, READWRITE, ALIGN=3
  40              	Stack_Mem       SPACE   Stack_Size
  41              	__initial_sp
  42              	
  43              	
  44              	; <h> Heap Configuration
  45              	;   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
  46              	; </h>
  47              	
  48              	Heap_Size       EQU     0x00000200
  49              	
  50              	                AREA    HEAP, NOINIT, READWRITE, ALIGN=3
  51              	__heap_base
  52              	Heap_Mem        SPACE   Heap_Size
  53              	__heap_limit
  54              	
  55              	; <h> Clock system handling by SSW
  56              	;   <h> CLK_VAL1 Configuration
  57              	;     <o0.0..7>    FDIV Fractional Divider Selection
  58              	;     <o0.8..15>   IDIV Divider Selection
  59              	;                     <0=> Divider is bypassed
  60              	;                     <1=> MCLK = 32 MHz
  61              	;                     <2=> MCLK = 16 MHz
  62              	;                     <3=> MCLK = 10.67 MHz
  63              	;                     <4=> MCLK = 8 MHz
  64              	;                     <254=> MCLK = 126 kHz
  65              	;                     <255=> MCLK = 125.5 kHz
  66              	;     <o0.16>      PCLKSEL PCLK Clock Select
  67              	;                     <0=> PCLK = MCLK
  68              	;                     <1=> PCLK = 2 x MCLK
  69              	;     <o0.17..19>  RTCCLKSEL RTC Clock Select
  70              	;                     <0=> 32.768kHz standby clock
  71              	;                     <1=> 32.768kHz external clock from ERU0.IOUT0
  72              	;                     <2=> 32.768kHz external clock from ACMP0.OUT
  73              	;                     <3=> 32.768kHz external clock from ACMP1.OUT
  74              	;                     <4=> 32.768kHz external clock from ACMP2.OUT
  75              	;                     <5=> Reserved
  76              	;                     <6=> Reserved
  77              	;                     <7=> Reserved
  78              	;     <o0.31>      do not move CLK_VAL1 to SCU_CLKCR[0..19]
  79              	;   </h>
  80              	CLK_VAL1_Val    EQU     0x80000000      
  81              	
  82              	;   <h> CLK_VAL2 Configuration
  83              	;     <o0.0>    disable VADC and SHS Gating
  84              	;     <o0.1>    disable CCU80 Gating
  85              	;     <o0.2>    disable CCU40 Gating
  86              	;     <o0.3>    disable USIC0 Gating
  87              	;     <o0.4>    disable BCCU0 Gating
  88              	;     <o0.5>    disable LEDTS0 Gating
  89              	;     <o0.6>    disable LEDTS1 Gating
  90              	;     <o0.7>    disable POSIF0 Gating
  91              	;     <o0.8>    disable MATH Gating
  92              	;     <o0.9>    disable WDT Gating
  93              	;     <o0.10>   disable RTC Gating
  94              	;     <o0.31>   do not move CLK_VAL2 to SCU_CGATCLR0[0..10]
  95              	;   </h>
  96              	CLK_VAL2_Val    EQU     0x80000000     
  97              	; </h>
  98              	
  99              	                PRESERVE8
 100              	                THUMB
 101              	
 102              	;* ================== START OF VECTOR TABLE DEFINITION ====================== */
 103              	;* Vector Table Mapped to Address 0 at Reset
 104              	                AREA    RESET, DATA, READONLY
 105              	                EXPORT  __Vectors
 106              	                EXPORT  __Vectors_End
 107              	                EXPORT  __Vectors_Size
 108              	
 109              	
 110              	
 111              	__Vectors
 112              	    DCD   __initial_sp                ;* Top of Stack
 113              	    DCD   Reset_Handler               ;* Reset Handler
 114              	    DCD   0                           ;* Not used
 115              	    DCD   0                           ;* Not Used
 116              	    DCD   CLK_VAL1_Val                ;* CLK_VAL1
 117              	    DCD   CLK_VAL2_Val                ;* CLK_VAL2
 118              	__Vectors_End
 119              	
 120              	__Vectors_Size  EQU  __Vectors_End - __Vectors
 121              	
 122              	;* ================== END OF VECTOR TABLE DEFINITION ======================== */
 123              	
 124              	
 125              	;* ================== START OF VECTOR ROUTINES ============================== */
 126              	                AREA    |.text|, CODE, READONLY
 127              	
 128              	;* Reset Handler
 129              	Reset_Handler    PROC
 130              	                 EXPORT  Reset_Handler             [WEAK]
 131              	        IMPORT  __main
 132              	        IMPORT  SystemInit
 133              	
 134              	        ;* C routines are likely to be called. Setup the stack now
 135 ???? 0048     	        LDR     R0, =__initial_sp
 136 ???? 8546     	        MOV     SP, R0
 137              	
 138              	       ; Following code initializes the Veneers at address 0x20000000 with a "branch to itself"
 139              	       ; The real veneers will be copied later from the scatter loader before reaching main.
 140              	       ; This init code should handle an exception before the real veneers are copied.
 141              	SRAM_BASE            EQU     0x20000000
 142              	VENEER_INIT_CODE     EQU     0xE7FEBF00             ; NOP, B .
 143              	
 144 ???? 0049     	        LDR     R1, =SRAM_BASE
 145 ???? 004A     	        LDR     R2, =VENEER_INIT_CODE                
 146 ???? 0020     	        MOVS    R0, #48                     ; Veneer 0..47
****  Error:bad instruction `veneer 0..47'
 147              	Init_Veneers
 148 ???? 0A60     	        STR     R2, [R1]
 149              	        ADDS    R1, #4
 150              	        SUBS    R0, R0, #1
 151 ???? 00D1     	        BNE     Init_Veneers
 152              	
 153              	
 154 ???? 0048     	        LDR     R0, =SystemInit
 155 ???? 8047     	        BLX     R0
 156              	
 157              	
 158              	        ; SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is
 159              	        ; weakly defined here though for a potential override.
 160              	
 161 ???? 0048     	        LDR     R0, = SystemInit_DAVE3
 162 ???? 8047     	        BLX     R0
 163              	
 164              	
 165 ???? 0048     	        LDR     R0, =__main
 166 ???? 0047     	        BX      R0
 167              	
 168              	
 169              	        ALIGN
 170              	        ENDP
 171              	
 172              	;* ========================================================================== */
 173              	
 174              	
 175              	
 176              	;* ========== START OF EXCEPTION HANDLER DEFINITION ========================= */
 177              	;* Default exception Handlers - Users may override this default functionality
 178              	
 179              	NMI_Handler     PROC
 180              	                EXPORT  NMI_Handler                   [WEAK]
 181 ???? 00E0     	                B       .
 182              	                ENDP
 183              	HardFault_Handler\
 184              	                PROC
 185              	                EXPORT  HardFault_Handler             [WEAK]
 186 ???? 00E0     	                B       .
 187              	                ENDP
 188              	SVC_Handler\
 189              	                PROC
 190              	                EXPORT  SVC_Handler                   [WEAK]
 191 ???? 00E0     	                B       .
 192              	                ENDP
 193              	PendSV_Handler\
 194              	                PROC
 195              	                EXPORT  PendSV_Handler                [WEAK]
 196 ???? 00E0     	                B       .
 197              	                ENDP
 198              	SysTick_Handler\
 199              	                PROC
 200              	                EXPORT  SysTick_Handler               [WEAK]
 201 ???? 00E0     	                B       .
 202              	                ENDP
 203              	
 204              	;* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */
 205              	
 206              	
 207              	;* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */
 208              	;* IRQ Handlers
 209              	
 210              	Default_Handler PROC
 211              	               EXPORT     SCU_0_IRQHandler            [WEAK]
 212              	               EXPORT     SCU_1_IRQHandler            [WEAK]
 213              	               EXPORT     SCU_2_IRQHandler            [WEAK]
 214              	               EXPORT     ERU0_0_IRQHandler           [WEAK]
 215              	               EXPORT     ERU0_1_IRQHandler           [WEAK]
 216              	               EXPORT     ERU0_2_IRQHandler           [WEAK]
 217              	               EXPORT     ERU0_3_IRQHandler           [WEAK]
 218              	               EXPORT     MATH0_0_IRQHandler          [WEAK]
 219              	               EXPORT     USIC0_0_IRQHandler          [WEAK]
 220              	               EXPORT     USIC0_1_IRQHandler          [WEAK]
 221              	               EXPORT     USIC0_2_IRQHandler          [WEAK]
 222              	               EXPORT     USIC0_3_IRQHandler          [WEAK]
 223              	               EXPORT     USIC0_4_IRQHandler          [WEAK]
 224              	               EXPORT     USIC0_5_IRQHandler          [WEAK]
 225              	               EXPORT     VADC0_C0_0_IRQHandler       [WEAK]
 226              	               EXPORT     VADC0_C0_1_IRQHandler       [WEAK]
 227              	               EXPORT     VADC0_G0_0_IRQHandler       [WEAK]
 228              	               EXPORT     VADC0_G0_1_IRQHandler       [WEAK]
 229              	               EXPORT     VADC0_G1_0_IRQHandler       [WEAK]
 230              	               EXPORT     VADC0_G1_1_IRQHandler       [WEAK]
 231              	               EXPORT     CCU40_0_IRQHandler          [WEAK]
 232              	               EXPORT     CCU40_1_IRQHandler          [WEAK]
 233              	               EXPORT     CCU40_2_IRQHandler          [WEAK]
 234              	               EXPORT     CCU40_3_IRQHandler          [WEAK]
 235              	               EXPORT     CCU80_0_IRQHandler          [WEAK]
 236              	               EXPORT     CCU80_1_IRQHandler          [WEAK]
 237              	               EXPORT     POSIF0_0_IRQHandler         [WEAK]
 238              	               EXPORT     POSIF0_1_IRQHandler         [WEAK]
 239              	               EXPORT     BCCU0_0_IRQHandler          [WEAK]
 240              	
 241              	SCU_0_IRQHandler
 242              	SCU_1_IRQHandler
 243              	SCU_2_IRQHandler
 244              	ERU0_0_IRQHandler
 245              	ERU0_1_IRQHandler
 246              	ERU0_2_IRQHandler
 247              	ERU0_3_IRQHandler
 248              	MATH0_0_IRQHandler
 249              	USIC0_0_IRQHandler
 250              	USIC0_1_IRQHandler
 251              	USIC0_2_IRQHandler
 252              	USIC0_3_IRQHandler
 253              	USIC0_4_IRQHandler
 254              	USIC0_5_IRQHandler
 255              	VADC0_C0_0_IRQHandler
 256              	VADC0_C0_1_IRQHandler
 257              	VADC0_G0_0_IRQHandler
 258              	VADC0_G0_1_IRQHandler
 259              	VADC0_G1_0_IRQHandler
 260              	VADC0_G1_1_IRQHandler
 261              	CCU40_0_IRQHandler
 262              	CCU40_1_IRQHandler
 263              	CCU40_2_IRQHandler
 264              	CCU40_3_IRQHandler
 265              	CCU80_0_IRQHandler
 266              	CCU80_1_IRQHandler
 267              	POSIF0_0_IRQHandler
 268              	POSIF0_1_IRQHandler
 269              	BCCU0_0_IRQHandler
 270              	
 271 ???? 00E0     	                B       .
 272              	
 273              	                ENDP
 274              	
 275              	                ALIGN
 276              	
 277              	;* ============= END OF INTERRUPT HANDLER DEFINITION ======================== */
 278              	
 279              	;*  Definition of the default weak SystemInit_DAVE3 function.
 280              	;*  This function will be called by the CMSIS SystemInit function.
 281              	;*  If DAVE3 requires an extended SystemInit it will create its own SystemInit_DAVE3
 282              	;*  which will overule this weak definition
 283              	SystemInit_DAVE3    PROC
 284              	                  EXPORT  SystemInit_DAVE3             [WEAK]
 285 ???? C046     	                  NOP
 286 ???? 7047     	                  BX LR
 287              	        ENDP
 288              	
 289              	;*  Definition of the default weak DAVE3 function for clock App usage.
 290              	;*  AllowClkInitByStartup Handler */
 291              	AllowClkInitByStartup    PROC
 292              	                  EXPORT  AllowClkInitByStartup        [WEAK]
 293 ???? 0020     	                  MOVS R0,#1
 294 ???? 7047     	                  BX LR
 295              	        ENDP
 296              	
 297              	
 298              	;*******************************************************************************
 299              	; User Stack and Heap initialization
 300              	;*******************************************************************************
 301              	                 IF      :DEF:__MICROLIB
 302              	
 303              	                 EXPORT  __initial_sp
 304              	                 EXPORT  __heap_base
 305              	                 EXPORT  __heap_limit
 306              	
 307              	                 ELSE
 308              	
 309              	                 IMPORT  __use_two_region_memory
 310              	                 EXPORT  __user_initial_stackheap
 311              	
 312              	__user_initial_stackheap
 313              	
 314 ???? 0048     	                 LDR     R0, =  Heap_Mem
 315              	                 LDR     R1, =(Stack_Mem + Stack_Size)
 316              	                 LDR     R2, = (Heap_Mem +  Heap_Size)
 317 ???? 004B     	                 LDR     R3, = Stack_Mem
 318 ???? 7047     	                 BX      LR
 319              	
 320              	                 ALIGN
 321              	
 322              	                 ENDIF
 323              	
 324              	
 325              	;* ================== START OF INTERRUPT HANDLER VENEERS ==================== */
 326              	; Veneers are located to fix SRAM Address 0x2000'0000
 327              	                AREA    |.ARM.__at_0x20000000|, CODE, READWRITE
 328              	
 329              	; Each Veneer has exactly a lengs of 4 Byte
 330              	
 331              	                MACRO
 332              	                STAYHERE $IrqNumber
 333 ???? 0048     	                LDR  R0, =$IrqNumber
 334 ???? 00E0     	                B    .
 335              	                MEND
 336              	
 337              	                MACRO
 338              	                JUMPTO $Handler
 339 ???? 0048     	                LDR  R0, =$Handler
 340 ???? 0047     	                BX   R0
 341              	                MEND
 342              	
 343              	                STAYHERE 0x0                          ;* Reserved
 344              	                STAYHERE 0x1                          ;* Reserved 
 345              	                STAYHERE 0x2                          ;* Reserved 
 346              	                JUMPTO   HardFault_Handler            ;* HardFault Veneer  
 347              	                STAYHERE 0x4                          ;* Reserved 
 348              	                STAYHERE 0x5                          ;* Reserved 
 349              	                STAYHERE 0x6                          ;* Reserved 
 350              	                STAYHERE 0x7                          ;* Reserved 
 351              	                STAYHERE 0x8                          ;* Reserved 
 352              	                STAYHERE 0x9                          ;* Reserved 
 353              	                STAYHERE 0xA                          ;* Reserved
 354              	                JUMPTO   SVC_Handler                  ;* SVC Veneer        
 355              	                STAYHERE 0xC                          ;* Reserved
 356              	                STAYHERE 0xD                          ;* Reserved
 357              	                JUMPTO   PendSV_Handler               ;* PendSV Veneer     
 358              	                JUMPTO   SysTick_Handler              ;* SysTick Veneer    
 359              	                JUMPTO   SCU_0_IRQHandler             ;* SCU_0 Veneer      
 360              	                JUMPTO   SCU_1_IRQHandler             ;* SCU_1 Veneer      
 361              	                JUMPTO   SCU_2_IRQHandler             ;* SCU_2 Veneer      
 362              	                JUMPTO   ERU0_0_IRQHandler            ;* SCU_3 Veneer      
 363              	                JUMPTO   ERU0_1_IRQHandler            ;* SCU_4 Veneer      
 364              	                JUMPTO   ERU0_2_IRQHandler            ;* SCU_5 Veneer      
 365              	                JUMPTO   ERU0_3_IRQHandler            ;* SCU_6 Veneer      
 366              	                JUMPTO   MATH0_0_IRQHandler           ;* SCU_7 Veneer      
 367              	                STAYHERE 0x18                         ;* Reserved
 368              	                JUMPTO   USIC0_0_IRQHandler           ;* USIC0_0 Veneer    
 369              	                JUMPTO   USIC0_1_IRQHandler           ;* USIC0_1 Veneer    
 370              	                JUMPTO   USIC0_2_IRQHandler           ;* USIC0_2 Veneer    
 371              	                JUMPTO   USIC0_3_IRQHandler           ;* USIC0_3 Veneer    
 372              	                JUMPTO   USIC0_4_IRQHandler           ;* USIC0_4 Veneer    
 373              	                JUMPTO   USIC0_5_IRQHandler           ;* USIC0_5 Veneer    
 374              	                JUMPTO   VADC0_C0_0_IRQHandler        ;* VADC0_C0_0 Veneer 
 375              	                JUMPTO   VADC0_C0_1_IRQHandler        ;* VADC0_C0_1 Veneer 
 376              	                JUMPTO   VADC0_G0_0_IRQHandler        ;* VADC0_G0_0 Veneer 
 377              	                JUMPTO   VADC0_G0_1_IRQHandler        ;* VADC0_G0_1 Veneer 
 378              	                JUMPTO   VADC0_G1_0_IRQHandler        ;* VADC0_G1_0 Veneer 
 379              	                JUMPTO   VADC0_G1_1_IRQHandler        ;* VADC0_G1_1 Veneer 
 380              	                JUMPTO   CCU40_0_IRQHandler           ;* CCU40_0 Veneer    
 381              	                JUMPTO   CCU40_1_IRQHandler           ;* CCU40_1 Veneer    
 382              	                JUMPTO   CCU40_2_IRQHandler           ;* CCU40_2 Veneer    
 383              	                JUMPTO   CCU40_3_IRQHandler           ;* CCU40_3 Veneer    
 384              	                JUMPTO   CCU80_0_IRQHandler           ;* CCU80_0 Veneer    
 385              	                JUMPTO   CCU80_1_IRQHandler           ;* CCU80_1 Veneer    
 386              	                JUMPTO   POSIF0_0_IRQHandler          ;* POSIF0_0 Veneer   
 387              	                JUMPTO   POSIF0_1_IRQHandler          ;* POSIF0_1 Veneer   
 388              	                STAYHERE 0x2D                         ;* Reserved
 389              	                STAYHERE 0x2E                         ;* Reserved
 390              	                JUMPTO   BCCU0_0_IRQHandler           ;* BCCU0_0 Veneer    
 391              	
 392              	                ALIGN
 393              	
 394              	;* ================== END OF INTERRUPT HANDLER VENEERS ====================== */
 395              	
 396 ???? 00000000 	                END
****  Error:bad instruction `end'
 396      00000000 
 396      00000000 
 396      00000000 
 396      00000000 
DEFINED SYMBOLS
                            .text:00000000 $d
../Startup/startup_XMC1300_arm.s:135    .text:00000000 $t
../Startup/startup_XMC1300_arm.s:181    .text:00000000 L0
../Startup/startup_XMC1300_arm.s:186    .text:00000000 L0
../Startup/startup_XMC1300_arm.s:191    .text:00000000 L0
../Startup/startup_XMC1300_arm.s:196    .text:00000000 L0
../Startup/startup_XMC1300_arm.s:201    .text:00000000 L0
../Startup/startup_XMC1300_arm.s:271    .text:00000000 L0
../Startup/startup_XMC1300_arm.s:301    .text:00000000 IF
../Startup/startup_XMC1300_arm.s:301    .text:00000000 DEF
../Startup/startup_XMC1300_arm.s:334    .text:00000000 L0
../Startup/startup_XMC1300_arm.s:396    .text:00000000 $d
../Startup/startup_XMC1300_arm.s:396    .text:00000000 $$lit_1
../Startup/startup_XMC1300_arm.s:396    .text:00000028 $t
                            .data:00000000 $d
                             .bss:00000000 $d
                  .ARM.attributes:00000021 $d

UNDEFINED SYMBOLS
__initial_sp
SRAM_BASE
VENEER_INIT_CODE
Init_Veneers
SystemInit
SystemInit_DAVE3
__main
Heap_Mem
Stack_Mem
Stack_Size
Heap_Size
$IrqNumber
$Handler
