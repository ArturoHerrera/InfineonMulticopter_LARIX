   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC003.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADC003_Init,"ax",%progbits
  18              		.align	2
  19              		.global	ADC003_Init
  20              		.code	16
  21              		.thumb_func
  23              	ADC003_Init:
  24              	.LFB38:
  25              		.file 1 "../Dave/Generated/src/ADC003/ADC003.c"
   1:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
   2:../Dave/Generated/src/ADC003/ADC003.c **** **  DAVE App Name : ADC003       App Version: 1.0.22               
   3:../Dave/Generated/src/ADC003/ADC003.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/ADC003/ADC003.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
   6:../Dave/Generated/src/ADC003/ADC003.c **** 
   7:../Dave/Generated/src/ADC003/ADC003.c **** /*CODE_BLOCK_BEGIN[ADC003.c]*/
   8:../Dave/Generated/src/ADC003/ADC003.c **** 
   9:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
  10:../Dave/Generated/src/ADC003/ADC003.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  11:../Dave/Generated/src/ADC003/ADC003.c ****  All rights reserved.                                                         **
  12:../Dave/Generated/src/ADC003/ADC003.c ****                                                                               **
  13:../Dave/Generated/src/ADC003/ADC003.c ****  Redistribution and use in source and binary forms, with or without           **
  14:../Dave/Generated/src/ADC003/ADC003.c ****  modification,are permitted provided that the following conditions are met:   **
  15:../Dave/Generated/src/ADC003/ADC003.c ****                                                                               **
  16:../Dave/Generated/src/ADC003/ADC003.c ****  *Redistributions of source code must retain the above copyright notice,      **
  17:../Dave/Generated/src/ADC003/ADC003.c ****  this list of conditions and the following disclaimer.                        **
  18:../Dave/Generated/src/ADC003/ADC003.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  19:../Dave/Generated/src/ADC003/ADC003.c ****  this list of conditions and the following disclaimer in the documentation    **
  20:../Dave/Generated/src/ADC003/ADC003.c ****  and/or other materials provided with the distribution.                       **
  21:../Dave/Generated/src/ADC003/ADC003.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  22:../Dave/Generated/src/ADC003/ADC003.c ****  may be used to endorse or promote products derived from this software without**
  23:../Dave/Generated/src/ADC003/ADC003.c ****  specific prior written permission.                                           **
  24:../Dave/Generated/src/ADC003/ADC003.c ****                                                                               **
  25:../Dave/Generated/src/ADC003/ADC003.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  26:../Dave/Generated/src/ADC003/ADC003.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  27:../Dave/Generated/src/ADC003/ADC003.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  28:../Dave/Generated/src/ADC003/ADC003.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  29:../Dave/Generated/src/ADC003/ADC003.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  30:../Dave/Generated/src/ADC003/ADC003.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  31:../Dave/Generated/src/ADC003/ADC003.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  32:../Dave/Generated/src/ADC003/ADC003.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  33:../Dave/Generated/src/ADC003/ADC003.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  34:../Dave/Generated/src/ADC003/ADC003.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  35:../Dave/Generated/src/ADC003/ADC003.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  36:../Dave/Generated/src/ADC003/ADC003.c ****                                                                               **
  37:../Dave/Generated/src/ADC003/ADC003.c ****  To improve the quality of the software, users are encouraged to share        **
  38:../Dave/Generated/src/ADC003/ADC003.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  39:../Dave/Generated/src/ADC003/ADC003.c ****  dave@infineon.com).                                                          **
  40:../Dave/Generated/src/ADC003/ADC003.c ****                                                                               **
  41:../Dave/Generated/src/ADC003/ADC003.c **** ********************************************************************************
  42:../Dave/Generated/src/ADC003/ADC003.c **** **                                                                            **
  43:../Dave/Generated/src/ADC003/ADC003.c **** **                                                                            **
  44:../Dave/Generated/src/ADC003/ADC003.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  45:../Dave/Generated/src/ADC003/ADC003.c **** **                                                                            **
  46:../Dave/Generated/src/ADC003/ADC003.c **** ** COMPILER : Compiler Independent                                            **
  47:../Dave/Generated/src/ADC003/ADC003.c **** **                                                                            **
  48:../Dave/Generated/src/ADC003/ADC003.c **** ** AUTHOR   : KM                                                              **
  49:../Dave/Generated/src/ADC003/ADC003.c **** **                                                                            **
  50:../Dave/Generated/src/ADC003/ADC003.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  51:../Dave/Generated/src/ADC003/ADC003.c **** **                                                                            **
  52:../Dave/Generated/src/ADC003/ADC003.c **** ** MODIFICATION DATE : Jan 28, 2014                                           **
  53:../Dave/Generated/src/ADC003/ADC003.c **** **                                                                            **
  54:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
  55:../Dave/Generated/src/ADC003/ADC003.c **** 
  56:../Dave/Generated/src/ADC003/ADC003.c **** 
  57:../Dave/Generated/src/ADC003/ADC003.c **** /**
  58:../Dave/Generated/src/ADC003/ADC003.c ****  * @file ADC003.c
  59:../Dave/Generated/src/ADC003/ADC003.c ****  *
  60:../Dave/Generated/src/ADC003/ADC003.c ****  * @brief This file contains ADC003 App API definitions
  61:../Dave/Generated/src/ADC003/ADC003.c ****  *
  62:../Dave/Generated/src/ADC003/ADC003.c ****  * Change History:
  63:../Dave/Generated/src/ADC003/ADC003.c ****  * Date         version       Details
  64:../Dave/Generated/src/ADC003/ADC003.c ****  * 12-Jan-2013  1.0.3     Initial code added for XMC1000
  65:../Dave/Generated/src/ADC003/ADC003.c ****  * 07-Mar-2013  1.0.6     App version changed for XMC1000 and XMC4400/XMC4200
  66:../Dave/Generated/src/ADC003/ADC003.c ****  * 24-Apr-2013  1.0.8     Ported to XMC4500 step AB and
  67:../Dave/Generated/src/ADC003/ADC003.c ****  *                        Source Result selection Feature added
  68:../Dave/Generated/src/ADC003/ADC003.c ****  * 10-Jun-2013  1.0.10  1. In the Header comment section device name changed to
  69:../Dave/Generated/src/ADC003/ADC003.c ****  *                         XMC1000
  70:../Dave/Generated/src/ADC003/ADC003.c ****  *                      2. Source Result register selection feature disabled due
  71:../Dave/Generated/src/ADC003/ADC003.c ****  *                         to header file update not available.
  72:../Dave/Generated/src/ADC003/ADC003.c ****  * 27-Jun-2013  1.0.12    Source Result register selection feature removed to
  73:../Dave/Generated/src/ADC003/ADC003.c ****  *                        simplify the app.
  74:../Dave/Generated/src/ADC003/ADC003.c ****  * 29-Aug-2013  1.0.14    Added support for the following devices under XMC1200
  75:../Dave/Generated/src/ADC003/ADC003.c ****  *                        and XMC1300 Series XMC1201, XMC1202, XMC1301.
  76:../Dave/Generated/src/ADC003/ADC003.c ****  * 31-Oct-2013  1.0.16   '10 bit Fast compare mode' is made invisible in GUI for
  77:../Dave/Generated/src/ADC003/ADC003.c ****  *                        standard conversion mode.
  78:../Dave/Generated/src/ADC003/ADC003.c ****  */
  79:../Dave/Generated/src/ADC003/ADC003.c **** /**
  80:../Dave/Generated/src/ADC003/ADC003.c ****  * @cond INTERNAL_DOCS
  81:../Dave/Generated/src/ADC003/ADC003.c ****  */
  82:../Dave/Generated/src/ADC003/ADC003.c **** /******************************************************************************
  83:../Dave/Generated/src/ADC003/ADC003.c **** **                      Author(s) Identity                                   **
  84:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************
  85:../Dave/Generated/src/ADC003/ADC003.c **** **                                                                           **
  86:../Dave/Generated/src/ADC003/ADC003.c **** ** Initials     Name                                                         **
  87:../Dave/Generated/src/ADC003/ADC003.c **** ** KM           DAVE App Developer                                           **
  88:../Dave/Generated/src/ADC003/ADC003.c **** ** SS           Sridhar Sampath                                              **
  89:../Dave/Generated/src/ADC003/ADC003.c **** ** --------------------------------------------------------------------------**
  90:../Dave/Generated/src/ADC003/ADC003.c **** 
  91:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
  92:../Dave/Generated/src/ADC003/ADC003.c **** 
  93:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
  94:../Dave/Generated/src/ADC003/ADC003.c ****  ** INCLUDE FILES                                                             **
  95:../Dave/Generated/src/ADC003/ADC003.c ****  ******************************************************************************/
  96:../Dave/Generated/src/ADC003/ADC003.c **** #include <DAVE3.h>
  97:../Dave/Generated/src/ADC003/ADC003.c **** 
  98:../Dave/Generated/src/ADC003/ADC003.c **** 
  99:../Dave/Generated/src/ADC003/ADC003.c **** /*****************************************************************************
 100:../Dave/Generated/src/ADC003/ADC003.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 101:../Dave/Generated/src/ADC003/ADC003.c **** *****************************************************************************/
 102:../Dave/Generated/src/ADC003/ADC003.c **** /*These definitions are included here to avoid compilation errors,
 103:../Dave/Generated/src/ADC003/ADC003.c ****  since the DBG002 app is not part of the project. All the macros are defined
 104:../Dave/Generated/src/ADC003/ADC003.c ****  as empty*/
 105:../Dave/Generated/src/ADC003/ADC003.c **** #ifndef _DBG002_H_
 106:../Dave/Generated/src/ADC003/ADC003.c **** 
 107:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_MESSAGEID_LITERAL
 108:../Dave/Generated/src/ADC003/ADC003.c **** 
 109:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_RegisterCallBack(A,B,C)
 110:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_I(e)
 111:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_IG(e,g)
 112:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_IH(e,h)
 113:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_IP(e,p)
 114:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_IGH(e,g,h)
 115:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_IGP(e,g,p)
 116:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_IHP(e,h,p)
 117:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_IGHP(e,g,h,p)
 118:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_N(e)
 119:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_NG(e,g)
 120:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_NH(e,h)
 121:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_NP(e,p)
 122:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_NGH(e,g,h)
 123:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_NGP(e,g,p)
 124:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_NHP(e,h,p)
 125:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_NGHP(e,g,h,p)
 126:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_ID(e)
 127:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_IS(e)
 128:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_ISG(e,g)
 129:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 130:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 131:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 132:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 133:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_INFO(groupid,messageid,length,value)
 134:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 135:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_FUNCTION_ENTRY(GID, Status)
 136:../Dave/Generated/src/ADC003/ADC003.c **** #define DBG002_FUNCTION_EXIT(GID, Status)
 137:../Dave/Generated/src/ADC003/ADC003.c **** 
 138:../Dave/Generated/src/ADC003/ADC003.c **** #endif/* End of defintions of dummy Debug Log macros*/
 139:../Dave/Generated/src/ADC003/ADC003.c **** 
 140:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 141:../Dave/Generated/src/ADC003/ADC003.c **** **                      Private Macro Definitions                             **
 142:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 143:../Dave/Generated/src/ADC003/ADC003.c **** #define APP_GID DBG002_GID_ADCGLOB001
 144:../Dave/Generated/src/ADC003/ADC003.c **** 
 145:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 146:../Dave/Generated/src/ADC003/ADC003.c **** **                      Private Type Definitions                              **
 147:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 148:../Dave/Generated/src/ADC003/ADC003.c **** 
 149:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 150:../Dave/Generated/src/ADC003/ADC003.c **** **                 Private Function Declarations:
 151:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 152:../Dave/Generated/src/ADC003/ADC003.c **** /**
 153:../Dave/Generated/src/ADC003/ADC003.c ****  * @brief This function initializes the app.
 154:../Dave/Generated/src/ADC003/ADC003.c ****  *
 155:../Dave/Generated/src/ADC003/ADC003.c ****  * @param [in] HandlePtr pointer to the Instance variable<BR>
 156:../Dave/Generated/src/ADC003/ADC003.c ****  *
 157:../Dave/Generated/src/ADC003/ADC003.c ****  * @return  NOne <BR>
 158:../Dave/Generated/src/ADC003/ADC003.c ****  *
 159:../Dave/Generated/src/ADC003/ADC003.c ****  * <b>Reentrancy:  Yes</b><BR>
 160:../Dave/Generated/src/ADC003/ADC003.c ****  * <b>Sync/Async:  Synchronous</b><BR>
 161:../Dave/Generated/src/ADC003/ADC003.c ****  */
 162:../Dave/Generated/src/ADC003/ADC003.c **** 
 163:../Dave/Generated/src/ADC003/ADC003.c **** void ADC003_lInit(const ADC003_HandleType *HandlePtr );
 164:../Dave/Generated/src/ADC003/ADC003.c **** 
 165:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 166:../Dave/Generated/src/ADC003/ADC003.c **** **                      Global Constant Definitions                           **
 167:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 168:../Dave/Generated/src/ADC003/ADC003.c **** 
 169:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 170:../Dave/Generated/src/ADC003/ADC003.c **** **                      Global Variable Definitions                           **
 171:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 172:../Dave/Generated/src/ADC003/ADC003.c **** 
 173:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 174:../Dave/Generated/src/ADC003/ADC003.c **** **                      Private Constant Definitions                          **
 175:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 176:../Dave/Generated/src/ADC003/ADC003.c **** 
 177:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 178:../Dave/Generated/src/ADC003/ADC003.c **** **                 Function like macro definitions                            **
 179:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 180:../Dave/Generated/src/ADC003/ADC003.c **** 
 181:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 182:../Dave/Generated/src/ADC003/ADC003.c **** **                      Private Function Definitions                          **
 183:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 184:../Dave/Generated/src/ADC003/ADC003.c **** 
 185:../Dave/Generated/src/ADC003/ADC003.c **** /*******************************************************************************
 186:../Dave/Generated/src/ADC003/ADC003.c **** **                      Public Function Definitions                           **
 187:../Dave/Generated/src/ADC003/ADC003.c **** *******************************************************************************/
 188:../Dave/Generated/src/ADC003/ADC003.c **** 
 189:../Dave/Generated/src/ADC003/ADC003.c **** 
 190:../Dave/Generated/src/ADC003/ADC003.c **** 
 191:../Dave/Generated/src/ADC003/ADC003.c **** /** This function initializes the app */
 192:../Dave/Generated/src/ADC003/ADC003.c **** void ADC003_Init(void)
 193:../Dave/Generated/src/ADC003/ADC003.c **** {
  26              		.loc 1 193 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
 194:../Dave/Generated/src/ADC003/ADC003.c ****    /*Initialization of app 'ADCGLOB001'*/
 195:../Dave/Generated/src/ADC003/ADC003.c ****    ADCGLOB001_Init();
  36              		.loc 1 195 0
  37 0004 FFF7FEFF 		bl	ADCGLOB001_Init
 196:../Dave/Generated/src/ADC003/ADC003.c ****    ADC003_lInit(&ADC003_Handle0);
  38              		.loc 1 196 0
  39 0008 024B     		ldr	r3, .L2
  40 000a 181C     		mov	r0, r3
  41 000c FFF7FEFF 		bl	ADC003_lInit
 197:../Dave/Generated/src/ADC003/ADC003.c **** }
  42              		.loc 1 197 0
  43 0010 BD46     		mov	sp, r7
  44              		@ sp needed for prologue
  45 0012 80BD     		pop	{r7, pc}
  46              	.L3:
  47              		.align	2
  48              	.L2:
  49 0014 00000000 		.word	ADC003_Handle0
  50              		.cfi_endproc
  51              	.LFE38:
  53              		.section	.text.ADC003_lInit,"ax",%progbits
  54              		.align	2
  55              		.global	ADC003_lInit
  56              		.code	16
  57              		.thumb_func
  59              	ADC003_lInit:
  60              	.LFB39:
 198:../Dave/Generated/src/ADC003/ADC003.c **** 
 199:../Dave/Generated/src/ADC003/ADC003.c **** /*
 200:../Dave/Generated/src/ADC003/ADC003.c ****  * This function initializes the scan App. Local function is used to
 201:../Dave/Generated/src/ADC003/ADC003.c ****  * initialize all the instances of the app.
 202:../Dave/Generated/src/ADC003/ADC003.c ****  */
 203:../Dave/Generated/src/ADC003/ADC003.c **** void ADC003_lInit(const ADC003_HandleType *HandlePtr )
 204:../Dave/Generated/src/ADC003/ADC003.c **** {
  61              		.loc 1 204 0
  62              		.cfi_startproc
  63 0000 80B5     		push	{r7, lr}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
  67              		.cfi_offset 14, -4
  68 0002 84B0     		sub	sp, sp, #16
  69              	.LCFI3:
  70              		.cfi_def_cfa_offset 24
  71 0004 00AF     		add	r7, sp, #0
  72              	.LCFI4:
  73              		.cfi_def_cfa_register 7
  74 0006 7860     		str	r0, [r7, #4]
 205:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
  75              		.loc 1 205 0
  76 0008 0123     		mov	r3, #1
  77 000a FB60     		str	r3, [r7, #12]
 206:../Dave/Generated/src/ADC003/ADC003.c ****   
 207:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 208:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
  78              		.loc 1 208 0
  79 000c 7B68     		ldr	r3, [r7, #4]
  80 000e 5B6D     		ldr	r3, [r3, #84]
  81 0010 BB60     		str	r3, [r7, #8]
 209:../Dave/Generated/src/ADC003/ADC003.c **** 
 210:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_UNINITIALIZED)
  82              		.loc 1 210 0
  83 0012 7B68     		ldr	r3, [r7, #4]
  84 0014 5B6A     		ldr	r3, [r3, #36]
  85 0016 1B78     		ldrb	r3, [r3]
  86 0018 002B     		cmp	r3, #0
  87 001a 78D1     		bne	.L4
 211:../Dave/Generated/src/ADC003/ADC003.c ****   {
 212:../Dave/Generated/src/ADC003/ADC003.c **** 
 213:../Dave/Generated/src/ADC003/ADC003.c ****     /* Sets the priority of the queue request source */
 214:../Dave/Generated/src/ADC003/ADC003.c ****     WR_REG(VADCGroupPtr->ARBPR, VADC_G_ARBPR_PRIO1_Msk, VADC_G_ARBPR_PRIO1_Pos,\
  88              		.loc 1 214 0
  89 001c 7B68     		ldr	r3, [r7, #4]
  90 001e 5B79     		ldrb	r3, [r3, #5]
  91 0020 1A01     		lsl	r2, r3, #4
  92 0022 3023     		mov	r3, #48
  93 0024 1A40     		and	r2, r3
  94 0026 B968     		ldr	r1, [r7, #8]
  95 0028 8423     		mov	r3, #132
  96 002a CB58     		ldr	r3, [r1, r3]
  97 002c 3021     		mov	r1, #48
  98 002e 8B43     		bic	r3, r1
  99 0030 111C     		mov	r1, r2
 100 0032 1943     		orr	r1, r3
 101 0034 BA68     		ldr	r2, [r7, #8]
 102 0036 8423     		mov	r3, #132
 103 0038 D150     		str	r1, [r2, r3]
 215:../Dave/Generated/src/ADC003/ADC003.c ****                                               (uint32_t)HandlePtr->kPriority);
 216:../Dave/Generated/src/ADC003/ADC003.c **** 
 217:../Dave/Generated/src/ADC003/ADC003.c ****     /*
 218:../Dave/Generated/src/ADC003/ADC003.c ****      * Enable XTWC Bitfield so that XTMODE and XTSEL can be written
 219:../Dave/Generated/src/ADC003/ADC003.c ****      * Selects trigger mode .
 220:../Dave/Generated/src/ADC003/ADC003.c ****      */
 221:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ASCTRL |= (uint32_t)(((uint32_t)1 << VADC_G_ASCTRL_XTWC_Pos)|\
 104              		.loc 1 221 0
 105 003a BA68     		ldr	r2, [r7, #8]
 106 003c 9023     		mov	r3, #144
 107 003e 5B00     		lsl	r3, r3, #1
 108 0040 D258     		ldr	r2, [r2, r3]
 222:../Dave/Generated/src/ADC003/ADC003.c ****                       ((uint32_t)HandlePtr->kTriggerMode\
 109              		.loc 1 222 0
 110 0042 7B68     		ldr	r3, [r7, #4]
 111 0044 1B79     		ldrb	r3, [r3, #4]
 223:../Dave/Generated/src/ADC003/ADC003.c ****                          << VADC_G_ASCTRL_XTMODE_Pos));
 112              		.loc 1 223 0
 113 0046 5B03     		lsl	r3, r3, #13
 221:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ASCTRL |= (uint32_t)(((uint32_t)1 << VADC_G_ASCTRL_XTWC_Pos)|\
 114              		.loc 1 221 0
 115 0048 1343     		orr	r3, r2
 116 004a 8022     		mov	r2, #128
 117 004c 1202     		lsl	r2, r2, #8
 118 004e 111C     		mov	r1, r2
 119 0050 1943     		orr	r1, r3
 120 0052 BA68     		ldr	r2, [r7, #8]
 121 0054 9023     		mov	r3, #144
 122 0056 5B00     		lsl	r3, r3, #1
 123 0058 D150     		str	r1, [r2, r3]
 224:../Dave/Generated/src/ADC003/ADC003.c ****     /*
 225:../Dave/Generated/src/ADC003/ADC003.c ****      *Selects the gating mode and enables trigger mode
 226:../Dave/Generated/src/ADC003/ADC003.c ****      */
 227:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ASMR |=(uint32_t)(((uint32_t)HandlePtr->kTriggerEn\
 124              		.loc 1 227 0
 125 005a BA68     		ldr	r2, [r7, #8]
 126 005c 9223     		mov	r3, #146
 127 005e 5B00     		lsl	r3, r3, #1
 128 0060 D258     		ldr	r2, [r2, r3]
 129 0062 7B68     		ldr	r3, [r7, #4]
 130 0064 DB78     		ldrb	r3, [r3, #3]
 228:../Dave/Generated/src/ADC003/ADC003.c ****                     << VADC_G_ASMR_ENTR_Pos)|((uint32_t)HandlePtr->kGatingMode\
 131              		.loc 1 228 0
 132 0066 9900     		lsl	r1, r3, #2
 133 0068 7B68     		ldr	r3, [r7, #4]
 134 006a 9B78     		ldrb	r3, [r3, #2]
 227:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ASMR |=(uint32_t)(((uint32_t)HandlePtr->kTriggerEn\
 135              		.loc 1 227 0
 136 006c 0B43     		orr	r3, r1
 137 006e 111C     		mov	r1, r2
 138 0070 1943     		orr	r1, r3
 139 0072 BA68     		ldr	r2, [r7, #8]
 140 0074 9223     		mov	r3, #146
 141 0076 5B00     		lsl	r3, r3, #1
 142 0078 D150     		str	r1, [r2, r3]
 229:../Dave/Generated/src/ADC003/ADC003.c ****                     << VADC_G_ASMR_ENGT_Pos));
 230:../Dave/Generated/src/ADC003/ADC003.c **** 
 231:../Dave/Generated/src/ADC003/ADC003.c ****     /*
 232:../Dave/Generated/src/ADC003/ADC003.c ****      *AutoScan enable or disable
 233:../Dave/Generated/src/ADC003/ADC003.c ****      */
 234:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kAutoScan == (uint8_t)ADC003_AUTOSCAN_ENABLE)
 143              		.loc 1 234 0
 144 007a 7B68     		ldr	r3, [r7, #4]
 145 007c 5B7A     		ldrb	r3, [r3, #9]
 146 007e 012B     		cmp	r3, #1
 147 0080 0AD1     		bne	.L6
 235:../Dave/Generated/src/ADC003/ADC003.c ****     {
 236:../Dave/Generated/src/ADC003/ADC003.c ****       SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_SCAN_Pos);
 148              		.loc 1 236 0
 149 0082 BA68     		ldr	r2, [r7, #8]
 150 0084 9223     		mov	r3, #146
 151 0086 5B00     		lsl	r3, r3, #1
 152 0088 D358     		ldr	r3, [r2, r3]
 153 008a 1022     		mov	r2, #16
 154 008c 111C     		mov	r1, r2
 155 008e 1943     		orr	r1, r3
 156 0090 BA68     		ldr	r2, [r7, #8]
 157 0092 9223     		mov	r3, #146
 158 0094 5B00     		lsl	r3, r3, #1
 159 0096 D150     		str	r1, [r2, r3]
 160              	.L6:
 237:../Dave/Generated/src/ADC003/ADC003.c ****     }
 238:../Dave/Generated/src/ADC003/ADC003.c **** 
 239:../Dave/Generated/src/ADC003/ADC003.c ****     /*
 240:../Dave/Generated/src/ADC003/ADC003.c ****      *Source interrupt enable or disable
 241:../Dave/Generated/src/ADC003/ADC003.c ****      */
 242:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kSourceEventinterrupt
 161              		.loc 1 242 0
 162 0098 7B68     		ldr	r3, [r7, #4]
 163 009a 1B7A     		ldrb	r3, [r3, #8]
 164 009c 012B     		cmp	r3, #1
 165 009e 0AD1     		bne	.L7
 243:../Dave/Generated/src/ADC003/ADC003.c ****                                       == (uint32_t)ADC003_INTERRUPT_ENABLE)
 244:../Dave/Generated/src/ADC003/ADC003.c ****     {
 245:../Dave/Generated/src/ADC003/ADC003.c ****       SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_ENSI_Pos);
 166              		.loc 1 245 0
 167 00a0 BA68     		ldr	r2, [r7, #8]
 168 00a2 9223     		mov	r3, #146
 169 00a4 5B00     		lsl	r3, r3, #1
 170 00a6 D358     		ldr	r3, [r2, r3]
 171 00a8 0822     		mov	r2, #8
 172 00aa 111C     		mov	r1, r2
 173 00ac 1943     		orr	r1, r3
 174 00ae BA68     		ldr	r2, [r7, #8]
 175 00b0 9223     		mov	r3, #146
 176 00b2 5B00     		lsl	r3, r3, #1
 177 00b4 D150     		str	r1, [r2, r3]
 178              	.L7:
 246:../Dave/Generated/src/ADC003/ADC003.c ****     }
 247:../Dave/Generated/src/ADC003/ADC003.c **** 
 248:../Dave/Generated/src/ADC003/ADC003.c ****     /*
 249:../Dave/Generated/src/ADC003/ADC003.c ****      * Enable cancel mode.
 250:../Dave/Generated/src/ADC003/ADC003.c ****      * Sets the bit rptdis of ASMR Register
 251:../Dave/Generated/src/ADC003/ADC003.c ****      */
 252:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kStartmode\
 179              		.loc 1 252 0
 180 00b6 7B68     		ldr	r3, [r7, #4]
 181 00b8 9B79     		ldrb	r3, [r3, #6]
 182 00ba 022B     		cmp	r3, #2
 183 00bc 0BD1     		bne	.L8
 253:../Dave/Generated/src/ADC003/ADC003.c ****                         ==(uint8_t) ADC003_CANCEL_INJECT_REPEAT_WITH_CANCEL)
 254:../Dave/Generated/src/ADC003/ADC003.c ****     {
 255:../Dave/Generated/src/ADC003/ADC003.c ****       SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_RPTDIS_Pos);
 184              		.loc 1 255 0
 185 00be BA68     		ldr	r2, [r7, #8]
 186 00c0 9223     		mov	r3, #146
 187 00c2 5B00     		lsl	r3, r3, #1
 188 00c4 D358     		ldr	r3, [r2, r3]
 189 00c6 8022     		mov	r2, #128
 190 00c8 5202     		lsl	r2, r2, #9
 191 00ca 111C     		mov	r1, r2
 192 00cc 1943     		orr	r1, r3
 193 00ce BA68     		ldr	r2, [r7, #8]
 194 00d0 9223     		mov	r3, #146
 195 00d2 5B00     		lsl	r3, r3, #1
 196 00d4 D150     		str	r1, [r2, r3]
 197              	.L8:
 256:../Dave/Generated/src/ADC003/ADC003.c ****     }
 257:../Dave/Generated/src/ADC003/ADC003.c **** 
 258:../Dave/Generated/src/ADC003/ADC003.c ****     /*
 259:../Dave/Generated/src/ADC003/ADC003.c ****      * Select the channel in the channel selection register
 260:../Dave/Generated/src/ADC003/ADC003.c ****      */
 261:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ASSEL = (uint32_t)HandlePtr->kAsselVal;
 198              		.loc 1 261 0
 199 00d6 7B68     		ldr	r3, [r7, #4]
 200 00d8 9B7A     		ldrb	r3, [r3, #10]
 201 00da 191C     		mov	r1, r3
 202 00dc BA68     		ldr	r2, [r7, #8]
 203 00de 9423     		mov	r3, #148
 204 00e0 5B00     		lsl	r3, r3, #1
 205 00e2 D150     		str	r1, [r2, r3]
 262:../Dave/Generated/src/ADC003/ADC003.c **** 
 263:../Dave/Generated/src/ADC003/ADC003.c ****      /*
 264:../Dave/Generated/src/ADC003/ADC003.c ****      * Enable Arbitration slot.
 265:../Dave/Generated/src/ADC003/ADC003.c ****      * Select conversion start mode for request source.
 266:../Dave/Generated/src/ADC003/ADC003.c ****      */
 267:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ARBPR |= (uint32_t)(((uint32_t)HandlePtr->kAsenEnable <<\
 206              		.loc 1 267 0
 207 00e4 BA68     		ldr	r2, [r7, #8]
 208 00e6 8423     		mov	r3, #132
 209 00e8 D258     		ldr	r2, [r2, r3]
 210 00ea 7B68     		ldr	r3, [r7, #4]
 211 00ec DB79     		ldrb	r3, [r3, #7]
 212 00ee 5906     		lsl	r1, r3, #25
 268:../Dave/Generated/src/ADC003/ADC003.c ****                                                       VADC_G_ARBPR_ASEN1_Pos) |\
 269:../Dave/Generated/src/ADC003/ADC003.c ****                                       ((uint32_t)HandlePtr->kStartmode <<\
 213              		.loc 1 269 0
 214 00f0 7B68     		ldr	r3, [r7, #4]
 215 00f2 9B79     		ldrb	r3, [r3, #6]
 216 00f4 DB01     		lsl	r3, r3, #7
 267:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ARBPR |= (uint32_t)(((uint32_t)HandlePtr->kAsenEnable <<\
 217              		.loc 1 267 0
 218 00f6 0B43     		orr	r3, r1
 219 00f8 111C     		mov	r1, r2
 220 00fa 1943     		orr	r1, r3
 221 00fc BA68     		ldr	r2, [r7, #8]
 222 00fe 8423     		mov	r3, #132
 223 0100 D150     		str	r1, [r2, r3]
 270:../Dave/Generated/src/ADC003/ADC003.c ****                                                      VADC_G_ARBPR_CSM1_Pos));
 271:../Dave/Generated/src/ADC003/ADC003.c **** 
 272:../Dave/Generated/src/ADC003/ADC003.c ****     /* Set the App State to Initialized */
 273:../Dave/Generated/src/ADC003/ADC003.c ****     HandlePtr->DynamicHandlePtr->State = ADC003_INITIALIZED;
 224              		.loc 1 273 0
 225 0102 7B68     		ldr	r3, [r7, #4]
 226 0104 5B6A     		ldr	r3, [r3, #36]
 227 0106 0122     		mov	r2, #1
 228 0108 1A70     		strb	r2, [r3]
 274:../Dave/Generated/src/ADC003/ADC003.c ****     Status &= (uint32_t)DAVEApp_SUCCESS;
 229              		.loc 1 274 0
 230 010a 0023     		mov	r3, #0
 231 010c FB60     		str	r3, [r7, #12]
 232              	.L4:
 275:../Dave/Generated/src/ADC003/ADC003.c ****   }
 276:../Dave/Generated/src/ADC003/ADC003.c ****   else
 277:../Dave/Generated/src/ADC003/ADC003.c ****   {
 278:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 279:../Dave/Generated/src/ADC003/ADC003.c ****   }
 280:../Dave/Generated/src/ADC003/ADC003.c **** }
 233              		.loc 1 280 0
 234 010e BD46     		mov	sp, r7
 235 0110 04B0     		add	sp, sp, #16
 236              		@ sp needed for prologue
 237 0112 80BD     		pop	{r7, pc}
 238              		.cfi_endproc
 239              	.LFE39:
 241              		.section	.text.ADC003_Deinit,"ax",%progbits
 242              		.align	2
 243              		.global	ADC003_Deinit
 244              		.code	16
 245              		.thumb_func
 247              	ADC003_Deinit:
 248              	.LFB40:
 281:../Dave/Generated/src/ADC003/ADC003.c **** 
 282:../Dave/Generated/src/ADC003/ADC003.c **** /* This function resets the ADC003 app */
 283:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_Deinit(const ADC003_HandleType *HandlePtr )
 284:../Dave/Generated/src/ADC003/ADC003.c **** {
 249              		.loc 1 284 0
 250              		.cfi_startproc
 251 0000 80B5     		push	{r7, lr}
 252              	.LCFI5:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 7, -8
 255              		.cfi_offset 14, -4
 256 0002 84B0     		sub	sp, sp, #16
 257              	.LCFI6:
 258              		.cfi_def_cfa_offset 24
 259 0004 00AF     		add	r7, sp, #0
 260              	.LCFI7:
 261              		.cfi_def_cfa_register 7
 262 0006 7860     		str	r0, [r7, #4]
 285:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 263              		.loc 1 285 0
 264 0008 0123     		mov	r3, #1
 265 000a FB60     		str	r3, [r7, #12]
 286:../Dave/Generated/src/ADC003/ADC003.c **** 
 287:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 288:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 266              		.loc 1 288 0
 267 000c 7B68     		ldr	r3, [r7, #4]
 268 000e 5B6D     		ldr	r3, [r3, #84]
 269 0010 BB60     		str	r3, [r7, #8]
 289:../Dave/Generated/src/ADC003/ADC003.c **** 
 290:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 270              		.loc 1 290 0
 271 0012 7B68     		ldr	r3, [r7, #4]
 272 0014 5B6A     		ldr	r3, [r3, #36]
 273 0016 1B78     		ldrb	r3, [r3]
 274 0018 012B     		cmp	r3, #1
 275 001a 27D1     		bne	.L10
 291:../Dave/Generated/src/ADC003/ADC003.c ****   {
 292:../Dave/Generated/src/ADC003/ADC003.c ****     /* Reset the queue input Register */
 293:../Dave/Generated/src/ADC003/ADC003.c ****      VADCGroupPtr->QINR0 = (uint32_t)0x00000000;
 276              		.loc 1 293 0
 277 001c BA68     		ldr	r2, [r7, #8]
 278 001e 8823     		mov	r3, #136
 279 0020 5B00     		lsl	r3, r3, #1
 280 0022 0021     		mov	r1, #0
 281 0024 D150     		str	r1, [r2, r3]
 294:../Dave/Generated/src/ADC003/ADC003.c **** 
 295:../Dave/Generated/src/ADC003/ADC003.c ****     /* Reset ARBPR Register */
 296:../Dave/Generated/src/ADC003/ADC003.c ****      VADCGroupPtr->ARBPR &= (uint32_t)0x05000B0B;
 282              		.loc 1 296 0
 283 0026 BA68     		ldr	r2, [r7, #8]
 284 0028 8423     		mov	r3, #132
 285 002a D258     		ldr	r2, [r2, r3]
 286 002c 124B     		ldr	r3, .L12
 287 002e 111C     		mov	r1, r2
 288 0030 1940     		and	r1, r3
 289 0032 BA68     		ldr	r2, [r7, #8]
 290 0034 8423     		mov	r3, #132
 291 0036 D150     		str	r1, [r2, r3]
 297:../Dave/Generated/src/ADC003/ADC003.c **** 
 298:../Dave/Generated/src/ADC003/ADC003.c ****     /* Reset ASCTRL0 Register*/
 299:../Dave/Generated/src/ADC003/ADC003.c ****     /* set write control bit and clear other bits*/
 300:../Dave/Generated/src/ADC003/ADC003.c ****      VADCGroupPtr->ASCTRL = (uint32_t)0x80808000;
 292              		.loc 1 300 0
 293 0038 BA68     		ldr	r2, [r7, #8]
 294 003a 9023     		mov	r3, #144
 295 003c 5B00     		lsl	r3, r3, #1
 296 003e 0F49     		ldr	r1, .L12+4
 297 0040 D150     		str	r1, [r2, r3]
 301:../Dave/Generated/src/ADC003/ADC003.c **** 
 302:../Dave/Generated/src/ADC003/ADC003.c ****     /* Reset ASMR0 Register */
 303:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ASMR = (uint32_t)0x00000000;
 298              		.loc 1 303 0
 299 0042 BA68     		ldr	r2, [r7, #8]
 300 0044 9223     		mov	r3, #146
 301 0046 5B00     		lsl	r3, r3, #1
 302 0048 0021     		mov	r1, #0
 303 004a D150     		str	r1, [r2, r3]
 304:../Dave/Generated/src/ADC003/ADC003.c **** 
 305:../Dave/Generated/src/ADC003/ADC003.c ****     /* Reset the source event flag */
 306:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->SEFCLR = (uint32_t)0x2;
 304              		.loc 1 306 0
 305 004c BA68     		ldr	r2, [r7, #8]
 306 004e CC23     		mov	r3, #204
 307 0050 5B00     		lsl	r3, r3, #1
 308 0052 0221     		mov	r1, #2
 309 0054 D150     		str	r1, [r2, r3]
 307:../Dave/Generated/src/ADC003/ADC003.c **** 
 308:../Dave/Generated/src/ADC003/ADC003.c ****     /* Reset ASSEL Register */
 309:../Dave/Generated/src/ADC003/ADC003.c ****     VADCGroupPtr->ASSEL = (uint32_t)0x00000000;
 310              		.loc 1 309 0
 311 0056 BA68     		ldr	r2, [r7, #8]
 312 0058 9423     		mov	r3, #148
 313 005a 5B00     		lsl	r3, r3, #1
 314 005c 0021     		mov	r1, #0
 315 005e D150     		str	r1, [r2, r3]
 310:../Dave/Generated/src/ADC003/ADC003.c **** 
 311:../Dave/Generated/src/ADC003/ADC003.c ****     /* Set the App State to Uninitialized */
 312:../Dave/Generated/src/ADC003/ADC003.c ****     HandlePtr->DynamicHandlePtr->State = ADC003_UNINITIALIZED;
 316              		.loc 1 312 0
 317 0060 7B68     		ldr	r3, [r7, #4]
 318 0062 5B6A     		ldr	r3, [r3, #36]
 319 0064 0022     		mov	r2, #0
 320 0066 1A70     		strb	r2, [r3]
 313:../Dave/Generated/src/ADC003/ADC003.c **** 
 314:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 321              		.loc 1 314 0
 322 0068 0023     		mov	r3, #0
 323 006a FB60     		str	r3, [r7, #12]
 324              	.L10:
 315:../Dave/Generated/src/ADC003/ADC003.c ****   }
 316:../Dave/Generated/src/ADC003/ADC003.c ****   else
 317:../Dave/Generated/src/ADC003/ADC003.c ****   {
 318:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 319:../Dave/Generated/src/ADC003/ADC003.c ****   }
 320:../Dave/Generated/src/ADC003/ADC003.c **** 
 321:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 325              		.loc 1 321 0
 326 006c FB68     		ldr	r3, [r7, #12]
 322:../Dave/Generated/src/ADC003/ADC003.c **** }
 327              		.loc 1 322 0
 328 006e 181C     		mov	r0, r3
 329 0070 BD46     		mov	sp, r7
 330 0072 04B0     		add	sp, sp, #16
 331              		@ sp needed for prologue
 332 0074 80BD     		pop	{r7, pc}
 333              	.L13:
 334 0076 C046     		.align	2
 335              	.L12:
 336 0078 0B0B0005 		.word	83888907
 337 007c 00808080 		.word	-2139062272
 338              		.cfi_endproc
 339              	.LFE40:
 341              		.section	.text.ADC003_ClearPendingBits,"ax",%progbits
 342              		.align	2
 343              		.global	ADC003_ClearPendingBits
 344              		.code	16
 345              		.thumb_func
 347              	ADC003_ClearPendingBits:
 348              	.LFB41:
 323:../Dave/Generated/src/ADC003/ADC003.c **** /*This function clears the pending bits in register GxASPND*/
 324:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_ClearPendingBits(const ADC003_HandleType *HandlePtr)
 325:../Dave/Generated/src/ADC003/ADC003.c **** {
 349              		.loc 1 325 0
 350              		.cfi_startproc
 351 0000 80B5     		push	{r7, lr}
 352              	.LCFI8:
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 7, -8
 355              		.cfi_offset 14, -4
 356 0002 84B0     		sub	sp, sp, #16
 357              	.LCFI9:
 358              		.cfi_def_cfa_offset 24
 359 0004 00AF     		add	r7, sp, #0
 360              	.LCFI10:
 361              		.cfi_def_cfa_register 7
 362 0006 7860     		str	r0, [r7, #4]
 326:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 363              		.loc 1 326 0
 364 0008 0123     		mov	r3, #1
 365 000a FB60     		str	r3, [r7, #12]
 327:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 328:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 366              		.loc 1 328 0
 367 000c 7B68     		ldr	r3, [r7, #4]
 368 000e 5B6D     		ldr	r3, [r3, #84]
 369 0010 BB60     		str	r3, [r7, #8]
 329:../Dave/Generated/src/ADC003/ADC003.c **** 
 330:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 370              		.loc 1 330 0
 371 0012 7B68     		ldr	r3, [r7, #4]
 372 0014 5B6A     		ldr	r3, [r3, #36]
 373 0016 1B78     		ldrb	r3, [r3]
 374 0018 012B     		cmp	r3, #1
 375 001a 0DD1     		bne	.L15
 331:../Dave/Generated/src/ADC003/ADC003.c ****   {
 332:../Dave/Generated/src/ADC003/ADC003.c ****     /* Clear Pending Bits */
 333:../Dave/Generated/src/ADC003/ADC003.c ****     SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_CLRPND_Pos);
 376              		.loc 1 333 0
 377 001c BA68     		ldr	r2, [r7, #8]
 378 001e 9223     		mov	r3, #146
 379 0020 5B00     		lsl	r3, r3, #1
 380 0022 D358     		ldr	r3, [r2, r3]
 381 0024 8022     		mov	r2, #128
 382 0026 5200     		lsl	r2, r2, #1
 383 0028 111C     		mov	r1, r2
 384 002a 1943     		orr	r1, r3
 385 002c BA68     		ldr	r2, [r7, #8]
 386 002e 9223     		mov	r3, #146
 387 0030 5B00     		lsl	r3, r3, #1
 388 0032 D150     		str	r1, [r2, r3]
 334:../Dave/Generated/src/ADC003/ADC003.c **** 
 335:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 389              		.loc 1 335 0
 390 0034 0023     		mov	r3, #0
 391 0036 FB60     		str	r3, [r7, #12]
 392              	.L15:
 336:../Dave/Generated/src/ADC003/ADC003.c ****   }
 337:../Dave/Generated/src/ADC003/ADC003.c ****   else
 338:../Dave/Generated/src/ADC003/ADC003.c ****   {
 339:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 340:../Dave/Generated/src/ADC003/ADC003.c ****   }
 341:../Dave/Generated/src/ADC003/ADC003.c **** 
 342:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 393              		.loc 1 342 0
 394 0038 FB68     		ldr	r3, [r7, #12]
 343:../Dave/Generated/src/ADC003/ADC003.c **** }
 395              		.loc 1 343 0
 396 003a 181C     		mov	r0, r3
 397 003c BD46     		mov	sp, r7
 398 003e 04B0     		add	sp, sp, #16
 399              		@ sp needed for prologue
 400 0040 80BD     		pop	{r7, pc}
 401              		.cfi_endproc
 402              	.LFE41:
 404 0042 C046     		.section	.text.ADC003_GenerateLoadEvent,"ax",%progbits
 405              		.align	2
 406              		.global	ADC003_GenerateLoadEvent
 407              		.code	16
 408              		.thumb_func
 410              	ADC003_GenerateLoadEvent:
 411              	.LFB42:
 344:../Dave/Generated/src/ADC003/ADC003.c **** 
 345:../Dave/Generated/src/ADC003/ADC003.c **** /* This function generates a load event.*/
 346:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_GenerateLoadEvent(const ADC003_HandleType *HandlePtr)
 347:../Dave/Generated/src/ADC003/ADC003.c **** {
 412              		.loc 1 347 0
 413              		.cfi_startproc
 414 0000 80B5     		push	{r7, lr}
 415              	.LCFI11:
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 7, -8
 418              		.cfi_offset 14, -4
 419 0002 84B0     		sub	sp, sp, #16
 420              	.LCFI12:
 421              		.cfi_def_cfa_offset 24
 422 0004 00AF     		add	r7, sp, #0
 423              	.LCFI13:
 424              		.cfi_def_cfa_register 7
 425 0006 7860     		str	r0, [r7, #4]
 348:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 426              		.loc 1 348 0
 427 0008 0123     		mov	r3, #1
 428 000a FB60     		str	r3, [r7, #12]
 349:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 350:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 429              		.loc 1 350 0
 430 000c 7B68     		ldr	r3, [r7, #4]
 431 000e 5B6D     		ldr	r3, [r3, #84]
 432 0010 BB60     		str	r3, [r7, #8]
 351:../Dave/Generated/src/ADC003/ADC003.c **** 
 352:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 433              		.loc 1 352 0
 434 0012 7B68     		ldr	r3, [r7, #4]
 435 0014 5B6A     		ldr	r3, [r3, #36]
 436 0016 1B78     		ldrb	r3, [r3]
 437 0018 012B     		cmp	r3, #1
 438 001a 0DD1     		bne	.L18
 353:../Dave/Generated/src/ADC003/ADC003.c ****   {
 354:../Dave/Generated/src/ADC003/ADC003.c ****     /* Generate load event */
 355:../Dave/Generated/src/ADC003/ADC003.c ****     SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_LDEV_Pos);
 439              		.loc 1 355 0
 440 001c BA68     		ldr	r2, [r7, #8]
 441 001e 9223     		mov	r3, #146
 442 0020 5B00     		lsl	r3, r3, #1
 443 0022 D358     		ldr	r3, [r2, r3]
 444 0024 8022     		mov	r2, #128
 445 0026 9200     		lsl	r2, r2, #2
 446 0028 111C     		mov	r1, r2
 447 002a 1943     		orr	r1, r3
 448 002c BA68     		ldr	r2, [r7, #8]
 449 002e 9223     		mov	r3, #146
 450 0030 5B00     		lsl	r3, r3, #1
 451 0032 D150     		str	r1, [r2, r3]
 356:../Dave/Generated/src/ADC003/ADC003.c **** 
 357:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 452              		.loc 1 357 0
 453 0034 0023     		mov	r3, #0
 454 0036 FB60     		str	r3, [r7, #12]
 455              	.L18:
 358:../Dave/Generated/src/ADC003/ADC003.c ****   }
 359:../Dave/Generated/src/ADC003/ADC003.c ****   else
 360:../Dave/Generated/src/ADC003/ADC003.c ****   {
 361:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 362:../Dave/Generated/src/ADC003/ADC003.c ****   }
 363:../Dave/Generated/src/ADC003/ADC003.c **** 
 364:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 456              		.loc 1 364 0
 457 0038 FB68     		ldr	r3, [r7, #12]
 365:../Dave/Generated/src/ADC003/ADC003.c **** }
 458              		.loc 1 365 0
 459 003a 181C     		mov	r0, r3
 460 003c BD46     		mov	sp, r7
 461 003e 04B0     		add	sp, sp, #16
 462              		@ sp needed for prologue
 463 0040 80BD     		pop	{r7, pc}
 464              		.cfi_endproc
 465              	.LFE42:
 467 0042 C046     		.section	.text.ADC003_EnableAutoScan,"ax",%progbits
 468              		.align	2
 469              		.global	ADC003_EnableAutoScan
 470              		.code	16
 471              		.thumb_func
 473              	ADC003_EnableAutoScan:
 474              	.LFB43:
 366:../Dave/Generated/src/ADC003/ADC003.c **** 
 367:../Dave/Generated/src/ADC003/ADC003.c **** /*
 368:../Dave/Generated/src/ADC003/ADC003.c ****  * This function enables autoscan mode.
 369:../Dave/Generated/src/ADC003/ADC003.c ****  */
 370:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_EnableAutoScan(const ADC003_HandleType *HandlePtr)
 371:../Dave/Generated/src/ADC003/ADC003.c **** {
 475              		.loc 1 371 0
 476              		.cfi_startproc
 477 0000 80B5     		push	{r7, lr}
 478              	.LCFI14:
 479              		.cfi_def_cfa_offset 8
 480              		.cfi_offset 7, -8
 481              		.cfi_offset 14, -4
 482 0002 84B0     		sub	sp, sp, #16
 483              	.LCFI15:
 484              		.cfi_def_cfa_offset 24
 485 0004 00AF     		add	r7, sp, #0
 486              	.LCFI16:
 487              		.cfi_def_cfa_register 7
 488 0006 7860     		str	r0, [r7, #4]
 372:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 489              		.loc 1 372 0
 490 0008 0123     		mov	r3, #1
 491 000a FB60     		str	r3, [r7, #12]
 373:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 374:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 492              		.loc 1 374 0
 493 000c 7B68     		ldr	r3, [r7, #4]
 494 000e 5B6D     		ldr	r3, [r3, #84]
 495 0010 BB60     		str	r3, [r7, #8]
 375:../Dave/Generated/src/ADC003/ADC003.c **** 
 376:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 496              		.loc 1 376 0
 497 0012 7B68     		ldr	r3, [r7, #4]
 498 0014 5B6A     		ldr	r3, [r3, #36]
 499 0016 1B78     		ldrb	r3, [r3]
 500 0018 012B     		cmp	r3, #1
 501 001a 0CD1     		bne	.L21
 377:../Dave/Generated/src/ADC003/ADC003.c ****   {
 378:../Dave/Generated/src/ADC003/ADC003.c ****     /* Enables autoscan mode */
 379:../Dave/Generated/src/ADC003/ADC003.c ****     SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_SCAN_Pos);
 502              		.loc 1 379 0
 503 001c BA68     		ldr	r2, [r7, #8]
 504 001e 9223     		mov	r3, #146
 505 0020 5B00     		lsl	r3, r3, #1
 506 0022 D358     		ldr	r3, [r2, r3]
 507 0024 1022     		mov	r2, #16
 508 0026 111C     		mov	r1, r2
 509 0028 1943     		orr	r1, r3
 510 002a BA68     		ldr	r2, [r7, #8]
 511 002c 9223     		mov	r3, #146
 512 002e 5B00     		lsl	r3, r3, #1
 513 0030 D150     		str	r1, [r2, r3]
 380:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 514              		.loc 1 380 0
 515 0032 0023     		mov	r3, #0
 516 0034 FB60     		str	r3, [r7, #12]
 517              	.L21:
 381:../Dave/Generated/src/ADC003/ADC003.c ****   }
 382:../Dave/Generated/src/ADC003/ADC003.c ****   else
 383:../Dave/Generated/src/ADC003/ADC003.c ****   {
 384:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 385:../Dave/Generated/src/ADC003/ADC003.c ****   }
 386:../Dave/Generated/src/ADC003/ADC003.c **** 
 387:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 518              		.loc 1 387 0
 519 0036 FB68     		ldr	r3, [r7, #12]
 388:../Dave/Generated/src/ADC003/ADC003.c **** }
 520              		.loc 1 388 0
 521 0038 181C     		mov	r0, r3
 522 003a BD46     		mov	sp, r7
 523 003c 04B0     		add	sp, sp, #16
 524              		@ sp needed for prologue
 525 003e 80BD     		pop	{r7, pc}
 526              		.cfi_endproc
 527              	.LFE43:
 529              		.section	.text.ADC003_DisableAutoScan,"ax",%progbits
 530              		.align	2
 531              		.global	ADC003_DisableAutoScan
 532              		.code	16
 533              		.thumb_func
 535              	ADC003_DisableAutoScan:
 536              	.LFB44:
 389:../Dave/Generated/src/ADC003/ADC003.c **** 
 390:../Dave/Generated/src/ADC003/ADC003.c **** /*
 391:../Dave/Generated/src/ADC003/ADC003.c ****  * This function disables autoscan mode.
 392:../Dave/Generated/src/ADC003/ADC003.c ****  */
 393:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_DisableAutoScan(const ADC003_HandleType *HandlePtr)
 394:../Dave/Generated/src/ADC003/ADC003.c **** {
 537              		.loc 1 394 0
 538              		.cfi_startproc
 539 0000 80B5     		push	{r7, lr}
 540              	.LCFI17:
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 0002 84B0     		sub	sp, sp, #16
 545              	.LCFI18:
 546              		.cfi_def_cfa_offset 24
 547 0004 00AF     		add	r7, sp, #0
 548              	.LCFI19:
 549              		.cfi_def_cfa_register 7
 550 0006 7860     		str	r0, [r7, #4]
 395:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 551              		.loc 1 395 0
 552 0008 0123     		mov	r3, #1
 553 000a FB60     		str	r3, [r7, #12]
 396:../Dave/Generated/src/ADC003/ADC003.c ****       /*Pointer to the VADC Group register structure */
 397:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 554              		.loc 1 397 0
 555 000c 7B68     		ldr	r3, [r7, #4]
 556 000e 5B6D     		ldr	r3, [r3, #84]
 557 0010 BB60     		str	r3, [r7, #8]
 398:../Dave/Generated/src/ADC003/ADC003.c **** 
 399:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 558              		.loc 1 399 0
 559 0012 7B68     		ldr	r3, [r7, #4]
 560 0014 5B6A     		ldr	r3, [r3, #36]
 561 0016 1B78     		ldrb	r3, [r3]
 562 0018 012B     		cmp	r3, #1
 563 001a 0CD1     		bne	.L24
 400:../Dave/Generated/src/ADC003/ADC003.c ****   {
 401:../Dave/Generated/src/ADC003/ADC003.c ****     /* Enables disables autoscan mode */
 402:../Dave/Generated/src/ADC003/ADC003.c ****     CLR_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_SCAN_Pos);
 564              		.loc 1 402 0
 565 001c BA68     		ldr	r2, [r7, #8]
 566 001e 9223     		mov	r3, #146
 567 0020 5B00     		lsl	r3, r3, #1
 568 0022 D358     		ldr	r3, [r2, r3]
 569 0024 1022     		mov	r2, #16
 570 0026 191C     		mov	r1, r3
 571 0028 9143     		bic	r1, r2
 572 002a BA68     		ldr	r2, [r7, #8]
 573 002c 9223     		mov	r3, #146
 574 002e 5B00     		lsl	r3, r3, #1
 575 0030 D150     		str	r1, [r2, r3]
 403:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 576              		.loc 1 403 0
 577 0032 0023     		mov	r3, #0
 578 0034 FB60     		str	r3, [r7, #12]
 579              	.L24:
 404:../Dave/Generated/src/ADC003/ADC003.c ****   }
 405:../Dave/Generated/src/ADC003/ADC003.c ****   else
 406:../Dave/Generated/src/ADC003/ADC003.c ****   {
 407:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 408:../Dave/Generated/src/ADC003/ADC003.c ****   }
 409:../Dave/Generated/src/ADC003/ADC003.c **** 
 410:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 580              		.loc 1 410 0
 581 0036 FB68     		ldr	r3, [r7, #12]
 411:../Dave/Generated/src/ADC003/ADC003.c **** }
 582              		.loc 1 411 0
 583 0038 181C     		mov	r0, r3
 584 003a BD46     		mov	sp, r7
 585 003c 04B0     		add	sp, sp, #16
 586              		@ sp needed for prologue
 587 003e 80BD     		pop	{r7, pc}
 588              		.cfi_endproc
 589              	.LFE44:
 591              		.section	.text.ADC003_EnableSourceEventInterrupt,"ax",%progbits
 592              		.align	2
 593              		.global	ADC003_EnableSourceEventInterrupt
 594              		.code	16
 595              		.thumb_func
 597              	ADC003_EnableSourceEventInterrupt:
 598              	.LFB45:
 412:../Dave/Generated/src/ADC003/ADC003.c **** 
 413:../Dave/Generated/src/ADC003/ADC003.c **** /*
 414:../Dave/Generated/src/ADC003/ADC003.c ****  * This function enables source event interrupt.
 415:../Dave/Generated/src/ADC003/ADC003.c ****  */
 416:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_EnableSourceEventInterrupt(const ADC003_HandleType *HandlePtr)
 417:../Dave/Generated/src/ADC003/ADC003.c **** {
 599              		.loc 1 417 0
 600              		.cfi_startproc
 601 0000 80B5     		push	{r7, lr}
 602              	.LCFI20:
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 7, -8
 605              		.cfi_offset 14, -4
 606 0002 84B0     		sub	sp, sp, #16
 607              	.LCFI21:
 608              		.cfi_def_cfa_offset 24
 609 0004 00AF     		add	r7, sp, #0
 610              	.LCFI22:
 611              		.cfi_def_cfa_register 7
 612 0006 7860     		str	r0, [r7, #4]
 418:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 613              		.loc 1 418 0
 614 0008 0123     		mov	r3, #1
 615 000a FB60     		str	r3, [r7, #12]
 419:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 420:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 616              		.loc 1 420 0
 617 000c 7B68     		ldr	r3, [r7, #4]
 618 000e 5B6D     		ldr	r3, [r3, #84]
 619 0010 BB60     		str	r3, [r7, #8]
 421:../Dave/Generated/src/ADC003/ADC003.c **** 
 422:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 620              		.loc 1 422 0
 621 0012 7B68     		ldr	r3, [r7, #4]
 622 0014 5B6A     		ldr	r3, [r3, #36]
 623 0016 1B78     		ldrb	r3, [r3]
 624 0018 012B     		cmp	r3, #1
 625 001a 0CD1     		bne	.L27
 423:../Dave/Generated/src/ADC003/ADC003.c ****   {
 424:../Dave/Generated/src/ADC003/ADC003.c ****     /* Enables source event interrupt */
 425:../Dave/Generated/src/ADC003/ADC003.c ****     SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_ENSI_Pos);
 626              		.loc 1 425 0
 627 001c BA68     		ldr	r2, [r7, #8]
 628 001e 9223     		mov	r3, #146
 629 0020 5B00     		lsl	r3, r3, #1
 630 0022 D358     		ldr	r3, [r2, r3]
 631 0024 0822     		mov	r2, #8
 632 0026 111C     		mov	r1, r2
 633 0028 1943     		orr	r1, r3
 634 002a BA68     		ldr	r2, [r7, #8]
 635 002c 9223     		mov	r3, #146
 636 002e 5B00     		lsl	r3, r3, #1
 637 0030 D150     		str	r1, [r2, r3]
 426:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 638              		.loc 1 426 0
 639 0032 0023     		mov	r3, #0
 640 0034 FB60     		str	r3, [r7, #12]
 641              	.L27:
 427:../Dave/Generated/src/ADC003/ADC003.c ****   }
 428:../Dave/Generated/src/ADC003/ADC003.c ****   else
 429:../Dave/Generated/src/ADC003/ADC003.c ****   {
 430:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 431:../Dave/Generated/src/ADC003/ADC003.c ****   }
 432:../Dave/Generated/src/ADC003/ADC003.c **** 
 433:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 642              		.loc 1 433 0
 643 0036 FB68     		ldr	r3, [r7, #12]
 434:../Dave/Generated/src/ADC003/ADC003.c **** }
 644              		.loc 1 434 0
 645 0038 181C     		mov	r0, r3
 646 003a BD46     		mov	sp, r7
 647 003c 04B0     		add	sp, sp, #16
 648              		@ sp needed for prologue
 649 003e 80BD     		pop	{r7, pc}
 650              		.cfi_endproc
 651              	.LFE45:
 653              		.section	.text.ADC003_DisableSourceEventInterrupt,"ax",%progbits
 654              		.align	2
 655              		.global	ADC003_DisableSourceEventInterrupt
 656              		.code	16
 657              		.thumb_func
 659              	ADC003_DisableSourceEventInterrupt:
 660              	.LFB46:
 435:../Dave/Generated/src/ADC003/ADC003.c **** 
 436:../Dave/Generated/src/ADC003/ADC003.c **** /*
 437:../Dave/Generated/src/ADC003/ADC003.c ****  * This function disables source event interrupt.
 438:../Dave/Generated/src/ADC003/ADC003.c ****  */
 439:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_DisableSourceEventInterrupt(const ADC003_HandleType *HandlePtr)
 440:../Dave/Generated/src/ADC003/ADC003.c **** {
 661              		.loc 1 440 0
 662              		.cfi_startproc
 663 0000 80B5     		push	{r7, lr}
 664              	.LCFI23:
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 7, -8
 667              		.cfi_offset 14, -4
 668 0002 84B0     		sub	sp, sp, #16
 669              	.LCFI24:
 670              		.cfi_def_cfa_offset 24
 671 0004 00AF     		add	r7, sp, #0
 672              	.LCFI25:
 673              		.cfi_def_cfa_register 7
 674 0006 7860     		str	r0, [r7, #4]
 441:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 675              		.loc 1 441 0
 676 0008 0123     		mov	r3, #1
 677 000a FB60     		str	r3, [r7, #12]
 442:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 443:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 678              		.loc 1 443 0
 679 000c 7B68     		ldr	r3, [r7, #4]
 680 000e 5B6D     		ldr	r3, [r3, #84]
 681 0010 BB60     		str	r3, [r7, #8]
 444:../Dave/Generated/src/ADC003/ADC003.c **** 
 445:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 682              		.loc 1 445 0
 683 0012 7B68     		ldr	r3, [r7, #4]
 684 0014 5B6A     		ldr	r3, [r3, #36]
 685 0016 1B78     		ldrb	r3, [r3]
 686 0018 012B     		cmp	r3, #1
 687 001a 0CD1     		bne	.L30
 446:../Dave/Generated/src/ADC003/ADC003.c ****   {
 447:../Dave/Generated/src/ADC003/ADC003.c ****     /* Disables source event interrupt */
 448:../Dave/Generated/src/ADC003/ADC003.c ****     CLR_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_ENSI_Pos);
 688              		.loc 1 448 0
 689 001c BA68     		ldr	r2, [r7, #8]
 690 001e 9223     		mov	r3, #146
 691 0020 5B00     		lsl	r3, r3, #1
 692 0022 D358     		ldr	r3, [r2, r3]
 693 0024 0822     		mov	r2, #8
 694 0026 191C     		mov	r1, r3
 695 0028 9143     		bic	r1, r2
 696 002a BA68     		ldr	r2, [r7, #8]
 697 002c 9223     		mov	r3, #146
 698 002e 5B00     		lsl	r3, r3, #1
 699 0030 D150     		str	r1, [r2, r3]
 449:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 700              		.loc 1 449 0
 701 0032 0023     		mov	r3, #0
 702 0034 FB60     		str	r3, [r7, #12]
 703              	.L30:
 450:../Dave/Generated/src/ADC003/ADC003.c ****   }
 451:../Dave/Generated/src/ADC003/ADC003.c ****   else
 452:../Dave/Generated/src/ADC003/ADC003.c ****   {
 453:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 454:../Dave/Generated/src/ADC003/ADC003.c ****   }
 455:../Dave/Generated/src/ADC003/ADC003.c **** 
 456:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 704              		.loc 1 456 0
 705 0036 FB68     		ldr	r3, [r7, #12]
 457:../Dave/Generated/src/ADC003/ADC003.c **** }
 706              		.loc 1 457 0
 707 0038 181C     		mov	r0, r3
 708 003a BD46     		mov	sp, r7
 709 003c 04B0     		add	sp, sp, #16
 710              		@ sp needed for prologue
 711 003e 80BD     		pop	{r7, pc}
 712              		.cfi_endproc
 713              	.LFE46:
 715              		.section	.text.ADC003_LoadEventMode,"ax",%progbits
 716              		.align	2
 717              		.global	ADC003_LoadEventMode
 718              		.code	16
 719              		.thumb_func
 721              	ADC003_LoadEventMode:
 722              	.LFB47:
 458:../Dave/Generated/src/ADC003/ADC003.c **** /*
 459:../Dave/Generated/src/ADC003/ADC003.c ****  * This function chooses load event mode.
 460:../Dave/Generated/src/ADC003/ADC003.c ****  */
 461:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_LoadEventMode(const ADC003_HandleType *HandlePtr,uint8_t LdMode)
 462:../Dave/Generated/src/ADC003/ADC003.c **** {
 723              		.loc 1 462 0
 724              		.cfi_startproc
 725 0000 80B5     		push	{r7, lr}
 726              	.LCFI26:
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 7, -8
 729              		.cfi_offset 14, -4
 730 0002 84B0     		sub	sp, sp, #16
 731              	.LCFI27:
 732              		.cfi_def_cfa_offset 24
 733 0004 00AF     		add	r7, sp, #0
 734              	.LCFI28:
 735              		.cfi_def_cfa_register 7
 736 0006 7860     		str	r0, [r7, #4]
 737 0008 0A1C     		mov	r2, r1
 738 000a FB1C     		add	r3, r7, #3
 739 000c 1A70     		strb	r2, [r3]
 463:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 740              		.loc 1 463 0
 741 000e 0123     		mov	r3, #1
 742 0010 FB60     		str	r3, [r7, #12]
 464:../Dave/Generated/src/ADC003/ADC003.c ****       /*Pointer to the VADC Group register structure */
 465:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 743              		.loc 1 465 0
 744 0012 7B68     		ldr	r3, [r7, #4]
 745 0014 5B6D     		ldr	r3, [r3, #84]
 746 0016 BB60     		str	r3, [r7, #8]
 466:../Dave/Generated/src/ADC003/ADC003.c **** 
 467:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 747              		.loc 1 467 0
 748 0018 7B68     		ldr	r3, [r7, #4]
 749 001a 5B6A     		ldr	r3, [r3, #36]
 750 001c 1B78     		ldrb	r3, [r3]
 751 001e 012B     		cmp	r3, #1
 752 0020 19D1     		bne	.L33
 468:../Dave/Generated/src/ADC003/ADC003.c ****   {
 469:../Dave/Generated/src/ADC003/ADC003.c ****     if(LdMode <= (uint8_t)1)
 753              		.loc 1 469 0
 754 0022 FB1C     		add	r3, r7, #3
 755 0024 1B78     		ldrb	r3, [r3]
 756 0026 012B     		cmp	r3, #1
 757 0028 13D8     		bhi	.L34
 470:../Dave/Generated/src/ADC003/ADC003.c ****     {
 471:../Dave/Generated/src/ADC003/ADC003.c ****       /* Selects the load event mode*/
 472:../Dave/Generated/src/ADC003/ADC003.c ****      WR_REG(VADCGroupPtr->ASMR, VADC_G_ASMR_LDM_Msk, VADC_G_ASMR_LDM_Pos,\
 758              		.loc 1 472 0
 759 002a FB1C     		add	r3, r7, #3
 760 002c 1B78     		ldrb	r3, [r3]
 761 002e 5A01     		lsl	r2, r3, #5
 762 0030 2023     		mov	r3, #32
 763 0032 1A40     		and	r2, r3
 764 0034 B968     		ldr	r1, [r7, #8]
 765 0036 9223     		mov	r3, #146
 766 0038 5B00     		lsl	r3, r3, #1
 767 003a CB58     		ldr	r3, [r1, r3]
 768 003c 2021     		mov	r1, #32
 769 003e 8B43     		bic	r3, r1
 770 0040 111C     		mov	r1, r2
 771 0042 1943     		orr	r1, r3
 772 0044 BA68     		ldr	r2, [r7, #8]
 773 0046 9223     		mov	r3, #146
 774 0048 5B00     		lsl	r3, r3, #1
 775 004a D150     		str	r1, [r2, r3]
 473:../Dave/Generated/src/ADC003/ADC003.c ****                                                                         LdMode);
 474:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 776              		.loc 1 474 0
 777 004c 0023     		mov	r3, #0
 778 004e FB60     		str	r3, [r7, #12]
 779 0050 01E0     		b	.L33
 780              	.L34:
 475:../Dave/Generated/src/ADC003/ADC003.c ****     }
 476:../Dave/Generated/src/ADC003/ADC003.c ****     else
 477:../Dave/Generated/src/ADC003/ADC003.c ****     {
 478:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_OUT_OF_RANGE_ERROR;
 781              		.loc 1 478 0
 782 0052 0323     		mov	r3, #3
 783 0054 FB60     		str	r3, [r7, #12]
 784              	.L33:
 479:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 480:../Dave/Generated/src/ADC003/ADC003.c ****     }
 481:../Dave/Generated/src/ADC003/ADC003.c ****   }
 482:../Dave/Generated/src/ADC003/ADC003.c ****   else
 483:../Dave/Generated/src/ADC003/ADC003.c ****   {
 484:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 485:../Dave/Generated/src/ADC003/ADC003.c ****   }
 486:../Dave/Generated/src/ADC003/ADC003.c **** 
 487:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 785              		.loc 1 487 0
 786 0056 FB68     		ldr	r3, [r7, #12]
 488:../Dave/Generated/src/ADC003/ADC003.c **** }
 787              		.loc 1 488 0
 788 0058 181C     		mov	r0, r3
 789 005a BD46     		mov	sp, r7
 790 005c 04B0     		add	sp, sp, #16
 791              		@ sp needed for prologue
 792 005e 80BD     		pop	{r7, pc}
 793              		.cfi_endproc
 794              	.LFE47:
 796              		.section	.text.ADC003_EnableGate,"ax",%progbits
 797              		.align	2
 798              		.global	ADC003_EnableGate
 799              		.code	16
 800              		.thumb_func
 802              	ADC003_EnableGate:
 803              	.LFB48:
 489:../Dave/Generated/src/ADC003/ADC003.c **** 
 490:../Dave/Generated/src/ADC003/ADC003.c **** /*
 491:../Dave/Generated/src/ADC003/ADC003.c ****  * This function enables the gating.
 492:../Dave/Generated/src/ADC003/ADC003.c ****  */
 493:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_EnableGate(const ADC003_HandleType *HandlePtr,
 494:../Dave/Generated/src/ADC003/ADC003.c ****                                               uint8_t GateSelectVal)
 495:../Dave/Generated/src/ADC003/ADC003.c **** {
 804              		.loc 1 495 0
 805              		.cfi_startproc
 806 0000 80B5     		push	{r7, lr}
 807              	.LCFI29:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 7, -8
 810              		.cfi_offset 14, -4
 811 0002 84B0     		sub	sp, sp, #16
 812              	.LCFI30:
 813              		.cfi_def_cfa_offset 24
 814 0004 00AF     		add	r7, sp, #0
 815              	.LCFI31:
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
 818 0008 0A1C     		mov	r2, r1
 819 000a FB1C     		add	r3, r7, #3
 820 000c 1A70     		strb	r2, [r3]
 496:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 821              		.loc 1 496 0
 822 000e 0123     		mov	r3, #1
 823 0010 FB60     		str	r3, [r7, #12]
 497:../Dave/Generated/src/ADC003/ADC003.c ****       /*Pointer to the VADC Group register structure */
 498:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 824              		.loc 1 498 0
 825 0012 7B68     		ldr	r3, [r7, #4]
 826 0014 5B6D     		ldr	r3, [r3, #84]
 827 0016 BB60     		str	r3, [r7, #8]
 499:../Dave/Generated/src/ADC003/ADC003.c **** 
 500:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 828              		.loc 1 500 0
 829 0018 7B68     		ldr	r3, [r7, #4]
 830 001a 5B6A     		ldr	r3, [r3, #36]
 831 001c 1B78     		ldrb	r3, [r3]
 832 001e 012B     		cmp	r3, #1
 833 0020 18D1     		bne	.L37
 501:../Dave/Generated/src/ADC003/ADC003.c ****   {
 502:../Dave/Generated/src/ADC003/ADC003.c ****     if(GateSelectVal <= (uint8_t)3)
 834              		.loc 1 502 0
 835 0022 FB1C     		add	r3, r7, #3
 836 0024 1B78     		ldrb	r3, [r3]
 837 0026 032B     		cmp	r3, #3
 838 0028 12D8     		bhi	.L38
 503:../Dave/Generated/src/ADC003/ADC003.c ****     {
 504:../Dave/Generated/src/ADC003/ADC003.c ****       /* Selects the gating functionality */
 505:../Dave/Generated/src/ADC003/ADC003.c ****      WR_REG(VADCGroupPtr->ASMR, VADC_G_ASMR_ENGT_Msk, VADC_G_ASMR_ENGT_Pos,\
 839              		.loc 1 505 0
 840 002a FB1C     		add	r3, r7, #3
 841 002c 1A78     		ldrb	r2, [r3]
 842 002e 0323     		mov	r3, #3
 843 0030 1A40     		and	r2, r3
 844 0032 B968     		ldr	r1, [r7, #8]
 845 0034 9223     		mov	r3, #146
 846 0036 5B00     		lsl	r3, r3, #1
 847 0038 CB58     		ldr	r3, [r1, r3]
 848 003a 0321     		mov	r1, #3
 849 003c 8B43     		bic	r3, r1
 850 003e 111C     		mov	r1, r2
 851 0040 1943     		orr	r1, r3
 852 0042 BA68     		ldr	r2, [r7, #8]
 853 0044 9223     		mov	r3, #146
 854 0046 5B00     		lsl	r3, r3, #1
 855 0048 D150     		str	r1, [r2, r3]
 506:../Dave/Generated/src/ADC003/ADC003.c ****                                                           GateSelectVal);
 507:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 856              		.loc 1 507 0
 857 004a 0023     		mov	r3, #0
 858 004c FB60     		str	r3, [r7, #12]
 859 004e 01E0     		b	.L37
 860              	.L38:
 508:../Dave/Generated/src/ADC003/ADC003.c ****     }
 509:../Dave/Generated/src/ADC003/ADC003.c ****     else
 510:../Dave/Generated/src/ADC003/ADC003.c ****     {
 511:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_OUT_OF_RANGE_ERROR;
 861              		.loc 1 511 0
 862 0050 0323     		mov	r3, #3
 863 0052 FB60     		str	r3, [r7, #12]
 864              	.L37:
 512:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 513:../Dave/Generated/src/ADC003/ADC003.c ****     }
 514:../Dave/Generated/src/ADC003/ADC003.c ****   }
 515:../Dave/Generated/src/ADC003/ADC003.c ****   else
 516:../Dave/Generated/src/ADC003/ADC003.c ****   {
 517:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 518:../Dave/Generated/src/ADC003/ADC003.c ****   }
 519:../Dave/Generated/src/ADC003/ADC003.c **** 
 520:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 865              		.loc 1 520 0
 866 0054 FB68     		ldr	r3, [r7, #12]
 521:../Dave/Generated/src/ADC003/ADC003.c **** }
 867              		.loc 1 521 0
 868 0056 181C     		mov	r0, r3
 869 0058 BD46     		mov	sp, r7
 870 005a 04B0     		add	sp, sp, #16
 871              		@ sp needed for prologue
 872 005c 80BD     		pop	{r7, pc}
 873              		.cfi_endproc
 874              	.LFE48:
 876 005e C046     		.section	.text.ADC003_EnableScanArbitrationSlot,"ax",%progbits
 877              		.align	2
 878              		.global	ADC003_EnableScanArbitrationSlot
 879              		.code	16
 880              		.thumb_func
 882              	ADC003_EnableScanArbitrationSlot:
 883              	.LFB49:
 522:../Dave/Generated/src/ADC003/ADC003.c **** 
 523:../Dave/Generated/src/ADC003/ADC003.c **** /*
 524:../Dave/Generated/src/ADC003/ADC003.c ****  * This function enables scan arbitration slot.
 525:../Dave/Generated/src/ADC003/ADC003.c ****  */
 526:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_EnableScanArbitrationSlot(const ADC003_HandleType *HandlePtr)
 527:../Dave/Generated/src/ADC003/ADC003.c **** {
 884              		.loc 1 527 0
 885              		.cfi_startproc
 886 0000 80B5     		push	{r7, lr}
 887              	.LCFI32:
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0002 84B0     		sub	sp, sp, #16
 892              	.LCFI33:
 893              		.cfi_def_cfa_offset 24
 894 0004 00AF     		add	r7, sp, #0
 895              	.LCFI34:
 896              		.cfi_def_cfa_register 7
 897 0006 7860     		str	r0, [r7, #4]
 528:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 898              		.loc 1 528 0
 899 0008 0123     		mov	r3, #1
 900 000a FB60     		str	r3, [r7, #12]
 529:../Dave/Generated/src/ADC003/ADC003.c ****       /*Pointer to the VADC Group register structure */
 530:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 901              		.loc 1 530 0
 902 000c 7B68     		ldr	r3, [r7, #4]
 903 000e 5B6D     		ldr	r3, [r3, #84]
 904 0010 BB60     		str	r3, [r7, #8]
 531:../Dave/Generated/src/ADC003/ADC003.c **** 
 532:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 905              		.loc 1 532 0
 906 0012 7B68     		ldr	r3, [r7, #4]
 907 0014 5B6A     		ldr	r3, [r3, #36]
 908 0016 1B78     		ldrb	r3, [r3]
 909 0018 012B     		cmp	r3, #1
 910 001a 0BD1     		bne	.L41
 533:../Dave/Generated/src/ADC003/ADC003.c ****   {
 534:../Dave/Generated/src/ADC003/ADC003.c ****     /* Enables scan arbitration slot */
 535:../Dave/Generated/src/ADC003/ADC003.c ****     SET_BIT(VADCGroupPtr->ARBPR,VADC_G_ARBPR_ASEN1_Pos);
 911              		.loc 1 535 0
 912 001c BA68     		ldr	r2, [r7, #8]
 913 001e 8423     		mov	r3, #132
 914 0020 D358     		ldr	r3, [r2, r3]
 915 0022 8022     		mov	r2, #128
 916 0024 9204     		lsl	r2, r2, #18
 917 0026 111C     		mov	r1, r2
 918 0028 1943     		orr	r1, r3
 919 002a BA68     		ldr	r2, [r7, #8]
 920 002c 8423     		mov	r3, #132
 921 002e D150     		str	r1, [r2, r3]
 536:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 922              		.loc 1 536 0
 923 0030 0023     		mov	r3, #0
 924 0032 FB60     		str	r3, [r7, #12]
 925              	.L41:
 537:../Dave/Generated/src/ADC003/ADC003.c ****   }
 538:../Dave/Generated/src/ADC003/ADC003.c ****   else
 539:../Dave/Generated/src/ADC003/ADC003.c ****   {
 540:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 541:../Dave/Generated/src/ADC003/ADC003.c ****   }
 542:../Dave/Generated/src/ADC003/ADC003.c **** 
 543:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 926              		.loc 1 543 0
 927 0034 FB68     		ldr	r3, [r7, #12]
 544:../Dave/Generated/src/ADC003/ADC003.c **** }
 928              		.loc 1 544 0
 929 0036 181C     		mov	r0, r3
 930 0038 BD46     		mov	sp, r7
 931 003a 04B0     		add	sp, sp, #16
 932              		@ sp needed for prologue
 933 003c 80BD     		pop	{r7, pc}
 934              		.cfi_endproc
 935              	.LFE49:
 937 003e C046     		.section	.text.ADC003_DisableScanArbitrationSlot,"ax",%progbits
 938              		.align	2
 939              		.global	ADC003_DisableScanArbitrationSlot
 940              		.code	16
 941              		.thumb_func
 943              	ADC003_DisableScanArbitrationSlot:
 944              	.LFB50:
 545:../Dave/Generated/src/ADC003/ADC003.c **** 
 546:../Dave/Generated/src/ADC003/ADC003.c **** /*
 547:../Dave/Generated/src/ADC003/ADC003.c ****  * This function disables scan arbitration slot.
 548:../Dave/Generated/src/ADC003/ADC003.c ****  */
 549:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_DisableScanArbitrationSlot(const ADC003_HandleType *HandlePtr)
 550:../Dave/Generated/src/ADC003/ADC003.c **** {
 945              		.loc 1 550 0
 946              		.cfi_startproc
 947 0000 80B5     		push	{r7, lr}
 948              	.LCFI35:
 949              		.cfi_def_cfa_offset 8
 950              		.cfi_offset 7, -8
 951              		.cfi_offset 14, -4
 952 0002 84B0     		sub	sp, sp, #16
 953              	.LCFI36:
 954              		.cfi_def_cfa_offset 24
 955 0004 00AF     		add	r7, sp, #0
 956              	.LCFI37:
 957              		.cfi_def_cfa_register 7
 958 0006 7860     		str	r0, [r7, #4]
 551:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 959              		.loc 1 551 0
 960 0008 0123     		mov	r3, #1
 961 000a FB60     		str	r3, [r7, #12]
 552:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 553:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 962              		.loc 1 553 0
 963 000c 7B68     		ldr	r3, [r7, #4]
 964 000e 5B6D     		ldr	r3, [r3, #84]
 965 0010 BB60     		str	r3, [r7, #8]
 554:../Dave/Generated/src/ADC003/ADC003.c **** 
 555:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 966              		.loc 1 555 0
 967 0012 7B68     		ldr	r3, [r7, #4]
 968 0014 5B6A     		ldr	r3, [r3, #36]
 969 0016 1B78     		ldrb	r3, [r3]
 970 0018 012B     		cmp	r3, #1
 971 001a 0AD1     		bne	.L44
 556:../Dave/Generated/src/ADC003/ADC003.c ****   {
 557:../Dave/Generated/src/ADC003/ADC003.c ****     /* Disables scan arbitration slot */
 558:../Dave/Generated/src/ADC003/ADC003.c ****     CLR_BIT(VADCGroupPtr->ARBPR,VADC_G_ARBPR_ASEN1_Pos);
 972              		.loc 1 558 0
 973 001c BA68     		ldr	r2, [r7, #8]
 974 001e 8423     		mov	r3, #132
 975 0020 D258     		ldr	r2, [r2, r3]
 976 0022 064B     		ldr	r3, .L46
 977 0024 111C     		mov	r1, r2
 978 0026 1940     		and	r1, r3
 979 0028 BA68     		ldr	r2, [r7, #8]
 980 002a 8423     		mov	r3, #132
 981 002c D150     		str	r1, [r2, r3]
 559:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 982              		.loc 1 559 0
 983 002e 0023     		mov	r3, #0
 984 0030 FB60     		str	r3, [r7, #12]
 985              	.L44:
 560:../Dave/Generated/src/ADC003/ADC003.c ****   }
 561:../Dave/Generated/src/ADC003/ADC003.c ****   else
 562:../Dave/Generated/src/ADC003/ADC003.c ****   {
 563:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 564:../Dave/Generated/src/ADC003/ADC003.c ****   }
 565:../Dave/Generated/src/ADC003/ADC003.c **** 
 566:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 986              		.loc 1 566 0
 987 0032 FB68     		ldr	r3, [r7, #12]
 567:../Dave/Generated/src/ADC003/ADC003.c **** }
 988              		.loc 1 567 0
 989 0034 181C     		mov	r0, r3
 990 0036 BD46     		mov	sp, r7
 991 0038 04B0     		add	sp, sp, #16
 992              		@ sp needed for prologue
 993 003a 80BD     		pop	{r7, pc}
 994              	.L47:
 995              		.align	2
 996              	.L46:
 997 003c FFFFFFFD 		.word	-33554433
 998              		.cfi_endproc
 999              	.LFE50:
 1001              		.section	.text.ADC003_SetExternalTriggerMode,"ax",%progbits
 1002              		.align	2
 1003              		.global	ADC003_SetExternalTriggerMode
 1004              		.code	16
 1005              		.thumb_func
 1007              	ADC003_SetExternalTriggerMode:
 1008              	.LFB51:
 568:../Dave/Generated/src/ADC003/ADC003.c **** 
 569:../Dave/Generated/src/ADC003/ADC003.c **** /*
 570:../Dave/Generated/src/ADC003/ADC003.c ****  * This function selects the External trigger mode.
 571:../Dave/Generated/src/ADC003/ADC003.c ****  */
 572:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_SetExternalTriggerMode(const ADC003_HandleType *HandlePtr,
 573:../Dave/Generated/src/ADC003/ADC003.c ****                                                                        uint8_t Mode)
 574:../Dave/Generated/src/ADC003/ADC003.c **** {
 1009              		.loc 1 574 0
 1010              		.cfi_startproc
 1011 0000 80B5     		push	{r7, lr}
 1012              	.LCFI38:
 1013              		.cfi_def_cfa_offset 8
 1014              		.cfi_offset 7, -8
 1015              		.cfi_offset 14, -4
 1016 0002 84B0     		sub	sp, sp, #16
 1017              	.LCFI39:
 1018              		.cfi_def_cfa_offset 24
 1019 0004 00AF     		add	r7, sp, #0
 1020              	.LCFI40:
 1021              		.cfi_def_cfa_register 7
 1022 0006 7860     		str	r0, [r7, #4]
 1023 0008 0A1C     		mov	r2, r1
 1024 000a FB1C     		add	r3, r7, #3
 1025 000c 1A70     		strb	r2, [r3]
 575:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1026              		.loc 1 575 0
 1027 000e 0123     		mov	r3, #1
 1028 0010 FB60     		str	r3, [r7, #12]
 576:../Dave/Generated/src/ADC003/ADC003.c ****       /*Pointer to the VADC Group register structure */
 577:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1029              		.loc 1 577 0
 1030 0012 7B68     		ldr	r3, [r7, #4]
 1031 0014 5B6D     		ldr	r3, [r3, #84]
 1032 0016 BB60     		str	r3, [r7, #8]
 578:../Dave/Generated/src/ADC003/ADC003.c **** 
 579:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1033              		.loc 1 579 0
 1034 0018 7B68     		ldr	r3, [r7, #4]
 1035 001a 5B6A     		ldr	r3, [r3, #36]
 1036 001c 1B78     		ldrb	r3, [r3]
 1037 001e 012B     		cmp	r3, #1
 1038 0020 39D1     		bne	.L49
 580:../Dave/Generated/src/ADC003/ADC003.c ****   {
 581:../Dave/Generated/src/ADC003/ADC003.c ****     if(Mode <= (uint8_t)ADC003_TRIGGER_UPON_BOTH_EDGE)
 1039              		.loc 1 581 0
 1040 0022 FB1C     		add	r3, r7, #3
 1041 0024 1B78     		ldrb	r3, [r3]
 1042 0026 032B     		cmp	r3, #3
 1043 0028 33D8     		bhi	.L50
 582:../Dave/Generated/src/ADC003/ADC003.c ****     {
 583:../Dave/Generated/src/ADC003/ADC003.c ****       if(Mode == (uint8_t)ADC003_NOTRIGGER)
 1044              		.loc 1 583 0
 1045 002a FB1C     		add	r3, r7, #3
 1046 002c 1B78     		ldrb	r3, [r3]
 1047 002e 002B     		cmp	r3, #0
 1048 0030 0BD1     		bne	.L51
 584:../Dave/Generated/src/ADC003/ADC003.c ****       {
 585:../Dave/Generated/src/ADC003/ADC003.c ****        /* Disables external trigger */
 586:../Dave/Generated/src/ADC003/ADC003.c ****        CLR_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_ENTR_Pos);
 1049              		.loc 1 586 0
 1050 0032 BA68     		ldr	r2, [r7, #8]
 1051 0034 9223     		mov	r3, #146
 1052 0036 5B00     		lsl	r3, r3, #1
 1053 0038 D358     		ldr	r3, [r2, r3]
 1054 003a 0422     		mov	r2, #4
 1055 003c 191C     		mov	r1, r3
 1056 003e 9143     		bic	r1, r2
 1057 0040 BA68     		ldr	r2, [r7, #8]
 1058 0042 9223     		mov	r3, #146
 1059 0044 5B00     		lsl	r3, r3, #1
 1060 0046 D150     		str	r1, [r2, r3]
 1061 0048 0AE0     		b	.L52
 1062              	.L51:
 587:../Dave/Generated/src/ADC003/ADC003.c ****       }
 588:../Dave/Generated/src/ADC003/ADC003.c ****       else
 589:../Dave/Generated/src/ADC003/ADC003.c ****       {
 590:../Dave/Generated/src/ADC003/ADC003.c ****        /* Enables external trigger */
 591:../Dave/Generated/src/ADC003/ADC003.c ****        SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_ENTR_Pos);
 1063              		.loc 1 591 0
 1064 004a BA68     		ldr	r2, [r7, #8]
 1065 004c 9223     		mov	r3, #146
 1066 004e 5B00     		lsl	r3, r3, #1
 1067 0050 D358     		ldr	r3, [r2, r3]
 1068 0052 0422     		mov	r2, #4
 1069 0054 111C     		mov	r1, r2
 1070 0056 1943     		orr	r1, r3
 1071 0058 BA68     		ldr	r2, [r7, #8]
 1072 005a 9223     		mov	r3, #146
 1073 005c 5B00     		lsl	r3, r3, #1
 1074 005e D150     		str	r1, [r2, r3]
 1075              	.L52:
 592:../Dave/Generated/src/ADC003/ADC003.c ****       }
 593:../Dave/Generated/src/ADC003/ADC003.c ****       /*
 594:../Dave/Generated/src/ADC003/ADC003.c ****        * Enable XTWC Bitfield so that XTMODE and XTSEL can be written
 595:../Dave/Generated/src/ADC003/ADC003.c ****        * Selects trigger mode .
 596:../Dave/Generated/src/ADC003/ADC003.c ****        */
 597:../Dave/Generated/src/ADC003/ADC003.c ****       VADCGroupPtr->ASCTRL = (uint32_t)
 598:../Dave/Generated/src/ADC003/ADC003.c ****           ((((uint32_t)1 << VADC_G_ASCTRL_XTWC_Pos) & VADC_G_ASCTRL_XTWC_Msk)|\
 599:../Dave/Generated/src/ADC003/ADC003.c ****           (((uint32_t)Mode<< VADC_G_ASCTRL_XTMODE_Pos) & VADC_G_ASCTRL_XTMODE_Msk)|\
 1076              		.loc 1 599 0
 1077 0060 FB1C     		add	r3, r7, #3
 1078 0062 1B78     		ldrb	r3, [r3]
 1079 0064 5A03     		lsl	r2, r3, #13
 1080 0066 C023     		mov	r3, #192
 1081 0068 DB01     		lsl	r3, r3, #7
 1082 006a 1A40     		and	r2, r3
 600:../Dave/Generated/src/ADC003/ADC003.c ****           (VADCGroupPtr->ASCTRL & (((uint32_t)0xF) << VADC_G_ASCTRL_XTSEL_Pos)));
 1083              		.loc 1 600 0
 1084 006c B968     		ldr	r1, [r7, #8]
 1085 006e 9023     		mov	r3, #144
 1086 0070 5B00     		lsl	r3, r3, #1
 1087 0072 C958     		ldr	r1, [r1, r3]
 1088 0074 F023     		mov	r3, #240
 1089 0076 1B01     		lsl	r3, r3, #4
 1090 0078 0B40     		and	r3, r1
 597:../Dave/Generated/src/ADC003/ADC003.c ****       VADCGroupPtr->ASCTRL = (uint32_t)
 1091              		.loc 1 597 0
 1092 007a 1343     		orr	r3, r2
 1093 007c 8022     		mov	r2, #128
 1094 007e 1202     		lsl	r2, r2, #8
 1095 0080 111C     		mov	r1, r2
 1096 0082 1943     		orr	r1, r3
 1097 0084 BA68     		ldr	r2, [r7, #8]
 1098 0086 9023     		mov	r3, #144
 1099 0088 5B00     		lsl	r3, r3, #1
 1100 008a D150     		str	r1, [r2, r3]
 601:../Dave/Generated/src/ADC003/ADC003.c **** 
 602:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1101              		.loc 1 602 0
 1102 008c 0023     		mov	r3, #0
 1103 008e FB60     		str	r3, [r7, #12]
 1104 0090 01E0     		b	.L49
 1105              	.L50:
 603:../Dave/Generated/src/ADC003/ADC003.c ****     }
 604:../Dave/Generated/src/ADC003/ADC003.c ****     else
 605:../Dave/Generated/src/ADC003/ADC003.c ****     {
 606:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1106              		.loc 1 606 0
 1107 0092 0223     		mov	r3, #2
 1108 0094 FB60     		str	r3, [r7, #12]
 1109              	.L49:
 607:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 608:../Dave/Generated/src/ADC003/ADC003.c ****     }
 609:../Dave/Generated/src/ADC003/ADC003.c ****   }
 610:../Dave/Generated/src/ADC003/ADC003.c ****   else
 611:../Dave/Generated/src/ADC003/ADC003.c ****   {
 612:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 613:../Dave/Generated/src/ADC003/ADC003.c ****   }
 614:../Dave/Generated/src/ADC003/ADC003.c **** 
 615:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1110              		.loc 1 615 0
 1111 0096 FB68     		ldr	r3, [r7, #12]
 616:../Dave/Generated/src/ADC003/ADC003.c **** }
 1112              		.loc 1 616 0
 1113 0098 181C     		mov	r0, r3
 1114 009a BD46     		mov	sp, r7
 1115 009c 04B0     		add	sp, sp, #16
 1116              		@ sp needed for prologue
 1117 009e 80BD     		pop	{r7, pc}
 1118              		.cfi_endproc
 1119              	.LFE51:
 1121              		.section	.text.ADC003_EnableExternalTrigger,"ax",%progbits
 1122              		.align	2
 1123              		.global	ADC003_EnableExternalTrigger
 1124              		.code	16
 1125              		.thumb_func
 1127              	ADC003_EnableExternalTrigger:
 1128              	.LFB52:
 617:../Dave/Generated/src/ADC003/ADC003.c **** /*
 618:../Dave/Generated/src/ADC003/ADC003.c ****  * This function enables external trigger.
 619:../Dave/Generated/src/ADC003/ADC003.c ****  */
 620:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_EnableExternalTrigger(const ADC003_HandleType *HandlePtr)
 621:../Dave/Generated/src/ADC003/ADC003.c **** {
 1129              		.loc 1 621 0
 1130              		.cfi_startproc
 1131 0000 80B5     		push	{r7, lr}
 1132              	.LCFI41:
 1133              		.cfi_def_cfa_offset 8
 1134              		.cfi_offset 7, -8
 1135              		.cfi_offset 14, -4
 1136 0002 84B0     		sub	sp, sp, #16
 1137              	.LCFI42:
 1138              		.cfi_def_cfa_offset 24
 1139 0004 00AF     		add	r7, sp, #0
 1140              	.LCFI43:
 1141              		.cfi_def_cfa_register 7
 1142 0006 7860     		str	r0, [r7, #4]
 622:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1143              		.loc 1 622 0
 1144 0008 0123     		mov	r3, #1
 1145 000a FB60     		str	r3, [r7, #12]
 623:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 624:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1146              		.loc 1 624 0
 1147 000c 7B68     		ldr	r3, [r7, #4]
 1148 000e 5B6D     		ldr	r3, [r3, #84]
 1149 0010 BB60     		str	r3, [r7, #8]
 625:../Dave/Generated/src/ADC003/ADC003.c **** 
 626:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1150              		.loc 1 626 0
 1151 0012 7B68     		ldr	r3, [r7, #4]
 1152 0014 5B6A     		ldr	r3, [r3, #36]
 1153 0016 1B78     		ldrb	r3, [r3]
 1154 0018 012B     		cmp	r3, #1
 1155 001a 0CD1     		bne	.L55
 627:../Dave/Generated/src/ADC003/ADC003.c ****   {
 628:../Dave/Generated/src/ADC003/ADC003.c ****     /* Enables external trigger */
 629:../Dave/Generated/src/ADC003/ADC003.c ****     SET_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_ENTR_Pos);
 1156              		.loc 1 629 0
 1157 001c BA68     		ldr	r2, [r7, #8]
 1158 001e 9223     		mov	r3, #146
 1159 0020 5B00     		lsl	r3, r3, #1
 1160 0022 D358     		ldr	r3, [r2, r3]
 1161 0024 0422     		mov	r2, #4
 1162 0026 111C     		mov	r1, r2
 1163 0028 1943     		orr	r1, r3
 1164 002a BA68     		ldr	r2, [r7, #8]
 1165 002c 9223     		mov	r3, #146
 1166 002e 5B00     		lsl	r3, r3, #1
 1167 0030 D150     		str	r1, [r2, r3]
 630:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1168              		.loc 1 630 0
 1169 0032 0023     		mov	r3, #0
 1170 0034 FB60     		str	r3, [r7, #12]
 1171              	.L55:
 631:../Dave/Generated/src/ADC003/ADC003.c ****   }
 632:../Dave/Generated/src/ADC003/ADC003.c ****   else
 633:../Dave/Generated/src/ADC003/ADC003.c ****   {
 634:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 635:../Dave/Generated/src/ADC003/ADC003.c ****   }
 636:../Dave/Generated/src/ADC003/ADC003.c **** 
 637:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1172              		.loc 1 637 0
 1173 0036 FB68     		ldr	r3, [r7, #12]
 638:../Dave/Generated/src/ADC003/ADC003.c **** }
 1174              		.loc 1 638 0
 1175 0038 181C     		mov	r0, r3
 1176 003a BD46     		mov	sp, r7
 1177 003c 04B0     		add	sp, sp, #16
 1178              		@ sp needed for prologue
 1179 003e 80BD     		pop	{r7, pc}
 1180              		.cfi_endproc
 1181              	.LFE52:
 1183              		.section	.text.ADC003_DisableExternalTrigger,"ax",%progbits
 1184              		.align	2
 1185              		.global	ADC003_DisableExternalTrigger
 1186              		.code	16
 1187              		.thumb_func
 1189              	ADC003_DisableExternalTrigger:
 1190              	.LFB53:
 639:../Dave/Generated/src/ADC003/ADC003.c **** 
 640:../Dave/Generated/src/ADC003/ADC003.c **** /*
 641:../Dave/Generated/src/ADC003/ADC003.c ****  * This function disables external trigger.
 642:../Dave/Generated/src/ADC003/ADC003.c ****  */
 643:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_DisableExternalTrigger(const ADC003_HandleType *HandlePtr)
 644:../Dave/Generated/src/ADC003/ADC003.c **** {
 1191              		.loc 1 644 0
 1192              		.cfi_startproc
 1193 0000 80B5     		push	{r7, lr}
 1194              	.LCFI44:
 1195              		.cfi_def_cfa_offset 8
 1196              		.cfi_offset 7, -8
 1197              		.cfi_offset 14, -4
 1198 0002 84B0     		sub	sp, sp, #16
 1199              	.LCFI45:
 1200              		.cfi_def_cfa_offset 24
 1201 0004 00AF     		add	r7, sp, #0
 1202              	.LCFI46:
 1203              		.cfi_def_cfa_register 7
 1204 0006 7860     		str	r0, [r7, #4]
 645:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1205              		.loc 1 645 0
 1206 0008 0123     		mov	r3, #1
 1207 000a FB60     		str	r3, [r7, #12]
 646:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 647:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1208              		.loc 1 647 0
 1209 000c 7B68     		ldr	r3, [r7, #4]
 1210 000e 5B6D     		ldr	r3, [r3, #84]
 1211 0010 BB60     		str	r3, [r7, #8]
 648:../Dave/Generated/src/ADC003/ADC003.c **** 
 649:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1212              		.loc 1 649 0
 1213 0012 7B68     		ldr	r3, [r7, #4]
 1214 0014 5B6A     		ldr	r3, [r3, #36]
 1215 0016 1B78     		ldrb	r3, [r3]
 1216 0018 012B     		cmp	r3, #1
 1217 001a 0CD1     		bne	.L58
 650:../Dave/Generated/src/ADC003/ADC003.c ****   {
 651:../Dave/Generated/src/ADC003/ADC003.c ****     /* Disables external trigger */
 652:../Dave/Generated/src/ADC003/ADC003.c ****     CLR_BIT(VADCGroupPtr->ASMR, VADC_G_ASMR_ENTR_Pos);
 1218              		.loc 1 652 0
 1219 001c BA68     		ldr	r2, [r7, #8]
 1220 001e 9223     		mov	r3, #146
 1221 0020 5B00     		lsl	r3, r3, #1
 1222 0022 D358     		ldr	r3, [r2, r3]
 1223 0024 0422     		mov	r2, #4
 1224 0026 191C     		mov	r1, r3
 1225 0028 9143     		bic	r1, r2
 1226 002a BA68     		ldr	r2, [r7, #8]
 1227 002c 9223     		mov	r3, #146
 1228 002e 5B00     		lsl	r3, r3, #1
 1229 0030 D150     		str	r1, [r2, r3]
 653:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1230              		.loc 1 653 0
 1231 0032 0023     		mov	r3, #0
 1232 0034 FB60     		str	r3, [r7, #12]
 1233              	.L58:
 654:../Dave/Generated/src/ADC003/ADC003.c ****   }
 655:../Dave/Generated/src/ADC003/ADC003.c ****   else
 656:../Dave/Generated/src/ADC003/ADC003.c ****   {
 657:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 658:../Dave/Generated/src/ADC003/ADC003.c ****   }
 659:../Dave/Generated/src/ADC003/ADC003.c **** 
 660:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1234              		.loc 1 660 0
 1235 0036 FB68     		ldr	r3, [r7, #12]
 661:../Dave/Generated/src/ADC003/ADC003.c **** }
 1236              		.loc 1 661 0
 1237 0038 181C     		mov	r0, r3
 1238 003a BD46     		mov	sp, r7
 1239 003c 04B0     		add	sp, sp, #16
 1240              		@ sp needed for prologue
 1241 003e 80BD     		pop	{r7, pc}
 1242              		.cfi_endproc
 1243              	.LFE53:
 1245              		.section	.text.ADC003_GetGateLevel,"ax",%progbits
 1246              		.align	2
 1247              		.global	ADC003_GetGateLevel
 1248              		.code	16
 1249              		.thumb_func
 1251              	ADC003_GetGateLevel:
 1252              	.LFB54:
 662:../Dave/Generated/src/ADC003/ADC003.c **** /* This function gets the current level of the selected gate input */
 663:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_GetGateLevel(const ADC003_HandleType *HandlePtr,
 664:../Dave/Generated/src/ADC003/ADC003.c ****                                                     uint8_t *GateLevelPtr)
 665:../Dave/Generated/src/ADC003/ADC003.c **** {
 1253              		.loc 1 665 0
 1254              		.cfi_startproc
 1255 0000 80B5     		push	{r7, lr}
 1256              	.LCFI47:
 1257              		.cfi_def_cfa_offset 8
 1258              		.cfi_offset 7, -8
 1259              		.cfi_offset 14, -4
 1260 0002 84B0     		sub	sp, sp, #16
 1261              	.LCFI48:
 1262              		.cfi_def_cfa_offset 24
 1263 0004 00AF     		add	r7, sp, #0
 1264              	.LCFI49:
 1265              		.cfi_def_cfa_register 7
 1266 0006 7860     		str	r0, [r7, #4]
 1267 0008 3960     		str	r1, [r7]
 666:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1268              		.loc 1 666 0
 1269 000a 0123     		mov	r3, #1
 1270 000c FB60     		str	r3, [r7, #12]
 667:../Dave/Generated/src/ADC003/ADC003.c ****       /*Pointer to the VADC Group register structure */
 668:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1271              		.loc 1 668 0
 1272 000e 7B68     		ldr	r3, [r7, #4]
 1273 0010 5B6D     		ldr	r3, [r3, #84]
 1274 0012 BB60     		str	r3, [r7, #8]
 669:../Dave/Generated/src/ADC003/ADC003.c **** 
 670:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1275              		.loc 1 670 0
 1276 0014 7B68     		ldr	r3, [r7, #4]
 1277 0016 5B6A     		ldr	r3, [r3, #36]
 1278 0018 1B78     		ldrb	r3, [r3]
 1279 001a 012B     		cmp	r3, #1
 1280 001c 11D1     		bne	.L61
 671:../Dave/Generated/src/ADC003/ADC003.c ****   {
 672:../Dave/Generated/src/ADC003/ADC003.c ****     /* Get the input level of selected gate input */
 673:../Dave/Generated/src/ADC003/ADC003.c ****     if(GateLevelPtr != NULL)
 1281              		.loc 1 673 0
 1282 001e 3B68     		ldr	r3, [r7]
 1283 0020 002B     		cmp	r3, #0
 1284 0022 0CD0     		beq	.L62
 674:../Dave/Generated/src/ADC003/ADC003.c ****     {
 675:../Dave/Generated/src/ADC003/ADC003.c ****       *GateLevelPtr = (uint8_t)RD_REG( VADCGroupPtr->ASMR,
 1285              		.loc 1 675 0
 1286 0024 BA68     		ldr	r2, [r7, #8]
 1287 0026 9223     		mov	r3, #146
 1288 0028 5B00     		lsl	r3, r3, #1
 1289 002a D258     		ldr	r2, [r2, r3]
 1290 002c 8023     		mov	r3, #128
 1291 002e 1340     		and	r3, r2
 1292 0030 DB09     		lsr	r3, r3, #7
 1293 0032 DAB2     		uxtb	r2, r3
 1294 0034 3B68     		ldr	r3, [r7]
 1295 0036 1A70     		strb	r2, [r3]
 676:../Dave/Generated/src/ADC003/ADC003.c ****                           VADC_G_ASMR_REQGT_Msk, VADC_G_ASMR_REQGT_Pos);
 677:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1296              		.loc 1 677 0
 1297 0038 0023     		mov	r3, #0
 1298 003a FB60     		str	r3, [r7, #12]
 1299 003c 01E0     		b	.L61
 1300              	.L62:
 678:../Dave/Generated/src/ADC003/ADC003.c ****     }
 679:../Dave/Generated/src/ADC003/ADC003.c ****     else
 680:../Dave/Generated/src/ADC003/ADC003.c ****     {
 681:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1301              		.loc 1 681 0
 1302 003e 0223     		mov	r3, #2
 1303 0040 FB60     		str	r3, [r7, #12]
 1304              	.L61:
 682:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 683:../Dave/Generated/src/ADC003/ADC003.c ****     }
 684:../Dave/Generated/src/ADC003/ADC003.c ****   }
 685:../Dave/Generated/src/ADC003/ADC003.c ****   else
 686:../Dave/Generated/src/ADC003/ADC003.c ****   {
 687:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 688:../Dave/Generated/src/ADC003/ADC003.c ****   }
 689:../Dave/Generated/src/ADC003/ADC003.c **** 
 690:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1305              		.loc 1 690 0
 1306 0042 FB68     		ldr	r3, [r7, #12]
 691:../Dave/Generated/src/ADC003/ADC003.c **** }
 1307              		.loc 1 691 0
 1308 0044 181C     		mov	r0, r3
 1309 0046 BD46     		mov	sp, r7
 1310 0048 04B0     		add	sp, sp, #16
 1311              		@ sp needed for prologue
 1312 004a 80BD     		pop	{r7, pc}
 1313              		.cfi_endproc
 1314              	.LFE54:
 1316              		.section	.text.ADC003_SetChannel,"ax",%progbits
 1317              		.align	2
 1318              		.global	ADC003_SetChannel
 1319              		.code	16
 1320              		.thumb_func
 1322              	ADC003_SetChannel:
 1323              	.LFB55:
 692:../Dave/Generated/src/ADC003/ADC003.c **** /*
 693:../Dave/Generated/src/ADC003/ADC003.c ****  * This function sets the required channel in channel selection register.
 694:../Dave/Generated/src/ADC003/ADC003.c ****  */
 695:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_SetChannel(const ADC003_HandleType *HandlePtr,
 696:../Dave/Generated/src/ADC003/ADC003.c ****                                                     uint8_t channel)
 697:../Dave/Generated/src/ADC003/ADC003.c **** {
 1324              		.loc 1 697 0
 1325              		.cfi_startproc
 1326 0000 80B5     		push	{r7, lr}
 1327              	.LCFI50:
 1328              		.cfi_def_cfa_offset 8
 1329              		.cfi_offset 7, -8
 1330              		.cfi_offset 14, -4
 1331 0002 84B0     		sub	sp, sp, #16
 1332              	.LCFI51:
 1333              		.cfi_def_cfa_offset 24
 1334 0004 00AF     		add	r7, sp, #0
 1335              	.LCFI52:
 1336              		.cfi_def_cfa_register 7
 1337 0006 7860     		str	r0, [r7, #4]
 1338 0008 0A1C     		mov	r2, r1
 1339 000a FB1C     		add	r3, r7, #3
 1340 000c 1A70     		strb	r2, [r3]
 698:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1341              		.loc 1 698 0
 1342 000e 0123     		mov	r3, #1
 1343 0010 FB60     		str	r3, [r7, #12]
 699:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 700:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1344              		.loc 1 700 0
 1345 0012 7B68     		ldr	r3, [r7, #4]
 1346 0014 5B6D     		ldr	r3, [r3, #84]
 1347 0016 BB60     		str	r3, [r7, #8]
 701:../Dave/Generated/src/ADC003/ADC003.c **** 
 702:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1348              		.loc 1 702 0
 1349 0018 7B68     		ldr	r3, [r7, #4]
 1350 001a 5B6A     		ldr	r3, [r3, #36]
 1351 001c 1B78     		ldrb	r3, [r3]
 1352 001e 012B     		cmp	r3, #1
 1353 0020 1DD1     		bne	.L65
 703:../Dave/Generated/src/ADC003/ADC003.c ****   {
 704:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kActiveChannels[channel] == (uint8_t)1)
 1354              		.loc 1 704 0
 1355 0022 FB1C     		add	r3, r7, #3
 1356 0024 1A78     		ldrb	r2, [r3]
 1357 0026 7968     		ldr	r1, [r7, #4]
 1358 0028 0823     		mov	r3, #8
 1359 002a 8A18     		add	r2, r1, r2
 1360 002c D318     		add	r3, r2, r3
 1361 002e DB78     		ldrb	r3, [r3, #3]
 1362 0030 012B     		cmp	r3, #1
 1363 0032 12D1     		bne	.L66
 705:../Dave/Generated/src/ADC003/ADC003.c ****     {
 706:../Dave/Generated/src/ADC003/ADC003.c ****       /*sets the channel*/
 707:../Dave/Generated/src/ADC003/ADC003.c ****       VADCGroupPtr->ASSEL |= ((uint32_t)1<<channel);
 1364              		.loc 1 707 0
 1365 0034 BA68     		ldr	r2, [r7, #8]
 1366 0036 9423     		mov	r3, #148
 1367 0038 5B00     		lsl	r3, r3, #1
 1368 003a D258     		ldr	r2, [r2, r3]
 1369 003c FB1C     		add	r3, r7, #3
 1370 003e 1B78     		ldrb	r3, [r3]
 1371 0040 0121     		mov	r1, #1
 1372 0042 081C     		mov	r0, r1
 1373 0044 9840     		lsl	r0, r0, r3
 1374 0046 031C     		mov	r3, r0
 1375 0048 111C     		mov	r1, r2
 1376 004a 1943     		orr	r1, r3
 1377 004c BA68     		ldr	r2, [r7, #8]
 1378 004e 9423     		mov	r3, #148
 1379 0050 5B00     		lsl	r3, r3, #1
 1380 0052 D150     		str	r1, [r2, r3]
 708:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1381              		.loc 1 708 0
 1382 0054 0023     		mov	r3, #0
 1383 0056 FB60     		str	r3, [r7, #12]
 1384 0058 01E0     		b	.L65
 1385              	.L66:
 709:../Dave/Generated/src/ADC003/ADC003.c ****     }
 710:../Dave/Generated/src/ADC003/ADC003.c ****     else
 711:../Dave/Generated/src/ADC003/ADC003.c ****     {
 712:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1386              		.loc 1 712 0
 1387 005a 0223     		mov	r3, #2
 1388 005c FB60     		str	r3, [r7, #12]
 1389              	.L65:
 713:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 714:../Dave/Generated/src/ADC003/ADC003.c ****     }
 715:../Dave/Generated/src/ADC003/ADC003.c ****   }
 716:../Dave/Generated/src/ADC003/ADC003.c ****   else
 717:../Dave/Generated/src/ADC003/ADC003.c ****   {
 718:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 719:../Dave/Generated/src/ADC003/ADC003.c ****   }
 720:../Dave/Generated/src/ADC003/ADC003.c **** 
 721:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1390              		.loc 1 721 0
 1391 005e FB68     		ldr	r3, [r7, #12]
 722:../Dave/Generated/src/ADC003/ADC003.c **** }
 1392              		.loc 1 722 0
 1393 0060 181C     		mov	r0, r3
 1394 0062 BD46     		mov	sp, r7
 1395 0064 04B0     		add	sp, sp, #16
 1396              		@ sp needed for prologue
 1397 0066 80BD     		pop	{r7, pc}
 1398              		.cfi_endproc
 1399              	.LFE55:
 1401              		.section	.text.ADC003_ClearChannel,"ax",%progbits
 1402              		.align	2
 1403              		.global	ADC003_ClearChannel
 1404              		.code	16
 1405              		.thumb_func
 1407              	ADC003_ClearChannel:
 1408              	.LFB56:
 723:../Dave/Generated/src/ADC003/ADC003.c **** 
 724:../Dave/Generated/src/ADC003/ADC003.c **** /*
 725:../Dave/Generated/src/ADC003/ADC003.c ****  * This function clears the required channel in channel selection register.
 726:../Dave/Generated/src/ADC003/ADC003.c ****  */
 727:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_ClearChannel(const ADC003_HandleType *HandlePtr,
 728:../Dave/Generated/src/ADC003/ADC003.c ****                                                       uint8_t channel)
 729:../Dave/Generated/src/ADC003/ADC003.c **** {
 1409              		.loc 1 729 0
 1410              		.cfi_startproc
 1411 0000 80B5     		push	{r7, lr}
 1412              	.LCFI53:
 1413              		.cfi_def_cfa_offset 8
 1414              		.cfi_offset 7, -8
 1415              		.cfi_offset 14, -4
 1416 0002 84B0     		sub	sp, sp, #16
 1417              	.LCFI54:
 1418              		.cfi_def_cfa_offset 24
 1419 0004 00AF     		add	r7, sp, #0
 1420              	.LCFI55:
 1421              		.cfi_def_cfa_register 7
 1422 0006 7860     		str	r0, [r7, #4]
 1423 0008 0A1C     		mov	r2, r1
 1424 000a FB1C     		add	r3, r7, #3
 1425 000c 1A70     		strb	r2, [r3]
 730:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1426              		.loc 1 730 0
 1427 000e 0123     		mov	r3, #1
 1428 0010 FB60     		str	r3, [r7, #12]
 731:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 732:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1429              		.loc 1 732 0
 1430 0012 7B68     		ldr	r3, [r7, #4]
 1431 0014 5B6D     		ldr	r3, [r3, #84]
 1432 0016 BB60     		str	r3, [r7, #8]
 733:../Dave/Generated/src/ADC003/ADC003.c **** 
 734:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1433              		.loc 1 734 0
 1434 0018 7B68     		ldr	r3, [r7, #4]
 1435 001a 5B6A     		ldr	r3, [r3, #36]
 1436 001c 1B78     		ldrb	r3, [r3]
 1437 001e 012B     		cmp	r3, #1
 1438 0020 1ED1     		bne	.L69
 735:../Dave/Generated/src/ADC003/ADC003.c ****   {
 736:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kActiveChannels[channel] == (uint8_t)1)
 1439              		.loc 1 736 0
 1440 0022 FB1C     		add	r3, r7, #3
 1441 0024 1A78     		ldrb	r2, [r3]
 1442 0026 7968     		ldr	r1, [r7, #4]
 1443 0028 0823     		mov	r3, #8
 1444 002a 8A18     		add	r2, r1, r2
 1445 002c D318     		add	r3, r2, r3
 1446 002e DB78     		ldrb	r3, [r3, #3]
 1447 0030 012B     		cmp	r3, #1
 1448 0032 13D1     		bne	.L70
 737:../Dave/Generated/src/ADC003/ADC003.c ****     {
 738:../Dave/Generated/src/ADC003/ADC003.c ****       /*clears the channel*/
 739:../Dave/Generated/src/ADC003/ADC003.c ****       VADCGroupPtr->ASSEL &= ~((uint32_t)1<<channel);
 1449              		.loc 1 739 0
 1450 0034 BA68     		ldr	r2, [r7, #8]
 1451 0036 9423     		mov	r3, #148
 1452 0038 5B00     		lsl	r3, r3, #1
 1453 003a D358     		ldr	r3, [r2, r3]
 1454 003c FA1C     		add	r2, r7, #3
 1455 003e 1278     		ldrb	r2, [r2]
 1456 0040 0121     		mov	r1, #1
 1457 0042 081C     		mov	r0, r1
 1458 0044 9040     		lsl	r0, r0, r2
 1459 0046 021C     		mov	r2, r0
 1460 0048 D243     		mvn	r2, r2
 1461 004a 111C     		mov	r1, r2
 1462 004c 1940     		and	r1, r3
 1463 004e BA68     		ldr	r2, [r7, #8]
 1464 0050 9423     		mov	r3, #148
 1465 0052 5B00     		lsl	r3, r3, #1
 1466 0054 D150     		str	r1, [r2, r3]
 740:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1467              		.loc 1 740 0
 1468 0056 0023     		mov	r3, #0
 1469 0058 FB60     		str	r3, [r7, #12]
 1470 005a 01E0     		b	.L69
 1471              	.L70:
 741:../Dave/Generated/src/ADC003/ADC003.c ****     }
 742:../Dave/Generated/src/ADC003/ADC003.c ****     else
 743:../Dave/Generated/src/ADC003/ADC003.c ****     {
 744:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1472              		.loc 1 744 0
 1473 005c 0223     		mov	r3, #2
 1474 005e FB60     		str	r3, [r7, #12]
 1475              	.L69:
 745:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 746:../Dave/Generated/src/ADC003/ADC003.c ****     }
 747:../Dave/Generated/src/ADC003/ADC003.c ****   }
 748:../Dave/Generated/src/ADC003/ADC003.c ****   else
 749:../Dave/Generated/src/ADC003/ADC003.c ****   {
 750:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 751:../Dave/Generated/src/ADC003/ADC003.c ****   }
 752:../Dave/Generated/src/ADC003/ADC003.c **** 
 753:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1476              		.loc 1 753 0
 1477 0060 FB68     		ldr	r3, [r7, #12]
 754:../Dave/Generated/src/ADC003/ADC003.c **** }
 1478              		.loc 1 754 0
 1479 0062 181C     		mov	r0, r3
 1480 0064 BD46     		mov	sp, r7
 1481 0066 04B0     		add	sp, sp, #16
 1482              		@ sp needed for prologue
 1483 0068 80BD     		pop	{r7, pc}
 1484              		.cfi_endproc
 1485              	.LFE56:
 1487 006a C046     		.section	.text.ADC003_SetPendingChannel,"ax",%progbits
 1488              		.align	2
 1489              		.global	ADC003_SetPendingChannel
 1490              		.code	16
 1491              		.thumb_func
 1493              	ADC003_SetPendingChannel:
 1494              	.LFB57:
 755:../Dave/Generated/src/ADC003/ADC003.c **** 
 756:../Dave/Generated/src/ADC003/ADC003.c **** /*
 757:../Dave/Generated/src/ADC003/ADC003.c ****  *This function sets the required channel in channel pending register.
 758:../Dave/Generated/src/ADC003/ADC003.c ****  */
 759:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_SetPendingChannel(const ADC003_HandleType *HandlePtr,
 760:../Dave/Generated/src/ADC003/ADC003.c ****                                                       uint8_t channel)
 761:../Dave/Generated/src/ADC003/ADC003.c **** {
 1495              		.loc 1 761 0
 1496              		.cfi_startproc
 1497 0000 80B5     		push	{r7, lr}
 1498              	.LCFI56:
 1499              		.cfi_def_cfa_offset 8
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
 1502 0002 84B0     		sub	sp, sp, #16
 1503              	.LCFI57:
 1504              		.cfi_def_cfa_offset 24
 1505 0004 00AF     		add	r7, sp, #0
 1506              	.LCFI58:
 1507              		.cfi_def_cfa_register 7
 1508 0006 7860     		str	r0, [r7, #4]
 1509 0008 0A1C     		mov	r2, r1
 1510 000a FB1C     		add	r3, r7, #3
 1511 000c 1A70     		strb	r2, [r3]
 762:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1512              		.loc 1 762 0
 1513 000e 0123     		mov	r3, #1
 1514 0010 FB60     		str	r3, [r7, #12]
 763:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 764:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1515              		.loc 1 764 0
 1516 0012 7B68     		ldr	r3, [r7, #4]
 1517 0014 5B6D     		ldr	r3, [r3, #84]
 1518 0016 BB60     		str	r3, [r7, #8]
 765:../Dave/Generated/src/ADC003/ADC003.c **** 
 766:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1519              		.loc 1 766 0
 1520 0018 7B68     		ldr	r3, [r7, #4]
 1521 001a 5B6A     		ldr	r3, [r3, #36]
 1522 001c 1B78     		ldrb	r3, [r3]
 1523 001e 012B     		cmp	r3, #1
 1524 0020 1DD1     		bne	.L73
 767:../Dave/Generated/src/ADC003/ADC003.c ****   {
 768:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kActiveChannels[channel] == (uint8_t)1)
 1525              		.loc 1 768 0
 1526 0022 FB1C     		add	r3, r7, #3
 1527 0024 1A78     		ldrb	r2, [r3]
 1528 0026 7968     		ldr	r1, [r7, #4]
 1529 0028 0823     		mov	r3, #8
 1530 002a 8A18     		add	r2, r1, r2
 1531 002c D318     		add	r3, r2, r3
 1532 002e DB78     		ldrb	r3, [r3, #3]
 1533 0030 012B     		cmp	r3, #1
 1534 0032 12D1     		bne	.L74
 769:../Dave/Generated/src/ADC003/ADC003.c ****     {
 770:../Dave/Generated/src/ADC003/ADC003.c ****       /*set the channel*/
 771:../Dave/Generated/src/ADC003/ADC003.c ****       VADCGroupPtr->ASPND |= ((uint32_t)1<<channel);
 1535              		.loc 1 771 0
 1536 0034 BA68     		ldr	r2, [r7, #8]
 1537 0036 9623     		mov	r3, #150
 1538 0038 5B00     		lsl	r3, r3, #1
 1539 003a D258     		ldr	r2, [r2, r3]
 1540 003c FB1C     		add	r3, r7, #3
 1541 003e 1B78     		ldrb	r3, [r3]
 1542 0040 0121     		mov	r1, #1
 1543 0042 081C     		mov	r0, r1
 1544 0044 9840     		lsl	r0, r0, r3
 1545 0046 031C     		mov	r3, r0
 1546 0048 111C     		mov	r1, r2
 1547 004a 1943     		orr	r1, r3
 1548 004c BA68     		ldr	r2, [r7, #8]
 1549 004e 9623     		mov	r3, #150
 1550 0050 5B00     		lsl	r3, r3, #1
 1551 0052 D150     		str	r1, [r2, r3]
 772:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1552              		.loc 1 772 0
 1553 0054 0023     		mov	r3, #0
 1554 0056 FB60     		str	r3, [r7, #12]
 1555 0058 01E0     		b	.L73
 1556              	.L74:
 773:../Dave/Generated/src/ADC003/ADC003.c ****     }
 774:../Dave/Generated/src/ADC003/ADC003.c ****     else
 775:../Dave/Generated/src/ADC003/ADC003.c ****     {
 776:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1557              		.loc 1 776 0
 1558 005a 0223     		mov	r3, #2
 1559 005c FB60     		str	r3, [r7, #12]
 1560              	.L73:
 777:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 778:../Dave/Generated/src/ADC003/ADC003.c ****     }
 779:../Dave/Generated/src/ADC003/ADC003.c ****   }
 780:../Dave/Generated/src/ADC003/ADC003.c ****   else
 781:../Dave/Generated/src/ADC003/ADC003.c ****   {
 782:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 783:../Dave/Generated/src/ADC003/ADC003.c ****   }
 784:../Dave/Generated/src/ADC003/ADC003.c **** 
 785:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1561              		.loc 1 785 0
 1562 005e FB68     		ldr	r3, [r7, #12]
 786:../Dave/Generated/src/ADC003/ADC003.c **** }
 1563              		.loc 1 786 0
 1564 0060 181C     		mov	r0, r3
 1565 0062 BD46     		mov	sp, r7
 1566 0064 04B0     		add	sp, sp, #16
 1567              		@ sp needed for prologue
 1568 0066 80BD     		pop	{r7, pc}
 1569              		.cfi_endproc
 1570              	.LFE57:
 1572              		.section	.text.ADC003_ClearPendingChannel,"ax",%progbits
 1573              		.align	2
 1574              		.global	ADC003_ClearPendingChannel
 1575              		.code	16
 1576              		.thumb_func
 1578              	ADC003_ClearPendingChannel:
 1579              	.LFB58:
 787:../Dave/Generated/src/ADC003/ADC003.c **** 
 788:../Dave/Generated/src/ADC003/ADC003.c **** /*
 789:../Dave/Generated/src/ADC003/ADC003.c ****  *This function clears the required channel in channel pending register.
 790:../Dave/Generated/src/ADC003/ADC003.c ****  */
 791:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_ClearPendingChannel(const ADC003_HandleType *HandlePtr,
 792:../Dave/Generated/src/ADC003/ADC003.c ****                                                                 uint8_t channel)
 793:../Dave/Generated/src/ADC003/ADC003.c **** {
 1580              		.loc 1 793 0
 1581              		.cfi_startproc
 1582 0000 80B5     		push	{r7, lr}
 1583              	.LCFI59:
 1584              		.cfi_def_cfa_offset 8
 1585              		.cfi_offset 7, -8
 1586              		.cfi_offset 14, -4
 1587 0002 84B0     		sub	sp, sp, #16
 1588              	.LCFI60:
 1589              		.cfi_def_cfa_offset 24
 1590 0004 00AF     		add	r7, sp, #0
 1591              	.LCFI61:
 1592              		.cfi_def_cfa_register 7
 1593 0006 7860     		str	r0, [r7, #4]
 1594 0008 0A1C     		mov	r2, r1
 1595 000a FB1C     		add	r3, r7, #3
 1596 000c 1A70     		strb	r2, [r3]
 794:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1597              		.loc 1 794 0
 1598 000e 0123     		mov	r3, #1
 1599 0010 FB60     		str	r3, [r7, #12]
 795:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 796:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1600              		.loc 1 796 0
 1601 0012 7B68     		ldr	r3, [r7, #4]
 1602 0014 5B6D     		ldr	r3, [r3, #84]
 1603 0016 BB60     		str	r3, [r7, #8]
 797:../Dave/Generated/src/ADC003/ADC003.c **** 
 798:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1604              		.loc 1 798 0
 1605 0018 7B68     		ldr	r3, [r7, #4]
 1606 001a 5B6A     		ldr	r3, [r3, #36]
 1607 001c 1B78     		ldrb	r3, [r3]
 1608 001e 012B     		cmp	r3, #1
 1609 0020 1ED1     		bne	.L77
 799:../Dave/Generated/src/ADC003/ADC003.c ****   {
 800:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kActiveChannels[channel] == (uint8_t)1)
 1610              		.loc 1 800 0
 1611 0022 FB1C     		add	r3, r7, #3
 1612 0024 1A78     		ldrb	r2, [r3]
 1613 0026 7968     		ldr	r1, [r7, #4]
 1614 0028 0823     		mov	r3, #8
 1615 002a 8A18     		add	r2, r1, r2
 1616 002c D318     		add	r3, r2, r3
 1617 002e DB78     		ldrb	r3, [r3, #3]
 1618 0030 012B     		cmp	r3, #1
 1619 0032 13D1     		bne	.L78
 801:../Dave/Generated/src/ADC003/ADC003.c ****     {
 802:../Dave/Generated/src/ADC003/ADC003.c ****       /*clears the channel*/
 803:../Dave/Generated/src/ADC003/ADC003.c ****       VADCGroupPtr->ASPND &= ~((uint32_t)1<<channel);
 1620              		.loc 1 803 0
 1621 0034 BA68     		ldr	r2, [r7, #8]
 1622 0036 9623     		mov	r3, #150
 1623 0038 5B00     		lsl	r3, r3, #1
 1624 003a D358     		ldr	r3, [r2, r3]
 1625 003c FA1C     		add	r2, r7, #3
 1626 003e 1278     		ldrb	r2, [r2]
 1627 0040 0121     		mov	r1, #1
 1628 0042 081C     		mov	r0, r1
 1629 0044 9040     		lsl	r0, r0, r2
 1630 0046 021C     		mov	r2, r0
 1631 0048 D243     		mvn	r2, r2
 1632 004a 111C     		mov	r1, r2
 1633 004c 1940     		and	r1, r3
 1634 004e BA68     		ldr	r2, [r7, #8]
 1635 0050 9623     		mov	r3, #150
 1636 0052 5B00     		lsl	r3, r3, #1
 1637 0054 D150     		str	r1, [r2, r3]
 804:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1638              		.loc 1 804 0
 1639 0056 0023     		mov	r3, #0
 1640 0058 FB60     		str	r3, [r7, #12]
 1641 005a 01E0     		b	.L77
 1642              	.L78:
 805:../Dave/Generated/src/ADC003/ADC003.c ****     }
 806:../Dave/Generated/src/ADC003/ADC003.c ****     else
 807:../Dave/Generated/src/ADC003/ADC003.c ****     {
 808:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1643              		.loc 1 808 0
 1644 005c 0223     		mov	r3, #2
 1645 005e FB60     		str	r3, [r7, #12]
 1646              	.L77:
 809:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 810:../Dave/Generated/src/ADC003/ADC003.c ****     }
 811:../Dave/Generated/src/ADC003/ADC003.c ****   }
 812:../Dave/Generated/src/ADC003/ADC003.c ****   else
 813:../Dave/Generated/src/ADC003/ADC003.c ****   {
 814:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 815:../Dave/Generated/src/ADC003/ADC003.c ****   }
 816:../Dave/Generated/src/ADC003/ADC003.c **** 
 817:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1647              		.loc 1 817 0
 1648 0060 FB68     		ldr	r3, [r7, #12]
 818:../Dave/Generated/src/ADC003/ADC003.c **** }
 1649              		.loc 1 818 0
 1650 0062 181C     		mov	r0, r3
 1651 0064 BD46     		mov	sp, r7
 1652 0066 04B0     		add	sp, sp, #16
 1653              		@ sp needed for prologue
 1654 0068 80BD     		pop	{r7, pc}
 1655              		.cfi_endproc
 1656              	.LFE58:
 1658 006a C046     		.section	.text.ADC003_SetConversionMode,"ax",%progbits
 1659              		.align	2
 1660              		.global	ADC003_SetConversionMode
 1661              		.code	16
 1662              		.thumb_func
 1664              	ADC003_SetConversionMode:
 1665              	.LFB59:
 819:../Dave/Generated/src/ADC003/ADC003.c **** 
 820:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_SetConversionMode(
 821:../Dave/Generated/src/ADC003/ADC003.c ****                       const ADC003_HandleType *HandlePtr,uint8_t ConversionMode)
 822:../Dave/Generated/src/ADC003/ADC003.c **** {
 1666              		.loc 1 822 0
 1667              		.cfi_startproc
 1668 0000 80B5     		push	{r7, lr}
 1669              	.LCFI62:
 1670              		.cfi_def_cfa_offset 8
 1671              		.cfi_offset 7, -8
 1672              		.cfi_offset 14, -4
 1673 0002 84B0     		sub	sp, sp, #16
 1674              	.LCFI63:
 1675              		.cfi_def_cfa_offset 24
 1676 0004 00AF     		add	r7, sp, #0
 1677              	.LCFI64:
 1678              		.cfi_def_cfa_register 7
 1679 0006 7860     		str	r0, [r7, #4]
 1680 0008 0A1C     		mov	r2, r1
 1681 000a FB1C     		add	r3, r7, #3
 1682 000c 1A70     		strb	r2, [r3]
 823:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1683              		.loc 1 823 0
 1684 000e 0123     		mov	r3, #1
 1685 0010 FB60     		str	r3, [r7, #12]
 824:../Dave/Generated/src/ADC003/ADC003.c **** 
 825:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1686              		.loc 1 825 0
 1687 0012 7B68     		ldr	r3, [r7, #4]
 1688 0014 5B6A     		ldr	r3, [r3, #36]
 1689 0016 1B78     		ldrb	r3, [r3]
 1690 0018 012B     		cmp	r3, #1
 1691 001a 10D1     		bne	.L81
 826:../Dave/Generated/src/ADC003/ADC003.c ****   {
 827:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kGroup_HandlePtr != NULL)
 1692              		.loc 1 827 0
 1693 001c 7B68     		ldr	r3, [r7, #4]
 1694 001e 9B6A     		ldr	r3, [r3, #40]
 1695 0020 002B     		cmp	r3, #0
 1696 0022 0AD0     		beq	.L82
 828:../Dave/Generated/src/ADC003/ADC003.c ****     {
 829:../Dave/Generated/src/ADC003/ADC003.c ****       /* Set standard conversion mode */
 830:../Dave/Generated/src/ADC003/ADC003.c ****       Status = ADCGROUP001_SetGroupClass1ConvMode(
 831:../Dave/Generated/src/ADC003/ADC003.c ****                                     HandlePtr->kGroup_HandlePtr,ConversionMode);
 1697              		.loc 1 831 0
 1698 0024 7B68     		ldr	r3, [r7, #4]
 830:../Dave/Generated/src/ADC003/ADC003.c ****       Status = ADCGROUP001_SetGroupClass1ConvMode(
 1699              		.loc 1 830 0
 1700 0026 9A6A     		ldr	r2, [r3, #40]
 1701 0028 FB1C     		add	r3, r7, #3
 1702 002a 1B78     		ldrb	r3, [r3]
 1703 002c 101C     		mov	r0, r2
 1704 002e 191C     		mov	r1, r3
 1705 0030 FFF7FEFF 		bl	ADCGROUP001_SetGroupClass1ConvMode
 1706 0034 031C     		mov	r3, r0
 1707 0036 FB60     		str	r3, [r7, #12]
 1708 0038 01E0     		b	.L81
 1709              	.L82:
 832:../Dave/Generated/src/ADC003/ADC003.c ****     }
 833:../Dave/Generated/src/ADC003/ADC003.c ****     else
 834:../Dave/Generated/src/ADC003/ADC003.c ****     {
 835:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1710              		.loc 1 835 0
 1711 003a 0223     		mov	r3, #2
 1712 003c FB60     		str	r3, [r7, #12]
 1713              	.L81:
 836:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 837:../Dave/Generated/src/ADC003/ADC003.c ****     }
 838:../Dave/Generated/src/ADC003/ADC003.c ****   }
 839:../Dave/Generated/src/ADC003/ADC003.c ****   else
 840:../Dave/Generated/src/ADC003/ADC003.c ****   {
 841:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 842:../Dave/Generated/src/ADC003/ADC003.c ****   }
 843:../Dave/Generated/src/ADC003/ADC003.c **** 
 844:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1714              		.loc 1 844 0
 1715 003e FB68     		ldr	r3, [r7, #12]
 845:../Dave/Generated/src/ADC003/ADC003.c **** }
 1716              		.loc 1 845 0
 1717 0040 181C     		mov	r0, r3
 1718 0042 BD46     		mov	sp, r7
 1719 0044 04B0     		add	sp, sp, #16
 1720              		@ sp needed for prologue
 1721 0046 80BD     		pop	{r7, pc}
 1722              		.cfi_endproc
 1723              	.LFE59:
 1725              		.section	.text.ADC003_SetSampleTime,"ax",%progbits
 1726              		.align	2
 1727              		.global	ADC003_SetSampleTime
 1728              		.code	16
 1729              		.thumb_func
 1731              	ADC003_SetSampleTime:
 1732              	.LFB60:
 846:../Dave/Generated/src/ADC003/ADC003.c **** 
 847:../Dave/Generated/src/ADC003/ADC003.c **** 
 848:../Dave/Generated/src/ADC003/ADC003.c **** /*
 849:../Dave/Generated/src/ADC003/ADC003.c ****  * This function sets sample time for standard conversion.
 850:../Dave/Generated/src/ADC003/ADC003.c ****  */
 851:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_SetSampleTime(
 852:../Dave/Generated/src/ADC003/ADC003.c ****                           const ADC003_HandleType *HandlePtr,uint8_t SampleTime)
 853:../Dave/Generated/src/ADC003/ADC003.c **** {
 1733              		.loc 1 853 0
 1734              		.cfi_startproc
 1735 0000 80B5     		push	{r7, lr}
 1736              	.LCFI65:
 1737              		.cfi_def_cfa_offset 8
 1738              		.cfi_offset 7, -8
 1739              		.cfi_offset 14, -4
 1740 0002 84B0     		sub	sp, sp, #16
 1741              	.LCFI66:
 1742              		.cfi_def_cfa_offset 24
 1743 0004 00AF     		add	r7, sp, #0
 1744              	.LCFI67:
 1745              		.cfi_def_cfa_register 7
 1746 0006 7860     		str	r0, [r7, #4]
 1747 0008 0A1C     		mov	r2, r1
 1748 000a FB1C     		add	r3, r7, #3
 1749 000c 1A70     		strb	r2, [r3]
 854:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1750              		.loc 1 854 0
 1751 000e 0123     		mov	r3, #1
 1752 0010 FB60     		str	r3, [r7, #12]
 855:../Dave/Generated/src/ADC003/ADC003.c **** 
 856:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1753              		.loc 1 856 0
 1754 0012 7B68     		ldr	r3, [r7, #4]
 1755 0014 5B6A     		ldr	r3, [r3, #36]
 1756 0016 1B78     		ldrb	r3, [r3]
 1757 0018 012B     		cmp	r3, #1
 1758 001a 10D1     		bne	.L85
 857:../Dave/Generated/src/ADC003/ADC003.c ****   {
 858:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kGroup_HandlePtr != NULL)
 1759              		.loc 1 858 0
 1760 001c 7B68     		ldr	r3, [r7, #4]
 1761 001e 9B6A     		ldr	r3, [r3, #40]
 1762 0020 002B     		cmp	r3, #0
 1763 0022 0AD0     		beq	.L86
 859:../Dave/Generated/src/ADC003/ADC003.c ****     {
 860:../Dave/Generated/src/ADC003/ADC003.c ****       /* Set sample time for standard conversion. */
 861:../Dave/Generated/src/ADC003/ADC003.c ****       Status = ADCGROUP001_SetGroupClass1SampleTime(
 862:../Dave/Generated/src/ADC003/ADC003.c ****                                         HandlePtr->kGroup_HandlePtr,SampleTime);
 1764              		.loc 1 862 0
 1765 0024 7B68     		ldr	r3, [r7, #4]
 861:../Dave/Generated/src/ADC003/ADC003.c ****       Status = ADCGROUP001_SetGroupClass1SampleTime(
 1766              		.loc 1 861 0
 1767 0026 9A6A     		ldr	r2, [r3, #40]
 1768 0028 FB1C     		add	r3, r7, #3
 1769 002a 1B78     		ldrb	r3, [r3]
 1770 002c 101C     		mov	r0, r2
 1771 002e 191C     		mov	r1, r3
 1772 0030 FFF7FEFF 		bl	ADCGROUP001_SetGroupClass1SampleTime
 1773 0034 031C     		mov	r3, r0
 1774 0036 FB60     		str	r3, [r7, #12]
 1775 0038 01E0     		b	.L85
 1776              	.L86:
 863:../Dave/Generated/src/ADC003/ADC003.c ****     }
 864:../Dave/Generated/src/ADC003/ADC003.c ****     else
 865:../Dave/Generated/src/ADC003/ADC003.c ****     {
 866:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1777              		.loc 1 866 0
 1778 003a 0223     		mov	r3, #2
 1779 003c FB60     		str	r3, [r7, #12]
 1780              	.L85:
 867:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 868:../Dave/Generated/src/ADC003/ADC003.c ****     }
 869:../Dave/Generated/src/ADC003/ADC003.c ****   }
 870:../Dave/Generated/src/ADC003/ADC003.c ****   else
 871:../Dave/Generated/src/ADC003/ADC003.c ****   {
 872:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 873:../Dave/Generated/src/ADC003/ADC003.c ****   }
 874:../Dave/Generated/src/ADC003/ADC003.c **** 
 875:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1781              		.loc 1 875 0
 1782 003e FB68     		ldr	r3, [r7, #12]
 876:../Dave/Generated/src/ADC003/ADC003.c **** }
 1783              		.loc 1 876 0
 1784 0040 181C     		mov	r0, r3
 1785 0042 BD46     		mov	sp, r7
 1786 0044 04B0     		add	sp, sp, #16
 1787              		@ sp needed for prologue
 1788 0046 80BD     		pop	{r7, pc}
 1789              		.cfi_endproc
 1790              	.LFE60:
 1792              		.section	.text.ADC003_SetEMUXConversionMode,"ax",%progbits
 1793              		.align	2
 1794              		.global	ADC003_SetEMUXConversionMode
 1795              		.code	16
 1796              		.thumb_func
 1798              	ADC003_SetEMUXConversionMode:
 1799              	.LFB61:
 877:../Dave/Generated/src/ADC003/ADC003.c **** 
 878:../Dave/Generated/src/ADC003/ADC003.c **** 
 879:../Dave/Generated/src/ADC003/ADC003.c **** /*
 880:../Dave/Generated/src/ADC003/ADC003.c ****  * This function sets EMUX conversion mode.
 881:../Dave/Generated/src/ADC003/ADC003.c ****  */
 882:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_SetEMUXConversionMode(
 883:../Dave/Generated/src/ADC003/ADC003.c ****                       const ADC003_HandleType *HandlePtr,uint8_t ConversionMode)
 884:../Dave/Generated/src/ADC003/ADC003.c **** {
 1800              		.loc 1 884 0
 1801              		.cfi_startproc
 1802 0000 80B5     		push	{r7, lr}
 1803              	.LCFI68:
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 7, -8
 1806              		.cfi_offset 14, -4
 1807 0002 84B0     		sub	sp, sp, #16
 1808              	.LCFI69:
 1809              		.cfi_def_cfa_offset 24
 1810 0004 00AF     		add	r7, sp, #0
 1811              	.LCFI70:
 1812              		.cfi_def_cfa_register 7
 1813 0006 7860     		str	r0, [r7, #4]
 1814 0008 0A1C     		mov	r2, r1
 1815 000a FB1C     		add	r3, r7, #3
 1816 000c 1A70     		strb	r2, [r3]
 885:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1817              		.loc 1 885 0
 1818 000e 0123     		mov	r3, #1
 1819 0010 FB60     		str	r3, [r7, #12]
 886:../Dave/Generated/src/ADC003/ADC003.c **** 
 887:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1820              		.loc 1 887 0
 1821 0012 7B68     		ldr	r3, [r7, #4]
 1822 0014 5B6A     		ldr	r3, [r3, #36]
 1823 0016 1B78     		ldrb	r3, [r3]
 1824 0018 012B     		cmp	r3, #1
 1825 001a 10D1     		bne	.L89
 888:../Dave/Generated/src/ADC003/ADC003.c ****   {
 889:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kGroup_HandlePtr != NULL)
 1826              		.loc 1 889 0
 1827 001c 7B68     		ldr	r3, [r7, #4]
 1828 001e 9B6A     		ldr	r3, [r3, #40]
 1829 0020 002B     		cmp	r3, #0
 1830 0022 0AD0     		beq	.L90
 890:../Dave/Generated/src/ADC003/ADC003.c ****     {
 891:../Dave/Generated/src/ADC003/ADC003.c ****       /* Set EMUX conversion mode */
 892:../Dave/Generated/src/ADC003/ADC003.c ****       Status = ADCGROUP001_SetGroupClass1EmuxConvMode(
 893:../Dave/Generated/src/ADC003/ADC003.c ****                                                    HandlePtr->kGroup_HandlePtr,
 1831              		.loc 1 893 0
 1832 0024 7B68     		ldr	r3, [r7, #4]
 892:../Dave/Generated/src/ADC003/ADC003.c ****       Status = ADCGROUP001_SetGroupClass1EmuxConvMode(
 1833              		.loc 1 892 0
 1834 0026 9A6A     		ldr	r2, [r3, #40]
 1835 0028 FB1C     		add	r3, r7, #3
 1836 002a 1B78     		ldrb	r3, [r3]
 1837 002c 101C     		mov	r0, r2
 1838 002e 191C     		mov	r1, r3
 1839 0030 FFF7FEFF 		bl	ADCGROUP001_SetGroupClass1EmuxConvMode
 1840 0034 031C     		mov	r3, r0
 1841 0036 FB60     		str	r3, [r7, #12]
 1842 0038 01E0     		b	.L89
 1843              	.L90:
 894:../Dave/Generated/src/ADC003/ADC003.c ****                                                                 ConversionMode);
 895:../Dave/Generated/src/ADC003/ADC003.c ****     }
 896:../Dave/Generated/src/ADC003/ADC003.c ****     else
 897:../Dave/Generated/src/ADC003/ADC003.c ****     {
 898:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1844              		.loc 1 898 0
 1845 003a 0223     		mov	r3, #2
 1846 003c FB60     		str	r3, [r7, #12]
 1847              	.L89:
 899:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 900:../Dave/Generated/src/ADC003/ADC003.c ****     }
 901:../Dave/Generated/src/ADC003/ADC003.c ****   }
 902:../Dave/Generated/src/ADC003/ADC003.c ****   else
 903:../Dave/Generated/src/ADC003/ADC003.c ****   {
 904:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 905:../Dave/Generated/src/ADC003/ADC003.c ****   }
 906:../Dave/Generated/src/ADC003/ADC003.c **** 
 907:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1848              		.loc 1 907 0
 1849 003e FB68     		ldr	r3, [r7, #12]
 908:../Dave/Generated/src/ADC003/ADC003.c **** }
 1850              		.loc 1 908 0
 1851 0040 181C     		mov	r0, r3
 1852 0042 BD46     		mov	sp, r7
 1853 0044 04B0     		add	sp, sp, #16
 1854              		@ sp needed for prologue
 1855 0046 80BD     		pop	{r7, pc}
 1856              		.cfi_endproc
 1857              	.LFE61:
 1859              		.section	.text.ADC003_EMUXSetSampleTime,"ax",%progbits
 1860              		.align	2
 1861              		.global	ADC003_EMUXSetSampleTime
 1862              		.code	16
 1863              		.thumb_func
 1865              	ADC003_EMUXSetSampleTime:
 1866              	.LFB62:
 909:../Dave/Generated/src/ADC003/ADC003.c **** 
 910:../Dave/Generated/src/ADC003/ADC003.c **** 
 911:../Dave/Generated/src/ADC003/ADC003.c **** /*
 912:../Dave/Generated/src/ADC003/ADC003.c ****  * This function sets sample time for EMUX conversion.
 913:../Dave/Generated/src/ADC003/ADC003.c ****  */
 914:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_EMUXSetSampleTime(const ADC003_HandleType *HandlePtr,
 915:../Dave/Generated/src/ADC003/ADC003.c ****                                                              uint8_t SampleTime)
 916:../Dave/Generated/src/ADC003/ADC003.c **** {
 1867              		.loc 1 916 0
 1868              		.cfi_startproc
 1869 0000 80B5     		push	{r7, lr}
 1870              	.LCFI71:
 1871              		.cfi_def_cfa_offset 8
 1872              		.cfi_offset 7, -8
 1873              		.cfi_offset 14, -4
 1874 0002 84B0     		sub	sp, sp, #16
 1875              	.LCFI72:
 1876              		.cfi_def_cfa_offset 24
 1877 0004 00AF     		add	r7, sp, #0
 1878              	.LCFI73:
 1879              		.cfi_def_cfa_register 7
 1880 0006 7860     		str	r0, [r7, #4]
 1881 0008 0A1C     		mov	r2, r1
 1882 000a FB1C     		add	r3, r7, #3
 1883 000c 1A70     		strb	r2, [r3]
 917:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1884              		.loc 1 917 0
 1885 000e 0123     		mov	r3, #1
 1886 0010 FB60     		str	r3, [r7, #12]
 918:../Dave/Generated/src/ADC003/ADC003.c **** 
 919:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1887              		.loc 1 919 0
 1888 0012 7B68     		ldr	r3, [r7, #4]
 1889 0014 5B6A     		ldr	r3, [r3, #36]
 1890 0016 1B78     		ldrb	r3, [r3]
 1891 0018 012B     		cmp	r3, #1
 1892 001a 10D1     		bne	.L93
 920:../Dave/Generated/src/ADC003/ADC003.c ****   {
 921:../Dave/Generated/src/ADC003/ADC003.c ****     if(HandlePtr->kGroup_HandlePtr != NULL)
 1893              		.loc 1 921 0
 1894 001c 7B68     		ldr	r3, [r7, #4]
 1895 001e 9B6A     		ldr	r3, [r3, #40]
 1896 0020 002B     		cmp	r3, #0
 1897 0022 0AD0     		beq	.L94
 922:../Dave/Generated/src/ADC003/ADC003.c ****     {
 923:../Dave/Generated/src/ADC003/ADC003.c ****       /* Set sample time for EMUX conversion*/
 924:../Dave/Generated/src/ADC003/ADC003.c ****       Status = ADCGROUP001_SetGroupClass1EmuxSampleTime( HandlePtr->kGroup_HandlePtr, SampleTime);
 1898              		.loc 1 924 0
 1899 0024 7B68     		ldr	r3, [r7, #4]
 1900 0026 9A6A     		ldr	r2, [r3, #40]
 1901 0028 FB1C     		add	r3, r7, #3
 1902 002a 1B78     		ldrb	r3, [r3]
 1903 002c 101C     		mov	r0, r2
 1904 002e 191C     		mov	r1, r3
 1905 0030 FFF7FEFF 		bl	ADCGROUP001_SetGroupClass1EmuxSampleTime
 1906 0034 031C     		mov	r3, r0
 1907 0036 FB60     		str	r3, [r7, #12]
 1908 0038 01E0     		b	.L93
 1909              	.L94:
 925:../Dave/Generated/src/ADC003/ADC003.c ****     }
 926:../Dave/Generated/src/ADC003/ADC003.c ****     else
 927:../Dave/Generated/src/ADC003/ADC003.c ****     {
 928:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1910              		.loc 1 928 0
 1911 003a 0223     		mov	r3, #2
 1912 003c FB60     		str	r3, [r7, #12]
 1913              	.L93:
 929:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 930:../Dave/Generated/src/ADC003/ADC003.c ****     }
 931:../Dave/Generated/src/ADC003/ADC003.c ****   }
 932:../Dave/Generated/src/ADC003/ADC003.c ****   else
 933:../Dave/Generated/src/ADC003/ADC003.c ****   {
 934:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 935:../Dave/Generated/src/ADC003/ADC003.c ****   }
 936:../Dave/Generated/src/ADC003/ADC003.c **** 
 937:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1914              		.loc 1 937 0
 1915 003e FB68     		ldr	r3, [r7, #12]
 938:../Dave/Generated/src/ADC003/ADC003.c **** }
 1916              		.loc 1 938 0
 1917 0040 181C     		mov	r0, r3
 1918 0042 BD46     		mov	sp, r7
 1919 0044 04B0     		add	sp, sp, #16
 1920              		@ sp needed for prologue
 1921 0046 80BD     		pop	{r7, pc}
 1922              		.cfi_endproc
 1923              	.LFE62:
 1925              		.section	.text.ADC003_GetSourceEventFlag,"ax",%progbits
 1926              		.align	2
 1927              		.global	ADC003_GetSourceEventFlag
 1928              		.code	16
 1929              		.thumb_func
 1931              	ADC003_GetSourceEventFlag:
 1932              	.LFB63:
 939:../Dave/Generated/src/ADC003/ADC003.c **** 
 940:../Dave/Generated/src/ADC003/ADC003.c **** /* This function gets the Source Event flag. */
 941:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_GetSourceEventFlag(const ADC003_HandleType *HandlePtr,
 942:../Dave/Generated/src/ADC003/ADC003.c ****                                                             uint8_t *Flagptr)
 943:../Dave/Generated/src/ADC003/ADC003.c **** {
 1933              		.loc 1 943 0
 1934              		.cfi_startproc
 1935 0000 80B5     		push	{r7, lr}
 1936              	.LCFI74:
 1937              		.cfi_def_cfa_offset 8
 1938              		.cfi_offset 7, -8
 1939              		.cfi_offset 14, -4
 1940 0002 84B0     		sub	sp, sp, #16
 1941              	.LCFI75:
 1942              		.cfi_def_cfa_offset 24
 1943 0004 00AF     		add	r7, sp, #0
 1944              	.LCFI76:
 1945              		.cfi_def_cfa_register 7
 1946 0006 7860     		str	r0, [r7, #4]
 1947 0008 3960     		str	r1, [r7]
 944:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 1948              		.loc 1 944 0
 1949 000a 0123     		mov	r3, #1
 1950 000c FB60     		str	r3, [r7, #12]
 945:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 946:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1951              		.loc 1 946 0
 1952 000e 7B68     		ldr	r3, [r7, #4]
 1953 0010 5B6D     		ldr	r3, [r3, #84]
 1954 0012 BB60     		str	r3, [r7, #8]
 947:../Dave/Generated/src/ADC003/ADC003.c **** 
 948:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 1955              		.loc 1 948 0
 1956 0014 7B68     		ldr	r3, [r7, #4]
 1957 0016 5B6A     		ldr	r3, [r3, #36]
 1958 0018 1B78     		ldrb	r3, [r3]
 1959 001a 012B     		cmp	r3, #1
 1960 001c 11D1     		bne	.L97
 949:../Dave/Generated/src/ADC003/ADC003.c ****   {
 950:../Dave/Generated/src/ADC003/ADC003.c ****     if(Flagptr != NULL)
 1961              		.loc 1 950 0
 1962 001e 3B68     		ldr	r3, [r7]
 1963 0020 002B     		cmp	r3, #0
 1964 0022 0CD0     		beq	.L98
 951:../Dave/Generated/src/ADC003/ADC003.c ****     {
 952:../Dave/Generated/src/ADC003/ADC003.c ****       /* Gets event flag */
 953:../Dave/Generated/src/ADC003/ADC003.c ****       *Flagptr = (uint8_t)RD_REG( VADCGroupPtr->SEFLAG, VADC_G_SEFLAG_SEV1_Msk, VADC_G_SEFLAG_SEV1_
 1965              		.loc 1 953 0
 1966 0024 BA68     		ldr	r2, [r7, #8]
 1967 0026 C423     		mov	r3, #196
 1968 0028 5B00     		lsl	r3, r3, #1
 1969 002a D258     		ldr	r2, [r2, r3]
 1970 002c 0223     		mov	r3, #2
 1971 002e 1340     		and	r3, r2
 1972 0030 5B08     		lsr	r3, r3, #1
 1973 0032 DAB2     		uxtb	r2, r3
 1974 0034 3B68     		ldr	r3, [r7]
 1975 0036 1A70     		strb	r2, [r3]
 954:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1976              		.loc 1 954 0
 1977 0038 0023     		mov	r3, #0
 1978 003a FB60     		str	r3, [r7, #12]
 1979 003c 01E0     		b	.L97
 1980              	.L98:
 955:../Dave/Generated/src/ADC003/ADC003.c ****     }
 956:../Dave/Generated/src/ADC003/ADC003.c ****     else
 957:../Dave/Generated/src/ADC003/ADC003.c ****     {
 958:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)ADC003_INVALID_PARAM_ERROR;
 1981              		.loc 1 958 0
 1982 003e 0223     		mov	r3, #2
 1983 0040 FB60     		str	r3, [r7, #12]
 1984              	.L97:
 959:../Dave/Generated/src/ADC003/ADC003.c ****       DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 960:../Dave/Generated/src/ADC003/ADC003.c ****     }
 961:../Dave/Generated/src/ADC003/ADC003.c ****   }
 962:../Dave/Generated/src/ADC003/ADC003.c ****   else
 963:../Dave/Generated/src/ADC003/ADC003.c ****   {
 964:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 965:../Dave/Generated/src/ADC003/ADC003.c ****   }
 966:../Dave/Generated/src/ADC003/ADC003.c **** 
 967:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 1985              		.loc 1 967 0
 1986 0042 FB68     		ldr	r3, [r7, #12]
 968:../Dave/Generated/src/ADC003/ADC003.c **** }
 1987              		.loc 1 968 0
 1988 0044 181C     		mov	r0, r3
 1989 0046 BD46     		mov	sp, r7
 1990 0048 04B0     		add	sp, sp, #16
 1991              		@ sp needed for prologue
 1992 004a 80BD     		pop	{r7, pc}
 1993              		.cfi_endproc
 1994              	.LFE63:
 1996              		.section	.text.ADC003_SetSourceEventFlag,"ax",%progbits
 1997              		.align	2
 1998              		.global	ADC003_SetSourceEventFlag
 1999              		.code	16
 2000              		.thumb_func
 2002              	ADC003_SetSourceEventFlag:
 2003              	.LFB64:
 969:../Dave/Generated/src/ADC003/ADC003.c **** 
 970:../Dave/Generated/src/ADC003/ADC003.c **** /* This function sets the Event flag. */
 971:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_SetSourceEventFlag(const ADC003_HandleType *HandlePtr)
 972:../Dave/Generated/src/ADC003/ADC003.c **** {
 2004              		.loc 1 972 0
 2005              		.cfi_startproc
 2006 0000 80B5     		push	{r7, lr}
 2007              	.LCFI77:
 2008              		.cfi_def_cfa_offset 8
 2009              		.cfi_offset 7, -8
 2010              		.cfi_offset 14, -4
 2011 0002 84B0     		sub	sp, sp, #16
 2012              	.LCFI78:
 2013              		.cfi_def_cfa_offset 24
 2014 0004 00AF     		add	r7, sp, #0
 2015              	.LCFI79:
 2016              		.cfi_def_cfa_register 7
 2017 0006 7860     		str	r0, [r7, #4]
 973:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 2018              		.loc 1 973 0
 2019 0008 0123     		mov	r3, #1
 2020 000a FB60     		str	r3, [r7, #12]
 974:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 975:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 2021              		.loc 1 975 0
 2022 000c 7B68     		ldr	r3, [r7, #4]
 2023 000e 5B6D     		ldr	r3, [r3, #84]
 2024 0010 BB60     		str	r3, [r7, #8]
 976:../Dave/Generated/src/ADC003/ADC003.c **** 
 977:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 2025              		.loc 1 977 0
 2026 0012 7B68     		ldr	r3, [r7, #4]
 2027 0014 5B6A     		ldr	r3, [r3, #36]
 2028 0016 1B78     		ldrb	r3, [r3]
 2029 0018 012B     		cmp	r3, #1
 2030 001a 0CD1     		bne	.L101
 978:../Dave/Generated/src/ADC003/ADC003.c ****   {
 979:../Dave/Generated/src/ADC003/ADC003.c ****     /* Sets event flag */
 980:../Dave/Generated/src/ADC003/ADC003.c ****     SET_BIT(VADCGroupPtr->SEFLAG, VADC_G_SEFLAG_SEV1_Pos);
 2031              		.loc 1 980 0
 2032 001c BA68     		ldr	r2, [r7, #8]
 2033 001e C423     		mov	r3, #196
 2034 0020 5B00     		lsl	r3, r3, #1
 2035 0022 D358     		ldr	r3, [r2, r3]
 2036 0024 0222     		mov	r2, #2
 2037 0026 111C     		mov	r1, r2
 2038 0028 1943     		orr	r1, r3
 2039 002a BA68     		ldr	r2, [r7, #8]
 2040 002c C423     		mov	r3, #196
 2041 002e 5B00     		lsl	r3, r3, #1
 2042 0030 D150     		str	r1, [r2, r3]
 981:../Dave/Generated/src/ADC003/ADC003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2043              		.loc 1 981 0
 2044 0032 0023     		mov	r3, #0
 2045 0034 FB60     		str	r3, [r7, #12]
 2046              	.L101:
 982:../Dave/Generated/src/ADC003/ADC003.c ****   }
 983:../Dave/Generated/src/ADC003/ADC003.c ****   else
 984:../Dave/Generated/src/ADC003/ADC003.c ****   {
 985:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
 986:../Dave/Generated/src/ADC003/ADC003.c ****   }
 987:../Dave/Generated/src/ADC003/ADC003.c **** 
 988:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 2047              		.loc 1 988 0
 2048 0036 FB68     		ldr	r3, [r7, #12]
 989:../Dave/Generated/src/ADC003/ADC003.c **** }
 2049              		.loc 1 989 0
 2050 0038 181C     		mov	r0, r3
 2051 003a BD46     		mov	sp, r7
 2052 003c 04B0     		add	sp, sp, #16
 2053              		@ sp needed for prologue
 2054 003e 80BD     		pop	{r7, pc}
 2055              		.cfi_endproc
 2056              	.LFE64:
 2058              		.section	.text.ADC003_ClearSourceEventFlag,"ax",%progbits
 2059              		.align	2
 2060              		.global	ADC003_ClearSourceEventFlag
 2061              		.code	16
 2062              		.thumb_func
 2064              	ADC003_ClearSourceEventFlag:
 2065              	.LFB65:
 990:../Dave/Generated/src/ADC003/ADC003.c **** 
 991:../Dave/Generated/src/ADC003/ADC003.c **** 
 992:../Dave/Generated/src/ADC003/ADC003.c **** /* This function clears the source Event flag. */
 993:../Dave/Generated/src/ADC003/ADC003.c **** status_t ADC003_ClearSourceEventFlag(const ADC003_HandleType *HandlePtr)
 994:../Dave/Generated/src/ADC003/ADC003.c **** {
 2066              		.loc 1 994 0
 2067              		.cfi_startproc
 2068 0000 80B5     		push	{r7, lr}
 2069              	.LCFI80:
 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
 2073 0002 84B0     		sub	sp, sp, #16
 2074              	.LCFI81:
 2075              		.cfi_def_cfa_offset 24
 2076 0004 00AF     		add	r7, sp, #0
 2077              	.LCFI82:
 2078              		.cfi_def_cfa_register 7
 2079 0006 7860     		str	r0, [r7, #4]
 995:../Dave/Generated/src/ADC003/ADC003.c ****   status_t Status = (uint32_t)ADC003_OPER_NOT_ALLOWED_ERROR;
 2080              		.loc 1 995 0
 2081 0008 0123     		mov	r3, #1
 2082 000a FB60     		str	r3, [r7, #12]
 996:../Dave/Generated/src/ADC003/ADC003.c ****   /*Pointer to the VADC Group register structure */
 997:../Dave/Generated/src/ADC003/ADC003.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 2083              		.loc 1 997 0
 2084 000c 7B68     		ldr	r3, [r7, #4]
 2085 000e 5B6D     		ldr	r3, [r3, #84]
 2086 0010 BB60     		str	r3, [r7, #8]
 998:../Dave/Generated/src/ADC003/ADC003.c **** 
 999:../Dave/Generated/src/ADC003/ADC003.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC003_INITIALIZED)
 2087              		.loc 1 999 0
 2088 0012 7B68     		ldr	r3, [r7, #4]
 2089 0014 5B6A     		ldr	r3, [r3, #36]
 2090 0016 1B78     		ldrb	r3, [r3]
 2091 0018 012B     		cmp	r3, #1
 2092 001a 0CD1     		bne	.L104
1000:../Dave/Generated/src/ADC003/ADC003.c ****   {
1001:../Dave/Generated/src/ADC003/ADC003.c ****       /* Sets event flag */
1002:../Dave/Generated/src/ADC003/ADC003.c ****       SET_BIT(VADCGroupPtr->SEFCLR, VADC_G_SEFCLR_SEV1_Pos);
 2093              		.loc 1 1002 0
 2094 001c BA68     		ldr	r2, [r7, #8]
 2095 001e CC23     		mov	r3, #204
 2096 0020 5B00     		lsl	r3, r3, #1
 2097 0022 D358     		ldr	r3, [r2, r3]
 2098 0024 0222     		mov	r2, #2
 2099 0026 111C     		mov	r1, r2
 2100 0028 1943     		orr	r1, r3
 2101 002a BA68     		ldr	r2, [r7, #8]
 2102 002c CC23     		mov	r3, #204
 2103 002e 5B00     		lsl	r3, r3, #1
 2104 0030 D150     		str	r1, [r2, r3]
1003:../Dave/Generated/src/ADC003/ADC003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2105              		.loc 1 1003 0
 2106 0032 0023     		mov	r3, #0
 2107 0034 FB60     		str	r3, [r7, #12]
 2108              	.L104:
1004:../Dave/Generated/src/ADC003/ADC003.c ****   }
1005:../Dave/Generated/src/ADC003/ADC003.c ****   else
1006:../Dave/Generated/src/ADC003/ADC003.c ****   {
1007:../Dave/Generated/src/ADC003/ADC003.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, 1, &Status);
1008:../Dave/Generated/src/ADC003/ADC003.c ****   }
1009:../Dave/Generated/src/ADC003/ADC003.c **** 
1010:../Dave/Generated/src/ADC003/ADC003.c ****   return Status;
 2109              		.loc 1 1010 0
 2110 0036 FB68     		ldr	r3, [r7, #12]
1011:../Dave/Generated/src/ADC003/ADC003.c **** }
 2111              		.loc 1 1011 0
 2112 0038 181C     		mov	r0, r3
 2113 003a BD46     		mov	sp, r7
 2114 003c 04B0     		add	sp, sp, #16
 2115              		@ sp needed for prologue
 2116 003e 80BD     		pop	{r7, pc}
 2117              		.cfi_endproc
 2118              	.LFE65:
 2120              		.text
 2121              	.Letext0:
 2122              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2123              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 2124              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 2125              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 2126              		.file 6 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
 2127              		.file 7 "C:\\DAVE3_workspace\\ws3.1.10\\ESC_Pinus_XMC1302_V1.2\\Dave\\Generated\\inc\\DAVESupport/
DEFINED SYMBOLS
                            *ABS*:00000000 ADC003.c
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:18     .text.ADC003_Init:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:23     .text.ADC003_Init:00000000 ADC003_Init
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:59     .text.ADC003_lInit:00000000 ADC003_lInit
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:49     .text.ADC003_Init:00000014 $d
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:54     .text.ADC003_lInit:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:242    .text.ADC003_Deinit:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:247    .text.ADC003_Deinit:00000000 ADC003_Deinit
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:336    .text.ADC003_Deinit:00000078 $d
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:342    .text.ADC003_ClearPendingBits:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:347    .text.ADC003_ClearPendingBits:00000000 ADC003_ClearPendingBits
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:405    .text.ADC003_GenerateLoadEvent:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:410    .text.ADC003_GenerateLoadEvent:00000000 ADC003_GenerateLoadEvent
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:468    .text.ADC003_EnableAutoScan:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:473    .text.ADC003_EnableAutoScan:00000000 ADC003_EnableAutoScan
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:530    .text.ADC003_DisableAutoScan:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:535    .text.ADC003_DisableAutoScan:00000000 ADC003_DisableAutoScan
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:592    .text.ADC003_EnableSourceEventInterrupt:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:597    .text.ADC003_EnableSourceEventInterrupt:00000000 ADC003_EnableSourceEventInterrupt
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:654    .text.ADC003_DisableSourceEventInterrupt:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:659    .text.ADC003_DisableSourceEventInterrupt:00000000 ADC003_DisableSourceEventInterrupt
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:716    .text.ADC003_LoadEventMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:721    .text.ADC003_LoadEventMode:00000000 ADC003_LoadEventMode
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:797    .text.ADC003_EnableGate:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:802    .text.ADC003_EnableGate:00000000 ADC003_EnableGate
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:877    .text.ADC003_EnableScanArbitrationSlot:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:882    .text.ADC003_EnableScanArbitrationSlot:00000000 ADC003_EnableScanArbitrationSlot
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:938    .text.ADC003_DisableScanArbitrationSlot:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:943    .text.ADC003_DisableScanArbitrationSlot:00000000 ADC003_DisableScanArbitrationSlot
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:997    .text.ADC003_DisableScanArbitrationSlot:0000003c $d
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1002   .text.ADC003_SetExternalTriggerMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1007   .text.ADC003_SetExternalTriggerMode:00000000 ADC003_SetExternalTriggerMode
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1122   .text.ADC003_EnableExternalTrigger:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1127   .text.ADC003_EnableExternalTrigger:00000000 ADC003_EnableExternalTrigger
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1184   .text.ADC003_DisableExternalTrigger:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1189   .text.ADC003_DisableExternalTrigger:00000000 ADC003_DisableExternalTrigger
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1246   .text.ADC003_GetGateLevel:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1251   .text.ADC003_GetGateLevel:00000000 ADC003_GetGateLevel
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1317   .text.ADC003_SetChannel:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1322   .text.ADC003_SetChannel:00000000 ADC003_SetChannel
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1402   .text.ADC003_ClearChannel:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1407   .text.ADC003_ClearChannel:00000000 ADC003_ClearChannel
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1488   .text.ADC003_SetPendingChannel:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1493   .text.ADC003_SetPendingChannel:00000000 ADC003_SetPendingChannel
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1573   .text.ADC003_ClearPendingChannel:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1578   .text.ADC003_ClearPendingChannel:00000000 ADC003_ClearPendingChannel
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1659   .text.ADC003_SetConversionMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1664   .text.ADC003_SetConversionMode:00000000 ADC003_SetConversionMode
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1726   .text.ADC003_SetSampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1731   .text.ADC003_SetSampleTime:00000000 ADC003_SetSampleTime
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1793   .text.ADC003_SetEMUXConversionMode:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1798   .text.ADC003_SetEMUXConversionMode:00000000 ADC003_SetEMUXConversionMode
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1860   .text.ADC003_EMUXSetSampleTime:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1865   .text.ADC003_EMUXSetSampleTime:00000000 ADC003_EMUXSetSampleTime
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1926   .text.ADC003_GetSourceEventFlag:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1931   .text.ADC003_GetSourceEventFlag:00000000 ADC003_GetSourceEventFlag
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:1997   .text.ADC003_SetSourceEventFlag:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:2002   .text.ADC003_SetSourceEventFlag:00000000 ADC003_SetSourceEventFlag
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:2059   .text.ADC003_ClearSourceEventFlag:00000000 $t
C:\Users\maan\AppData\Local\Temp\cc8wFBZy.s:2064   .text.ADC003_ClearSourceEventFlag:00000000 ADC003_ClearSourceEventFlag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.665d63c3c957c91c5ed795826dcbc088
                           .group:00000000 wm4.XMC1300.h.45.4ee692c6c98aa9fc42e2abbc732052b9
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1300.h.126.871a37eeeb3f6a078f5ddf5efd64103f
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.1aa717522e337383e1234be386036b7c
                           .group:00000000 wm4.CLK002.h.56.d2936f957892acc36e594c5138aee657
                           .group:00000000 wm4.uc_id.h.35.f852fba3565a132d8ed947977fab9fbc
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.CCU8GLOBAL_Conf.h.82.76c6b1bf357180d1e8ea1f462a66deb8
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.f334402b2e237110b77f625dfc27af0e
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.311363d77acc1b28b7e28dd840e9cd60
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505

UNDEFINED SYMBOLS
ADCGLOB001_Init
ADC003_Handle0
ADCGROUP001_SetGroupClass1ConvMode
ADCGROUP001_SetGroupClass1SampleTime
ADCGROUP001_SetGroupClass1EmuxConvMode
ADCGROUP001_SetGroupClass1EmuxSampleTime
