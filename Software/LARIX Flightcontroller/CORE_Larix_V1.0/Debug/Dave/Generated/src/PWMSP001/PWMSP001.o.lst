   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PWMSP001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWMSP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	PWMSP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	PWMSP001_Init:
  26              	.LFB120:
  27              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  28              		.loc 1 275 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  43              		.loc 1 276 0
  44 0006 4FF00103 		mov	r3, #1
  45 000a 7B60     		str	r3, [r7, #4]
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
  46              		.loc 1 277 0
  47 000c FFF7FEFF 		bl	CCU4GLOBAL_Init
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
  48              		.loc 1 278 0
  49 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  50 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  51 0018 FFF7FEFF 		bl	PWMSP001_lInit
  52 001c 7860     		str	r0, [r7, #4]
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  53              		.loc 1 280 0
  54 001e 7B68     		ldr	r3, [r7, #4]
  55 0020 002B     		cmp	r3, #0
  56 0022 0DD1     		bne	.L2
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
  57              		.loc 1 282 0
  58 0024 40F20003 		movw	r3, #:lower16:PWMSP001_Handle0
  59 0028 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle0
  60 002c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  61 002e 012B     		cmp	r3, #1
  62 0030 06D1     		bne	.L2
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
  63              		.loc 1 284 0
  64 0032 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  65 0036 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  66 003a FFF7FEFF 		bl	PWMSP001_Start
  67 003e 7860     		str	r0, [r7, #4]
  68              	.L2:
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.2 based on User configuration */
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD2_Msk));
  69              		.loc 1 290 0
  70 0040 4FF40143 		mov	r3, #33024
  71 0044 C4F60203 		movt	r3, 18434
  72 0048 4FF40142 		mov	r2, #33024
  73 004c C4F60202 		movt	r2, 18434
  74 0050 126C     		ldr	r2, [r2, #64]
  75 0052 22F4E062 		bic	r2, r2, #1792
  76 0056 1A64     		str	r2, [r3, #64]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD2_Pos) & \
  77              		.loc 1 291 0
  78 0058 4FF40143 		mov	r3, #33024
  79 005c C4F60203 		movt	r3, 18434
  80 0060 4FF40142 		mov	r2, #33024
  81 0064 C4F60202 		movt	r2, 18434
  82 0068 126C     		ldr	r2, [r2, #64]
  83 006a 1A64     		str	r2, [r3, #64]
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD2_Msk);
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC2_PO_Msk));
  84              		.loc 1 293 0
  85 006c 4FF40143 		mov	r3, #33024
  86 0070 C4F60203 		movt	r3, 18434
  87 0074 4FF40142 		mov	r2, #33024
  88 0078 C4F60202 		movt	r2, 18434
  89 007c 1269     		ldr	r2, [r2, #16]
  90 007e 22F48002 		bic	r2, r2, #4194304
  91 0082 1A61     		str	r2, [r3, #16]
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC2_PO_Pos) & \
  92              		.loc 1 294 0
  93 0084 4FF40143 		mov	r3, #33024
  94 0088 C4F60203 		movt	r3, 18434
  95 008c 4FF40142 		mov	r2, #33024
  96 0090 C4F60202 		movt	r2, 18434
  97 0094 1269     		ldr	r2, [r2, #16]
  98 0096 1A61     		str	r2, [r3, #16]
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC2_PO_Msk);
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle1);
  99              		.loc 1 296 0
 100 0098 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 101 009c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 102 00a0 FFF7FEFF 		bl	PWMSP001_lInit
 103 00a4 7860     		str	r0, [r7, #4]
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 104              		.loc 1 298 0
 105 00a6 7B68     		ldr	r3, [r7, #4]
 106 00a8 002B     		cmp	r3, #0
 107 00aa 0DD1     		bne	.L3
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle1.StartControl == (uint8_t)SET)
 108              		.loc 1 300 0
 109 00ac 40F20003 		movw	r3, #:lower16:PWMSP001_Handle1
 110 00b0 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle1
 111 00b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 112 00b6 012B     		cmp	r3, #1
 113 00b8 06D1     		bne	.L3
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle1);
 114              		.loc 1 302 0
 115 00ba 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 116 00be C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 117 00c2 FFF7FEFF 		bl	PWMSP001_Start
 118 00c6 7860     		str	r0, [r7, #4]
 119              	.L3:
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.3 based on User configuration */
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD3_Msk));
 120              		.loc 1 308 0
 121 00c8 4FF40143 		mov	r3, #33024
 122 00cc C4F60203 		movt	r3, 18434
 123 00d0 4FF40142 		mov	r2, #33024
 124 00d4 C4F60202 		movt	r2, 18434
 125 00d8 126C     		ldr	r2, [r2, #64]
 126 00da 22F4E042 		bic	r2, r2, #28672
 127 00de 1A64     		str	r2, [r3, #64]
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD3_Pos) & \
 128              		.loc 1 309 0
 129 00e0 4FF40143 		mov	r3, #33024
 130 00e4 C4F60203 		movt	r3, 18434
 131 00e8 4FF40142 		mov	r2, #33024
 132 00ec C4F60202 		movt	r2, 18434
 133 00f0 126C     		ldr	r2, [r2, #64]
 134 00f2 1A64     		str	r2, [r3, #64]
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD3_Msk);
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC3_PO_Msk));
 135              		.loc 1 311 0
 136 00f4 4FF40143 		mov	r3, #33024
 137 00f8 C4F60203 		movt	r3, 18434
 138 00fc 4FF40142 		mov	r2, #33024
 139 0100 C4F60202 		movt	r2, 18434
 140 0104 1269     		ldr	r2, [r2, #16]
 141 0106 22F08042 		bic	r2, r2, #1073741824
 142 010a 1A61     		str	r2, [r3, #16]
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC3_PO_Pos) & \
 143              		.loc 1 312 0
 144 010c 4FF40143 		mov	r3, #33024
 145 0110 C4F60203 		movt	r3, 18434
 146 0114 4FF40142 		mov	r2, #33024
 147 0118 C4F60202 		movt	r2, 18434
 148 011c 1269     		ldr	r2, [r2, #16]
 149 011e 1A61     		str	r2, [r3, #16]
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC3_PO_Msk);
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle2);
 150              		.loc 1 314 0
 151 0120 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 152 0124 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 153 0128 FFF7FEFF 		bl	PWMSP001_lInit
 154 012c 7860     		str	r0, [r7, #4]
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 155              		.loc 1 316 0
 156 012e 7B68     		ldr	r3, [r7, #4]
 157 0130 002B     		cmp	r3, #0
 158 0132 0DD1     		bne	.L4
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle2.StartControl == (uint8_t)SET)
 159              		.loc 1 318 0
 160 0134 40F20003 		movw	r3, #:lower16:PWMSP001_Handle2
 161 0138 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle2
 162 013c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 163 013e 012B     		cmp	r3, #1
 164 0140 06D1     		bne	.L4
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle2);
 165              		.loc 1 320 0
 166 0142 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 167 0146 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 168 014a FFF7FEFF 		bl	PWMSP001_Start
 169 014e 7860     		str	r0, [r7, #4]
 170              	.L4:
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.0 based on User configuration */
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD0_Msk));
 171              		.loc 1 326 0
 172 0150 4FF40143 		mov	r3, #33024
 173 0154 C4F60203 		movt	r3, 18434
 174 0158 4FF40142 		mov	r2, #33024
 175 015c C4F60202 		movt	r2, 18434
 176 0160 126C     		ldr	r2, [r2, #64]
 177 0162 22F00702 		bic	r2, r2, #7
 178 0166 1A64     		str	r2, [r3, #64]
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD0_Pos) & \
 179              		.loc 1 327 0
 180 0168 4FF40143 		mov	r3, #33024
 181 016c C4F60203 		movt	r3, 18434
 182 0170 4FF40142 		mov	r2, #33024
 183 0174 C4F60202 		movt	r2, 18434
 184 0178 126C     		ldr	r2, [r2, #64]
 185 017a 1A64     		str	r2, [r3, #64]
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD0_Msk);
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
 186              		.loc 1 329 0
 187 017c 4FF40143 		mov	r3, #33024
 188 0180 C4F60203 		movt	r3, 18434
 189 0184 4FF40142 		mov	r2, #33024
 190 0188 C4F60202 		movt	r2, 18434
 191 018c 1269     		ldr	r2, [r2, #16]
 192 018e 22F04002 		bic	r2, r2, #64
 193 0192 1A61     		str	r2, [r3, #16]
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
 194              		.loc 1 330 0
 195 0194 4FF40143 		mov	r3, #33024
 196 0198 C4F60203 		movt	r3, 18434
 197 019c 4FF40142 		mov	r2, #33024
 198 01a0 C4F60202 		movt	r2, 18434
 199 01a4 1269     		ldr	r2, [r2, #16]
 200 01a6 1A61     		str	r2, [r3, #16]
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC0_PO_Msk);
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle3);
 201              		.loc 1 332 0
 202 01a8 40F20000 		movw	r0, #:lower16:PWMSP001_Handle3
 203 01ac C0F20000 		movt	r0, #:upper16:PWMSP001_Handle3
 204 01b0 FFF7FEFF 		bl	PWMSP001_lInit
 205 01b4 7860     		str	r0, [r7, #4]
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 206              		.loc 1 334 0
 207 01b6 7B68     		ldr	r3, [r7, #4]
 208 01b8 002B     		cmp	r3, #0
 209 01ba 0DD1     		bne	.L5
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle3.StartControl == (uint8_t)SET)
 210              		.loc 1 336 0
 211 01bc 40F20003 		movw	r3, #:lower16:PWMSP001_Handle3
 212 01c0 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle3
 213 01c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 214 01c6 012B     		cmp	r3, #1
 215 01c8 06D1     		bne	.L5
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle3);
 216              		.loc 1 338 0
 217 01ca 40F20000 		movw	r0, #:lower16:PWMSP001_Handle3
 218 01ce C0F20000 		movt	r0, #:upper16:PWMSP001_Handle3
 219 01d2 FFF7FEFF 		bl	PWMSP001_Start
 220 01d6 7860     		str	r0, [r7, #4]
 221              	.L5:
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 2.2 based on User configuration */
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT2->PDR0  &= (uint32_t)(~(PORT2_PDR0_PD2_Msk));
 222              		.loc 1 344 0
 223 01d8 4FF40243 		mov	r3, #33280
 224 01dc C4F60203 		movt	r3, 18434
 225 01e0 4FF40242 		mov	r2, #33280
 226 01e4 C4F60202 		movt	r2, 18434
 227 01e8 126C     		ldr	r2, [r2, #64]
 228 01ea 22F4E062 		bic	r2, r2, #1792
 229 01ee 1A64     		str	r2, [r3, #64]
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT2->PDR0  |= (((uint32_t)0 << (uint32_t)PORT2_PDR0_PD2_Pos) & \
 230              		.loc 1 345 0
 231 01f0 4FF40243 		mov	r3, #33280
 232 01f4 C4F60203 		movt	r3, 18434
 233 01f8 4FF40242 		mov	r2, #33280
 234 01fc C4F60202 		movt	r2, 18434
 235 0200 126C     		ldr	r2, [r2, #64]
 236 0202 1A64     		str	r2, [r3, #64]
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT2_PDR0_PD2_Msk);
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT2->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC2_PO_Msk));
 237              		.loc 1 347 0
 238 0204 4FF40243 		mov	r3, #33280
 239 0208 C4F60203 		movt	r3, 18434
 240 020c 4FF40242 		mov	r2, #33280
 241 0210 C4F60202 		movt	r2, 18434
 242 0214 1269     		ldr	r2, [r2, #16]
 243 0216 22F48002 		bic	r2, r2, #4194304
 244 021a 1A61     		str	r2, [r3, #16]
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT2->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC2_PO_Pos) & \
 245              		.loc 1 348 0
 246 021c 4FF40243 		mov	r3, #33280
 247 0220 C4F60203 		movt	r3, 18434
 248 0224 4FF40242 		mov	r2, #33280
 249 0228 C4F60202 		movt	r2, 18434
 250 022c 1269     		ldr	r2, [r2, #16]
 251 022e 1A61     		str	r2, [r3, #16]
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC2_PO_Msk);
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 252              		.loc 1 350 0
 253 0230 07F10807 		add	r7, r7, #8
 254 0234 BD46     		mov	sp, r7
 255 0236 80BD     		pop	{r7, pc}
 256              		.cfi_endproc
 257              	.LFE120:
 259              		.section	.text.PWMSP001_lInit,"ax",%progbits
 260              		.align	2
 261              		.global	PWMSP001_lInit
 262              		.thumb
 263              		.thumb_func
 265              	PWMSP001_lInit:
 266              	.LFB121:
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 267              		.loc 1 355 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 16
 270              		@ frame_needed = 1, uses_anonymous_args = 0
 271 0000 90B5     		push	{r4, r7, lr}
 272              	.LCFI3:
 273              		.cfi_def_cfa_offset 12
 274              		.cfi_offset 4, -12
 275              		.cfi_offset 7, -8
 276              		.cfi_offset 14, -4
 277 0002 85B0     		sub	sp, sp, #20
 278              	.LCFI4:
 279              		.cfi_def_cfa_offset 32
 280 0004 00AF     		add	r7, sp, #0
 281              	.LCFI5:
 282              		.cfi_def_cfa_register 7
 283 0006 7860     		str	r0, [r7, #4]
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 284              		.loc 1 356 0
 285 0008 4FF00103 		mov	r3, #1
 286 000c FB60     		str	r3, [r7, #12]
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 287              		.loc 1 361 0
 288 000e 7B68     		ldr	r3, [r7, #4]
 289 0010 DB6B     		ldr	r3, [r3, #60]
 290 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 291 0014 002B     		cmp	r3, #0
 292 0016 40F06981 		bne	.L16
 293              	.L7:
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 294              		.loc 1 365 0
 295 001a 7B68     		ldr	r3, [r7, #4]
 296 001c 9B69     		ldr	r3, [r3, #24]
 297 001e 4FF00702 		mov	r2, #7
 298 0022 1A61     		str	r2, [r3, #16]
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 299              		.loc 1 369 0
 300 0024 7B68     		ldr	r3, [r7, #4]
 301 0026 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 302 0028 012B     		cmp	r3, #1
 303 002a 27D1     		bne	.L9
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 304              		.loc 1 371 0
 305 002c 7B68     		ldr	r3, [r7, #4]
 306 002e 9A69     		ldr	r2, [r3, #24]
 307 0030 7B68     		ldr	r3, [r7, #4]
 308 0032 9B69     		ldr	r3, [r3, #24]
 309 0034 1B68     		ldr	r3, [r3, #0]
 310 0036 23F0C053 		bic	r3, r3, #402653184
 311 003a 23F44023 		bic	r3, r3, #786432
 312 003e 1360     		str	r3, [r2, #0]
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 313              		.loc 1 372 0
 314 0040 7B68     		ldr	r3, [r7, #4]
 315 0042 9B69     		ldr	r3, [r3, #24]
 316 0044 7A68     		ldr	r2, [r7, #4]
 317 0046 9269     		ldr	r2, [r2, #24]
 318 0048 5268     		ldr	r2, [r2, #4]
 319 004a 22F00C02 		bic	r2, r2, #12
 320 004e 5A60     		str	r2, [r3, #4]
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 321              		.loc 1 373 0
 322 0050 7B68     		ldr	r3, [r7, #4]
 323 0052 9B69     		ldr	r3, [r3, #24]
 324 0054 7A68     		ldr	r2, [r7, #4]
 325 0056 9269     		ldr	r2, [r2, #24]
 326 0058 1168     		ldr	r1, [r2, #0]
 327 005a 7A68     		ldr	r2, [r7, #4]
 328 005c 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 329 0060 4FEA8242 		lsl	r2, r2, #18
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 330              		.loc 1 374 0
 331 0064 02F44022 		and	r2, r2, #786432
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 332              		.loc 1 373 0
 333 0068 0A43     		orrs	r2, r2, r1
 334 006a 1A60     		str	r2, [r3, #0]
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 335              		.loc 1 377 0
 336 006c 7B68     		ldr	r3, [r7, #4]
 337 006e 9B69     		ldr	r3, [r3, #24]
 338 0070 7A68     		ldr	r2, [r7, #4]
 339 0072 9269     		ldr	r2, [r2, #24]
 340 0074 5268     		ldr	r2, [r2, #4]
 341 0076 42F00802 		orr	r2, r2, #8
 342 007a 5A60     		str	r2, [r3, #4]
 343              	.L9:
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 344              		.loc 1 383 0
 345 007c 7B68     		ldr	r3, [r7, #4]
 346 007e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 347 0080 012B     		cmp	r3, #1
 348 0082 2BD1     		bne	.L10
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 349              		.loc 1 384 0 discriminator 1
 350 0084 7B68     		ldr	r3, [r7, #4]
 351 0086 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 352              		.loc 1 383 0 discriminator 1
 353 008a 012B     		cmp	r3, #1
 354 008c 26D0     		beq	.L10
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 355              		.loc 1 387 0
 356 008e 7B68     		ldr	r3, [r7, #4]
 357 0090 9A69     		ldr	r2, [r3, #24]
 358 0092 7B68     		ldr	r3, [r7, #4]
 359 0094 9B69     		ldr	r3, [r3, #24]
 360 0096 1B68     		ldr	r3, [r3, #0]
 361 0098 23F0C243 		bic	r3, r3, #1627389952
 362 009c 23F44013 		bic	r3, r3, #3145728
 363 00a0 1360     		str	r3, [r2, #0]
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 364              		.loc 1 389 0
 365 00a2 7B68     		ldr	r3, [r7, #4]
 366 00a4 9B69     		ldr	r3, [r3, #24]
 367 00a6 7A68     		ldr	r2, [r7, #4]
 368 00a8 9269     		ldr	r2, [r2, #24]
 369 00aa 5268     		ldr	r2, [r2, #4]
 370 00ac 22F40032 		bic	r2, r2, #131072
 371 00b0 5A60     		str	r2, [r3, #4]
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 372              		.loc 1 390 0
 373 00b2 7B68     		ldr	r3, [r7, #4]
 374 00b4 9B69     		ldr	r3, [r3, #24]
 375 00b6 7A68     		ldr	r2, [r7, #4]
 376 00b8 9269     		ldr	r2, [r2, #24]
 377 00ba 1168     		ldr	r1, [r2, #0]
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 378              		.loc 1 391 0
 379 00bc 7A68     		ldr	r2, [r7, #4]
 380 00be 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 381 00c0 4FEA0262 		lsl	r2, r2, #24
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 382              		.loc 1 392 0
 383 00c4 02F08072 		and	r2, r2, #16777216
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 384              		.loc 1 390 0
 385 00c8 0A43     		orrs	r2, r2, r1
 386 00ca 1A60     		str	r2, [r3, #0]
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 387              		.loc 1 396 0
 388 00cc 7B68     		ldr	r3, [r7, #4]
 389 00ce 9B69     		ldr	r3, [r3, #24]
 390 00d0 7A68     		ldr	r2, [r7, #4]
 391 00d2 9269     		ldr	r2, [r2, #24]
 392 00d4 5268     		ldr	r2, [r2, #4]
 393 00d6 42F40032 		orr	r2, r2, #131072
 394 00da 5A60     		str	r2, [r3, #4]
 395              	.L10:
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 396              		.loc 1 399 0
 397 00dc 7B68     		ldr	r3, [r7, #4]
 398 00de 9A69     		ldr	r2, [r3, #24]
 399 00e0 7B68     		ldr	r3, [r7, #4]
 400 00e2 9B69     		ldr	r3, [r3, #24]
 401 00e4 5B69     		ldr	r3, [r3, #20]
 402 00e6 23F4CE43 		bic	r3, r3, #26368
 403 00ea 23F00903 		bic	r3, r3, #9
 404 00ee 5361     		str	r3, [r2, #20]
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 405              		.loc 1 403 0
 406 00f0 7B68     		ldr	r3, [r7, #4]
 407 00f2 9B69     		ldr	r3, [r3, #24]
 408 00f4 7A68     		ldr	r2, [r7, #4]
 409 00f6 9269     		ldr	r2, [r2, #24]
 410 00f8 5169     		ldr	r1, [r2, #20]
 411 00fa 7A68     		ldr	r2, [r7, #4]
 412 00fc 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 413              		.loc 1 404 0
 414 0100 02F00100 		and	r0, r2, #1
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 415              		.loc 1 407 0
 416 0104 7A68     		ldr	r2, [r7, #4]
 417 0106 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 418 010a 4FEA8222 		lsl	r2, r2, #10
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 419              		.loc 1 408 0
 420 010e 02F48062 		and	r2, r2, #1024
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 421              		.loc 1 406 0
 422 0112 1043     		orrs	r0, r0, r2
 423              		.loc 1 408 0
 424 0114 7A68     		ldr	r2, [r7, #4]
 425 0116 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 426 011a 4FEA0222 		lsl	r2, r2, #8
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 427              		.loc 1 409 0
 428 011e 02F44072 		and	r2, r2, #768
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 429              		.loc 1 408 0
 430 0122 0243     		orrs	r2, r2, r0
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 431              		.loc 1 403 0
 432 0124 0A43     		orrs	r2, r2, r1
 433 0126 5A61     		str	r2, [r3, #20]
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 434              		.loc 1 414 0
 435 0128 7B68     		ldr	r3, [r7, #4]
 436 012a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 437 012e 012B     		cmp	r3, #1
 438 0130 0ED0     		beq	.L11
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 439              		.loc 1 416 0
 440 0132 7B68     		ldr	r3, [r7, #4]
 441 0134 9B69     		ldr	r3, [r3, #24]
 442 0136 7A68     		ldr	r2, [r7, #4]
 443 0138 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 444 013a 4FEA4202 		lsl	r2, r2, #1
 445 013e 02F00201 		and	r1, r2, #2
 446 0142 7A68     		ldr	r2, [r7, #4]
 447 0144 9269     		ldr	r2, [r2, #24]
 448 0146 5269     		ldr	r2, [r2, #20]
 449 0148 22F00202 		bic	r2, r2, #2
 450 014c 0A43     		orrs	r2, r2, r1
 451 014e 5A61     		str	r2, [r3, #20]
 452              	.L11:
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 453              		.loc 1 421 0
 454 0150 7B68     		ldr	r3, [r7, #4]
 455 0152 9B69     		ldr	r3, [r3, #24]
 456 0154 7A68     		ldr	r2, [r7, #4]
 457 0156 9269     		ldr	r2, [r2, #24]
 458 0158 5169     		ldr	r1, [r2, #20]
 459 015a 7A68     		ldr	r2, [r7, #4]
 460 015c 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 461 0160 4FEA4232 		lsl	r2, r2, #13
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 462              		.loc 1 422 0
 463 0164 02F4C042 		and	r2, r2, #24576
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 464              		.loc 1 421 0
 465 0168 0A43     		orrs	r2, r2, r1
 466 016a 5A61     		str	r2, [r3, #20]
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 467              		.loc 1 424 0
 468 016c 7B68     		ldr	r3, [r7, #4]
 469 016e 9B69     		ldr	r3, [r3, #24]
 470 0170 7A68     		ldr	r2, [r7, #4]
 471 0172 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 472 0174 02F00F01 		and	r1, r2, #15
 473 0178 7A68     		ldr	r2, [r7, #4]
 474 017a 9269     		ldr	r2, [r2, #24]
 475 017c 126A     		ldr	r2, [r2, #32]
 476 017e 22F00F02 		bic	r2, r2, #15
 477 0182 0A43     		orrs	r2, r2, r1
 478 0184 1A62     		str	r2, [r3, #32]
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 479              		.loc 1 428 0
 480 0186 7B68     		ldr	r3, [r7, #4]
 481 0188 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 482 018c 012B     		cmp	r3, #1
 483 018e 2CD0     		beq	.L12
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 484              		.loc 1 431 0
 485 0190 7B68     		ldr	r3, [r7, #4]
 486 0192 9B69     		ldr	r3, [r3, #24]
 487 0194 7A68     		ldr	r2, [r7, #4]
 488 0196 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 489 0198 4FEA4252 		lsl	r2, r2, #21
 490 019c 02F40011 		and	r1, r2, #2097152
 491 01a0 7A68     		ldr	r2, [r7, #4]
 492 01a2 9269     		ldr	r2, [r2, #24]
 493 01a4 5269     		ldr	r2, [r2, #20]
 494 01a6 22F40012 		bic	r2, r2, #2097152
 495 01aa 0A43     		orrs	r2, r2, r1
 496 01ac 5A61     		str	r2, [r3, #20]
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 497              		.loc 1 434 0
 498 01ae 7B68     		ldr	r3, [r7, #4]
 499 01b0 9B69     		ldr	r3, [r3, #24]
 500 01b2 7A68     		ldr	r2, [r7, #4]
 501 01b4 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 502 01b6 4FEA8252 		lsl	r2, r2, #22
 503 01ba 02F48001 		and	r1, r2, #4194304
 504 01be 7A68     		ldr	r2, [r7, #4]
 505 01c0 9269     		ldr	r2, [r2, #24]
 506 01c2 5269     		ldr	r2, [r2, #20]
 507 01c4 22F48002 		bic	r2, r2, #4194304
 508 01c8 0A43     		orrs	r2, r2, r1
 509 01ca 5A61     		str	r2, [r3, #20]
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 510              		.loc 1 437 0
 511 01cc 7B68     		ldr	r3, [r7, #4]
 512 01ce 9B69     		ldr	r3, [r3, #24]
 513 01d0 7A68     		ldr	r2, [r7, #4]
 514 01d2 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 515 01d4 4FEA4242 		lsl	r2, r2, #17
 516 01d8 02F40031 		and	r1, r2, #131072
 517 01dc 7A68     		ldr	r2, [r7, #4]
 518 01de 9269     		ldr	r2, [r2, #24]
 519 01e0 5269     		ldr	r2, [r2, #20]
 520 01e2 22F40032 		bic	r2, r2, #131072
 521 01e6 0A43     		orrs	r2, r2, r1
 522 01e8 5A61     		str	r2, [r3, #20]
 523              	.L12:
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 524              		.loc 1 441 0
 525 01ea 7B68     		ldr	r3, [r7, #4]
 526 01ec 9B69     		ldr	r3, [r3, #24]
 527 01ee 7A68     		ldr	r2, [r7, #4]
 528 01f0 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 529 01f4 02F00F01 		and	r1, r2, #15
 530 01f8 7A68     		ldr	r2, [r7, #4]
 531 01fa 9269     		ldr	r2, [r2, #24]
 532 01fc 526A     		ldr	r2, [r2, #36]
 533 01fe 22F00F02 		bic	r2, r2, #15
 534 0202 0A43     		orrs	r2, r2, r1
 535 0204 5A62     		str	r2, [r3, #36]
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 536              		.loc 1 443 0
 537 0206 7B68     		ldr	r3, [r7, #4]
 538 0208 9B69     		ldr	r3, [r3, #24]
 539 020a 7A68     		ldr	r2, [r7, #4]
 540 020c 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 541 020e 9A61     		str	r2, [r3, #24]
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 542              		.loc 1 447 0
 543 0210 7B68     		ldr	r3, [r7, #4]
 544 0212 9A69     		ldr	r2, [r3, #24]
 545 0214 7B68     		ldr	r3, [r7, #4]
 546 0216 9B6A     		ldr	r3, [r3, #40]
 547 0218 4FEA0343 		lsl	r3, r3, #16
 548 021c 4FEA1343 		lsr	r3, r3, #16
 549 0220 5363     		str	r3, [r2, #52]
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 550              		.loc 1 449 0
 551 0222 7B68     		ldr	r3, [r7, #4]
 552 0224 9A69     		ldr	r2, [r3, #24]
 553 0226 7B68     		ldr	r3, [r7, #4]
 554 0228 9B68     		ldr	r3, [r3, #8]
 555 022a 4FEA0343 		lsl	r3, r3, #16
 556 022e 4FEA1343 		lsr	r3, r3, #16
 557 0232 D363     		str	r3, [r2, #60]
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 558              		.loc 1 450 0
 559 0234 7B68     		ldr	r3, [r7, #4]
 560 0236 9A69     		ldr	r2, [r3, #24]
 561 0238 7B68     		ldr	r3, [r7, #4]
 562 023a 9B69     		ldr	r3, [r3, #24]
 563 023c D3F8B030 		ldr	r3, [r3, #176]
 564 0240 43F47063 		orr	r3, r3, #3840
 565 0244 43F00F03 		orr	r3, r3, #15
 566 0248 C2F8B030 		str	r3, [r2, #176]
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 567              		.loc 1 454 0
 568 024c 7B68     		ldr	r3, [r7, #4]
 569 024e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 570 0252 012B     		cmp	r3, #1
 571 0254 0ED1     		bne	.L13
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 572              		.loc 1 456 0
 573 0256 7868     		ldr	r0, [r7, #4]
 574 0258 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 575              		.loc 1 457 0
 576 025c 7B68     		ldr	r3, [r7, #4]
 577 025e DB69     		ldr	r3, [r3, #28]
 578 0260 7A68     		ldr	r2, [r7, #4]
 579 0262 D269     		ldr	r2, [r2, #28]
 580 0264 D2F8A410 		ldr	r1, [r2, #164]
 581 0268 7A68     		ldr	r2, [r7, #4]
 582 026a 126B     		ldr	r2, [r2, #48]
 583 026c 0A43     		orrs	r2, r2, r1
 584 026e C3F8A420 		str	r2, [r3, #164]
 585 0272 0AE0     		b	.L14
 586              	.L13:
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 587              		.loc 1 462 0
 588 0274 7B68     		ldr	r3, [r7, #4]
 589 0276 9B69     		ldr	r3, [r3, #24]
 590 0278 7A68     		ldr	r2, [r7, #4]
 591 027a 9269     		ldr	r2, [r2, #24]
 592 027c D2F8A410 		ldr	r1, [r2, #164]
 593 0280 7A68     		ldr	r2, [r7, #4]
 594 0282 126B     		ldr	r2, [r2, #48]
 595 0284 0A43     		orrs	r2, r2, r1
 596 0286 C3F8A420 		str	r2, [r3, #164]
 597              	.L14:
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 598              		.loc 1 467 0
 599 028a 7B68     		ldr	r3, [r7, #4]
 600 028c 5B69     		ldr	r3, [r3, #20]
 601 028e 7A68     		ldr	r2, [r7, #4]
 602 0290 5269     		ldr	r2, [r2, #20]
 603 0292 1169     		ldr	r1, [r2, #16]
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 604              		.loc 1 468 0
 605 0294 7A68     		ldr	r2, [r7, #4]
 606 0296 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 607              		.loc 1 467 0
 608 029a 4FEA8202 		lsl	r2, r2, #2
 609 029e 4FF00100 		mov	r0, #1
 610 02a2 00FA02F0 		lsl	r0, r0, r2
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 611              		.loc 1 469 0
 612 02a6 7A68     		ldr	r2, [r7, #4]
 613 02a8 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 614              		.loc 1 468 0
 615 02ac 4FEA8202 		lsl	r2, r2, #2
 616              		.loc 1 469 0
 617 02b0 02F10102 		add	r2, r2, #1
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 618              		.loc 1 468 0
 619 02b4 4FF00104 		mov	r4, #1
 620 02b8 04FA02F2 		lsl	r2, r4, r2
 621 02bc 1043     		orrs	r0, r0, r2
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 622              		.loc 1 470 0
 623 02be 7A68     		ldr	r2, [r7, #4]
 624 02c0 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 625 02c4 4FEA8202 		lsl	r2, r2, #2
 626 02c8 02F10202 		add	r2, r2, #2
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 627              		.loc 1 469 0
 628 02cc 4FF00104 		mov	r4, #1
 629 02d0 04FA02F2 		lsl	r2, r4, r2
 630 02d4 0243     		orrs	r2, r2, r0
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 631              		.loc 1 467 0
 632 02d6 0A43     		orrs	r2, r2, r1
 633 02d8 1A61     		str	r2, [r3, #16]
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 634              		.loc 1 472 0
 635 02da 4FF00003 		mov	r3, #0
 636 02de FB60     		str	r3, [r7, #12]
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 637              		.loc 1 473 0
 638 02e0 7B68     		ldr	r3, [r7, #4]
 639 02e2 DB6B     		ldr	r3, [r3, #60]
 640 02e4 4FF00102 		mov	r2, #1
 641 02e8 1A70     		strb	r2, [r3, #0]
 642 02ea 00E0     		b	.L8
 643              	.L16:
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 644              		.loc 1 363 0
 645 02ec 00BF     		nop
 646              	.L8:
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 647              		.loc 1 480 0
 648 02ee FB68     		ldr	r3, [r7, #12]
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 649              		.loc 1 481 0
 650 02f0 1846     		mov	r0, r3
 651 02f2 07F11407 		add	r7, r7, #20
 652 02f6 BD46     		mov	sp, r7
 653 02f8 90BD     		pop	{r4, r7, pc}
 654              		.cfi_endproc
 655              	.LFE121:
 657 02fa 00BF     		.section	.text.PWMSP001_Deinit,"ax",%progbits
 658              		.align	2
 659              		.global	PWMSP001_Deinit
 660              		.thumb
 661              		.thumb_func
 663              	PWMSP001_Deinit:
 664              	.LFB122:
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 665              		.loc 1 486 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 32
 668              		@ frame_needed = 1, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670 0000 80B4     		push	{r7}
 671              	.LCFI6:
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 7, -4
 674 0002 89B0     		sub	sp, sp, #36
 675              	.LCFI7:
 676              		.cfi_def_cfa_offset 40
 677 0004 00AF     		add	r7, sp, #0
 678              	.LCFI8:
 679              		.cfi_def_cfa_register 7
 680 0006 7860     		str	r0, [r7, #4]
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 681              		.loc 1 487 0
 682 0008 4FF00103 		mov	r3, #1
 683 000c FB61     		str	r3, [r7, #28]
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 684              		.loc 1 494 0
 685 000e 7B68     		ldr	r3, [r7, #4]
 686 0010 DB6B     		ldr	r3, [r3, #60]
 687 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 688 0014 002B     		cmp	r3, #0
 689 0016 00F0AB80 		beq	.L18
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 690              		.loc 1 497 0
 691 001a 7B68     		ldr	r3, [r7, #4]
 692 001c 9B69     		ldr	r3, [r3, #24]
 693 001e 4FF00702 		mov	r2, #7
 694 0022 1A61     		str	r2, [r3, #16]
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 695              		.loc 1 498 0
 696 0024 7B68     		ldr	r3, [r7, #4]
 697 0026 9B69     		ldr	r3, [r3, #24]
 698 0028 40F60F72 		movw	r2, #3855
 699 002c C3F8B020 		str	r2, [r3, #176]
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 700              		.loc 1 499 0
 701 0030 7B68     		ldr	r3, [r7, #4]
 702 0032 9B69     		ldr	r3, [r3, #24]
 703 0034 4FF00002 		mov	r2, #0
 704 0038 C3F8A420 		str	r2, [r3, #164]
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 705              		.loc 1 502 0
 706 003c 7B68     		ldr	r3, [r7, #4]
 707 003e 5B69     		ldr	r3, [r3, #20]
 708 0040 7A68     		ldr	r2, [r7, #4]
 709 0042 5269     		ldr	r2, [r2, #20]
 710 0044 9168     		ldr	r1, [r2, #8]
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 711              		.loc 1 503 0
 712 0046 7A68     		ldr	r2, [r7, #4]
 713 0048 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 714              		.loc 1 502 0
 715 004c 4FF00100 		mov	r0, #1
 716 0050 00FA02F2 		lsl	r2, r0, r2
 717 0054 0A43     		orrs	r2, r2, r1
 718 0056 42F44072 		orr	r2, r2, #768
 719 005a 9A60     		str	r2, [r3, #8]
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
 720              		.loc 1 507 0
 721 005c 7B68     		ldr	r3, [r7, #4]
 722 005e 9B69     		ldr	r3, [r3, #24]
 723 0060 4FF00002 		mov	r2, #0
 724 0064 1A60     		str	r2, [r3, #0]
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
 725              		.loc 1 508 0
 726 0066 7B68     		ldr	r3, [r7, #4]
 727 0068 9B69     		ldr	r3, [r3, #24]
 728 006a 4FF00002 		mov	r2, #0
 729 006e 5A60     		str	r2, [r3, #4]
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
 730              		.loc 1 509 0
 731 0070 7B68     		ldr	r3, [r7, #4]
 732 0072 9B69     		ldr	r3, [r3, #24]
 733 0074 4FF00002 		mov	r2, #0
 734 0078 5A61     		str	r2, [r3, #20]
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
 735              		.loc 1 510 0
 736 007a 7B68     		ldr	r3, [r7, #4]
 737 007c 9B69     		ldr	r3, [r3, #24]
 738 007e 4FF00002 		mov	r2, #0
 739 0082 5A62     		str	r2, [r3, #36]
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
 740              		.loc 1 511 0
 741 0084 7B68     		ldr	r3, [r7, #4]
 742 0086 9B69     		ldr	r3, [r3, #24]
 743 0088 4FF00002 		mov	r2, #0
 744 008c 9A61     		str	r2, [r3, #24]
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
 745              		.loc 1 512 0
 746 008e 7B68     		ldr	r3, [r7, #4]
 747 0090 9B69     		ldr	r3, [r3, #24]
 748 0092 4FF00002 		mov	r2, #0
 749 0096 1A62     		str	r2, [r3, #32]
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
 750              		.loc 1 513 0
 751 0098 7B68     		ldr	r3, [r7, #4]
 752 009a 9B69     		ldr	r3, [r3, #24]
 753 009c 4FF00002 		mov	r2, #0
 754 00a0 DA63     		str	r2, [r3, #60]
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
 755              		.loc 1 514 0
 756 00a2 7B68     		ldr	r3, [r7, #4]
 757 00a4 9B69     		ldr	r3, [r3, #24]
 758 00a6 4FF00002 		mov	r2, #0
 759 00aa 5A63     		str	r2, [r3, #52]
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 760              		.loc 1 517 0
 761 00ac 7B68     		ldr	r3, [r7, #4]
 762 00ae 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 763 00b2 012B     		cmp	r3, #1
 764 00b4 54D1     		bne	.L19
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 765              		.loc 1 520 0
 766 00b6 7B68     		ldr	r3, [r7, #4]
 767 00b8 DB69     		ldr	r3, [r3, #28]
 768 00ba 4FF00702 		mov	r2, #7
 769 00be 1A61     		str	r2, [r3, #16]
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 770              		.loc 1 521 0
 771 00c0 7B68     		ldr	r3, [r7, #4]
 772 00c2 DB69     		ldr	r3, [r3, #28]
 773 00c4 40F60F72 		movw	r2, #3855
 774 00c8 C3F8B020 		str	r2, [r3, #176]
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 775              		.loc 1 522 0
 776 00cc 7B68     		ldr	r3, [r7, #4]
 777 00ce DB69     		ldr	r3, [r3, #28]
 778 00d0 4FF00002 		mov	r2, #0
 779 00d4 C3F8A420 		str	r2, [r3, #164]
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 780              		.loc 1 525 0
 781 00d8 4FF40073 		mov	r3, #512
 782 00dc BB61     		str	r3, [r7, #24]
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 783              		.loc 1 526 0
 784 00de 4FF48073 		mov	r3, #256
 785 00e2 7B61     		str	r3, [r7, #20]
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 786              		.loc 1 527 0
 787 00e4 7B68     		ldr	r3, [r7, #4]
 788 00e6 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 789 00ea 3B61     		str	r3, [r7, #16]
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 790              		.loc 1 528 0
 791 00ec 7A69     		ldr	r2, [r7, #20]
 792 00ee BB69     		ldr	r3, [r7, #24]
 793 00f0 1343     		orrs	r3, r3, r2
 794 00f2 FB60     		str	r3, [r7, #12]
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 795              		.loc 1 529 0
 796 00f4 7B68     		ldr	r3, [r7, #4]
 797 00f6 5B69     		ldr	r3, [r3, #20]
 798 00f8 7A68     		ldr	r2, [r7, #4]
 799 00fa 5269     		ldr	r2, [r2, #20]
 800 00fc 9168     		ldr	r1, [r2, #8]
 801 00fe 3A69     		ldr	r2, [r7, #16]
 802 0100 4FF00100 		mov	r0, #1
 803 0104 00FA02F0 		lsl	r0, r0, r2
 804 0108 FA68     		ldr	r2, [r7, #12]
 805 010a 0243     		orrs	r2, r2, r0
 806 010c 0A43     		orrs	r2, r2, r1
 807 010e 9A60     		str	r2, [r3, #8]
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 808              		.loc 1 533 0
 809 0110 7B68     		ldr	r3, [r7, #4]
 810 0112 DB69     		ldr	r3, [r3, #28]
 811 0114 4FF00002 		mov	r2, #0
 812 0118 1A60     		str	r2, [r3, #0]
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 813              		.loc 1 534 0
 814 011a 7B68     		ldr	r3, [r7, #4]
 815 011c DB69     		ldr	r3, [r3, #28]
 816 011e 4FF00002 		mov	r2, #0
 817 0122 5A60     		str	r2, [r3, #4]
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 818              		.loc 1 535 0
 819 0124 7B68     		ldr	r3, [r7, #4]
 820 0126 DB69     		ldr	r3, [r3, #28]
 821 0128 4FF00002 		mov	r2, #0
 822 012c 5A61     		str	r2, [r3, #20]
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 823              		.loc 1 536 0
 824 012e 7B68     		ldr	r3, [r7, #4]
 825 0130 DB69     		ldr	r3, [r3, #28]
 826 0132 4FF00002 		mov	r2, #0
 827 0136 5A62     		str	r2, [r3, #36]
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 828              		.loc 1 537 0
 829 0138 7B68     		ldr	r3, [r7, #4]
 830 013a DB69     		ldr	r3, [r3, #28]
 831 013c 4FF00002 		mov	r2, #0
 832 0140 9A61     		str	r2, [r3, #24]
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 833              		.loc 1 538 0
 834 0142 7B68     		ldr	r3, [r7, #4]
 835 0144 DB69     		ldr	r3, [r3, #28]
 836 0146 4FF00002 		mov	r2, #0
 837 014a 1A62     		str	r2, [r3, #32]
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 838              		.loc 1 539 0
 839 014c 7B68     		ldr	r3, [r7, #4]
 840 014e DB69     		ldr	r3, [r3, #28]
 841 0150 4FF00002 		mov	r2, #0
 842 0154 DA63     		str	r2, [r3, #60]
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 843              		.loc 1 540 0
 844 0156 7B68     		ldr	r3, [r7, #4]
 845 0158 DB69     		ldr	r3, [r3, #28]
 846 015a 4FF00002 		mov	r2, #0
 847 015e 5A63     		str	r2, [r3, #52]
 848              	.L19:
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
 849              		.loc 1 543 0
 850 0160 7B68     		ldr	r3, [r7, #4]
 851 0162 DB6B     		ldr	r3, [r3, #60]
 852 0164 4FF00002 		mov	r2, #0
 853 0168 1A70     		strb	r2, [r3, #0]
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 854              		.loc 1 545 0
 855 016a 4FF00003 		mov	r3, #0
 856 016e FB61     		str	r3, [r7, #28]
 857              	.L18:
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 858              		.loc 1 552 0
 859 0170 FB69     		ldr	r3, [r7, #28]
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 860              		.loc 1 553 0
 861 0172 1846     		mov	r0, r3
 862 0174 07F12407 		add	r7, r7, #36
 863 0178 BD46     		mov	sp, r7
 864 017a 80BC     		pop	{r7}
 865 017c 7047     		bx	lr
 866              		.cfi_endproc
 867              	.LFE122:
 869 017e 00BF     		.section	.text.PWMSP001_Start,"ax",%progbits
 870              		.align	2
 871              		.global	PWMSP001_Start
 872              		.thumb
 873              		.thumb_func
 875              	PWMSP001_Start:
 876              	.LFB123:
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 877              		.loc 1 559 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 16
 880              		@ frame_needed = 1, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882 0000 80B4     		push	{r7}
 883              	.LCFI9:
 884              		.cfi_def_cfa_offset 4
 885              		.cfi_offset 7, -4
 886 0002 85B0     		sub	sp, sp, #20
 887              	.LCFI10:
 888              		.cfi_def_cfa_offset 24
 889 0004 00AF     		add	r7, sp, #0
 890              	.LCFI11:
 891              		.cfi_def_cfa_register 7
 892 0006 7860     		str	r0, [r7, #4]
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 893              		.loc 1 560 0
 894 0008 4FF00103 		mov	r3, #1
 895 000c FB60     		str	r3, [r7, #12]
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 896              		.loc 1 565 0
 897 000e 7B68     		ldr	r3, [r7, #4]
 898 0010 DB6B     		ldr	r3, [r3, #60]
 899 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 900 0014 012B     		cmp	r3, #1
 901 0016 05D0     		beq	.L22
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 902              		.loc 1 566 0 discriminator 1
 903 0018 7B68     		ldr	r3, [r7, #4]
 904 001a DB6B     		ldr	r3, [r3, #60]
 905 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 906              		.loc 1 565 0 discriminator 1
 907 001e 032B     		cmp	r3, #3
 908 0020 40F0A780 		bne	.L29
 909              	.L22:
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 910              		.loc 1 572 0
 911 0024 7B68     		ldr	r3, [r7, #4]
 912 0026 9B69     		ldr	r3, [r3, #24]
 913 0028 40F60F72 		movw	r2, #3855
 914 002c C3F8B020 		str	r2, [r3, #176]
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 915              		.loc 1 575 0
 916 0030 7B68     		ldr	r3, [r7, #4]
 917 0032 5B69     		ldr	r3, [r3, #20]
 918 0034 7A68     		ldr	r2, [r7, #4]
 919 0036 5269     		ldr	r2, [r2, #20]
 920 0038 D168     		ldr	r1, [r2, #12]
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 921              		.loc 1 577 0
 922 003a 7A68     		ldr	r2, [r7, #4]
 923 003c 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 924              		.loc 1 576 0
 925 0040 4FF00100 		mov	r0, #1
 926 0044 00FA02F2 		lsl	r2, r0, r2
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 927              		.loc 1 575 0
 928 0048 0A43     		orrs	r2, r2, r1
 929 004a DA60     		str	r2, [r3, #12]
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 930              		.loc 1 578 0
 931 004c 7B68     		ldr	r3, [r7, #4]
 932 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 933 0052 012B     		cmp	r3, #1
 934 0054 0DD1     		bne	.L24
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 935              		.loc 1 580 0
 936 0056 7B68     		ldr	r3, [r7, #4]
 937 0058 5B69     		ldr	r3, [r3, #20]
 938 005a 7A68     		ldr	r2, [r7, #4]
 939 005c 5269     		ldr	r2, [r2, #20]
 940 005e D168     		ldr	r1, [r2, #12]
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 941              		.loc 1 582 0
 942 0060 7A68     		ldr	r2, [r7, #4]
 943 0062 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 944              		.loc 1 581 0
 945 0066 4FF00100 		mov	r0, #1
 946 006a 00FA02F2 		lsl	r2, r0, r2
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 947              		.loc 1 580 0
 948 006e 0A43     		orrs	r2, r2, r1
 949 0070 DA60     		str	r2, [r3, #12]
 950              	.L24:
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 951              		.loc 1 586 0
 952 0072 7B68     		ldr	r3, [r7, #4]
 953 0074 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 954 0076 002B     		cmp	r3, #0
 955 0078 15D1     		bne	.L25
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 956              		.loc 1 588 0
 957 007a 7B68     		ldr	r3, [r7, #4]
 958 007c 9B69     		ldr	r3, [r3, #24]
 959 007e 7A68     		ldr	r2, [r7, #4]
 960 0080 9269     		ldr	r2, [r2, #24]
 961 0082 D268     		ldr	r2, [r2, #12]
 962 0084 42F00102 		orr	r2, r2, #1
 963 0088 DA60     		str	r2, [r3, #12]
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 964              		.loc 1 589 0
 965 008a 7B68     		ldr	r3, [r7, #4]
 966 008c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 967 0090 012B     		cmp	r3, #1
 968 0092 65D1     		bne	.L26
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 969              		.loc 1 591 0
 970 0094 7B68     		ldr	r3, [r7, #4]
 971 0096 DB69     		ldr	r3, [r3, #28]
 972 0098 7A68     		ldr	r2, [r7, #4]
 973 009a D269     		ldr	r2, [r2, #28]
 974 009c D268     		ldr	r2, [r2, #12]
 975 009e 42F00102 		orr	r2, r2, #1
 976 00a2 DA60     		str	r2, [r3, #12]
 977 00a4 5CE0     		b	.L26
 978              	.L25:
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 979              		.loc 1 597 0
 980 00a6 7B68     		ldr	r3, [r7, #4]
 981 00a8 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 982 00aa 012B     		cmp	r3, #1
 983 00ac 27D1     		bne	.L27
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 984              		.loc 1 599 0
 985 00ae 7B68     		ldr	r3, [r7, #4]
 986 00b0 9A69     		ldr	r2, [r3, #24]
 987 00b2 7B68     		ldr	r3, [r7, #4]
 988 00b4 9B69     		ldr	r3, [r3, #24]
 989 00b6 1B68     		ldr	r3, [r3, #0]
 990 00b8 23F0C063 		bic	r3, r3, #100663296
 991 00bc 23F44033 		bic	r3, r3, #196608
 992 00c0 1360     		str	r3, [r2, #0]
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 993              		.loc 1 601 0
 994 00c2 7B68     		ldr	r3, [r7, #4]
 995 00c4 9B69     		ldr	r3, [r3, #24]
 996 00c6 7A68     		ldr	r2, [r7, #4]
 997 00c8 9269     		ldr	r2, [r2, #24]
 998 00ca 5268     		ldr	r2, [r2, #4]
 999 00cc 22F00302 		bic	r2, r2, #3
 1000 00d0 5A60     		str	r2, [r3, #4]
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 1001              		.loc 1 602 0
 1002 00d2 7B68     		ldr	r3, [r7, #4]
 1003 00d4 9B69     		ldr	r3, [r3, #24]
 1004 00d6 7A68     		ldr	r2, [r7, #4]
 1005 00d8 9269     		ldr	r2, [r2, #24]
 1006 00da 1168     		ldr	r1, [r2, #0]
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 1007              		.loc 1 603 0
 1008 00dc 7A68     		ldr	r2, [r7, #4]
 1009 00de 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 1010 00e2 4FEA0242 		lsl	r2, r2, #16
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 1011              		.loc 1 604 0
 1012 00e6 02F44032 		and	r2, r2, #196608
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 1013              		.loc 1 602 0
 1014 00ea 0A43     		orrs	r2, r2, r1
 1015 00ec 1A60     		str	r2, [r3, #0]
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 1016              		.loc 1 606 0
 1017 00ee 7B68     		ldr	r3, [r7, #4]
 1018 00f0 9B69     		ldr	r3, [r3, #24]
 1019 00f2 7A68     		ldr	r2, [r7, #4]
 1020 00f4 9269     		ldr	r2, [r2, #24]
 1021 00f6 5268     		ldr	r2, [r2, #4]
 1022 00f8 42F00102 		orr	r2, r2, #1
 1023 00fc 5A60     		str	r2, [r3, #4]
 1024              	.L27:
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 1025              		.loc 1 610 0
 1026 00fe 7B68     		ldr	r3, [r7, #4]
 1027 0100 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1028 0102 012B     		cmp	r3, #1
 1029 0104 2CD1     		bne	.L26
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1030              		.loc 1 611 0 discriminator 1
 1031 0106 7B68     		ldr	r3, [r7, #4]
 1032 0108 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 1033              		.loc 1 610 0 discriminator 1
 1034 010c 012B     		cmp	r3, #1
 1035 010e 27D1     		bne	.L26
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 1036              		.loc 1 614 0
 1037 0110 7B68     		ldr	r3, [r7, #4]
 1038 0112 DA69     		ldr	r2, [r3, #28]
 1039 0114 7B68     		ldr	r3, [r7, #4]
 1040 0116 DB69     		ldr	r3, [r3, #28]
 1041 0118 1B68     		ldr	r3, [r3, #0]
 1042 011a 23F0C063 		bic	r3, r3, #100663296
 1043 011e 23F44033 		bic	r3, r3, #196608
 1044 0122 1360     		str	r3, [r2, #0]
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 1045              		.loc 1 615 0
 1046 0124 7B68     		ldr	r3, [r7, #4]
 1047 0126 DB69     		ldr	r3, [r3, #28]
 1048 0128 7A68     		ldr	r2, [r7, #4]
 1049 012a D269     		ldr	r2, [r2, #28]
 1050 012c 5268     		ldr	r2, [r2, #4]
 1051 012e 22F00302 		bic	r2, r2, #3
 1052 0132 5A60     		str	r2, [r3, #4]
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1053              		.loc 1 616 0
 1054 0134 7B68     		ldr	r3, [r7, #4]
 1055 0136 DB69     		ldr	r3, [r3, #28]
 1056 0138 7A68     		ldr	r2, [r7, #4]
 1057 013a D269     		ldr	r2, [r2, #28]
 1058 013c 1168     		ldr	r1, [r2, #0]
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 1059              		.loc 1 617 0
 1060 013e 7A68     		ldr	r2, [r7, #4]
 1061 0140 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 1062 0144 4FEA0242 		lsl	r2, r2, #16
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 1063              		.loc 1 618 0
 1064 0148 02F44032 		and	r2, r2, #196608
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1065              		.loc 1 616 0
 1066 014c 0A43     		orrs	r2, r2, r1
 1067 014e 1A60     		str	r2, [r3, #0]
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 1068              		.loc 1 620 0
 1069 0150 7B68     		ldr	r3, [r7, #4]
 1070 0152 DB69     		ldr	r3, [r3, #28]
 1071 0154 7A68     		ldr	r2, [r7, #4]
 1072 0156 D269     		ldr	r2, [r2, #28]
 1073 0158 5268     		ldr	r2, [r2, #4]
 1074 015a 42F00102 		orr	r2, r2, #1
 1075 015e 5A60     		str	r2, [r3, #4]
 1076              	.L26:
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 1077              		.loc 1 625 0
 1078 0160 7B68     		ldr	r3, [r7, #4]
 1079 0162 DB6B     		ldr	r3, [r3, #60]
 1080 0164 4FF00202 		mov	r2, #2
 1081 0168 1A70     		strb	r2, [r3, #0]
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1082              		.loc 1 626 0
 1083 016a 4FF00003 		mov	r3, #0
 1084 016e FB60     		str	r3, [r7, #12]
 1085 0170 00E0     		b	.L23
 1086              	.L29:
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1087              		.loc 1 569 0
 1088 0172 00BF     		nop
 1089              	.L23:
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1090              		.loc 1 628 0
 1091 0174 FB68     		ldr	r3, [r7, #12]
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1092              		.loc 1 629 0
 1093 0176 1846     		mov	r0, r3
 1094 0178 07F11407 		add	r7, r7, #20
 1095 017c BD46     		mov	sp, r7
 1096 017e 80BC     		pop	{r7}
 1097 0180 7047     		bx	lr
 1098              		.cfi_endproc
 1099              	.LFE123:
 1101 0182 00BF     		.section	.text.PWMSP001_Stop,"ax",%progbits
 1102              		.align	2
 1103              		.global	PWMSP001_Stop
 1104              		.thumb
 1105              		.thumb_func
 1107              	PWMSP001_Stop:
 1108              	.LFB124:
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1109              		.loc 1 634 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 24
 1112              		@ frame_needed = 1, uses_anonymous_args = 0
 1113              		@ link register save eliminated.
 1114 0000 80B4     		push	{r7}
 1115              	.LCFI12:
 1116              		.cfi_def_cfa_offset 4
 1117              		.cfi_offset 7, -4
 1118 0002 87B0     		sub	sp, sp, #28
 1119              	.LCFI13:
 1120              		.cfi_def_cfa_offset 32
 1121 0004 00AF     		add	r7, sp, #0
 1122              	.LCFI14:
 1123              		.cfi_def_cfa_register 7
 1124 0006 7860     		str	r0, [r7, #4]
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1125              		.loc 1 635 0
 1126 0008 4FF00103 		mov	r3, #1
 1127 000c 7B61     		str	r3, [r7, #20]
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 1128              		.loc 1 642 0
 1129 000e 7B68     		ldr	r3, [r7, #4]
 1130 0010 DB6B     		ldr	r3, [r3, #60]
 1131 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1132 0014 022B     		cmp	r3, #2
 1133 0016 41D1     		bne	.L35
 1134              	.L31:
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 1135              		.loc 1 648 0
 1136 0018 7B68     		ldr	r3, [r7, #4]
 1137 001a 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1138 001e 3B61     		str	r3, [r7, #16]
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1139              		.loc 1 649 0
 1140 0020 4FF40073 		mov	r3, #512
 1141 0024 FB60     		str	r3, [r7, #12]
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 1142              		.loc 1 650 0
 1143 0026 7B68     		ldr	r3, [r7, #4]
 1144 0028 9B69     		ldr	r3, [r3, #24]
 1145 002a 4FF00702 		mov	r2, #7
 1146 002e 1A61     		str	r2, [r3, #16]
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 1147              		.loc 1 651 0
 1148 0030 7B68     		ldr	r3, [r7, #4]
 1149 0032 5B69     		ldr	r3, [r3, #20]
 1150 0034 7A68     		ldr	r2, [r7, #4]
 1151 0036 5269     		ldr	r2, [r2, #20]
 1152 0038 9168     		ldr	r1, [r2, #8]
 1153 003a 3A69     		ldr	r2, [r7, #16]
 1154 003c 4FF00100 		mov	r0, #1
 1155 0040 00FA02F0 		lsl	r0, r0, r2
 1156 0044 FA68     		ldr	r2, [r7, #12]
 1157 0046 0243     		orrs	r2, r2, r0
 1158 0048 0A43     		orrs	r2, r2, r1
 1159 004a 9A60     		str	r2, [r3, #8]
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1160              		.loc 1 653 0
 1161 004c 7B68     		ldr	r3, [r7, #4]
 1162 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1163 0052 012B     		cmp	r3, #1
 1164 0054 19D1     		bne	.L33
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 1165              		.loc 1 655 0
 1166 0056 7B68     		ldr	r3, [r7, #4]
 1167 0058 DB69     		ldr	r3, [r3, #28]
 1168 005a 4FF00702 		mov	r2, #7
 1169 005e 1A61     		str	r2, [r3, #16]
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 1170              		.loc 1 656 0
 1171 0060 7B68     		ldr	r3, [r7, #4]
 1172 0062 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1173 0066 3B61     		str	r3, [r7, #16]
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1174              		.loc 1 657 0
 1175 0068 4FF40073 		mov	r3, #512
 1176 006c FB60     		str	r3, [r7, #12]
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1177              		.loc 1 658 0
 1178 006e 7B68     		ldr	r3, [r7, #4]
 1179 0070 5B69     		ldr	r3, [r3, #20]
 1180 0072 7A68     		ldr	r2, [r7, #4]
 1181 0074 5269     		ldr	r2, [r2, #20]
 1182 0076 9168     		ldr	r1, [r2, #8]
 1183 0078 3A69     		ldr	r2, [r7, #16]
 1184 007a 4FF00100 		mov	r0, #1
 1185 007e 00FA02F0 		lsl	r0, r0, r2
 1186 0082 FA68     		ldr	r2, [r7, #12]
 1187 0084 0243     		orrs	r2, r2, r0
 1188 0086 0A43     		orrs	r2, r2, r1
 1189 0088 9A60     		str	r2, [r3, #8]
 1190              	.L33:
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 1191              		.loc 1 661 0
 1192 008a 7B68     		ldr	r3, [r7, #4]
 1193 008c DB6B     		ldr	r3, [r3, #60]
 1194 008e 4FF00302 		mov	r2, #3
 1195 0092 1A70     		strb	r2, [r3, #0]
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1196              		.loc 1 662 0
 1197 0094 4FF00003 		mov	r3, #0
 1198 0098 7B61     		str	r3, [r7, #20]
 1199 009a 00E0     		b	.L32
 1200              	.L35:
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1201              		.loc 1 644 0
 1202 009c 00BF     		nop
 1203              	.L32:
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1204              		.loc 1 670 0
 1205 009e 7B69     		ldr	r3, [r7, #20]
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1206              		.loc 1 671 0
 1207 00a0 1846     		mov	r0, r3
 1208 00a2 07F11C07 		add	r7, r7, #28
 1209 00a6 BD46     		mov	sp, r7
 1210 00a8 80BC     		pop	{r7}
 1211 00aa 7047     		bx	lr
 1212              		.cfi_endproc
 1213              	.LFE124:
 1215              		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 1216              		.align	2
 1217              		.global	PWMSP001_SetCompare
 1218              		.thumb
 1219              		.thumb_func
 1221              	PWMSP001_SetCompare:
 1222              	.LFB125:
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1223              		.loc 1 680 0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 16
 1226              		@ frame_needed = 1, uses_anonymous_args = 0
 1227 0000 80B5     		push	{r7, lr}
 1228              	.LCFI15:
 1229              		.cfi_def_cfa_offset 8
 1230              		.cfi_offset 7, -8
 1231              		.cfi_offset 14, -4
 1232 0002 84B0     		sub	sp, sp, #16
 1233              	.LCFI16:
 1234              		.cfi_def_cfa_offset 24
 1235 0004 00AF     		add	r7, sp, #0
 1236              	.LCFI17:
 1237              		.cfi_def_cfa_register 7
 1238 0006 7860     		str	r0, [r7, #4]
 1239 0008 3960     		str	r1, [r7, #0]
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1240              		.loc 1 681 0
 1241 000a 4FF00103 		mov	r3, #1
 1242 000e FB60     		str	r3, [r7, #12]
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1243              		.loc 1 684 0
 1244 0010 7B68     		ldr	r3, [r7, #4]
 1245 0012 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1246 0016 012B     		cmp	r3, #1
 1247 0018 0AD1     		bne	.L37
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 1248              		.loc 1 685 0
 1249 001a 7B68     		ldr	r3, [r7, #4]
 1250 001c DB69     		ldr	r3, [r3, #28]
 1251 001e 5B6B     		ldr	r3, [r3, #52]
 1252 0020 4FEA0342 		lsl	r2, r3, #16
 1253 0024 7B68     		ldr	r3, [r7, #4]
 1254 0026 9B69     		ldr	r3, [r3, #24]
 1255 0028 5B6B     		ldr	r3, [r3, #52]
 1256 002a 1343     		orrs	r3, r3, r2
 1257 002c BB60     		str	r3, [r7, #8]
 1258 002e 03E0     		b	.L38
 1259              	.L37:
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 1260              		.loc 1 687 0
 1261 0030 7B68     		ldr	r3, [r7, #4]
 1262 0032 9B69     		ldr	r3, [r3, #24]
 1263 0034 5B6B     		ldr	r3, [r3, #52]
 1264 0036 BB60     		str	r3, [r7, #8]
 1265              	.L38:
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1266              		.loc 1 690 0
 1267 0038 7B68     		ldr	r3, [r7, #4]
 1268 003a DB6B     		ldr	r3, [r3, #60]
 1269 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1270 003e 002B     		cmp	r3, #0
 1271 0040 1DD0     		beq	.L39
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1272              		.loc 1 692 0
 1273 0042 7B68     		ldr	r3, [r7, #4]
 1274 0044 DA6A     		ldr	r2, [r3, #44]
 1275 0046 3B68     		ldr	r3, [r7, #0]
 1276 0048 9A42     		cmp	r2, r3
 1277 004a 08D2     		bcs	.L40
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 1278              		.loc 1 693 0 discriminator 1
 1279 004c 7B68     		ldr	r3, [r7, #4]
 1280 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1281              		.loc 1 692 0 discriminator 1
 1282 0052 002B     		cmp	r3, #0
 1283 0054 03D1     		bne	.L40
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1284              		.loc 1 695 0
 1285 0056 4FF00203 		mov	r3, #2
 1286 005a FB60     		str	r3, [r7, #12]
 1287 005c 0FE0     		b	.L39
 1288              	.L40:
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 1289              		.loc 1 701 0
 1290 005e 3A68     		ldr	r2, [r7, #0]
 1291 0060 BB68     		ldr	r3, [r7, #8]
 1292 0062 9A42     		cmp	r2, r3
 1293 0064 03D3     		bcc	.L41
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 1294              		.loc 1 703 0
 1295 0066 BB68     		ldr	r3, [r7, #8]
 1296 0068 03F10103 		add	r3, r3, #1
 1297 006c 3B60     		str	r3, [r7, #0]
 1298              	.L41:
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1299              		.loc 1 706 0
 1300 006e 7B68     		ldr	r3, [r7, #4]
 1301 0070 1B6C     		ldr	r3, [r3, #64]
 1302 0072 7868     		ldr	r0, [r7, #4]
 1303 0074 3968     		ldr	r1, [r7, #0]
 1304 0076 9847     		blx	r3
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1305              		.loc 1 707 0
 1306 0078 4FF00003 		mov	r3, #0
 1307 007c FB60     		str	r3, [r7, #12]
 1308              	.L39:
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1309              		.loc 1 710 0
 1310 007e FB68     		ldr	r3, [r7, #12]
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1311              		.loc 1 711 0
 1312 0080 1846     		mov	r0, r3
 1313 0082 07F11007 		add	r7, r7, #16
 1314 0086 BD46     		mov	sp, r7
 1315 0088 80BD     		pop	{r7, pc}
 1316              		.cfi_endproc
 1317              	.LFE125:
 1319 008a 00BF     		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 1320              		.align	2
 1321              		.global	PWMSP001_lSetCompareEdgeAlign
 1322              		.thumb
 1323              		.thumb_func
 1325              	PWMSP001_lSetCompareEdgeAlign:
 1326              	.LFB126:
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1327              		.loc 1 722 0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 24
 1330              		@ frame_needed = 1, uses_anonymous_args = 0
 1331              		@ link register save eliminated.
 1332 0000 80B4     		push	{r7}
 1333              	.LCFI18:
 1334              		.cfi_def_cfa_offset 4
 1335              		.cfi_offset 7, -4
 1336 0002 87B0     		sub	sp, sp, #28
 1337              	.LCFI19:
 1338              		.cfi_def_cfa_offset 32
 1339 0004 00AF     		add	r7, sp, #0
 1340              	.LCFI20:
 1341              		.cfi_def_cfa_register 7
 1342 0006 7860     		str	r0, [r7, #4]
 1343 0008 3960     		str	r1, [r7, #0]
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1344              		.loc 1 725 0
 1345 000a 7B68     		ldr	r3, [r7, #4]
 1346 000c 7B61     		str	r3, [r7, #20]
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1347              		.loc 1 726 0
 1348 000e 7B69     		ldr	r3, [r7, #20]
 1349 0010 9A69     		ldr	r2, [r3, #24]
 1350 0012 3B68     		ldr	r3, [r7, #0]
 1351 0014 4FEA0343 		lsl	r3, r3, #16
 1352 0018 4FEA1343 		lsr	r3, r3, #16
 1353 001c D363     		str	r3, [r2, #60]
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 1354              		.loc 1 729 0
 1355 001e 7B69     		ldr	r3, [r7, #20]
 1356 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1357 0024 4FEA8303 		lsl	r3, r3, #2
 1358 0028 3B61     		str	r3, [r7, #16]
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 1359              		.loc 1 730 0
 1360 002a 3B69     		ldr	r3, [r7, #16]
 1361 002c FB60     		str	r3, [r7, #12]
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1362              		.loc 1 731 0
 1363 002e 7B69     		ldr	r3, [r7, #20]
 1364 0030 5B69     		ldr	r3, [r3, #20]
 1365 0032 7A69     		ldr	r2, [r7, #20]
 1366 0034 5269     		ldr	r2, [r2, #20]
 1367 0036 1169     		ldr	r1, [r2, #16]
 1368 0038 FA68     		ldr	r2, [r7, #12]
 1369 003a 4FF00100 		mov	r0, #1
 1370 003e 00FA02F2 		lsl	r2, r0, r2
 1371 0042 0A43     		orrs	r2, r2, r1
 1372 0044 1A61     		str	r2, [r3, #16]
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1373              		.loc 1 732 0
 1374 0046 07F11C07 		add	r7, r7, #28
 1375 004a BD46     		mov	sp, r7
 1376 004c 80BC     		pop	{r7}
 1377 004e 7047     		bx	lr
 1378              		.cfi_endproc
 1379              	.LFE126:
 1381              		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 1382              		.align	2
 1383              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 1384              		.thumb
 1385              		.thumb_func
 1387              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 1388              	.LFB127:
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1389              		.loc 1 743 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 32
 1392              		@ frame_needed = 1, uses_anonymous_args = 0
 1393              		@ link register save eliminated.
 1394 0000 90B4     		push	{r4, r7}
 1395              	.LCFI21:
 1396              		.cfi_def_cfa_offset 8
 1397              		.cfi_offset 4, -8
 1398              		.cfi_offset 7, -4
 1399 0002 88B0     		sub	sp, sp, #32
 1400              	.LCFI22:
 1401              		.cfi_def_cfa_offset 40
 1402 0004 00AF     		add	r7, sp, #0
 1403              	.LCFI23:
 1404              		.cfi_def_cfa_register 7
 1405 0006 7860     		str	r0, [r7, #4]
 1406 0008 3960     		str	r1, [r7, #0]
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 1407              		.loc 1 744 0
 1408 000a 4FF00003 		mov	r3, #0
 1409 000e FB61     		str	r3, [r7, #28]
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 1410              		.loc 1 745 0
 1411 0010 4FF00003 		mov	r3, #0
 1412 0014 BB61     		str	r3, [r7, #24]
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1413              		.loc 1 748 0
 1414 0016 7B68     		ldr	r3, [r7, #4]
 1415 0018 7B61     		str	r3, [r7, #20]
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1416              		.loc 1 758 0
 1417 001a 7B69     		ldr	r3, [r7, #20]
 1418 001c 9B69     		ldr	r3, [r3, #24]
 1419 001e 5B6B     		ldr	r3, [r3, #52]
 1420 0020 9BB2     		uxth	r3, r3
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 1421              		.loc 1 757 0
 1422 0022 1A46     		mov	r2, r3
 1423 0024 3B68     		ldr	r3, [r7, #0]
 1424 0026 B3FBF2F1 		udiv	r1, r3, r2
 1425 002a 02FB01F2 		mul	r2, r2, r1
 1426 002e 9B1A     		subs	r3, r3, r2
 1427 0030 FB61     		str	r3, [r7, #28]
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1428              		.loc 1 760 0
 1429 0032 7B69     		ldr	r3, [r7, #20]
 1430 0034 9B69     		ldr	r3, [r3, #24]
 1431 0036 5B6B     		ldr	r3, [r3, #52]
 1432 0038 9BB2     		uxth	r3, r3
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 1433              		.loc 1 759 0
 1434 003a 3A68     		ldr	r2, [r7, #0]
 1435 003c B2FBF3F3 		udiv	r3, r2, r3
 1436 0040 BB61     		str	r3, [r7, #24]
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 1437              		.loc 1 762 0
 1438 0042 7B69     		ldr	r3, [r7, #20]
 1439 0044 9A69     		ldr	r2, [r3, #24]
 1440 0046 FB69     		ldr	r3, [r7, #28]
 1441 0048 4FEA0343 		lsl	r3, r3, #16
 1442 004c 4FEA1343 		lsr	r3, r3, #16
 1443 0050 D363     		str	r3, [r2, #60]
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 1444              		.loc 1 763 0
 1445 0052 7B69     		ldr	r3, [r7, #20]
 1446 0054 DA69     		ldr	r2, [r3, #28]
 1447 0056 BB69     		ldr	r3, [r7, #24]
 1448 0058 4FEA0343 		lsl	r3, r3, #16
 1449 005c 4FEA1343 		lsr	r3, r3, #16
 1450 0060 D363     		str	r3, [r2, #60]
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1451              		.loc 1 765 0
 1452 0062 7B69     		ldr	r3, [r7, #20]
 1453 0064 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1454 0068 4FEA8303 		lsl	r3, r3, #2
 1455 006c 3B61     		str	r3, [r7, #16]
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1456              		.loc 1 766 0
 1457 006e 7B69     		ldr	r3, [r7, #20]
 1458 0070 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1459 0074 4FEA8303 		lsl	r3, r3, #2
 1460 0078 FB60     		str	r3, [r7, #12]
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 1461              		.loc 1 767 0
 1462 007a 7B69     		ldr	r3, [r7, #20]
 1463 007c 5B69     		ldr	r3, [r3, #20]
 1464 007e 7A69     		ldr	r2, [r7, #20]
 1465 0080 5269     		ldr	r2, [r2, #20]
 1466 0082 1169     		ldr	r1, [r2, #16]
 1467 0084 FA68     		ldr	r2, [r7, #12]
 1468 0086 4FF00100 		mov	r0, #1
 1469 008a 00FA02F0 		lsl	r0, r0, r2
 1470 008e 3A69     		ldr	r2, [r7, #16]
 1471 0090 4FF00104 		mov	r4, #1
 1472 0094 04FA02F2 		lsl	r2, r4, r2
 1473 0098 0243     		orrs	r2, r2, r0
 1474 009a 0A43     		orrs	r2, r2, r1
 1475 009c 1A61     		str	r2, [r3, #16]
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1476              		.loc 1 768 0
 1477 009e 07F12007 		add	r7, r7, #32
 1478 00a2 BD46     		mov	sp, r7
 1479 00a4 90BC     		pop	{r4, r7}
 1480 00a6 7047     		bx	lr
 1481              		.cfi_endproc
 1482              	.LFE127:
 1484              		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 1485              		.align	2
 1486              		.global	PWMSP001_lSetCompareCenterAlign
 1487              		.thumb
 1488              		.thumb_func
 1490              	PWMSP001_lSetCompareCenterAlign:
 1491              	.LFB128:
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1492              		.loc 1 779 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 16
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496              		@ link register save eliminated.
 1497 0000 80B4     		push	{r7}
 1498              	.LCFI24:
 1499              		.cfi_def_cfa_offset 4
 1500              		.cfi_offset 7, -4
 1501 0002 85B0     		sub	sp, sp, #20
 1502              	.LCFI25:
 1503              		.cfi_def_cfa_offset 24
 1504 0004 00AF     		add	r7, sp, #0
 1505              	.LCFI26:
 1506              		.cfi_def_cfa_register 7
 1507 0006 7860     		str	r0, [r7, #4]
 1508 0008 3960     		str	r1, [r7, #0]
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1509              		.loc 1 782 0
 1510 000a 7B68     		ldr	r3, [r7, #4]
 1511 000c FB60     		str	r3, [r7, #12]
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1512              		.loc 1 783 0
 1513 000e FB68     		ldr	r3, [r7, #12]
 1514 0010 9A69     		ldr	r2, [r3, #24]
 1515 0012 3B68     		ldr	r3, [r7, #0]
 1516 0014 4FEA0343 		lsl	r3, r3, #16
 1517 0018 4FEA1343 		lsr	r3, r3, #16
 1518 001c D363     		str	r3, [r2, #60]
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 1519              		.loc 1 786 0
 1520 001e FB68     		ldr	r3, [r7, #12]
 1521 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1522 0024 4FEA8303 		lsl	r3, r3, #2
 1523 0028 BB60     		str	r3, [r7, #8]
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1524              		.loc 1 787 0
 1525 002a FB68     		ldr	r3, [r7, #12]
 1526 002c 5B69     		ldr	r3, [r3, #20]
 1527 002e FA68     		ldr	r2, [r7, #12]
 1528 0030 5269     		ldr	r2, [r2, #20]
 1529 0032 1169     		ldr	r1, [r2, #16]
 1530 0034 BA68     		ldr	r2, [r7, #8]
 1531 0036 4FF00100 		mov	r0, #1
 1532 003a 00FA02F2 		lsl	r2, r0, r2
 1533 003e 0A43     		orrs	r2, r2, r1
 1534 0040 1A61     		str	r2, [r3, #16]
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1535              		.loc 1 788 0
 1536 0042 07F11407 		add	r7, r7, #20
 1537 0046 BD46     		mov	sp, r7
 1538 0048 80BC     		pop	{r7}
 1539 004a 7047     		bx	lr
 1540              		.cfi_endproc
 1541              	.LFE128:
 1543              		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 1544              		.align	2
 1545              		.global	PWMSP001_SetDutyCycle
 1546              		.thumb
 1547              		.thumb_func
 1549              	PWMSP001_SetDutyCycle:
 1550              	.LFB129:
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1551              		.loc 1 800 0
 1552              		.cfi_startproc
 1553              		@ args = 0, pretend = 0, frame = 16
 1554              		@ frame_needed = 1, uses_anonymous_args = 0
 1555 0000 80B5     		push	{r7, lr}
 1556              	.LCFI27:
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 7, -8
 1559              		.cfi_offset 14, -4
 1560 0002 84B0     		sub	sp, sp, #16
 1561              	.LCFI28:
 1562              		.cfi_def_cfa_offset 24
 1563 0004 00AF     		add	r7, sp, #0
 1564              	.LCFI29:
 1565              		.cfi_def_cfa_register 7
 1566 0006 7860     		str	r0, [r7, #4]
 1567 0008 3960     		str	r1, [r7, #0]	@ float
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1568              		.loc 1 801 0
 1569 000a 4FF00103 		mov	r3, #1
 1570 000e FB60     		str	r3, [r7, #12]
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1571              		.loc 1 803 0
 1572 0010 7B68     		ldr	r3, [r7, #4]
 1573 0012 DB6B     		ldr	r3, [r3, #60]
 1574 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1575 0016 002B     		cmp	r3, #0
 1576 0018 1BD0     		beq	.L47
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 1577              		.loc 1 805 0
 1578 001a 97ED007A 		flds	s14, [r7, #0]
 1579 001e DFED107A 		flds	s15, .L53
 1580 0022 B4EEE77A 		fcmpes	s14, s15
 1581 0026 F1EE10FA 		fmstat
 1582 002a 06DC     		bgt	.L48
 1583              		.loc 1 805 0 is_stmt 0 discriminator 1
 1584 002c D7ED007A 		flds	s15, [r7, #0]
 1585 0030 F5EEC07A 		fcmpezs	s15
 1586 0034 F1EE10FA 		fmstat
 1587 0038 03D5     		bpl	.L52
 1588              	.L48:
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1589              		.loc 1 807 0 is_stmt 1
 1590 003a 4FF00203 		mov	r3, #2
 1591 003e FB60     		str	r3, [r7, #12]
 1592 0040 07E0     		b	.L47
 1593              	.L52:
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1594              		.loc 1 812 0
 1595 0042 7B68     		ldr	r3, [r7, #4]
 1596 0044 5B6C     		ldr	r3, [r3, #68]
 1597 0046 7868     		ldr	r0, [r7, #4]
 1598 0048 3968     		ldr	r1, [r7, #0]	@ float
 1599 004a 9847     		blx	r3
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1600              		.loc 1 813 0
 1601 004c 4FF00003 		mov	r3, #0
 1602 0050 FB60     		str	r3, [r7, #12]
 1603              	.L47:
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 1604              		.loc 1 816 0
 1605 0052 FB68     		ldr	r3, [r7, #12]
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1606              		.loc 1 817 0
 1607 0054 1846     		mov	r0, r3
 1608 0056 07F11007 		add	r7, r7, #16
 1609 005a BD46     		mov	sp, r7
 1610 005c 80BD     		pop	{r7, pc}
 1611              	.L54:
 1612 005e 00BF     		.align	2
 1613              	.L53:
 1614 0060 0000C842 		.word	1120403456
 1615              		.cfi_endproc
 1616              	.LFE129:
 1618              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 1619              		.align	2
 1620              		.global	PWMSP001_lSetDutyEdgeAlign
 1621              		.thumb
 1622              		.thumb_func
 1624              	PWMSP001_lSetDutyEdgeAlign:
 1625              	.LFB130:
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1626              		.loc 1 828 0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 32
 1629              		@ frame_needed = 1, uses_anonymous_args = 0
 1630              		@ link register save eliminated.
 1631 0000 80B4     		push	{r7}
 1632              	.LCFI30:
 1633              		.cfi_def_cfa_offset 4
 1634              		.cfi_offset 7, -4
 1635 0002 89B0     		sub	sp, sp, #36
 1636              	.LCFI31:
 1637              		.cfi_def_cfa_offset 40
 1638 0004 00AF     		add	r7, sp, #0
 1639              	.LCFI32:
 1640              		.cfi_def_cfa_register 7
 1641 0006 7860     		str	r0, [r7, #4]
 1642 0008 3960     		str	r1, [r7, #0]	@ float
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1643              		.loc 1 829 0
 1644 000a 4FF00003 		mov	r3, #0
 1645 000e FB61     		str	r3, [r7, #28]
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1646              		.loc 1 832 0
 1647 0010 7B68     		ldr	r3, [r7, #4]
 1648 0012 BB61     		str	r3, [r7, #24]
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1649              		.loc 1 833 0
 1650 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1651 0016 7B61     		str	r3, [r7, #20]	@ float
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1652              		.loc 1 837 0
 1653 0018 9FED1F7A 		flds	s14, .L56
 1654 001c D7ED057A 		flds	s15, [r7, #20]
 1655 0020 37EE677A 		fsubs	s14, s14, s15
 1656 0024 DFED1C7A 		flds	s15, .L56
 1657 0028 C7EE277A 		fdivs	s15, s14, s15
 1658 002c C7ED057A 		fsts	s15, [r7, #20]
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 1659              		.loc 1 838 0
 1660 0030 BB69     		ldr	r3, [r7, #24]
 1661 0032 9B69     		ldr	r3, [r3, #24]
 1662 0034 5B6B     		ldr	r3, [r3, #52]
 1663 0036 03F10103 		add	r3, r3, #1
 1664 003a 07EE103A 		fmsr	s14, r3	@ int
 1665 003e F8EE477A 		fuitos	s15, s14
 1666 0042 C7ED047A 		fsts	s15, [r7, #16]
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1667              		.loc 1 839 0
 1668 0046 97ED047A 		flds	s14, [r7, #16]
 1669 004a D7ED057A 		flds	s15, [r7, #20]
 1670 004e 67EE277A 		fmuls	s15, s14, s15
 1671 0052 FCEEE77A 		ftouizs	s15, s15
 1672 0056 C7ED077A 		fsts	s15, [r7, #28]	@ int
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 1673              		.loc 1 840 0
 1674 005a BB69     		ldr	r3, [r7, #24]
 1675 005c 9A69     		ldr	r2, [r3, #24]
 1676 005e FB69     		ldr	r3, [r7, #28]
 1677 0060 4FEA0343 		lsl	r3, r3, #16
 1678 0064 4FEA1343 		lsr	r3, r3, #16
 1679 0068 D363     		str	r3, [r2, #60]
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 1680              		.loc 1 843 0
 1681 006a BB69     		ldr	r3, [r7, #24]
 1682 006c 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1683 0070 4FEA8303 		lsl	r3, r3, #2
 1684 0074 FB60     		str	r3, [r7, #12]
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1685              		.loc 1 844 0
 1686 0076 BB69     		ldr	r3, [r7, #24]
 1687 0078 5B69     		ldr	r3, [r3, #20]
 1688 007a BA69     		ldr	r2, [r7, #24]
 1689 007c 5269     		ldr	r2, [r2, #20]
 1690 007e 1169     		ldr	r1, [r2, #16]
 1691 0080 FA68     		ldr	r2, [r7, #12]
 1692 0082 4FF00100 		mov	r0, #1
 1693 0086 00FA02F2 		lsl	r2, r0, r2
 1694 008a 0A43     		orrs	r2, r2, r1
 1695 008c 1A61     		str	r2, [r3, #16]
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1696              		.loc 1 846 0
 1697 008e 07F12407 		add	r7, r7, #36
 1698 0092 BD46     		mov	sp, r7
 1699 0094 80BC     		pop	{r7}
 1700 0096 7047     		bx	lr
 1701              	.L57:
 1702              		.align	2
 1703              	.L56:
 1704 0098 0000C842 		.word	1120403456
 1705              		.cfi_endproc
 1706              	.LFE130:
 1708              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 1709              		.align	2
 1710              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 1711              		.thumb
 1712              		.thumb_func
 1714              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 1715              	.LFB131:
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1716              		.loc 1 857 0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 40
 1719              		@ frame_needed = 1, uses_anonymous_args = 0
 1720              		@ link register save eliminated.
 1721 0000 90B4     		push	{r4, r7}
 1722              	.LCFI33:
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 4, -8
 1725              		.cfi_offset 7, -4
 1726 0002 8AB0     		sub	sp, sp, #40
 1727              	.LCFI34:
 1728              		.cfi_def_cfa_offset 48
 1729 0004 00AF     		add	r7, sp, #0
 1730              	.LCFI35:
 1731              		.cfi_def_cfa_register 7
 1732 0006 7860     		str	r0, [r7, #4]
 1733 0008 3960     		str	r1, [r7, #0]	@ float
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 1734              		.loc 1 858 0
 1735 000a 4FF00003 		mov	r3, #0
 1736 000e 7B62     		str	r3, [r7, #36]
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1737              		.loc 1 859 0
 1738 0010 4FF00003 		mov	r3, #0
 1739 0014 3B62     		str	r3, [r7, #32]
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 1740              		.loc 1 860 0
 1741 0016 4FF00003 		mov	r3, #0
 1742 001a FB61     		str	r3, [r7, #28]
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1743              		.loc 1 864 0
 1744 001c 7B68     		ldr	r3, [r7, #4]
 1745 001e BB61     		str	r3, [r7, #24]
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1746              		.loc 1 866 0
 1747 0020 3B68     		ldr	r3, [r7, #0]	@ float
 1748 0022 7B61     		str	r3, [r7, #20]	@ float
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 1749              		.loc 1 869 0
 1750 0024 BB69     		ldr	r3, [r7, #24]
 1751 0026 DB69     		ldr	r3, [r3, #28]
 1752 0028 5B6B     		ldr	r3, [r3, #52]
 1753 002a 03F10103 		add	r3, r3, #1
 1754 002e 7B62     		str	r3, [r7, #36]
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 1755              		.loc 1 870 0
 1756 0030 BB69     		ldr	r3, [r7, #24]
 1757 0032 9B69     		ldr	r3, [r3, #24]
 1758 0034 5B6B     		ldr	r3, [r3, #52]
 1759 0036 4FEA0343 		lsl	r3, r3, #16
 1760 003a 4FEA1343 		lsr	r3, r3, #16
 1761 003e 03F10102 		add	r2, r3, #1
 1762 0042 7B6A     		ldr	r3, [r7, #36]
 1763 0044 02FB03F3 		mul	r3, r2, r3
 1764 0048 7B62     		str	r3, [r7, #36]
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 1765              		.loc 1 871 0
 1766 004a 7B6A     		ldr	r3, [r7, #36]
 1767 004c 03F10103 		add	r3, r3, #1
 1768 0050 7B62     		str	r3, [r7, #36]
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 1769              		.loc 1 873 0
 1770 0052 9FED347A 		flds	s14, .L59
 1771 0056 D7ED057A 		flds	s15, [r7, #20]
 1772 005a 37EE677A 		fsubs	s14, s14, s15
 1773 005e DFED317A 		flds	s15, .L59
 1774 0062 C7EE277A 		fdivs	s15, s14, s15
 1775 0066 C7ED057A 		fsts	s15, [r7, #20]
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 1776              		.loc 1 874 0
 1777 006a D7ED097A 		flds	s15, [r7, #36]	@ int
 1778 006e F8EE677A 		fuitos	s15, s15
 1779 0072 C7ED047A 		fsts	s15, [r7, #16]
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 1780              		.loc 1 875 0
 1781 0076 97ED047A 		flds	s14, [r7, #16]
 1782 007a D7ED057A 		flds	s15, [r7, #20]
 1783 007e 67EE277A 		fmuls	s15, s14, s15
 1784 0082 FCEEE77A 		ftouizs	s15, s15
 1785 0086 C7ED097A 		fsts	s15, [r7, #36]	@ int
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1786              		.loc 1 878 0
 1787 008a BB69     		ldr	r3, [r7, #24]
 1788 008c 9B69     		ldr	r3, [r3, #24]
 1789 008e 5B6B     		ldr	r3, [r3, #52]
 1790 0090 4FEA0343 		lsl	r3, r3, #16
 1791 0094 4FEA1343 		lsr	r3, r3, #16
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 1792              		.loc 1 877 0
 1793 0098 7A6A     		ldr	r2, [r7, #36]
 1794 009a B2FBF3F1 		udiv	r1, r2, r3
 1795 009e 03FB01F3 		mul	r3, r3, r1
 1796 00a2 D31A     		subs	r3, r2, r3
 1797 00a4 3B62     		str	r3, [r7, #32]
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1798              		.loc 1 879 0
 1799 00a6 BB69     		ldr	r3, [r7, #24]
 1800 00a8 9A69     		ldr	r2, [r3, #24]
 1801 00aa 3B6A     		ldr	r3, [r7, #32]
 1802 00ac 4FEA0343 		lsl	r3, r3, #16
 1803 00b0 4FEA1343 		lsr	r3, r3, #16
 1804 00b4 D363     		str	r3, [r2, #60]
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1805              		.loc 1 881 0
 1806 00b6 BB69     		ldr	r3, [r7, #24]
 1807 00b8 9B69     		ldr	r3, [r3, #24]
 1808 00ba 5B6B     		ldr	r3, [r3, #52]
 1809 00bc 4FEA0343 		lsl	r3, r3, #16
 1810 00c0 4FEA1343 		lsr	r3, r3, #16
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 1811              		.loc 1 880 0
 1812 00c4 7A6A     		ldr	r2, [r7, #36]
 1813 00c6 B2FBF3F3 		udiv	r3, r2, r3
 1814 00ca FB61     		str	r3, [r7, #28]
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 1815              		.loc 1 882 0
 1816 00cc BB69     		ldr	r3, [r7, #24]
 1817 00ce DA69     		ldr	r2, [r3, #28]
 1818 00d0 FB69     		ldr	r3, [r7, #28]
 1819 00d2 4FEA0343 		lsl	r3, r3, #16
 1820 00d6 4FEA1343 		lsr	r3, r3, #16
 1821 00da D363     		str	r3, [r2, #60]
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1822              		.loc 1 885 0
 1823 00dc BB69     		ldr	r3, [r7, #24]
 1824 00de 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1825 00e2 4FEA8303 		lsl	r3, r3, #2
 1826 00e6 FB60     		str	r3, [r7, #12]
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1827              		.loc 1 886 0
 1828 00e8 BB69     		ldr	r3, [r7, #24]
 1829 00ea 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1830 00ee 4FEA8303 		lsl	r3, r3, #2
 1831 00f2 BB60     		str	r3, [r7, #8]
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 1832              		.loc 1 887 0
 1833 00f4 BB69     		ldr	r3, [r7, #24]
 1834 00f6 5B69     		ldr	r3, [r3, #20]
 1835 00f8 BA69     		ldr	r2, [r7, #24]
 1836 00fa 5269     		ldr	r2, [r2, #20]
 1837 00fc 1169     		ldr	r1, [r2, #16]
 1838 00fe FA68     		ldr	r2, [r7, #12]
 1839 0100 4FF00100 		mov	r0, #1
 1840 0104 00FA02F0 		lsl	r0, r0, r2
 1841 0108 BA68     		ldr	r2, [r7, #8]
 1842 010a 4FF00104 		mov	r4, #1
 1843 010e 04FA02F2 		lsl	r2, r4, r2
 1844 0112 0243     		orrs	r2, r2, r0
 1845 0114 0A43     		orrs	r2, r2, r1
 1846 0116 1A61     		str	r2, [r3, #16]
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1847              		.loc 1 888 0
 1848 0118 07F12807 		add	r7, r7, #40
 1849 011c BD46     		mov	sp, r7
 1850 011e 90BC     		pop	{r4, r7}
 1851 0120 7047     		bx	lr
 1852              	.L60:
 1853 0122 00BF     		.align	2
 1854              	.L59:
 1855 0124 0000C842 		.word	1120403456
 1856              		.cfi_endproc
 1857              	.LFE131:
 1859              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 1860              		.align	2
 1861              		.global	PWMSP001_lSetDutyCenterAlign
 1862              		.thumb
 1863              		.thumb_func
 1865              	PWMSP001_lSetDutyCenterAlign:
 1866              	.LFB132:
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1867              		.loc 1 899 0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 32
 1870              		@ frame_needed = 1, uses_anonymous_args = 0
 1871              		@ link register save eliminated.
 1872 0000 80B4     		push	{r7}
 1873              	.LCFI36:
 1874              		.cfi_def_cfa_offset 4
 1875              		.cfi_offset 7, -4
 1876 0002 89B0     		sub	sp, sp, #36
 1877              	.LCFI37:
 1878              		.cfi_def_cfa_offset 40
 1879 0004 00AF     		add	r7, sp, #0
 1880              	.LCFI38:
 1881              		.cfi_def_cfa_register 7
 1882 0006 7860     		str	r0, [r7, #4]
 1883 0008 3960     		str	r1, [r7, #0]	@ float
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 1884              		.loc 1 901 0
 1885 000a 4FF00003 		mov	r3, #0
 1886 000e FB61     		str	r3, [r7, #28]
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1887              		.loc 1 904 0
 1888 0010 7B68     		ldr	r3, [r7, #4]
 1889 0012 BB61     		str	r3, [r7, #24]
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1890              		.loc 1 905 0
 1891 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1892 0016 7B61     		str	r3, [r7, #20]	@ float
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1893              		.loc 1 907 0
 1894 0018 9FED1E7A 		flds	s14, .L62
 1895 001c D7ED057A 		flds	s15, [r7, #20]
 1896 0020 37EE677A 		fsubs	s14, s14, s15
 1897 0024 DFED1B7A 		flds	s15, .L62
 1898 0028 C7EE277A 		fdivs	s15, s14, s15
 1899 002c C7ED057A 		fsts	s15, [r7, #20]
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 1900              		.loc 1 908 0
 1901 0030 BB69     		ldr	r3, [r7, #24]
 1902 0032 9B69     		ldr	r3, [r3, #24]
 1903 0034 D3ED0D7A 		flds	s15, [r3, #52]	@ int
 1904 0038 F8EE677A 		fuitos	s15, s15
 1905 003c C7ED047A 		fsts	s15, [r7, #16]
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1906              		.loc 1 909 0
 1907 0040 97ED047A 		flds	s14, [r7, #16]
 1908 0044 D7ED057A 		flds	s15, [r7, #20]
 1909 0048 67EE277A 		fmuls	s15, s14, s15
 1910 004c FCEEE77A 		ftouizs	s15, s15
 1911 0050 C7ED077A 		fsts	s15, [r7, #28]	@ int
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1912              		.loc 1 910 0
 1913 0054 BB69     		ldr	r3, [r7, #24]
 1914 0056 9A69     		ldr	r2, [r3, #24]
 1915 0058 FB69     		ldr	r3, [r7, #28]
 1916 005a 4FEA0343 		lsl	r3, r3, #16
 1917 005e 4FEA1343 		lsr	r3, r3, #16
 1918 0062 D363     		str	r3, [r2, #60]
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1919              		.loc 1 913 0
 1920 0064 BB69     		ldr	r3, [r7, #24]
 1921 0066 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1922 006a 4FEA8303 		lsl	r3, r3, #2
 1923 006e FB60     		str	r3, [r7, #12]
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1924              		.loc 1 914 0
 1925 0070 BB69     		ldr	r3, [r7, #24]
 1926 0072 5B69     		ldr	r3, [r3, #20]
 1927 0074 BA69     		ldr	r2, [r7, #24]
 1928 0076 5269     		ldr	r2, [r2, #20]
 1929 0078 1169     		ldr	r1, [r2, #16]
 1930 007a FA68     		ldr	r2, [r7, #12]
 1931 007c 4FF00100 		mov	r0, #1
 1932 0080 00FA02F2 		lsl	r2, r0, r2
 1933 0084 0A43     		orrs	r2, r2, r1
 1934 0086 1A61     		str	r2, [r3, #16]
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1935              		.loc 1 915 0
 1936 0088 07F12407 		add	r7, r7, #36
 1937 008c BD46     		mov	sp, r7
 1938 008e 80BC     		pop	{r7}
 1939 0090 7047     		bx	lr
 1940              	.L63:
 1941 0092 00BF     		.align	2
 1942              	.L62:
 1943 0094 0000C842 		.word	1120403456
 1944              		.cfi_endproc
 1945              	.LFE132:
 1947              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 1948              		.align	2
 1949              		.global	PWMSP001_SetPeriodAndCompare
 1950              		.thumb
 1951              		.thumb_func
 1953              	PWMSP001_SetPeriodAndCompare:
 1954              	.LFB133:
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1955              		.loc 1 928 0
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 24
 1958              		@ frame_needed = 1, uses_anonymous_args = 0
 1959 0000 80B5     		push	{r7, lr}
 1960              	.LCFI39:
 1961              		.cfi_def_cfa_offset 8
 1962              		.cfi_offset 7, -8
 1963              		.cfi_offset 14, -4
 1964 0002 86B0     		sub	sp, sp, #24
 1965              	.LCFI40:
 1966              		.cfi_def_cfa_offset 32
 1967 0004 00AF     		add	r7, sp, #0
 1968              	.LCFI41:
 1969              		.cfi_def_cfa_register 7
 1970 0006 F860     		str	r0, [r7, #12]
 1971 0008 B960     		str	r1, [r7, #8]
 1972 000a 7A60     		str	r2, [r7, #4]
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1973              		.loc 1 929 0
 1974 000c 4FF00103 		mov	r3, #1
 1975 0010 7B61     		str	r3, [r7, #20]
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 1976              		.loc 1 930 0
 1977 0012 4FF00003 		mov	r3, #0
 1978 0016 3B61     		str	r3, [r7, #16]
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1979              		.loc 1 932 0
 1980 0018 FB68     		ldr	r3, [r7, #12]
 1981 001a DB6B     		ldr	r3, [r3, #60]
 1982 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1983 001e 002B     		cmp	r3, #0
 1984 0020 3BD0     		beq	.L65
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1985              		.loc 1 934 0
 1986 0022 BB68     		ldr	r3, [r7, #8]
 1987 0024 002B     		cmp	r3, #0
 1988 0026 09D0     		beq	.L66
 1989              		.loc 1 934 0 is_stmt 0 discriminator 1
 1990 0028 FB68     		ldr	r3, [r7, #12]
 1991 002a DA6A     		ldr	r2, [r3, #44]
 1992 002c 7B68     		ldr	r3, [r7, #4]
 1993 002e 9A42     		cmp	r2, r3
 1994 0030 08D2     		bcs	.L67
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 1995              		.loc 1 935 0 is_stmt 1 discriminator 1
 1996 0032 FB68     		ldr	r3, [r7, #12]
 1997 0034 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1998              		.loc 1 934 0 discriminator 1
 1999 0038 002B     		cmp	r3, #0
 2000 003a 03D1     		bne	.L67
 2001              	.L66:
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2002              		.loc 1 937 0
 2003 003c 4FF00203 		mov	r3, #2
 2004 0040 7B61     		str	r3, [r7, #20]
 2005 0042 2AE0     		b	.L65
 2006              	.L67:
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2007              		.loc 1 941 0
 2008 0044 FB68     		ldr	r3, [r7, #12]
 2009 0046 DA6A     		ldr	r2, [r3, #44]
 2010 0048 BB68     		ldr	r3, [r7, #8]
 2011 004a 9A42     		cmp	r2, r3
 2012 004c 08D2     		bcs	.L68
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2013              		.loc 1 942 0 discriminator 1
 2014 004e FB68     		ldr	r3, [r7, #12]
 2015 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2016              		.loc 1 941 0 discriminator 1
 2017 0054 012B     		cmp	r3, #1
 2018 0056 03D0     		beq	.L68
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2019              		.loc 1 945 0
 2020 0058 4FF00203 		mov	r3, #2
 2021 005c 7B61     		str	r3, [r7, #20]
 2022 005e 1CE0     		b	.L65
 2023              	.L68:
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2024              		.loc 1 949 0
 2025 0060 BB68     		ldr	r3, [r7, #8]
 2026 0062 3B61     		str	r3, [r7, #16]
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2027              		.loc 1 950 0
 2028 0064 FB68     		ldr	r3, [r7, #12]
 2029 0066 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2030 006a 012B     		cmp	r3, #1
 2031 006c 05D1     		bne	.L69
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2032              		.loc 1 952 0
 2033 006e FB68     		ldr	r3, [r7, #12]
 2034 0070 DB69     		ldr	r3, [r3, #28]
 2035 0072 3A69     		ldr	r2, [r7, #16]
 2036 0074 4FEA1242 		lsr	r2, r2, #16
 2037 0078 5A63     		str	r2, [r3, #52]
 2038              	.L69:
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2039              		.loc 1 955 0
 2040 007a FB68     		ldr	r3, [r7, #12]
 2041 007c 9A69     		ldr	r2, [r3, #24]
 2042 007e 3B69     		ldr	r3, [r7, #16]
 2043 0080 4FEA0343 		lsl	r3, r3, #16
 2044 0084 4FEA1343 		lsr	r3, r3, #16
 2045 0088 5363     		str	r3, [r2, #52]
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 2046              		.loc 1 957 0
 2047 008a FB68     		ldr	r3, [r7, #12]
 2048 008c 1B6C     		ldr	r3, [r3, #64]
 2049 008e F868     		ldr	r0, [r7, #12]
 2050 0090 7968     		ldr	r1, [r7, #4]
 2051 0092 9847     		blx	r3
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2052              		.loc 1 958 0
 2053 0094 4FF00003 		mov	r3, #0
 2054 0098 7B61     		str	r3, [r7, #20]
 2055              	.L65:
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2056              		.loc 1 962 0
 2057 009a 7B69     		ldr	r3, [r7, #20]
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2058              		.loc 1 963 0
 2059 009c 1846     		mov	r0, r3
 2060 009e 07F11807 		add	r7, r7, #24
 2061 00a2 BD46     		mov	sp, r7
 2062 00a4 80BD     		pop	{r7, pc}
 2063              		.cfi_endproc
 2064              	.LFE133:
 2066 00a6 00BF     		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 2067              		.align	2
 2068              		.global	PWMSP001_SetPeriod
 2069              		.thumb
 2070              		.thumb_func
 2072              	PWMSP001_SetPeriod:
 2073              	.LFB134:
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2074              		.loc 1 974 0
 2075              		.cfi_startproc
 2076              		@ args = 0, pretend = 0, frame = 24
 2077              		@ frame_needed = 1, uses_anonymous_args = 0
 2078              		@ link register save eliminated.
 2079 0000 80B4     		push	{r7}
 2080              	.LCFI42:
 2081              		.cfi_def_cfa_offset 4
 2082              		.cfi_offset 7, -4
 2083 0002 87B0     		sub	sp, sp, #28
 2084              	.LCFI43:
 2085              		.cfi_def_cfa_offset 32
 2086 0004 00AF     		add	r7, sp, #0
 2087              	.LCFI44:
 2088              		.cfi_def_cfa_register 7
 2089 0006 7860     		str	r0, [r7, #4]
 2090 0008 3960     		str	r1, [r7, #0]
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2091              		.loc 1 975 0
 2092 000a 4FF00103 		mov	r3, #1
 2093 000e 7B61     		str	r3, [r7, #20]
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 2094              		.loc 1 976 0
 2095 0010 4FF00003 		mov	r3, #0
 2096 0014 3B61     		str	r3, [r7, #16]
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2097              		.loc 1 980 0
 2098 0016 7B68     		ldr	r3, [r7, #4]
 2099 0018 DB6B     		ldr	r3, [r3, #60]
 2100 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2101 001c 002B     		cmp	r3, #0
 2102 001e 55D0     		beq	.L72
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 2103              		.loc 1 982 0
 2104 0020 3B68     		ldr	r3, [r7, #0]
 2105 0022 002B     		cmp	r3, #0
 2106 0024 03D1     		bne	.L73
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2107              		.loc 1 984 0
 2108 0026 4FF00203 		mov	r3, #2
 2109 002a 7B61     		str	r3, [r7, #20]
 2110 002c 4EE0     		b	.L72
 2111              	.L73:
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2112              		.loc 1 988 0
 2113 002e 7B68     		ldr	r3, [r7, #4]
 2114 0030 DA6A     		ldr	r2, [r3, #44]
 2115 0032 3B68     		ldr	r3, [r7, #0]
 2116 0034 9A42     		cmp	r2, r3
 2117 0036 08D2     		bcs	.L74
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2118              		.loc 1 989 0 discriminator 1
 2119 0038 7B68     		ldr	r3, [r7, #4]
 2120 003a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2121              		.loc 1 988 0 discriminator 1
 2122 003e 012B     		cmp	r3, #1
 2123 0040 03D0     		beq	.L74
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2124              		.loc 1 991 0
 2125 0042 4FF00203 		mov	r3, #2
 2126 0046 7B61     		str	r3, [r7, #20]
 2127 0048 40E0     		b	.L72
 2128              	.L74:
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2129              		.loc 1 995 0
 2130 004a 3B68     		ldr	r3, [r7, #0]
 2131 004c 3B61     		str	r3, [r7, #16]
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2132              		.loc 1 996 0
 2133 004e 7B68     		ldr	r3, [r7, #4]
 2134 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2135 0054 012B     		cmp	r3, #1
 2136 0056 05D1     		bne	.L75
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2137              		.loc 1 998 0
 2138 0058 7B68     		ldr	r3, [r7, #4]
 2139 005a DB69     		ldr	r3, [r3, #28]
 2140 005c 3A69     		ldr	r2, [r7, #16]
 2141 005e 4FEA1242 		lsr	r2, r2, #16
 2142 0062 5A63     		str	r2, [r3, #52]
 2143              	.L75:
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2144              		.loc 1 1000 0
 2145 0064 7B68     		ldr	r3, [r7, #4]
 2146 0066 9A69     		ldr	r2, [r3, #24]
 2147 0068 3B69     		ldr	r3, [r7, #16]
 2148 006a 4FEA0343 		lsl	r3, r3, #16
 2149 006e 4FEA1343 		lsr	r3, r3, #16
 2150 0072 5363     		str	r3, [r2, #52]
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2151              		.loc 1 1002 0
 2152 0074 7B68     		ldr	r3, [r7, #4]
 2153 0076 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2154 007a 4FEA8303 		lsl	r3, r3, #2
 2155 007e FB60     		str	r3, [r7, #12]
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 2156              		.loc 1 1003 0
 2157 0080 7B68     		ldr	r3, [r7, #4]
 2158 0082 5B69     		ldr	r3, [r3, #20]
 2159 0084 7A68     		ldr	r2, [r7, #4]
 2160 0086 5269     		ldr	r2, [r2, #20]
 2161 0088 1169     		ldr	r1, [r2, #16]
 2162 008a FA68     		ldr	r2, [r7, #12]
 2163 008c 4FF00100 		mov	r0, #1
 2164 0090 00FA02F2 		lsl	r2, r0, r2
 2165 0094 0A43     		orrs	r2, r2, r1
 2166 0096 1A61     		str	r2, [r3, #16]
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2167              		.loc 1 1004 0
 2168 0098 7B68     		ldr	r3, [r7, #4]
 2169 009a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2170 009e 012B     		cmp	r3, #1
 2171 00a0 11D1     		bne	.L76
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2172              		.loc 1 1007 0
 2173 00a2 7B68     		ldr	r3, [r7, #4]
 2174 00a4 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2175 00a8 4FEA8303 		lsl	r3, r3, #2
 2176 00ac FB60     		str	r3, [r7, #12]
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 2177              		.loc 1 1008 0
 2178 00ae 7B68     		ldr	r3, [r7, #4]
 2179 00b0 5B69     		ldr	r3, [r3, #20]
 2180 00b2 7A68     		ldr	r2, [r7, #4]
 2181 00b4 5269     		ldr	r2, [r2, #20]
 2182 00b6 1169     		ldr	r1, [r2, #16]
 2183 00b8 FA68     		ldr	r2, [r7, #12]
 2184 00ba 4FF00100 		mov	r0, #1
 2185 00be 00FA02F2 		lsl	r2, r0, r2
 2186 00c2 0A43     		orrs	r2, r2, r1
 2187 00c4 1A61     		str	r2, [r3, #16]
 2188              	.L76:
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2189              		.loc 1 1010 0
 2190 00c6 4FF00003 		mov	r3, #0
 2191 00ca 7B61     		str	r3, [r7, #20]
 2192              	.L72:
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2193              		.loc 1 1014 0
 2194 00cc 7B69     		ldr	r3, [r7, #20]
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2195              		.loc 1 1015 0
 2196 00ce 1846     		mov	r0, r3
 2197 00d0 07F11C07 		add	r7, r7, #28
 2198 00d4 BD46     		mov	sp, r7
 2199 00d6 80BC     		pop	{r7}
 2200 00d8 7047     		bx	lr
 2201              		.cfi_endproc
 2202              	.LFE134:
 2204 00da 00BF     		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 2205              		.align	2
 2206              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 2207              		.thumb
 2208              		.thumb_func
 2210              	PWMSP001_SetPwmFreqAndDutyCycle:
 2211              	.LFB135:
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2212              		.loc 1 1028 0
 2213              		.cfi_startproc
 2214              		@ args = 0, pretend = 0, frame = 32
 2215              		@ frame_needed = 1, uses_anonymous_args = 0
 2216 0000 80B5     		push	{r7, lr}
 2217              	.LCFI45:
 2218              		.cfi_def_cfa_offset 8
 2219              		.cfi_offset 7, -8
 2220              		.cfi_offset 14, -4
 2221 0002 88B0     		sub	sp, sp, #32
 2222              	.LCFI46:
 2223              		.cfi_def_cfa_offset 40
 2224 0004 00AF     		add	r7, sp, #0
 2225              	.LCFI47:
 2226              		.cfi_def_cfa_register 7
 2227 0006 F860     		str	r0, [r7, #12]
 2228 0008 B960     		str	r1, [r7, #8]	@ float
 2229 000a 7A60     		str	r2, [r7, #4]	@ float
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2230              		.loc 1 1029 0
 2231 000c 4FF00103 		mov	r3, #1
 2232 0010 FB61     		str	r3, [r7, #28]
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 2233              		.loc 1 1030 0
 2234 0012 4FF00003 		mov	r3, #0
 2235 0016 BB61     		str	r3, [r7, #24]
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2236              		.loc 1 1033 0
 2237 0018 FB68     		ldr	r3, [r7, #12]
 2238 001a DB6B     		ldr	r3, [r3, #60]
 2239 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2240 001e 002B     		cmp	r3, #0
 2241 0020 70D0     		beq	.L79
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 2242              		.loc 1 1035 0
 2243 0022 D7ED027A 		flds	s15, [r7, #8]
 2244 0026 F5EE407A 		fcmpzs	s15
 2245 002a F1EE10FA 		fmstat
 2246 002e 0FD0     		beq	.L80
 2247              		.loc 1 1035 0 is_stmt 0 discriminator 1
 2248 0030 97ED017A 		flds	s14, [r7, #4]
 2249 0034 DFED367A 		flds	s15, .L91
 2250 0038 B4EEE77A 		fcmpes	s14, s15
 2251 003c F1EE10FA 		fmstat
 2252 0040 06DC     		bgt	.L80
 2253 0042 D7ED017A 		flds	s15, [r7, #4]
 2254 0046 F5EEC07A 		fcmpezs	s15
 2255 004a F1EE10FA 		fmstat
 2256 004e 03D5     		bpl	.L90
 2257              	.L80:
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2258              		.loc 1 1037 0 is_stmt 1
 2259 0050 4FF00203 		mov	r3, #2
 2260 0054 FB61     		str	r3, [r7, #28]
 2261 0056 55E0     		b	.L79
 2262              	.L90:
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 2263              		.loc 1 1041 0
 2264 0058 FB68     		ldr	r3, [r7, #12]
 2265 005a 5B68     		ldr	r3, [r3, #4]	@ float
 2266 005c 7B61     		str	r3, [r7, #20]	@ float
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2267              		.loc 1 1042 0
 2268 005e 97ED057A 		flds	s14, [r7, #20]
 2269 0062 D7ED027A 		flds	s15, [r7, #8]
 2270 0066 67EE277A 		fmuls	s15, s14, s15
 2271 006a C7ED057A 		fsts	s15, [r7, #20]
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2272              		.loc 1 1043 0
 2273 006e 9FED297A 		flds	s14, .L91+4
 2274 0072 D7ED057A 		flds	s15, [r7, #20]
 2275 0076 C7EE277A 		fdivs	s15, s14, s15
 2276 007a FCEEE77A 		ftouizs	s15, s15
 2277 007e C7ED067A 		fsts	s15, [r7, #24]	@ int
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2278              		.loc 1 1045 0
 2279 0082 FB68     		ldr	r3, [r7, #12]
 2280 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2281 0088 002B     		cmp	r3, #0
 2282 008a 20D1     		bne	.L83
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2283              		.loc 1 1047 0
 2284 008c BA69     		ldr	r2, [r7, #24]
 2285 008e 4FF6FF73 		movw	r3, #65535
 2286 0092 9A42     		cmp	r2, r3
 2287 0094 03D9     		bls	.L84
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2288              		.loc 1 1049 0
 2289 0096 4FF00203 		mov	r3, #2
 2290 009a FB61     		str	r3, [r7, #28]
 2291 009c 2AE0     		b	.L85
 2292              	.L84:
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2293              		.loc 1 1053 0
 2294 009e FB68     		ldr	r3, [r7, #12]
 2295 00a0 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2296 00a4 002B     		cmp	r3, #0
 2297 00a6 06D1     		bne	.L86
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2298              		.loc 1 1055 0
 2299 00a8 FB68     		ldr	r3, [r7, #12]
 2300 00aa 9B69     		ldr	r3, [r3, #24]
 2301 00ac BA69     		ldr	r2, [r7, #24]
 2302 00ae 02F1FF32 		add	r2, r2, #-1
 2303 00b2 5A63     		str	r2, [r3, #52]
 2304 00b4 07E0     		b	.L87
 2305              	.L86:
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2306              		.loc 1 1059 0
 2307 00b6 FB68     		ldr	r3, [r7, #12]
 2308 00b8 9B69     		ldr	r3, [r3, #24]
 2309 00ba BA69     		ldr	r2, [r7, #24]
 2310 00bc 02F1FF32 		add	r2, r2, #-1
 2311 00c0 4FEA5202 		lsr	r2, r2, #1
 2312 00c4 5A63     		str	r2, [r3, #52]
 2313              	.L87:
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2314              		.loc 1 1061 0
 2315 00c6 4FF00003 		mov	r3, #0
 2316 00ca FB61     		str	r3, [r7, #28]
 2317 00cc 12E0     		b	.L85
 2318              	.L83:
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 2319              		.loc 1 1064 0
 2320 00ce FB68     		ldr	r3, [r7, #12]
 2321 00d0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2322 00d4 012B     		cmp	r3, #1
 2323 00d6 08D1     		bne	.L88
 2324              		.loc 1 1064 0 is_stmt 0 discriminator 1
 2325 00d8 BA69     		ldr	r2, [r7, #24]
 2326 00da 4FF6FF73 		movw	r3, #65535
 2327 00de 9A42     		cmp	r2, r3
 2328 00e0 03D8     		bhi	.L88
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2329              		.loc 1 1067 0 is_stmt 1
 2330 00e2 4FF00203 		mov	r3, #2
 2331 00e6 FB61     		str	r3, [r7, #28]
 2332 00e8 04E0     		b	.L85
 2333              	.L88:
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2334              		.loc 1 1072 0
 2335 00ea F868     		ldr	r0, [r7, #12]
 2336 00ec B969     		ldr	r1, [r7, #24]
 2337 00ee FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2338 00f2 F861     		str	r0, [r7, #28]
 2339              	.L85:
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
 2340              		.loc 1 1074 0
 2341 00f4 FB69     		ldr	r3, [r7, #28]
 2342 00f6 002B     		cmp	r3, #0
 2343 00f8 04D1     		bne	.L79
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2344              		.loc 1 1077 0
 2345 00fa FB68     		ldr	r3, [r7, #12]
 2346 00fc 5B6C     		ldr	r3, [r3, #68]
 2347 00fe F868     		ldr	r0, [r7, #12]
 2348 0100 7968     		ldr	r1, [r7, #4]	@ float
 2349 0102 9847     		blx	r3
 2350              	.L79:
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2351              		.loc 1 1081 0
 2352 0104 FB69     		ldr	r3, [r7, #28]
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2353              		.loc 1 1082 0
 2354 0106 1846     		mov	r0, r3
 2355 0108 07F12007 		add	r7, r7, #32
 2356 010c BD46     		mov	sp, r7
 2357 010e 80BD     		pop	{r7, pc}
 2358              	.L92:
 2359              		.align	2
 2360              	.L91:
 2361 0110 0000C842 		.word	1120403456
 2362 0114 286B6E4E 		.word	1315859240
 2363              		.cfi_endproc
 2364              	.LFE135:
 2366              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 2367              		.align	2
 2368              		.global	PWMSP001_SetPwmFreq
 2369              		.thumb
 2370              		.thumb_func
 2372              	PWMSP001_SetPwmFreq:
 2373              	.LFB136:
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2374              		.loc 1 1094 0
 2375              		.cfi_startproc
 2376              		@ args = 0, pretend = 0, frame = 32
 2377              		@ frame_needed = 1, uses_anonymous_args = 0
 2378 0000 90B5     		push	{r4, r7, lr}
 2379              	.LCFI48:
 2380              		.cfi_def_cfa_offset 12
 2381              		.cfi_offset 4, -12
 2382              		.cfi_offset 7, -8
 2383              		.cfi_offset 14, -4
 2384 0002 89B0     		sub	sp, sp, #36
 2385              	.LCFI49:
 2386              		.cfi_def_cfa_offset 48
 2387 0004 00AF     		add	r7, sp, #0
 2388              	.LCFI50:
 2389              		.cfi_def_cfa_register 7
 2390 0006 7860     		str	r0, [r7, #4]
 2391 0008 3960     		str	r1, [r7, #0]	@ float
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2392              		.loc 1 1095 0
 2393 000a 4FF00103 		mov	r3, #1
 2394 000e FB61     		str	r3, [r7, #28]
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
 2395              		.loc 1 1096 0
 2396 0010 4FF00003 		mov	r3, #0
 2397 0014 BB61     		str	r3, [r7, #24]
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2398              		.loc 1 1101 0
 2399 0016 7B68     		ldr	r3, [r7, #4]
 2400 0018 DB6B     		ldr	r3, [r3, #60]
 2401 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2402 001c 002B     		cmp	r3, #0
 2403 001e 7DD0     		beq	.L94
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 2404              		.loc 1 1103 0
 2405 0020 D7ED007A 		flds	s15, [r7, #0]
 2406 0024 F5EE407A 		fcmpzs	s15
 2407 0028 F1EE10FA 		fmstat
 2408 002c 03D1     		bne	.L95
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2409              		.loc 1 1105 0
 2410 002e 4FF00203 		mov	r3, #2
 2411 0032 FB61     		str	r3, [r7, #28]
 2412 0034 72E0     		b	.L94
 2413              	.L95:
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 2414              		.loc 1 1109 0
 2415 0036 7B68     		ldr	r3, [r7, #4]
 2416 0038 5B68     		ldr	r3, [r3, #4]	@ float
 2417 003a 7B61     		str	r3, [r7, #20]	@ float
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2418              		.loc 1 1110 0
 2419 003c 97ED057A 		flds	s14, [r7, #20]
 2420 0040 D7ED007A 		flds	s15, [r7, #0]
 2421 0044 67EE277A 		fmuls	s15, s14, s15
 2422 0048 C7ED057A 		fsts	s15, [r7, #20]
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2423              		.loc 1 1111 0
 2424 004c 9FED367A 		flds	s14, .L101
 2425 0050 D7ED057A 		flds	s15, [r7, #20]
 2426 0054 C7EE277A 		fdivs	s15, s14, s15
 2427 0058 FCEEE77A 		ftouizs	s15, s15
 2428 005c C7ED067A 		fsts	s15, [r7, #24]	@ int
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2429              		.loc 1 1113 0
 2430 0060 7B68     		ldr	r3, [r7, #4]
 2431 0062 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2432 0066 002B     		cmp	r3, #0
 2433 0068 32D1     		bne	.L96
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2434              		.loc 1 1115 0
 2435 006a BA69     		ldr	r2, [r7, #24]
 2436 006c 4FF6FF73 		movw	r3, #65535
 2437 0070 9A42     		cmp	r2, r3
 2438 0072 03D9     		bls	.L97
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2439              		.loc 1 1117 0
 2440 0074 4FF00203 		mov	r3, #2
 2441 0078 FB61     		str	r3, [r7, #28]
 2442 007a 4FE0     		b	.L94
 2443              	.L97:
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2444              		.loc 1 1121 0
 2445 007c 7B68     		ldr	r3, [r7, #4]
 2446 007e 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2447 0082 002B     		cmp	r3, #0
 2448 0084 06D1     		bne	.L98
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2449              		.loc 1 1123 0
 2450 0086 7B68     		ldr	r3, [r7, #4]
 2451 0088 9B69     		ldr	r3, [r3, #24]
 2452 008a BA69     		ldr	r2, [r7, #24]
 2453 008c 02F1FF32 		add	r2, r2, #-1
 2454 0090 5A63     		str	r2, [r3, #52]
 2455 0092 07E0     		b	.L99
 2456              	.L98:
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2457              		.loc 1 1127 0
 2458 0094 7B68     		ldr	r3, [r7, #4]
 2459 0096 9B69     		ldr	r3, [r3, #24]
 2460 0098 BA69     		ldr	r2, [r7, #24]
 2461 009a 02F1FF32 		add	r2, r2, #-1
 2462 009e 4FEA5202 		lsr	r2, r2, #1
 2463 00a2 5A63     		str	r2, [r3, #52]
 2464              	.L99:
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 2465              		.loc 1 1130 0
 2466 00a4 7B68     		ldr	r3, [r7, #4]
 2467 00a6 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2468 00aa 4FEA8303 		lsl	r3, r3, #2
 2469 00ae 3B61     		str	r3, [r7, #16]
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 2470              		.loc 1 1131 0
 2471 00b0 7B68     		ldr	r3, [r7, #4]
 2472 00b2 5B69     		ldr	r3, [r3, #20]
 2473 00b4 7A68     		ldr	r2, [r7, #4]
 2474 00b6 5269     		ldr	r2, [r2, #20]
 2475 00b8 1169     		ldr	r1, [r2, #16]
 2476 00ba 3A69     		ldr	r2, [r7, #16]
 2477 00bc 4FF00100 		mov	r0, #1
 2478 00c0 00FA02F2 		lsl	r2, r0, r2
 2479 00c4 0A43     		orrs	r2, r2, r1
 2480 00c6 1A61     		str	r2, [r3, #16]
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2481              		.loc 1 1132 0
 2482 00c8 4FF00003 		mov	r3, #0
 2483 00cc FB61     		str	r3, [r7, #28]
 2484 00ce 25E0     		b	.L94
 2485              	.L96:
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2486              		.loc 1 1138 0
 2487 00d0 7868     		ldr	r0, [r7, #4]
 2488 00d2 B969     		ldr	r1, [r7, #24]
 2489 00d4 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2490 00d8 F861     		str	r0, [r7, #28]
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
 2491              		.loc 1 1139 0
 2492 00da FB69     		ldr	r3, [r7, #28]
 2493 00dc 002B     		cmp	r3, #0
 2494 00de 1DD1     		bne	.L94
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2495              		.loc 1 1141 0
 2496 00e0 7B68     		ldr	r3, [r7, #4]
 2497 00e2 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2498 00e6 4FEA8303 		lsl	r3, r3, #2
 2499 00ea FB60     		str	r3, [r7, #12]
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2500              		.loc 1 1142 0
 2501 00ec 7B68     		ldr	r3, [r7, #4]
 2502 00ee 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2503 00f2 4FEA8303 		lsl	r3, r3, #2
 2504 00f6 BB60     		str	r3, [r7, #8]
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2505              		.loc 1 1143 0
 2506 00f8 7B68     		ldr	r3, [r7, #4]
 2507 00fa 5B69     		ldr	r3, [r3, #20]
 2508 00fc 7A68     		ldr	r2, [r7, #4]
 2509 00fe 5269     		ldr	r2, [r2, #20]
 2510 0100 1169     		ldr	r1, [r2, #16]
 2511 0102 FA68     		ldr	r2, [r7, #12]
 2512 0104 4FF00100 		mov	r0, #1
 2513 0108 00FA02F0 		lsl	r0, r0, r2
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 2514              		.loc 1 1144 0
 2515 010c BA68     		ldr	r2, [r7, #8]
 2516 010e 4FF00104 		mov	r4, #1
 2517 0112 04FA02F2 		lsl	r2, r4, r2
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2518              		.loc 1 1143 0
 2519 0116 0243     		orrs	r2, r2, r0
 2520 0118 0A43     		orrs	r2, r2, r1
 2521 011a 1A61     		str	r2, [r3, #16]
 2522              	.L94:
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2523              		.loc 1 1149 0
 2524 011c FB69     		ldr	r3, [r7, #28]
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2525              		.loc 1 1150 0
 2526 011e 1846     		mov	r0, r3
 2527 0120 07F12407 		add	r7, r7, #36
 2528 0124 BD46     		mov	sp, r7
 2529 0126 90BD     		pop	{r4, r7, pc}
 2530              	.L102:
 2531              		.align	2
 2532              	.L101:
 2533 0128 286B6E4E 		.word	1315859240
 2534              		.cfi_endproc
 2535              	.LFE136:
 2537              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 2538              		.align	2
 2539              		.global	PWMSP001_lSetPwmFreqTimerConcat
 2540              		.thumb
 2541              		.thumb_func
 2543              	PWMSP001_lSetPwmFreqTimerConcat:
 2544              	.LFB137:
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2545              		.loc 1 1160 0
 2546              		.cfi_startproc
 2547              		@ args = 0, pretend = 0, frame = 32
 2548              		@ frame_needed = 1, uses_anonymous_args = 0
 2549              		@ link register save eliminated.
 2550 0000 80B4     		push	{r7}
 2551              	.LCFI51:
 2552              		.cfi_def_cfa_offset 4
 2553              		.cfi_offset 7, -4
 2554 0002 89B0     		sub	sp, sp, #36
 2555              	.LCFI52:
 2556              		.cfi_def_cfa_offset 40
 2557 0004 00AF     		add	r7, sp, #0
 2558              	.LCFI53:
 2559              		.cfi_def_cfa_register 7
 2560 0006 7860     		str	r0, [r7, #4]
 2561 0008 3960     		str	r1, [r7, #0]
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
 2562              		.loc 1 1161 0
 2563 000a 3B68     		ldr	r3, [r7, #0]
 2564 000c FB61     		str	r3, [r7, #28]
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
 2565              		.loc 1 1163 0
 2566 000e 4FF00003 		mov	r3, #0
 2567 0012 FB74     		strb	r3, [r7, #19]
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2568              		.loc 1 1164 0
 2569 0014 4FF00103 		mov	r3, #1
 2570 0018 FB60     		str	r3, [r7, #12]
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 2571              		.loc 1 1166 0
 2572 001a 3B68     		ldr	r3, [r7, #0]
 2573 001c B3F1FF3F 		cmp	r3, #-1
 2574 0020 03D1     		bne	.L104
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2575              		.loc 1 1168 0
 2576 0022 4FF00203 		mov	r3, #2
 2577 0026 FB60     		str	r3, [r7, #12]
 2578 0028 41E0     		b	.L105
 2579              	.L104:
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 2580              		.loc 1 1174 0
 2581 002a 3A68     		ldr	r2, [r7, #0]
 2582 002c 4FF6FF73 		movw	r3, #65535
 2583 0030 9A42     		cmp	r2, r3
 2584 0032 17D9     		bls	.L106
 2585              	.L107:
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 2586              		.loc 1 1178 0 discriminator 1
 2587 0034 FB69     		ldr	r3, [r7, #28]
 2588 0036 4FEA5303 		lsr	r3, r3, #1
 2589 003a FB61     		str	r3, [r7, #28]
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 2590              		.loc 1 1179 0 discriminator 1
 2591 003c FB7C     		ldrb	r3, [r7, #19]
 2592 003e 03F10103 		add	r3, r3, #1
 2593 0042 FB74     		strb	r3, [r7, #19]
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 2594              		.loc 1 1180 0 discriminator 1
 2595 0044 FA69     		ldr	r2, [r7, #28]
 2596 0046 4FF6FE73 		movw	r3, #65534
 2597 004a 9A42     		cmp	r2, r3
 2598 004c F2D8     		bhi	.L107
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 2599              		.loc 1 1182 0
 2600 004e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2601 0050 4FF00102 		mov	r2, #1
 2602 0054 02FA03F3 		lsl	r3, r2, r3
 2603 0058 03F1FF33 		add	r3, r3, #-1
 2604 005c BB61     		str	r3, [r7, #24]
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
 2605              		.loc 1 1183 0
 2606 005e FB69     		ldr	r3, [r7, #28]
 2607 0060 7B61     		str	r3, [r7, #20]
 2608 0062 04E0     		b	.L108
 2609              	.L106:
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
 2610              		.loc 1 1187 0
 2611 0064 3B68     		ldr	r3, [r7, #0]
 2612 0066 7B61     		str	r3, [r7, #20]
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
 2613              		.loc 1 1188 0
 2614 0068 4FF00003 		mov	r3, #0
 2615 006c BB61     		str	r3, [r7, #24]
 2616              	.L108:
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 2617              		.loc 1 1192 0
 2618 006e 7B68     		ldr	r3, [r7, #4]
 2619 0070 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2620 0074 012B     		cmp	r3, #1
 2621 0076 07D1     		bne	.L109
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 2622              		.loc 1 1194 0
 2623 0078 BB69     		ldr	r3, [r7, #24]
 2624 007a 4FEA5303 		lsr	r3, r3, #1
 2625 007e BB61     		str	r3, [r7, #24]
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 2626              		.loc 1 1195 0
 2627 0080 7B69     		ldr	r3, [r7, #20]
 2628 0082 4FEA5303 		lsr	r3, r3, #1
 2629 0086 7B61     		str	r3, [r7, #20]
 2630              	.L109:
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 2631              		.loc 1 1198 0
 2632 0088 7B68     		ldr	r3, [r7, #4]
 2633 008a 9A69     		ldr	r2, [r3, #24]
 2634 008c 7B69     		ldr	r3, [r7, #20]
 2635 008e 4FEA0343 		lsl	r3, r3, #16
 2636 0092 4FEA1343 		lsr	r3, r3, #16
 2637 0096 5363     		str	r3, [r2, #52]
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 2638              		.loc 1 1199 0
 2639 0098 7B68     		ldr	r3, [r7, #4]
 2640 009a DA69     		ldr	r2, [r3, #28]
 2641 009c BB69     		ldr	r3, [r7, #24]
 2642 009e 4FEA0343 		lsl	r3, r3, #16
 2643 00a2 4FEA1343 		lsr	r3, r3, #16
 2644 00a6 5363     		str	r3, [r2, #52]
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2645              		.loc 1 1202 0
 2646 00a8 4FF00003 		mov	r3, #0
 2647 00ac FB60     		str	r3, [r7, #12]
 2648              	.L105:
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2649              		.loc 1 1204 0
 2650 00ae FB68     		ldr	r3, [r7, #12]
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2651              		.loc 1 1205 0
 2652 00b0 1846     		mov	r0, r3
 2653 00b2 07F12407 		add	r7, r7, #36
 2654 00b6 BD46     		mov	sp, r7
 2655 00b8 80BC     		pop	{r7}
 2656 00ba 7047     		bx	lr
 2657              		.cfi_endproc
 2658              	.LFE137:
 2660              		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 2661              		.align	2
 2662              		.global	PWMSP001_SetTimerVal
 2663              		.thumb
 2664              		.thumb_func
 2666              	PWMSP001_SetTimerVal:
 2667              	.LFB138:
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2668              		.loc 1 1218 0
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 16
 2671              		@ frame_needed = 1, uses_anonymous_args = 0
 2672              		@ link register save eliminated.
 2673 0000 80B4     		push	{r7}
 2674              	.LCFI54:
 2675              		.cfi_def_cfa_offset 4
 2676              		.cfi_offset 7, -4
 2677 0002 85B0     		sub	sp, sp, #20
 2678              	.LCFI55:
 2679              		.cfi_def_cfa_offset 24
 2680 0004 00AF     		add	r7, sp, #0
 2681              	.LCFI56:
 2682              		.cfi_def_cfa_register 7
 2683 0006 7860     		str	r0, [r7, #4]
 2684 0008 3960     		str	r1, [r7, #0]
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2685              		.loc 1 1219 0
 2686 000a 4FF00103 		mov	r3, #1
 2687 000e FB60     		str	r3, [r7, #12]
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2688              		.loc 1 1221 0
 2689 0010 7B68     		ldr	r3, [r7, #4]
 2690 0012 DB6B     		ldr	r3, [r3, #60]
 2691 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2692 0016 012B     		cmp	r3, #1
 2693 0018 04D0     		beq	.L112
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 2694              		.loc 1 1222 0 discriminator 1
 2695 001a 7B68     		ldr	r3, [r7, #4]
 2696 001c DB6B     		ldr	r3, [r3, #60]
 2697 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2698              		.loc 1 1221 0 discriminator 1
 2699 0020 032B     		cmp	r3, #3
 2700 0022 15D1     		bne	.L113
 2701              	.L112:
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 2702              		.loc 1 1229 0
 2703 0024 7B68     		ldr	r3, [r7, #4]
 2704 0026 9A69     		ldr	r2, [r3, #24]
 2705 0028 3B68     		ldr	r3, [r7, #0]
 2706 002a 4FEA0343 		lsl	r3, r3, #16
 2707 002e 4FEA1343 		lsr	r3, r3, #16
 2708 0032 1367     		str	r3, [r2, #112]
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2709              		.loc 1 1230 0
 2710 0034 7B68     		ldr	r3, [r7, #4]
 2711 0036 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2712 003a 012B     		cmp	r3, #1
 2713 003c 05D1     		bne	.L114
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 2714              		.loc 1 1232 0
 2715 003e 7B68     		ldr	r3, [r7, #4]
 2716 0040 DB69     		ldr	r3, [r3, #28]
 2717 0042 3A68     		ldr	r2, [r7, #0]
 2718 0044 4FEA1242 		lsr	r2, r2, #16
 2719 0048 1A67     		str	r2, [r3, #112]
 2720              	.L114:
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2721              		.loc 1 1234 0
 2722 004a 4FF00003 		mov	r3, #0
 2723 004e FB60     		str	r3, [r7, #12]
 2724              	.L113:
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2725              		.loc 1 1236 0
 2726 0050 FB68     		ldr	r3, [r7, #12]
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2727              		.loc 1 1237 0
 2728 0052 1846     		mov	r0, r3
 2729 0054 07F11407 		add	r7, r7, #20
 2730 0058 BD46     		mov	sp, r7
 2731 005a 80BC     		pop	{r7}
 2732 005c 7047     		bx	lr
 2733              		.cfi_endproc
 2734              	.LFE138:
 2736 005e 00BF     		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 2737              		.align	2
 2738              		.global	PWMSP001_GetTimerStatus
 2739              		.thumb
 2740              		.thumb_func
 2742              	PWMSP001_GetTimerStatus:
 2743              	.LFB139:
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2744              		.loc 1 1248 0
 2745              		.cfi_startproc
 2746              		@ args = 0, pretend = 0, frame = 16
 2747              		@ frame_needed = 1, uses_anonymous_args = 0
 2748              		@ link register save eliminated.
 2749 0000 80B4     		push	{r7}
 2750              	.LCFI57:
 2751              		.cfi_def_cfa_offset 4
 2752              		.cfi_offset 7, -4
 2753 0002 85B0     		sub	sp, sp, #20
 2754              	.LCFI58:
 2755              		.cfi_def_cfa_offset 24
 2756 0004 00AF     		add	r7, sp, #0
 2757              	.LCFI59:
 2758              		.cfi_def_cfa_register 7
 2759 0006 7860     		str	r0, [r7, #4]
 2760 0008 3960     		str	r1, [r7, #0]
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2761              		.loc 1 1249 0
 2762 000a 4FF00103 		mov	r3, #1
 2763 000e FB60     		str	r3, [r7, #12]
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
 2764              		.loc 1 1250 0
 2765 0010 4FF00003 		mov	r3, #0
 2766 0014 BB60     		str	r3, [r7, #8]
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2767              		.loc 1 1252 0
 2768 0016 7B68     		ldr	r3, [r7, #4]
 2769 0018 DB6B     		ldr	r3, [r3, #60]
 2770 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2771 001c 002B     		cmp	r3, #0
 2772 001e 1ED0     		beq	.L117
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2773              		.loc 1 1259 0
 2774 0020 7B68     		ldr	r3, [r7, #4]
 2775 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2776 0026 012B     		cmp	r3, #1
 2777 0028 0FD1     		bne	.L118
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 2778              		.loc 1 1261 0
 2779 002a 7B68     		ldr	r3, [r7, #4]
 2780 002c DB69     		ldr	r3, [r3, #28]
 2781 002e 9B68     		ldr	r3, [r3, #8]
 2782 0030 03F00103 		and	r3, r3, #1
 2783 0034 BB60     		str	r3, [r7, #8]
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2784              		.loc 1 1263 0
 2785 0036 7B68     		ldr	r3, [r7, #4]
 2786 0038 9B69     		ldr	r3, [r3, #24]
 2787 003a 9A68     		ldr	r2, [r3, #8]
 2788 003c BB68     		ldr	r3, [r7, #8]
 2789 003e 1340     		ands	r3, r3, r2
 2790 0040 03F00102 		and	r2, r3, #1
 2791 0044 3B68     		ldr	r3, [r7, #0]
 2792 0046 1A60     		str	r2, [r3, #0]
 2793 0048 06E0     		b	.L119
 2794              	.L118:
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2795              		.loc 1 1270 0
 2796 004a 7B68     		ldr	r3, [r7, #4]
 2797 004c 9B69     		ldr	r3, [r3, #24]
 2798 004e 9B68     		ldr	r3, [r3, #8]
 2799 0050 03F00102 		and	r2, r3, #1
 2800 0054 3B68     		ldr	r3, [r7, #0]
 2801 0056 1A60     		str	r2, [r3, #0]
 2802              	.L119:
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2803              		.loc 1 1273 0
 2804 0058 4FF00003 		mov	r3, #0
 2805 005c FB60     		str	r3, [r7, #12]
 2806              	.L117:
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
 2807              		.loc 1 1275 0
 2808 005e FB68     		ldr	r3, [r7, #12]
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2809              		.loc 1 1276 0
 2810 0060 1846     		mov	r0, r3
 2811 0062 07F11407 		add	r7, r7, #20
 2812 0066 BD46     		mov	sp, r7
 2813 0068 80BC     		pop	{r7}
 2814 006a 7047     		bx	lr
 2815              		.cfi_endproc
 2816              	.LFE139:
 2818              		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 2819              		.align	2
 2820              		.global	PWMSP001_GetTimerRegsVal
 2821              		.thumb
 2822              		.thumb_func
 2824              	PWMSP001_GetTimerRegsVal:
 2825              	.LFB140:
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2826              		.loc 1 1287 0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 16
 2829              		@ frame_needed = 1, uses_anonymous_args = 0
 2830              		@ link register save eliminated.
 2831 0000 80B4     		push	{r7}
 2832              	.LCFI60:
 2833              		.cfi_def_cfa_offset 4
 2834              		.cfi_offset 7, -4
 2835 0002 85B0     		sub	sp, sp, #20
 2836              	.LCFI61:
 2837              		.cfi_def_cfa_offset 24
 2838 0004 00AF     		add	r7, sp, #0
 2839              	.LCFI62:
 2840              		.cfi_def_cfa_register 7
 2841 0006 7860     		str	r0, [r7, #4]
 2842 0008 3960     		str	r1, [r7, #0]
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2843              		.loc 1 1288 0
 2844 000a 4FF00103 		mov	r3, #1
 2845 000e FB60     		str	r3, [r7, #12]
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
 2846              		.loc 1 1289 0
 2847 0010 4FF00003 		mov	r3, #0
 2848 0014 BB60     		str	r3, [r7, #8]
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2849              		.loc 1 1292 0
 2850 0016 7B68     		ldr	r3, [r7, #4]
 2851 0018 DB6B     		ldr	r3, [r3, #60]
 2852 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2853 001c 002B     		cmp	r3, #0
 2854 001e 5ED0     		beq	.L122
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2855              		.loc 1 1299 0
 2856 0020 7B68     		ldr	r3, [r7, #4]
 2857 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2858 0026 012B     		cmp	r3, #1
 2859 0028 43D1     		bne	.L123
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 2860              		.loc 1 1301 0
 2861 002a 7B68     		ldr	r3, [r7, #4]
 2862 002c DB69     		ldr	r3, [r3, #28]
 2863 002e 1B6F     		ldr	r3, [r3, #112]
 2864 0030 4FEA0343 		lsl	r3, r3, #16
 2865 0034 BB60     		str	r3, [r7, #8]
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2866              		.loc 1 1305 0
 2867 0036 7B68     		ldr	r3, [r7, #4]
 2868 0038 9B69     		ldr	r3, [r3, #24]
 2869 003a 1B6F     		ldr	r3, [r3, #112]
 2870 003c 4FEA0343 		lsl	r3, r3, #16
 2871 0040 4FEA1343 		lsr	r3, r3, #16
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 2872              		.loc 1 1304 0
 2873 0044 BA68     		ldr	r2, [r7, #8]
 2874 0046 1A43     		orrs	r2, r2, r3
 2875 0048 3B68     		ldr	r3, [r7, #0]
 2876 004a 9A60     		str	r2, [r3, #8]
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 2877              		.loc 1 1308 0
 2878 004c 7B68     		ldr	r3, [r7, #4]
 2879 004e DB69     		ldr	r3, [r3, #28]
 2880 0050 DA6B     		ldr	r2, [r3, #60]
 2881 0052 3B68     		ldr	r3, [r7, #0]
 2882 0054 1A60     		str	r2, [r3, #0]
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 2883              		.loc 1 1309 0
 2884 0056 3B68     		ldr	r3, [r7, #0]
 2885 0058 1B68     		ldr	r3, [r3, #0]
 2886 005a 7A68     		ldr	r2, [r7, #4]
 2887 005c 9269     		ldr	r2, [r2, #24]
 2888 005e 526B     		ldr	r2, [r2, #52]
 2889 0060 02FB03F2 		mul	r2, r2, r3
 2890 0064 3B68     		ldr	r3, [r7, #0]
 2891 0066 1A60     		str	r2, [r3, #0]
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 2892              		.loc 1 1310 0
 2893 0068 3B68     		ldr	r3, [r7, #0]
 2894 006a 1A68     		ldr	r2, [r3, #0]
 2895 006c 7B68     		ldr	r3, [r7, #4]
 2896 006e 9B69     		ldr	r3, [r3, #24]
 2897 0070 DB6B     		ldr	r3, [r3, #60]
 2898 0072 D218     		adds	r2, r2, r3
 2899 0074 3B68     		ldr	r3, [r7, #0]
 2900 0076 1A60     		str	r2, [r3, #0]
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 2901              		.loc 1 1311 0
 2902 0078 7B68     		ldr	r3, [r7, #4]
 2903 007a DB69     		ldr	r3, [r3, #28]
 2904 007c 5B6B     		ldr	r3, [r3, #52]
 2905 007e 03F10102 		add	r2, r3, #1
 2906 0082 3B68     		ldr	r3, [r7, #0]
 2907 0084 5A60     		str	r2, [r3, #4]
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2908              		.loc 1 1312 0
 2909 0086 3B68     		ldr	r3, [r7, #0]
 2910 0088 5A68     		ldr	r2, [r3, #4]
 2911 008a 7B68     		ldr	r3, [r7, #4]
 2912 008c 9B69     		ldr	r3, [r3, #24]
 2913 008e 5B6B     		ldr	r3, [r3, #52]
 2914 0090 4FEA0343 		lsl	r3, r3, #16
 2915 0094 4FEA1343 		lsr	r3, r3, #16
 2916 0098 03F10103 		add	r3, r3, #1
 2917 009c 03FB02F2 		mul	r2, r3, r2
 2918 00a0 3B68     		ldr	r3, [r7, #0]
 2919 00a2 5A60     		str	r2, [r3, #4]
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 2920              		.loc 1 1313 0
 2921 00a4 3B68     		ldr	r3, [r7, #0]
 2922 00a6 5B68     		ldr	r3, [r3, #4]
 2923 00a8 03F10102 		add	r2, r3, #1
 2924 00ac 3B68     		ldr	r3, [r7, #0]
 2925 00ae 5A60     		str	r2, [r3, #4]
 2926 00b0 12E0     		b	.L124
 2927              	.L123:
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2928              		.loc 1 1318 0
 2929 00b2 7B68     		ldr	r3, [r7, #4]
 2930 00b4 9B69     		ldr	r3, [r3, #24]
 2931 00b6 1B6F     		ldr	r3, [r3, #112]
 2932 00b8 4FEA0343 		lsl	r3, r3, #16
 2933 00bc 4FEA1343 		lsr	r3, r3, #16
 2934 00c0 3A68     		ldr	r2, [r7, #0]
 2935 00c2 9360     		str	r3, [r2, #8]
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 2936              		.loc 1 1321 0
 2937 00c4 7B68     		ldr	r3, [r7, #4]
 2938 00c6 9B69     		ldr	r3, [r3, #24]
 2939 00c8 DA6B     		ldr	r2, [r3, #60]
 2940 00ca 3B68     		ldr	r3, [r7, #0]
 2941 00cc 1A60     		str	r2, [r3, #0]
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 2942              		.loc 1 1322 0
 2943 00ce 7B68     		ldr	r3, [r7, #4]
 2944 00d0 9B69     		ldr	r3, [r3, #24]
 2945 00d2 5A6B     		ldr	r2, [r3, #52]
 2946 00d4 3B68     		ldr	r3, [r7, #0]
 2947 00d6 5A60     		str	r2, [r3, #4]
 2948              	.L124:
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2949              		.loc 1 1325 0
 2950 00d8 4FF00003 		mov	r3, #0
 2951 00dc FB60     		str	r3, [r7, #12]
 2952              	.L122:
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2953              		.loc 1 1327 0
 2954 00de FB68     		ldr	r3, [r7, #12]
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2955              		.loc 1 1328 0
 2956 00e0 1846     		mov	r0, r3
 2957 00e2 07F11407 		add	r7, r7, #20
 2958 00e6 BD46     		mov	sp, r7
 2959 00e8 80BC     		pop	{r7}
 2960 00ea 7047     		bx	lr
 2961              		.cfi_endproc
 2962              	.LFE140:
 2964              		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 2965              		.align	2
 2966              		.global	PWMSP001_GetPeriodReg
 2967              		.thumb
 2968              		.thumb_func
 2970              	PWMSP001_GetPeriodReg:
 2971              	.LFB141:
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2972              		.loc 1 1339 0
 2973              		.cfi_startproc
 2974              		@ args = 0, pretend = 0, frame = 16
 2975              		@ frame_needed = 1, uses_anonymous_args = 0
 2976              		@ link register save eliminated.
 2977 0000 80B4     		push	{r7}
 2978              	.LCFI63:
 2979              		.cfi_def_cfa_offset 4
 2980              		.cfi_offset 7, -4
 2981 0002 85B0     		sub	sp, sp, #20
 2982              	.LCFI64:
 2983              		.cfi_def_cfa_offset 24
 2984 0004 00AF     		add	r7, sp, #0
 2985              	.LCFI65:
 2986              		.cfi_def_cfa_register 7
 2987 0006 7860     		str	r0, [r7, #4]
 2988 0008 3960     		str	r1, [r7, #0]
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2989              		.loc 1 1340 0
 2990 000a 4FF00103 		mov	r3, #1
 2991 000e FB60     		str	r3, [r7, #12]
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2992              		.loc 1 1343 0
 2993 0010 7B68     		ldr	r3, [r7, #4]
 2994 0012 DB6B     		ldr	r3, [r3, #60]
 2995 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2996 0016 002B     		cmp	r3, #0
 2997 0018 29D0     		beq	.L127
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2998              		.loc 1 1349 0
 2999 001a 7B68     		ldr	r3, [r7, #4]
 3000 001c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3001 0020 012B     		cmp	r3, #1
 3002 0022 1CD1     		bne	.L128
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 3003              		.loc 1 1351 0
 3004 0024 7B68     		ldr	r3, [r7, #4]
 3005 0026 DB69     		ldr	r3, [r3, #28]
 3006 0028 5B6B     		ldr	r3, [r3, #52]
 3007 002a 03F10102 		add	r2, r3, #1
 3008 002e 3B68     		ldr	r3, [r7, #0]
 3009 0030 1A60     		str	r2, [r3, #0]
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 3010              		.loc 1 1352 0
 3011 0032 3B68     		ldr	r3, [r7, #0]
 3012 0034 1A68     		ldr	r2, [r3, #0]
 3013 0036 7B68     		ldr	r3, [r7, #4]
 3014 0038 9B69     		ldr	r3, [r3, #24]
 3015 003a 5B6B     		ldr	r3, [r3, #52]
 3016 003c 4FEA0343 		lsl	r3, r3, #16
 3017 0040 4FEA1343 		lsr	r3, r3, #16
 3018 0044 03F10103 		add	r3, r3, #1
 3019 0048 03FB02F2 		mul	r2, r3, r2
 3020 004c 3B68     		ldr	r3, [r7, #0]
 3021 004e 1A60     		str	r2, [r3, #0]
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 3022              		.loc 1 1353 0
 3023 0050 3B68     		ldr	r3, [r7, #0]
 3024 0052 1B68     		ldr	r3, [r3, #0]
 3025 0054 03F10102 		add	r2, r3, #1
 3026 0058 3B68     		ldr	r3, [r7, #0]
 3027 005a 1A60     		str	r2, [r3, #0]
 3028 005c 04E0     		b	.L129
 3029              	.L128:
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 3030              		.loc 1 1357 0
 3031 005e 7B68     		ldr	r3, [r7, #4]
 3032 0060 9B69     		ldr	r3, [r3, #24]
 3033 0062 5A6B     		ldr	r2, [r3, #52]
 3034 0064 3B68     		ldr	r3, [r7, #0]
 3035 0066 1A60     		str	r2, [r3, #0]
 3036              	.L129:
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3037              		.loc 1 1359 0
 3038 0068 4FF00003 		mov	r3, #0
 3039 006c FB60     		str	r3, [r7, #12]
 3040              	.L127:
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3041              		.loc 1 1361 0
 3042 006e FB68     		ldr	r3, [r7, #12]
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3043              		.loc 1 1362 0
 3044 0070 1846     		mov	r0, r3
 3045 0072 07F11407 		add	r7, r7, #20
 3046 0076 BD46     		mov	sp, r7
 3047 0078 80BC     		pop	{r7}
 3048 007a 7047     		bx	lr
 3049              		.cfi_endproc
 3050              	.LFE141:
 3052              		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 3053              		.align	2
 3054              		.global	PWMSP001_SWRequestShadowTransfer
 3055              		.thumb
 3056              		.thumb_func
 3058              	PWMSP001_SWRequestShadowTransfer:
 3059              	.LFB142:
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3060              		.loc 1 1372 0
 3061              		.cfi_startproc
 3062              		@ args = 0, pretend = 0, frame = 24
 3063              		@ frame_needed = 1, uses_anonymous_args = 0
 3064              		@ link register save eliminated.
 3065 0000 90B4     		push	{r4, r7}
 3066              	.LCFI66:
 3067              		.cfi_def_cfa_offset 8
 3068              		.cfi_offset 4, -8
 3069              		.cfi_offset 7, -4
 3070 0002 86B0     		sub	sp, sp, #24
 3071              	.LCFI67:
 3072              		.cfi_def_cfa_offset 32
 3073 0004 00AF     		add	r7, sp, #0
 3074              	.LCFI68:
 3075              		.cfi_def_cfa_register 7
 3076 0006 7860     		str	r0, [r7, #4]
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3077              		.loc 1 1373 0
 3078 0008 4FF00103 		mov	r3, #1
 3079 000c 7B61     		str	r3, [r7, #20]
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3080              		.loc 1 1379 0
 3081 000e 7B68     		ldr	r3, [r7, #4]
 3082 0010 DB6B     		ldr	r3, [r3, #60]
 3083 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3084 0014 002B     		cmp	r3, #0
 3085 0016 38D0     		beq	.L132
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3086              		.loc 1 1387 0
 3087 0018 7B68     		ldr	r3, [r7, #4]
 3088 001a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3089 001e 012B     		cmp	r3, #1
 3090 0020 1ED1     		bne	.L133
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 3091              		.loc 1 1390 0
 3092 0022 7B68     		ldr	r3, [r7, #4]
 3093 0024 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3094 0028 4FEA8303 		lsl	r3, r3, #2
 3095 002c 3B61     		str	r3, [r7, #16]
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 3096              		.loc 1 1391 0
 3097 002e 7B68     		ldr	r3, [r7, #4]
 3098 0030 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3099 0034 4FEA8303 		lsl	r3, r3, #2
 3100 0038 FB60     		str	r3, [r7, #12]
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 3101              		.loc 1 1392 0
 3102 003a 7B68     		ldr	r3, [r7, #4]
 3103 003c 5B69     		ldr	r3, [r3, #20]
 3104 003e 7A68     		ldr	r2, [r7, #4]
 3105 0040 5269     		ldr	r2, [r2, #20]
 3106 0042 1169     		ldr	r1, [r2, #16]
 3107 0044 3A69     		ldr	r2, [r7, #16]
 3108 0046 4FF00100 		mov	r0, #1
 3109 004a 00FA02F0 		lsl	r0, r0, r2
 3110 004e FA68     		ldr	r2, [r7, #12]
 3111 0050 4FF00104 		mov	r4, #1
 3112 0054 04FA02F2 		lsl	r2, r4, r2
 3113 0058 0243     		orrs	r2, r2, r0
 3114 005a 0A43     		orrs	r2, r2, r1
 3115 005c 1A61     		str	r2, [r3, #16]
 3116 005e 11E0     		b	.L134
 3117              	.L133:
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 3118              		.loc 1 1396 0
 3119 0060 7B68     		ldr	r3, [r7, #4]
 3120 0062 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3121 0066 4FEA8303 		lsl	r3, r3, #2
 3122 006a BB60     		str	r3, [r7, #8]
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 3123              		.loc 1 1397 0
 3124 006c 7B68     		ldr	r3, [r7, #4]
 3125 006e 5B69     		ldr	r3, [r3, #20]
 3126 0070 7A68     		ldr	r2, [r7, #4]
 3127 0072 5269     		ldr	r2, [r2, #20]
 3128 0074 1169     		ldr	r1, [r2, #16]
 3129 0076 BA68     		ldr	r2, [r7, #8]
 3130 0078 4FF00100 		mov	r0, #1
 3131 007c 00FA02F2 		lsl	r2, r0, r2
 3132 0080 0A43     		orrs	r2, r2, r1
 3133 0082 1A61     		str	r2, [r3, #16]
 3134              	.L134:
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3135              		.loc 1 1399 0
 3136 0084 4FF00003 		mov	r3, #0
 3137 0088 7B61     		str	r3, [r7, #20]
 3138              	.L132:
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3139              		.loc 1 1401 0
 3140 008a 7B69     		ldr	r3, [r7, #20]
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3141              		.loc 1 1402 0
 3142 008c 1846     		mov	r0, r3
 3143 008e 07F11807 		add	r7, r7, #24
 3144 0092 BD46     		mov	sp, r7
 3145 0094 90BC     		pop	{r4, r7}
 3146 0096 7047     		bx	lr
 3147              		.cfi_endproc
 3148              	.LFE142:
 3150              		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 3151              		.align	2
 3152              		.global	PWMSP001_ResetTrapFlag
 3153              		.thumb
 3154              		.thumb_func
 3156              	PWMSP001_ResetTrapFlag:
 3157              	.LFB143:
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3158              		.loc 1 1409 0
 3159              		.cfi_startproc
 3160              		@ args = 0, pretend = 0, frame = 8
 3161              		@ frame_needed = 1, uses_anonymous_args = 0
 3162              		@ link register save eliminated.
 3163 0000 80B4     		push	{r7}
 3164              	.LCFI69:
 3165              		.cfi_def_cfa_offset 4
 3166              		.cfi_offset 7, -4
 3167 0002 83B0     		sub	sp, sp, #12
 3168              	.LCFI70:
 3169              		.cfi_def_cfa_offset 16
 3170 0004 00AF     		add	r7, sp, #0
 3171              	.LCFI71:
 3172              		.cfi_def_cfa_register 7
 3173 0006 7860     		str	r0, [r7, #4]
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 3174              		.loc 1 1410 0
 3175 0008 7B68     		ldr	r3, [r7, #4]
 3176 000a DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 3177 000c 012B     		cmp	r3, #1
 3178 000e 18D1     		bne	.L137
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3179              		.loc 1 1412 0
 3180 0010 7B68     		ldr	r3, [r7, #4]
 3181 0012 9B69     		ldr	r3, [r3, #24]
 3182 0014 7A68     		ldr	r2, [r7, #4]
 3183 0016 9269     		ldr	r2, [r2, #24]
 3184 0018 D2F8B020 		ldr	r2, [r2, #176]
 3185 001c 42F48062 		orr	r2, r2, #1024
 3186 0020 C3F8B020 		str	r2, [r3, #176]
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3187              		.loc 1 1413 0
 3188 0024 7B68     		ldr	r3, [r7, #4]
 3189 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3190 002a 012B     		cmp	r3, #1
 3191 002c 09D1     		bne	.L137
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3192              		.loc 1 1415 0
 3193 002e 7B68     		ldr	r3, [r7, #4]
 3194 0030 DB69     		ldr	r3, [r3, #28]
 3195 0032 7A68     		ldr	r2, [r7, #4]
 3196 0034 D269     		ldr	r2, [r2, #28]
 3197 0036 D2F8B020 		ldr	r2, [r2, #176]
 3198 003a 42F48062 		orr	r2, r2, #1024
 3199 003e C3F8B020 		str	r2, [r3, #176]
 3200              	.L137:
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3201              		.loc 1 1418 0
 3202 0042 7B68     		ldr	r3, [r7, #4]
 3203 0044 9B69     		ldr	r3, [r3, #24]
 3204 0046 7A68     		ldr	r2, [r7, #4]
 3205 0048 9269     		ldr	r2, [r2, #24]
 3206 004a D2F8B020 		ldr	r2, [r2, #176]
 3207 004e 42F40062 		orr	r2, r2, #2048
 3208 0052 C3F8B020 		str	r2, [r3, #176]
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3209              		.loc 1 1419 0
 3210 0056 7B68     		ldr	r3, [r7, #4]
 3211 0058 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3212 005c 012B     		cmp	r3, #1
 3213 005e 09D1     		bne	.L136
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3214              		.loc 1 1421 0
 3215 0060 7B68     		ldr	r3, [r7, #4]
 3216 0062 DB69     		ldr	r3, [r3, #28]
 3217 0064 7A68     		ldr	r2, [r7, #4]
 3218 0066 D269     		ldr	r2, [r2, #28]
 3219 0068 D2F8B020 		ldr	r2, [r2, #176]
 3220 006c 42F40062 		orr	r2, r2, #2048
 3221 0070 C3F8B020 		str	r2, [r3, #176]
 3222              	.L136:
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3223              		.loc 1 1423 0
 3224 0074 07F10C07 		add	r7, r7, #12
 3225 0078 BD46     		mov	sp, r7
 3226 007a 80BC     		pop	{r7}
 3227 007c 7047     		bx	lr
 3228              		.cfi_endproc
 3229              	.LFE143:
 3231 007e 00BF     		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 3232              		.align	2
 3233              		.global	PWMSP001_lConfigureSecondSlice
 3234              		.thumb
 3235              		.thumb_func
 3237              	PWMSP001_lConfigureSecondSlice:
 3238              	.LFB144:
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3239              		.loc 1 1431 0
 3240              		.cfi_startproc
 3241              		@ args = 0, pretend = 0, frame = 8
 3242              		@ frame_needed = 1, uses_anonymous_args = 0
 3243              		@ link register save eliminated.
 3244 0000 90B4     		push	{r4, r7}
 3245              	.LCFI72:
 3246              		.cfi_def_cfa_offset 8
 3247              		.cfi_offset 4, -8
 3248              		.cfi_offset 7, -4
 3249 0002 82B0     		sub	sp, sp, #8
 3250              	.LCFI73:
 3251              		.cfi_def_cfa_offset 16
 3252 0004 00AF     		add	r7, sp, #0
 3253              	.LCFI74:
 3254              		.cfi_def_cfa_register 7
 3255 0006 7860     		str	r0, [r7, #4]
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 3256              		.loc 1 1432 0
 3257 0008 7B68     		ldr	r3, [r7, #4]
 3258 000a DB69     		ldr	r3, [r3, #28]
 3259 000c 4FF00702 		mov	r2, #7
 3260 0010 1A61     		str	r2, [r3, #16]
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 3261              		.loc 1 1435 0
 3262 0012 7B68     		ldr	r3, [r7, #4]
 3263 0014 DB69     		ldr	r3, [r3, #28]
 3264 0016 7A68     		ldr	r2, [r7, #4]
 3265 0018 926A     		ldr	r2, [r2, #40]
 3266 001a 4FEA1242 		lsr	r2, r2, #16
 3267 001e 5A63     		str	r2, [r3, #52]
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 3268              		.loc 1 1437 0
 3269 0020 7B68     		ldr	r3, [r7, #4]
 3270 0022 DB69     		ldr	r3, [r3, #28]
 3271 0024 7A68     		ldr	r2, [r7, #4]
 3272 0026 9268     		ldr	r2, [r2, #8]
 3273 0028 4FEA1242 		lsr	r2, r2, #16
 3274 002c DA63     		str	r2, [r3, #60]
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 3275              		.loc 1 1440 0
 3276 002e 7B68     		ldr	r3, [r7, #4]
 3277 0030 DB69     		ldr	r3, [r3, #28]
 3278 0032 7A68     		ldr	r2, [r7, #4]
 3279 0034 D269     		ldr	r2, [r2, #28]
 3280 0036 5268     		ldr	r2, [r2, #4]
 3281 0038 42F48012 		orr	r2, r2, #1048576
 3282 003c 5A60     		str	r2, [r3, #4]
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 3283              		.loc 1 1443 0
 3284 003e 7B68     		ldr	r3, [r7, #4]
 3285 0040 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3286 0042 012B     		cmp	r3, #1
 3287 0044 27D1     		bne	.L140
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 3288              		.loc 1 1445 0
 3289 0046 7B68     		ldr	r3, [r7, #4]
 3290 0048 DA69     		ldr	r2, [r3, #28]
 3291 004a 7B68     		ldr	r3, [r7, #4]
 3292 004c DB69     		ldr	r3, [r3, #28]
 3293 004e 1B68     		ldr	r3, [r3, #0]
 3294 0050 23F0C053 		bic	r3, r3, #402653184
 3295 0054 23F44023 		bic	r3, r3, #786432
 3296 0058 1360     		str	r3, [r2, #0]
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 3297              		.loc 1 1446 0
 3298 005a 7B68     		ldr	r3, [r7, #4]
 3299 005c DB69     		ldr	r3, [r3, #28]
 3300 005e 7A68     		ldr	r2, [r7, #4]
 3301 0060 D269     		ldr	r2, [r2, #28]
 3302 0062 5268     		ldr	r2, [r2, #4]
 3303 0064 22F00C02 		bic	r2, r2, #12
 3304 0068 5A60     		str	r2, [r3, #4]
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 3305              		.loc 1 1447 0
 3306 006a 7B68     		ldr	r3, [r7, #4]
 3307 006c DB69     		ldr	r3, [r3, #28]
 3308 006e 7A68     		ldr	r2, [r7, #4]
 3309 0070 D269     		ldr	r2, [r2, #28]
 3310 0072 1168     		ldr	r1, [r2, #0]
 3311 0074 7A68     		ldr	r2, [r7, #4]
 3312 0076 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 3313 007a 4FEA8242 		lsl	r2, r2, #18
 3314 007e 02F44022 		and	r2, r2, #786432
 3315 0082 0A43     		orrs	r2, r2, r1
 3316 0084 1A60     		str	r2, [r3, #0]
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 3317              		.loc 1 1451 0
 3318 0086 7B68     		ldr	r3, [r7, #4]
 3319 0088 DB69     		ldr	r3, [r3, #28]
 3320 008a 7A68     		ldr	r2, [r7, #4]
 3321 008c D269     		ldr	r2, [r2, #28]
 3322 008e 5268     		ldr	r2, [r2, #4]
 3323 0090 42F00802 		orr	r2, r2, #8
 3324 0094 5A60     		str	r2, [r3, #4]
 3325              	.L140:
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 3326              		.loc 1 1456 0
 3327 0096 7B68     		ldr	r3, [r7, #4]
 3328 0098 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3329 009a 012B     		cmp	r3, #1
 3330 009c 26D1     		bne	.L141
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 3331              		.loc 1 1458 0
 3332 009e 7B68     		ldr	r3, [r7, #4]
 3333 00a0 DA69     		ldr	r2, [r3, #28]
 3334 00a2 7B68     		ldr	r3, [r7, #4]
 3335 00a4 DB69     		ldr	r3, [r3, #28]
 3336 00a6 1B68     		ldr	r3, [r3, #0]
 3337 00a8 23F0C243 		bic	r3, r3, #1627389952
 3338 00ac 23F44013 		bic	r3, r3, #3145728
 3339 00b0 1360     		str	r3, [r2, #0]
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 3340              		.loc 1 1460 0
 3341 00b2 7B68     		ldr	r3, [r7, #4]
 3342 00b4 DB69     		ldr	r3, [r3, #28]
 3343 00b6 7A68     		ldr	r2, [r7, #4]
 3344 00b8 D269     		ldr	r2, [r2, #28]
 3345 00ba 5268     		ldr	r2, [r2, #4]
 3346 00bc 22F40032 		bic	r2, r2, #131072
 3347 00c0 5A60     		str	r2, [r3, #4]
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3348              		.loc 1 1461 0
 3349 00c2 7B68     		ldr	r3, [r7, #4]
 3350 00c4 DB69     		ldr	r3, [r3, #28]
 3351 00c6 7A68     		ldr	r2, [r7, #4]
 3352 00c8 D269     		ldr	r2, [r2, #28]
 3353 00ca 1168     		ldr	r1, [r2, #0]
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 3354              		.loc 1 1463 0
 3355 00cc 7A68     		ldr	r2, [r7, #4]
 3356 00ce 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3357 00d0 4FEA0262 		lsl	r2, r2, #24
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3358              		.loc 1 1461 0
 3359 00d4 02F08072 		and	r2, r2, #16777216
 3360 00d8 0A43     		orrs	r2, r2, r1
 3361 00da 1A60     		str	r2, [r3, #0]
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 3362              		.loc 1 1466 0
 3363 00dc 7B68     		ldr	r3, [r7, #4]
 3364 00de DB69     		ldr	r3, [r3, #28]
 3365 00e0 7A68     		ldr	r2, [r7, #4]
 3366 00e2 D269     		ldr	r2, [r2, #28]
 3367 00e4 5268     		ldr	r2, [r2, #4]
 3368 00e6 42F40032 		orr	r2, r2, #131072
 3369 00ea 5A60     		str	r2, [r3, #4]
 3370              	.L141:
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 3371              		.loc 1 1469 0
 3372 00ec 7B68     		ldr	r3, [r7, #4]
 3373 00ee DA69     		ldr	r2, [r3, #28]
 3374 00f0 7B68     		ldr	r3, [r7, #4]
 3375 00f2 DB69     		ldr	r3, [r3, #28]
 3376 00f4 5B69     		ldr	r3, [r3, #20]
 3377 00f6 23F4CE43 		bic	r3, r3, #26368
 3378 00fa 23F00B03 		bic	r3, r3, #11
 3379 00fe 5361     		str	r3, [r2, #20]
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3380              		.loc 1 1472 0
 3381 0100 7B68     		ldr	r3, [r7, #4]
 3382 0102 DB69     		ldr	r3, [r3, #28]
 3383 0104 7A68     		ldr	r2, [r7, #4]
 3384 0106 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 3385              		.loc 1 1473 0
 3386 010a 02F00101 		and	r1, r2, #1
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 3387              		.loc 1 1474 0
 3388 010e 7A68     		ldr	r2, [r7, #4]
 3389 0110 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 3390 0112 4FEA4202 		lsl	r2, r2, #1
 3391 0116 02F00202 		and	r2, r2, #2
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 3392              		.loc 1 1475 0
 3393 011a 1143     		orrs	r1, r1, r2
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 3394              		.loc 1 1477 0
 3395 011c 7A68     		ldr	r2, [r7, #4]
 3396 011e 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 3397 0122 4FEA8222 		lsl	r2, r2, #10
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3398              		.loc 1 1478 0
 3399 0126 02F48062 		and	r2, r2, #1024
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 3400              		.loc 1 1476 0
 3401 012a 1143     		orrs	r1, r1, r2
 3402              		.loc 1 1478 0
 3403 012c 7A68     		ldr	r2, [r7, #4]
 3404 012e 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 3405 0132 4FEA0222 		lsl	r2, r2, #8
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 3406              		.loc 1 1479 0
 3407 0136 02F44072 		and	r2, r2, #768
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3408              		.loc 1 1478 0
 3409 013a 0A43     		orrs	r2, r2, r1
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3410              		.loc 1 1472 0
 3411 013c 5A61     		str	r2, [r3, #20]
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3412              		.loc 1 1482 0
 3413 013e 7B68     		ldr	r3, [r7, #4]
 3414 0140 DB69     		ldr	r3, [r3, #28]
 3415 0142 7A68     		ldr	r2, [r7, #4]
 3416 0144 D269     		ldr	r2, [r2, #28]
 3417 0146 5169     		ldr	r1, [r2, #20]
 3418 0148 7A68     		ldr	r2, [r7, #4]
 3419 014a 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 3420 014e 4FEA4232 		lsl	r2, r2, #13
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 3421              		.loc 1 1483 0
 3422 0152 02F4C042 		and	r2, r2, #24576
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3423              		.loc 1 1482 0
 3424 0156 0A43     		orrs	r2, r2, r1
 3425 0158 5A61     		str	r2, [r3, #20]
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 3426              		.loc 1 1484 0
 3427 015a 7B68     		ldr	r3, [r7, #4]
 3428 015c DB69     		ldr	r3, [r3, #28]
 3429 015e 7A68     		ldr	r2, [r7, #4]
 3430 0160 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 3431 0162 02F00F01 		and	r1, r2, #15
 3432 0166 7A68     		ldr	r2, [r7, #4]
 3433 0168 D269     		ldr	r2, [r2, #28]
 3434 016a 126A     		ldr	r2, [r2, #32]
 3435 016c 22F00F02 		bic	r2, r2, #15
 3436 0170 0A43     		orrs	r2, r2, r1
 3437 0172 1A62     		str	r2, [r3, #32]
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 3438              		.loc 1 1488 0
 3439 0174 7B68     		ldr	r3, [r7, #4]
 3440 0176 DB69     		ldr	r3, [r3, #28]
 3441 0178 7A68     		ldr	r2, [r7, #4]
 3442 017a 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 3443 017c 4FEA4252 		lsl	r2, r2, #21
 3444 0180 02F40011 		and	r1, r2, #2097152
 3445 0184 7A68     		ldr	r2, [r7, #4]
 3446 0186 D269     		ldr	r2, [r2, #28]
 3447 0188 5269     		ldr	r2, [r2, #20]
 3448 018a 22F40012 		bic	r2, r2, #2097152
 3449 018e 0A43     		orrs	r2, r2, r1
 3450 0190 5A61     		str	r2, [r3, #20]
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 3451              		.loc 1 1491 0
 3452 0192 7B68     		ldr	r3, [r7, #4]
 3453 0194 DB69     		ldr	r3, [r3, #28]
 3454 0196 7A68     		ldr	r2, [r7, #4]
 3455 0198 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 3456 019a 4FEA8252 		lsl	r2, r2, #22
 3457 019e 02F48001 		and	r1, r2, #4194304
 3458 01a2 7A68     		ldr	r2, [r7, #4]
 3459 01a4 D269     		ldr	r2, [r2, #28]
 3460 01a6 5269     		ldr	r2, [r2, #20]
 3461 01a8 22F48002 		bic	r2, r2, #4194304
 3462 01ac 0A43     		orrs	r2, r2, r1
 3463 01ae 5A61     		str	r2, [r3, #20]
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 3464              		.loc 1 1494 0
 3465 01b0 7B68     		ldr	r3, [r7, #4]
 3466 01b2 DB69     		ldr	r3, [r3, #28]
 3467 01b4 7A68     		ldr	r2, [r7, #4]
 3468 01b6 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3469 01b8 4FEA4242 		lsl	r2, r2, #17
 3470 01bc 02F40031 		and	r1, r2, #131072
 3471 01c0 7A68     		ldr	r2, [r7, #4]
 3472 01c2 D269     		ldr	r2, [r2, #28]
 3473 01c4 5269     		ldr	r2, [r2, #20]
 3474 01c6 22F40032 		bic	r2, r2, #131072
 3475 01ca 0A43     		orrs	r2, r2, r1
 3476 01cc 5A61     		str	r2, [r3, #20]
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 3477              		.loc 1 1497 0
 3478 01ce 7B68     		ldr	r3, [r7, #4]
 3479 01d0 DB69     		ldr	r3, [r3, #28]
 3480 01d2 7A68     		ldr	r2, [r7, #4]
 3481 01d4 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 3482 01d8 02F00F01 		and	r1, r2, #15
 3483 01dc 7A68     		ldr	r2, [r7, #4]
 3484 01de D269     		ldr	r2, [r2, #28]
 3485 01e0 526A     		ldr	r2, [r2, #36]
 3486 01e2 22F00F02 		bic	r2, r2, #15
 3487 01e6 0A43     		orrs	r2, r2, r1
 3488 01e8 5A62     		str	r2, [r3, #36]
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 3489              		.loc 1 1500 0
 3490 01ea 7B68     		ldr	r3, [r7, #4]
 3491 01ec DB69     		ldr	r3, [r3, #28]
 3492 01ee 7A68     		ldr	r2, [r7, #4]
 3493 01f0 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 3494 01f2 9A61     		str	r2, [r3, #24]
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3495              		.loc 1 1502 0
 3496 01f4 7B68     		ldr	r3, [r7, #4]
 3497 01f6 5B69     		ldr	r3, [r3, #20]
 3498 01f8 7A68     		ldr	r2, [r7, #4]
 3499 01fa 5269     		ldr	r2, [r2, #20]
 3500 01fc 1169     		ldr	r1, [r2, #16]
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3501              		.loc 1 1503 0
 3502 01fe 7A68     		ldr	r2, [r7, #4]
 3503 0200 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 3504 0204 4FEA8202 		lsl	r2, r2, #2
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3505              		.loc 1 1502 0
 3506 0208 4FF00100 		mov	r0, #1
 3507 020c 00FA02F0 		lsl	r0, r0, r2
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 3508              		.loc 1 1505 0
 3509 0210 7A68     		ldr	r2, [r7, #4]
 3510 0212 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3511              		.loc 1 1504 0
 3512 0216 4FEA8202 		lsl	r2, r2, #2
 3513              		.loc 1 1505 0
 3514 021a 02F10102 		add	r2, r2, #1
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3515              		.loc 1 1504 0
 3516 021e 4FF00104 		mov	r4, #1
 3517 0222 04FA02F2 		lsl	r2, r4, r2
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3518              		.loc 1 1503 0
 3519 0226 1043     		orrs	r0, r0, r2
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 3520              		.loc 1 1507 0
 3521 0228 7A68     		ldr	r2, [r7, #4]
 3522 022a 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3523              		.loc 1 1506 0
 3524 022e 4FEA8202 		lsl	r2, r2, #2
 3525              		.loc 1 1507 0
 3526 0232 02F10202 		add	r2, r2, #2
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3527              		.loc 1 1506 0
 3528 0236 4FF00104 		mov	r4, #1
 3529 023a 04FA02F2 		lsl	r2, r4, r2
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3530              		.loc 1 1502 0
 3531 023e 0243     		orrs	r2, r2, r0
 3532 0240 0A43     		orrs	r2, r2, r1
 3533 0242 1A61     		str	r2, [r3, #16]
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3534              		.loc 1 1508 0
 3535 0244 07F10807 		add	r7, r7, #8
 3536 0248 BD46     		mov	sp, r7
 3537 024a 90BC     		pop	{r4, r7}
 3538 024c 7047     		bx	lr
 3539              		.cfi_endproc
 3540              	.LFE144:
 3542 024e 00BF     		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 3543              		.align	2
 3544              		.global	PWMSP001_EnableEvent
 3545              		.thumb
 3546              		.thumb_func
 3548              	PWMSP001_EnableEvent:
 3549              	.LFB145:
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3550              		.loc 1 1518 0
 3551              		.cfi_startproc
 3552              		@ args = 0, pretend = 0, frame = 16
 3553              		@ frame_needed = 1, uses_anonymous_args = 0
 3554              		@ link register save eliminated.
 3555 0000 80B4     		push	{r7}
 3556              	.LCFI75:
 3557              		.cfi_def_cfa_offset 4
 3558              		.cfi_offset 7, -4
 3559 0002 85B0     		sub	sp, sp, #20
 3560              	.LCFI76:
 3561              		.cfi_def_cfa_offset 24
 3562 0004 00AF     		add	r7, sp, #0
 3563              	.LCFI77:
 3564              		.cfi_def_cfa_register 7
 3565 0006 7860     		str	r0, [r7, #4]
 3566 0008 0B46     		mov	r3, r1
 3567 000a FB70     		strb	r3, [r7, #3]
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3568              		.loc 1 1519 0
 3569 000c 4FF00103 		mov	r3, #1
 3570 0010 FB60     		str	r3, [r7, #12]
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3571              		.loc 1 1521 0
 3572 0012 7B68     		ldr	r3, [r7, #4]
 3573 0014 DB6B     		ldr	r3, [r3, #60]
 3574 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3575 0018 002B     		cmp	r3, #0
 3576 001a 03D1     		bne	.L143
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3577              		.loc 1 1523 0
 3578 001c 4FF00103 		mov	r3, #1
 3579 0020 FB60     		str	r3, [r7, #12]
 3580 0022 24E0     		b	.L144
 3581              	.L143:
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3582              		.loc 1 1528 0
 3583 0024 7B68     		ldr	r3, [r7, #4]
 3584 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3585 002a 012B     		cmp	r3, #1
 3586 002c 0ED1     		bne	.L145
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3587              		.loc 1 1530 0
 3588 002e 7B68     		ldr	r3, [r7, #4]
 3589 0030 DB69     		ldr	r3, [r3, #28]
 3590 0032 7A68     		ldr	r2, [r7, #4]
 3591 0034 D269     		ldr	r2, [r2, #28]
 3592 0036 D2F8A410 		ldr	r1, [r2, #164]
 3593 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3594 003c 4FF00100 		mov	r0, #1
 3595 0040 00FA02F2 		lsl	r2, r0, r2
 3596 0044 0A43     		orrs	r2, r2, r1
 3597 0046 C3F8A420 		str	r2, [r3, #164]
 3598 004a 0DE0     		b	.L146
 3599              	.L145:
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3600              		.loc 1 1534 0
 3601 004c 7B68     		ldr	r3, [r7, #4]
 3602 004e 9B69     		ldr	r3, [r3, #24]
 3603 0050 7A68     		ldr	r2, [r7, #4]
 3604 0052 9269     		ldr	r2, [r2, #24]
 3605 0054 D2F8A410 		ldr	r1, [r2, #164]
 3606 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3607 005a 4FF00100 		mov	r0, #1
 3608 005e 00FA02F2 		lsl	r2, r0, r2
 3609 0062 0A43     		orrs	r2, r2, r1
 3610 0064 C3F8A420 		str	r2, [r3, #164]
 3611              	.L146:
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3612              		.loc 1 1536 0
 3613 0068 4FF00003 		mov	r3, #0
 3614 006c FB60     		str	r3, [r7, #12]
 3615              	.L144:
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3616              		.loc 1 1538 0
 3617 006e FB68     		ldr	r3, [r7, #12]
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3618              		.loc 1 1539 0
 3619 0070 1846     		mov	r0, r3
 3620 0072 07F11407 		add	r7, r7, #20
 3621 0076 BD46     		mov	sp, r7
 3622 0078 80BC     		pop	{r7}
 3623 007a 7047     		bx	lr
 3624              		.cfi_endproc
 3625              	.LFE145:
 3627              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 3628              		.align	2
 3629              		.global	PWMSP001_DisableEvent
 3630              		.thumb
 3631              		.thumb_func
 3633              	PWMSP001_DisableEvent:
 3634              	.LFB146:
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3635              		.loc 1 1549 0
 3636              		.cfi_startproc
 3637              		@ args = 0, pretend = 0, frame = 16
 3638              		@ frame_needed = 1, uses_anonymous_args = 0
 3639              		@ link register save eliminated.
 3640 0000 80B4     		push	{r7}
 3641              	.LCFI78:
 3642              		.cfi_def_cfa_offset 4
 3643              		.cfi_offset 7, -4
 3644 0002 85B0     		sub	sp, sp, #20
 3645              	.LCFI79:
 3646              		.cfi_def_cfa_offset 24
 3647 0004 00AF     		add	r7, sp, #0
 3648              	.LCFI80:
 3649              		.cfi_def_cfa_register 7
 3650 0006 7860     		str	r0, [r7, #4]
 3651 0008 0B46     		mov	r3, r1
 3652 000a FB70     		strb	r3, [r7, #3]
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3653              		.loc 1 1550 0
 3654 000c 4FF00103 		mov	r3, #1
 3655 0010 FB60     		str	r3, [r7, #12]
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3656              		.loc 1 1552 0
 3657 0012 7B68     		ldr	r3, [r7, #4]
 3658 0014 DB6B     		ldr	r3, [r3, #60]
 3659 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3660 0018 002B     		cmp	r3, #0
 3661 001a 03D1     		bne	.L149
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3662              		.loc 1 1554 0
 3663 001c 4FF00103 		mov	r3, #1
 3664 0020 FB60     		str	r3, [r7, #12]
 3665 0022 28E0     		b	.L150
 3666              	.L149:
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3667              		.loc 1 1559 0
 3668 0024 7B68     		ldr	r3, [r7, #4]
 3669 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3670 002a 012B     		cmp	r3, #1
 3671 002c 10D1     		bne	.L151
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3672              		.loc 1 1561 0
 3673 002e 7B68     		ldr	r3, [r7, #4]
 3674 0030 DB69     		ldr	r3, [r3, #28]
 3675 0032 7A68     		ldr	r2, [r7, #4]
 3676 0034 D269     		ldr	r2, [r2, #28]
 3677 0036 D2F8A410 		ldr	r1, [r2, #164]
 3678 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3679 003c 4FF00100 		mov	r0, #1
 3680 0040 00FA02F2 		lsl	r2, r0, r2
 3681 0044 6FEA0202 		mvn	r2, r2
 3682 0048 0A40     		ands	r2, r2, r1
 3683 004a C3F8A420 		str	r2, [r3, #164]
 3684 004e 0FE0     		b	.L152
 3685              	.L151:
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3686              		.loc 1 1565 0
 3687 0050 7B68     		ldr	r3, [r7, #4]
 3688 0052 9B69     		ldr	r3, [r3, #24]
 3689 0054 7A68     		ldr	r2, [r7, #4]
 3690 0056 9269     		ldr	r2, [r2, #24]
 3691 0058 D2F8A410 		ldr	r1, [r2, #164]
 3692 005c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3693 005e 4FF00100 		mov	r0, #1
 3694 0062 00FA02F2 		lsl	r2, r0, r2
 3695 0066 6FEA0202 		mvn	r2, r2
 3696 006a 0A40     		ands	r2, r2, r1
 3697 006c C3F8A420 		str	r2, [r3, #164]
 3698              	.L152:
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3699              		.loc 1 1567 0
 3700 0070 4FF00003 		mov	r3, #0
 3701 0074 FB60     		str	r3, [r7, #12]
 3702              	.L150:
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3703              		.loc 1 1569 0
 3704 0076 FB68     		ldr	r3, [r7, #12]
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3705              		.loc 1 1570 0
 3706 0078 1846     		mov	r0, r3
 3707 007a 07F11407 		add	r7, r7, #20
 3708 007e BD46     		mov	sp, r7
 3709 0080 80BC     		pop	{r7}
 3710 0082 7047     		bx	lr
 3711              		.cfi_endproc
 3712              	.LFE146:
 3714              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 3715              		.align	2
 3716              		.global	PWMSP001_ClearPendingEvent
 3717              		.thumb
 3718              		.thumb_func
 3720              	PWMSP001_ClearPendingEvent:
 3721              	.LFB147:
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3722              		.loc 1 1580 0
 3723              		.cfi_startproc
 3724              		@ args = 0, pretend = 0, frame = 16
 3725              		@ frame_needed = 1, uses_anonymous_args = 0
 3726              		@ link register save eliminated.
 3727 0000 80B4     		push	{r7}
 3728              	.LCFI81:
 3729              		.cfi_def_cfa_offset 4
 3730              		.cfi_offset 7, -4
 3731 0002 85B0     		sub	sp, sp, #20
 3732              	.LCFI82:
 3733              		.cfi_def_cfa_offset 24
 3734 0004 00AF     		add	r7, sp, #0
 3735              	.LCFI83:
 3736              		.cfi_def_cfa_register 7
 3737 0006 7860     		str	r0, [r7, #4]
 3738 0008 0B46     		mov	r3, r1
 3739 000a FB70     		strb	r3, [r7, #3]
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3740              		.loc 1 1581 0
 3741 000c 4FF00103 		mov	r3, #1
 3742 0010 FB60     		str	r3, [r7, #12]
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3743              		.loc 1 1583 0
 3744 0012 7B68     		ldr	r3, [r7, #4]
 3745 0014 DB6B     		ldr	r3, [r3, #60]
 3746 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3747 0018 002B     		cmp	r3, #0
 3748 001a 03D1     		bne	.L155
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3749              		.loc 1 1585 0
 3750 001c 4FF00103 		mov	r3, #1
 3751 0020 FB60     		str	r3, [r7, #12]
 3752 0022 24E0     		b	.L156
 3753              	.L155:
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3754              		.loc 1 1590 0
 3755 0024 7B68     		ldr	r3, [r7, #4]
 3756 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3757 002a 012B     		cmp	r3, #1
 3758 002c 0ED1     		bne	.L157
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 3759              		.loc 1 1592 0
 3760 002e 7B68     		ldr	r3, [r7, #4]
 3761 0030 DB69     		ldr	r3, [r3, #28]
 3762 0032 7A68     		ldr	r2, [r7, #4]
 3763 0034 D269     		ldr	r2, [r2, #28]
 3764 0036 D2F8B010 		ldr	r1, [r2, #176]
 3765 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3766 003c 4FF00100 		mov	r0, #1
 3767 0040 00FA02F2 		lsl	r2, r0, r2
 3768 0044 0A43     		orrs	r2, r2, r1
 3769 0046 C3F8B020 		str	r2, [r3, #176]
 3770 004a 0DE0     		b	.L158
 3771              	.L157:
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 3772              		.loc 1 1596 0
 3773 004c 7B68     		ldr	r3, [r7, #4]
 3774 004e 9B69     		ldr	r3, [r3, #24]
 3775 0050 7A68     		ldr	r2, [r7, #4]
 3776 0052 9269     		ldr	r2, [r2, #24]
 3777 0054 D2F8B010 		ldr	r1, [r2, #176]
 3778 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3779 005a 4FF00100 		mov	r0, #1
 3780 005e 00FA02F2 		lsl	r2, r0, r2
 3781 0062 0A43     		orrs	r2, r2, r1
 3782 0064 C3F8B020 		str	r2, [r3, #176]
 3783              	.L158:
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3784              		.loc 1 1598 0
 3785 0068 4FF00003 		mov	r3, #0
 3786 006c FB60     		str	r3, [r7, #12]
 3787              	.L156:
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3788              		.loc 1 1600 0
 3789 006e FB68     		ldr	r3, [r7, #12]
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3790              		.loc 1 1601 0
 3791 0070 1846     		mov	r0, r3
 3792 0072 07F11407 		add	r7, r7, #20
 3793 0076 BD46     		mov	sp, r7
 3794 0078 80BC     		pop	{r7}
 3795 007a 7047     		bx	lr
 3796              		.cfi_endproc
 3797              	.LFE147:
 3799              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 3800              		.align	2
 3801              		.global	PWMSP001_SetPendingEvent
 3802              		.thumb
 3803              		.thumb_func
 3805              	PWMSP001_SetPendingEvent:
 3806              	.LFB148:
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3807              		.loc 1 1612 0
 3808              		.cfi_startproc
 3809              		@ args = 0, pretend = 0, frame = 16
 3810              		@ frame_needed = 1, uses_anonymous_args = 0
 3811              		@ link register save eliminated.
 3812 0000 80B4     		push	{r7}
 3813              	.LCFI84:
 3814              		.cfi_def_cfa_offset 4
 3815              		.cfi_offset 7, -4
 3816 0002 85B0     		sub	sp, sp, #20
 3817              	.LCFI85:
 3818              		.cfi_def_cfa_offset 24
 3819 0004 00AF     		add	r7, sp, #0
 3820              	.LCFI86:
 3821              		.cfi_def_cfa_register 7
 3822 0006 7860     		str	r0, [r7, #4]
 3823 0008 0B46     		mov	r3, r1
 3824 000a FB70     		strb	r3, [r7, #3]
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3825              		.loc 1 1613 0
 3826 000c 4FF00103 		mov	r3, #1
 3827 0010 FB60     		str	r3, [r7, #12]
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3828              		.loc 1 1615 0
 3829 0012 7B68     		ldr	r3, [r7, #4]
 3830 0014 DB6B     		ldr	r3, [r3, #60]
 3831 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3832 0018 002B     		cmp	r3, #0
 3833 001a 03D1     		bne	.L161
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3834              		.loc 1 1617 0
 3835 001c 4FF00103 		mov	r3, #1
 3836 0020 FB60     		str	r3, [r7, #12]
 3837 0022 24E0     		b	.L162
 3838              	.L161:
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3839              		.loc 1 1622 0
 3840 0024 7B68     		ldr	r3, [r7, #4]
 3841 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3842 002a 012B     		cmp	r3, #1
 3843 002c 0ED1     		bne	.L163
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 3844              		.loc 1 1624 0
 3845 002e 7B68     		ldr	r3, [r7, #4]
 3846 0030 DB69     		ldr	r3, [r3, #28]
 3847 0032 7A68     		ldr	r2, [r7, #4]
 3848 0034 D269     		ldr	r2, [r2, #28]
 3849 0036 D2F8AC10 		ldr	r1, [r2, #172]
 3850 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3851 003c 4FF00100 		mov	r0, #1
 3852 0040 00FA02F2 		lsl	r2, r0, r2
 3853 0044 0A43     		orrs	r2, r2, r1
 3854 0046 C3F8AC20 		str	r2, [r3, #172]
 3855 004a 0DE0     		b	.L164
 3856              	.L163:
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 3857              		.loc 1 1628 0
 3858 004c 7B68     		ldr	r3, [r7, #4]
 3859 004e 9B69     		ldr	r3, [r3, #24]
 3860 0050 7A68     		ldr	r2, [r7, #4]
 3861 0052 9269     		ldr	r2, [r2, #24]
 3862 0054 D2F8AC10 		ldr	r1, [r2, #172]
 3863 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3864 005a 4FF00100 		mov	r0, #1
 3865 005e 00FA02F2 		lsl	r2, r0, r2
 3866 0062 0A43     		orrs	r2, r2, r1
 3867 0064 C3F8AC20 		str	r2, [r3, #172]
 3868              	.L164:
1629:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3869              		.loc 1 1630 0
 3870 0068 4FF00003 		mov	r3, #0
 3871 006c FB60     		str	r3, [r7, #12]
 3872              	.L162:
1631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3873              		.loc 1 1632 0
 3874 006e FB68     		ldr	r3, [r7, #12]
1633:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3875              		.loc 1 1633 0
 3876 0070 1846     		mov	r0, r3
 3877 0072 07F11407 		add	r7, r7, #20
 3878 0076 BD46     		mov	sp, r7
 3879 0078 80BC     		pop	{r7}
 3880 007a 7047     		bx	lr
 3881              		.cfi_endproc
 3882              	.LFE148:
 3884              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 3885              		.align	2
 3886              		.global	PWMSP001_GetPendingEvent
 3887              		.thumb
 3888              		.thumb_func
 3890              	PWMSP001_GetPendingEvent:
 3891              	.LFB149:
1634:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1635:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1638:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1639:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1643:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1644:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3892              		.loc 1 1644 0
 3893              		.cfi_startproc
 3894              		@ args = 0, pretend = 0, frame = 24
 3895              		@ frame_needed = 1, uses_anonymous_args = 0
 3896              		@ link register save eliminated.
 3897 0000 80B4     		push	{r7}
 3898              	.LCFI87:
 3899              		.cfi_def_cfa_offset 4
 3900              		.cfi_offset 7, -4
 3901 0002 87B0     		sub	sp, sp, #28
 3902              	.LCFI88:
 3903              		.cfi_def_cfa_offset 32
 3904 0004 00AF     		add	r7, sp, #0
 3905              	.LCFI89:
 3906              		.cfi_def_cfa_register 7
 3907 0006 F860     		str	r0, [r7, #12]
 3908 0008 0B46     		mov	r3, r1
 3909 000a 7A60     		str	r2, [r7, #4]
 3910 000c FB72     		strb	r3, [r7, #11]
1645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3911              		.loc 1 1645 0
 3912 000e 4FF00103 		mov	r3, #1
 3913 0012 7B61     		str	r3, [r7, #20]
1646:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1647:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3914              		.loc 1 1647 0
 3915 0014 FB68     		ldr	r3, [r7, #12]
 3916 0016 DB6B     		ldr	r3, [r3, #60]
 3917 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3918 001a 002B     		cmp	r3, #0
 3919 001c 03D1     		bne	.L167
1648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1649:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3920              		.loc 1 1649 0
 3921 001e 4FF00103 		mov	r3, #1
 3922 0022 7B61     		str	r3, [r7, #20]
 3923 0024 38E0     		b	.L168
 3924              	.L167:
1650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3925              		.loc 1 1654 0
 3926 0026 FB68     		ldr	r3, [r7, #12]
 3927 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3928 002c 012B     		cmp	r3, #1
 3929 002e 18D1     		bne	.L169
1655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1656:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1657:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 3930              		.loc 1 1657 0
 3931 0030 FB68     		ldr	r3, [r7, #12]
 3932 0032 DB69     		ldr	r3, [r3, #28]
 3933 0034 D3F8A020 		ldr	r2, [r3, #160]
 3934 0038 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3935 003a 4FF00101 		mov	r1, #1
 3936 003e 01FA03F3 		lsl	r3, r1, r3
 3937 0042 1A40     		ands	r2, r2, r3
 3938 0044 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3939 0046 22FA03F3 		lsr	r3, r2, r3
 3940 004a 002B     		cmp	r3, #0
 3941 004c 04D0     		beq	.L170
1658:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1659:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
 3942              		.loc 1 1659 0
 3943 004e 7B68     		ldr	r3, [r7, #4]
 3944 0050 4FF00102 		mov	r2, #1
 3945 0054 1A70     		strb	r2, [r3, #0]
 3946 0056 1CE0     		b	.L171
 3947              	.L170:
1660:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1661:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1662:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1663:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
 3948              		.loc 1 1663 0
 3949 0058 7B68     		ldr	r3, [r7, #4]
 3950 005a 4FF00002 		mov	r2, #0
 3951 005e 1A70     		strb	r2, [r3, #0]
 3952 0060 17E0     		b	.L171
 3953              	.L169:
1664:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1667:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1668:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 3954              		.loc 1 1668 0
 3955 0062 FB68     		ldr	r3, [r7, #12]
 3956 0064 9B69     		ldr	r3, [r3, #24]
 3957 0066 D3F8A020 		ldr	r2, [r3, #160]
 3958 006a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3959 006c 4FF00101 		mov	r1, #1
 3960 0070 01FA03F3 		lsl	r3, r1, r3
 3961 0074 1A40     		ands	r2, r2, r3
 3962 0076 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3963 0078 22FA03F3 		lsr	r3, r2, r3
 3964 007c 002B     		cmp	r3, #0
 3965 007e 04D0     		beq	.L172
1669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 3966              		.loc 1 1670 0
 3967 0080 7B68     		ldr	r3, [r7, #4]
 3968 0082 4FF00102 		mov	r2, #1
 3969 0086 1A70     		strb	r2, [r3, #0]
 3970 0088 03E0     		b	.L171
 3971              	.L172:
1671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 3972              		.loc 1 1674 0
 3973 008a 7B68     		ldr	r3, [r7, #4]
 3974 008c 4FF00002 		mov	r2, #0
 3975 0090 1A70     		strb	r2, [r3, #0]
 3976              	.L171:
1675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1676:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1677:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1678:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1679:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3977              		.loc 1 1679 0
 3978 0092 4FF00003 		mov	r3, #0
 3979 0096 7B61     		str	r3, [r7, #20]
 3980              	.L168:
1680:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1681:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3981              		.loc 1 1681 0
 3982 0098 7B69     		ldr	r3, [r7, #20]
1682:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3983              		.loc 1 1682 0
 3984 009a 1846     		mov	r0, r3
 3985 009c 07F11C07 		add	r7, r7, #28
 3986 00a0 BD46     		mov	sp, r7
 3987 00a2 80BC     		pop	{r7}
 3988 00a4 7047     		bx	lr
 3989              		.cfi_endproc
 3990              	.LFE149:
 3992 00a6 00BF     		.text
 3993              	.Letext0:
 3994              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 3995              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3996              		.file 4 "C:\\DAVE3_workspace\\Pinus_Evaluierung_DAVE3\\CORE_Larix_V1.0\\Dave\\Generated\\inc\\DAVE
 3997              		.file 5 "C:\\DAVE3_workspace\\Pinus_Evaluierung_DAVE3\\CORE_Larix_V1.0\\Dave\\Generated\\inc\\DAVE
 3998              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 3999              		.file 7 "C:\\DAVE3_workspace\\Pinus_Evaluierung_DAVE3\\CORE_Larix_V1.0\\Dave\\Generated\\inc\\DAVE
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:20     .text.PWMSP001_Init:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:25     .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:265    .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:875    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:260    .text.PWMSP001_lInit:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3237   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:658    .text.PWMSP001_Deinit:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:663    .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:870    .text.PWMSP001_Start:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1102   .text.PWMSP001_Stop:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1107   .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1216   .text.PWMSP001_SetCompare:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1221   .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1320   .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1325   .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1382   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1387   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1485   .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1490   .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1544   .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1549   .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1614   .text.PWMSP001_SetDutyCycle:00000060 $d
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1619   .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1624   .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1704   .text.PWMSP001_lSetDutyEdgeAlign:00000098 $d
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1709   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1714   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1855   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000124 $d
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1860   .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1865   .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1943   .text.PWMSP001_lSetDutyCenterAlign:00000094 $d
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1948   .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:1953   .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2067   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2072   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2205   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2210   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2543   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2361   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000110 $d
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2367   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2372   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2533   .text.PWMSP001_SetPwmFreq:00000128 $d
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2538   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2661   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2666   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2737   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2742   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2819   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2824   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2965   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:2970   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3053   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3058   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3151   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3156   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3232   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3543   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3548   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3628   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3633   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3715   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3720   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3800   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3805   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3885   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\Krainesi\AppData\Local\Temp\cchC1jcl.s:3890   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.84cfd71c6d2dc0bd4021712beaa9efd8
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.851ac7a1268528f4d6739384c2f248a5
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.RTC001.h.113.715d6fcab1863c6656b238bddd304166
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.reent.h.11.a39e4126dcf3c6afd3054e0622577bae
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.LMM001.h.45.fa2df8bae969f45df5071221ac433ffa
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.104.05371e300b30617373255b3cdb4765a2
                           .group:00000000 wm4.SYSTM001.h.64.6ecb31c49bc3e7691644fdcdfc11b5cd
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.Type_CM.h.61.3660c940695d7d5fef91de9c4081d0f0
                           .group:00000000 wm4.dwc_os.h.82.db2ca40c41e2f648d146b8942e5157d9
                           .group:00000000 wm4.dwc_otg_core_if.h.95.37e41eee47e9a4502e4044edf60ea92d
                           .group:00000000 wm4.usbcore001_device.h.107.6c032c9c28ac6c3f4e5e24a068720cd7
                           .group:00000000 wm4.USB.h.399.44a2bec94122294f06c4d854450494d3
                           .group:00000000 wm4.Common.h.102.bc881ac788d1d7ce84e651cbaa40f2c2
                           .group:00000000 wm4.Common.h.134.5069b632a0407201156f18fde915b80c
                           .group:00000000 wm4.USBMode.h.234.0cc9e23131c025605bb7c0db3ebb8ac9
                           .group:00000000 wm4.StdRequestType.h.93.4e19c7c655f990c2abedbb76a546fcde
                           .group:00000000 wm4.Endpoint.h.116.4ef46b127c9047ed49fe1e0df19e09b8
                           .group:00000000 wm4.StdDescriptors.h.120.0ce817e16dcc91b8cf4a79ba0e0e19b6
                           .group:00000000 wm4.CDC.h.103.7ce3e4692dde29e827f8736493eef7ef
                           .group:00000000 wm4.CDC.h.115.c83a7d6c5b6c8644b3dec6212d4ced09
                           .group:00000000 wm4.Descriptors.h.91.5cf84c2489ee54d154cabfe9e14b5c19
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.fce01a2aa073e958cae0b1cc894db26c
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.CCU4Global_Conf.h.63.10a5fc586e1563647b9633c45b1b739e
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.NVIC002_Conf.h.63.49528b5ba8318d62684d7423600f8092
                           .group:00000000 wm4.I2C001.h.97.5277d52889d6c741e048ea45ee1277b5
                           .group:00000000 wm4.I2C001_Conf.h.58.2b816ac2c964c55a6c88f9c406d78c9f
                           .group:00000000 wm4.ERU001_Conf.h.69.61c28b1ac8f55fb79ee064524d8b6415
                           .group:00000000 wm4.ERU002_Conf.h.49.449ecc05b9e62e9b43f2dc6ead06a5ce
                           .group:00000000 wm4.IO002_Conf.h.51.87e2c8c60b647393fe9ced2cae198f63
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
PWMSP001_Handle1
PWMSP001_Handle2
PWMSP001_Handle3
